// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ZCHXRadar.proto

#ifndef PROTOBUF_ZCHXRadar_2eproto__INCLUDED
#define PROTOBUF_ZCHXRadar_2eproto__INCLUDED

#include <string>
#include <QList>
#include <QDebug>
#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace com {
namespace zhichenhaixin {
namespace proto {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_ZCHXRadar_2eproto();
void protobuf_AssignDesc_ZCHXRadar_2eproto();
void protobuf_ShutdownFile_ZCHXRadar_2eproto();

class RadarMeet;
class RadarHistoryTrack;
class RadarHistoryTracks;
class TrackPoint;
class FllowVo;
class RadarSurfaceTrack;
class VideoFrame;
class LineSpectrum;
class SectorSpectrum;

enum MSGTYP {
  MSGTYP_UNDEFINED = 0,
  TARGET_REPORT = 1,
  START_OF_UPDATE_CYCLE = 2,
  PERIODIC_STATUS = 3,
  EVENT_TRIGGERED_STATUS = 4
};
bool MSGTYP_IsValid(int value);
const MSGTYP MSGTYP_MIN = MSGTYP_UNDEFINED;
const MSGTYP MSGTYP_MAX = EVENT_TRIGGERED_STATUS;
const int MSGTYP_ARRAYSIZE = MSGTYP_MAX + 1;

const ::google::protobuf::EnumDescriptor* MSGTYP_descriptor();
inline const ::std::string& MSGTYP_Name(MSGTYP value) {
  return ::google::protobuf::internal::NameOfEnum(
    MSGTYP_descriptor(), value);
}
inline bool MSGTYP_Parse(
    const ::std::string& name, MSGTYP* value) {
  return ::google::protobuf::internal::ParseNamedEnum<MSGTYP>(
    MSGTYP_descriptor(), name, value);
}
enum CNF {
  CONFIRMED_TRACK = 0,
  TENTATIVE_TRACK = 1,
  UNKNOWN_TRACK = 2
};
bool CNF_IsValid(int value);
const CNF CNF_MIN = CONFIRMED_TRACK;
const CNF CNF_MAX = UNKNOWN_TRACK;
const int CNF_ARRAYSIZE = CNF_MAX + 1;

const ::google::protobuf::EnumDescriptor* CNF_descriptor();
inline const ::std::string& CNF_Name(CNF value) {
  return ::google::protobuf::internal::NameOfEnum(
    CNF_descriptor(), value);
}
inline bool CNF_Parse(
    const ::std::string& name, CNF* value) {
  return ::google::protobuf::internal::ParseNamedEnum<CNF>(
    CNF_descriptor(), name, value);
}
enum CST {
  CST_UNDEFINED = 0,
  PREDICTABLE_EXTRAPOLATION_DUE_PERIOD = 1,
  PREDICTABLE_EXTRAPOLATION_IN_AREA = 2,
  EXTRAPOLATION_DUE_UNPREDICTABLE_DETECTION = 3
};
bool CST_IsValid(int value);
const CST CST_MIN = CST_UNDEFINED;
const CST CST_MAX = EXTRAPOLATION_DUE_UNPREDICTABLE_DETECTION;
const int CST_ARRAYSIZE = CST_MAX + 1;

const ::google::protobuf::EnumDescriptor* CST_descriptor();
inline const ::std::string& CST_Name(CST value) {
  return ::google::protobuf::internal::NameOfEnum(
    CST_descriptor(), value);
}
inline bool CST_Parse(
    const ::std::string& name, CST* value) {
  return ::google::protobuf::internal::ParseNamedEnum<CST>(
    CST_descriptor(), name, value);
}
enum STH {
  MEASURED_POSITION = 0,
  SMOOTHED_POSITION = 1
};
bool STH_IsValid(int value);
const STH STH_MIN = MEASURED_POSITION;
const STH STH_MAX = SMOOTHED_POSITION;
const int STH_ARRAYSIZE = STH_MAX + 1;

const ::google::protobuf::EnumDescriptor* STH_descriptor();
inline const ::std::string& STH_Name(STH value) {
  return ::google::protobuf::internal::NameOfEnum(
    STH_descriptor(), value);
}
inline bool STH_Parse(
    const ::std::string& name, STH* value) {
  return ::google::protobuf::internal::ParseNamedEnum<STH>(
    STH_descriptor(), name, value);
}
enum RES {
  MONOBIT_RESOLUTION = 1,
  LOW_RESOLUTION = 2,
  MEDIUM_RESOLUTION = 3,
  HIGH_RESOLUTION = 4,
  VERY_HIGH_RESOLUTION = 5,
  ULTRA_HIGH_RESOLUTION = 6
};
bool RES_IsValid(int value);
const RES RES_MIN = MONOBIT_RESOLUTION;
const RES RES_MAX = ULTRA_HIGH_RESOLUTION;
const int RES_ARRAYSIZE = RES_MAX + 1;

const ::google::protobuf::EnumDescriptor* RES_descriptor();
inline const ::std::string& RES_Name(RES value) {
  return ::google::protobuf::internal::NameOfEnum(
    RES_descriptor(), value);
}
inline bool RES_Parse(
    const ::std::string& name, RES* value) {
  return ::google::protobuf::internal::ParseNamedEnum<RES>(
    RES_descriptor(), name, value);
}
// ===================================================================

class RadarMeet : public ::google::protobuf::Message {
 public:
  RadarMeet();
  virtual ~RadarMeet();

  RadarMeet(const RadarMeet& from);

  inline RadarMeet& operator=(const RadarMeet& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RadarMeet& default_instance();

  void Swap(RadarMeet* other);

  // implements Message ----------------------------------------------

  RadarMeet* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RadarMeet& from);
  void MergeFrom(const RadarMeet& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 trackNumber = 1;
  inline bool has_tracknumber() const;
  inline void clear_tracknumber();
  static const int kTrackNumberFieldNumber = 1;
  inline ::google::protobuf::uint32 tracknumber() const;
  inline void set_tracknumber(::google::protobuf::uint32 value);

  // required double lat = 2;
  inline bool has_lat() const;
  inline void clear_lat();
  static const int kLatFieldNumber = 2;
  inline double lat() const;
  inline void set_lat(double value);

  // required double lon = 3;
  inline bool has_lon() const;
  inline void clear_lon();
  static const int kLonFieldNumber = 3;
  inline double lon() const;
  inline void set_lon(double value);

  // required double disrance = 4;
  inline bool has_disrance() const;
  inline void clear_disrance();
  static const int kDisranceFieldNumber = 4;
  inline double disrance() const;
  inline void set_disrance(double value);

  // required uint64 UTC = 5;
  inline bool has_utc() const;
  inline void clear_utc();
  static const int kUTCFieldNumber = 5;
  inline ::google::protobuf::uint64 utc() const;
  inline void set_utc(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:com.zhichenhaixin.proto.RadarMeet)
 private:
  inline void set_has_tracknumber();
  inline void clear_has_tracknumber();
  inline void set_has_lat();
  inline void clear_has_lat();
  inline void set_has_lon();
  inline void clear_has_lon();
  inline void set_has_disrance();
  inline void clear_has_disrance();
  inline void set_has_utc();
  inline void clear_has_utc();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  double lat_;
  double lon_;
  double disrance_;
  ::google::protobuf::uint64 utc_;
  ::google::protobuf::uint32 tracknumber_;
  friend void  protobuf_AddDesc_ZCHXRadar_2eproto();
  friend void protobuf_AssignDesc_ZCHXRadar_2eproto();
  friend void protobuf_ShutdownFile_ZCHXRadar_2eproto();

  void InitAsDefaultInstance();
  static RadarMeet* default_instance_;
};
// -------------------------------------------------------------------

class RadarHistoryTrack : public ::google::protobuf::Message {
 public:
  RadarHistoryTrack();
  virtual ~RadarHistoryTrack();

  RadarHistoryTrack(const RadarHistoryTrack& from);

  inline RadarHistoryTrack& operator=(const RadarHistoryTrack& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RadarHistoryTrack& default_instance();

  void Swap(RadarHistoryTrack* other);

  // implements Message ----------------------------------------------

  RadarHistoryTrack* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RadarHistoryTrack& from);
  void MergeFrom(const RadarHistoryTrack& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 trackNumber = 1;
  inline bool has_tracknumber() const;
  inline void clear_tracknumber();
  static const int kTrackNumberFieldNumber = 1;
  inline ::google::protobuf::uint32 tracknumber() const;
  inline void set_tracknumber(::google::protobuf::uint32 value);

  // required double wgs84PosLat = 2;
  inline bool has_wgs84poslat() const;
  inline void clear_wgs84poslat();
  static const int kWgs84PosLatFieldNumber = 2;
  inline double wgs84poslat() const;
  inline void set_wgs84poslat(double value);

  // required double wgs84PosLong = 3;
  inline bool has_wgs84poslong() const;
  inline void clear_wgs84poslong();
  static const int kWgs84PosLongFieldNumber = 3;
  inline double wgs84poslong() const;
  inline void set_wgs84poslong(double value);

  // required float timeOfDay = 4;
  inline bool has_timeofday() const;
  inline void clear_timeofday();
  static const int kTimeOfDayFieldNumber = 4;
  inline float timeofday() const;
  inline void set_timeofday(float value);

  // optional .com.zhichenhaixin.proto.CNF trackType = 5;
  inline bool has_tracktype() const;
  inline void clear_tracktype();
  static const int kTrackTypeFieldNumber = 5;
  inline ::com::zhichenhaixin::proto::CNF tracktype() const;
  inline void set_tracktype(::com::zhichenhaixin::proto::CNF value);

  // optional bool trackLastReport = 6;
  inline bool has_tracklastreport() const;
  inline void clear_tracklastreport();
  static const int kTrackLastReportFieldNumber = 6;
  inline bool tracklastreport() const;
  inline void set_tracklastreport(bool value);

  // optional .com.zhichenhaixin.proto.CST extrapolation = 7;
  inline bool has_extrapolation() const;
  inline void clear_extrapolation();
  static const int kExtrapolationFieldNumber = 7;
  inline ::com::zhichenhaixin::proto::CST extrapolation() const;
  inline void set_extrapolation(::com::zhichenhaixin::proto::CST value);

  // optional .com.zhichenhaixin.proto.STH trackPositionCode = 8;
  inline bool has_trackpositioncode() const;
  inline void clear_trackpositioncode();
  static const int kTrackPositionCodeFieldNumber = 8;
  inline ::com::zhichenhaixin::proto::STH trackpositioncode() const;
  inline void set_trackpositioncode(::com::zhichenhaixin::proto::STH value);

  // required double cog = 9;
  inline bool has_cog() const;
  inline void clear_cog();
  static const int kCogFieldNumber = 9;
  inline double cog() const;
  inline void set_cog(double value);

  // required double sog = 10;
  inline bool has_sog() const;
  inline void clear_sog();
  static const int kSogFieldNumber = 10;
  inline double sog() const;
  inline void set_sog(double value);

  // required uint64 UTC = 11;
  inline bool has_utc() const;
  inline void clear_utc();
  static const int kUTCFieldNumber = 11;
  inline ::google::protobuf::uint64 utc() const;
  inline void set_utc(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:com.zhichenhaixin.proto.RadarHistoryTrack)
 private:
  inline void set_has_tracknumber();
  inline void clear_has_tracknumber();
  inline void set_has_wgs84poslat();
  inline void clear_has_wgs84poslat();
  inline void set_has_wgs84poslong();
  inline void clear_has_wgs84poslong();
  inline void set_has_timeofday();
  inline void clear_has_timeofday();
  inline void set_has_tracktype();
  inline void clear_has_tracktype();
  inline void set_has_tracklastreport();
  inline void clear_has_tracklastreport();
  inline void set_has_extrapolation();
  inline void clear_has_extrapolation();
  inline void set_has_trackpositioncode();
  inline void clear_has_trackpositioncode();
  inline void set_has_cog();
  inline void clear_has_cog();
  inline void set_has_sog();
  inline void clear_has_sog();
  inline void set_has_utc();
  inline void clear_has_utc();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  double wgs84poslat_;
  ::google::protobuf::uint32 tracknumber_;
  float timeofday_;
  double wgs84poslong_;
  int tracktype_;
  bool tracklastreport_;
  int extrapolation_;
  int trackpositioncode_;
  double cog_;
  double sog_;
  ::google::protobuf::uint64 utc_;
  friend void  protobuf_AddDesc_ZCHXRadar_2eproto();
  friend void protobuf_AssignDesc_ZCHXRadar_2eproto();
  friend void protobuf_ShutdownFile_ZCHXRadar_2eproto();

  void InitAsDefaultInstance();
  static RadarHistoryTrack* default_instance_;
};
// -------------------------------------------------------------------

class RadarHistoryTracks : public ::google::protobuf::Message {
 public:
  RadarHistoryTracks();
  virtual ~RadarHistoryTracks();

  RadarHistoryTracks(const RadarHistoryTracks& from);

  inline RadarHistoryTracks& operator=(const RadarHistoryTracks& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RadarHistoryTracks& default_instance();

  void Swap(RadarHistoryTracks* other);

  // implements Message ----------------------------------------------

  RadarHistoryTracks* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RadarHistoryTracks& from);
  void MergeFrom(const RadarHistoryTracks& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .com.zhichenhaixin.proto.RadarHistoryTrack tracks = 1;
  inline int tracks_size() const;
  inline void clear_tracks();
  static const int kTracksFieldNumber = 1;
  inline const ::com::zhichenhaixin::proto::RadarHistoryTrack& tracks(int index) const;
  inline ::com::zhichenhaixin::proto::RadarHistoryTrack* mutable_tracks(int index);
  inline ::com::zhichenhaixin::proto::RadarHistoryTrack* add_tracks();
  inline const ::google::protobuf::RepeatedPtrField< ::com::zhichenhaixin::proto::RadarHistoryTrack >&
      tracks() const;
  inline ::google::protobuf::RepeatedPtrField< ::com::zhichenhaixin::proto::RadarHistoryTrack >*
      mutable_tracks();

  // @@protoc_insertion_point(class_scope:com.zhichenhaixin.proto.RadarHistoryTracks)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::com::zhichenhaixin::proto::RadarHistoryTrack > tracks_;
  friend void  protobuf_AddDesc_ZCHXRadar_2eproto();
  friend void protobuf_AssignDesc_ZCHXRadar_2eproto();
  friend void protobuf_ShutdownFile_ZCHXRadar_2eproto();

  void InitAsDefaultInstance();
  static RadarHistoryTracks* default_instance_;
};
// -------------------------------------------------------------------

class TrackPoint : public ::google::protobuf::Message {
 public:
  TrackPoint();
  virtual ~TrackPoint();

  TrackPoint(const TrackPoint& from);

  inline TrackPoint& operator=(const TrackPoint& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TrackPoint& default_instance();

  void Swap(TrackPoint* other);

  // implements Message ----------------------------------------------

  TrackPoint* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TrackPoint& from);
  void MergeFrom(const TrackPoint& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 systemAreaCode = 1;
  inline bool has_systemareacode() const;
  inline void clear_systemareacode();
  static const int kSystemAreaCodeFieldNumber = 1;
  inline ::google::protobuf::int32 systemareacode() const;
  inline void set_systemareacode(::google::protobuf::int32 value);

  // required int32 systemIdentificationCode = 2;
  inline bool has_systemidentificationcode() const;
  inline void clear_systemidentificationcode();
  static const int kSystemIdentificationCodeFieldNumber = 2;
  inline ::google::protobuf::int32 systemidentificationcode() const;
  inline void set_systemidentificationcode(::google::protobuf::int32 value);

  // required .com.zhichenhaixin.proto.MSGTYP messageType = 3;
  inline bool has_messagetype() const;
  inline void clear_messagetype();
  static const int kMessageTypeFieldNumber = 3;
  inline ::com::zhichenhaixin::proto::MSGTYP messagetype() const;
  inline void set_messagetype(::com::zhichenhaixin::proto::MSGTYP value);

  // required uint32 trackNumber = 4;
  inline bool has_tracknumber() const;
  inline void clear_tracknumber();
  static const int kTrackNumberFieldNumber = 4;
  inline ::google::protobuf::uint32 tracknumber() const;
  inline void set_tracknumber(::google::protobuf::uint32 value);

  // required float cartesianPosX = 5;
  inline bool has_cartesianposx() const;
  inline void clear_cartesianposx();
  static const int kCartesianPosXFieldNumber = 5;
  inline float cartesianposx() const;
  inline void set_cartesianposx(float value);

  // required float cartesianPosY = 6;
  inline bool has_cartesianposy() const;
  inline void clear_cartesianposy();
  static const int kCartesianPosYFieldNumber = 6;
  inline float cartesianposy() const;
  inline void set_cartesianposy(float value);

  // required double wgs84PosLat = 7;
  inline bool has_wgs84poslat() const;
  inline void clear_wgs84poslat();
  static const int kWgs84PosLatFieldNumber = 7;
  inline double wgs84poslat() const;
  inline void set_wgs84poslat(double value);

  // required double wgs84PosLong = 8;
  inline bool has_wgs84poslong() const;
  inline void clear_wgs84poslong();
  static const int kWgs84PosLongFieldNumber = 8;
  inline double wgs84poslong() const;
  inline void set_wgs84poslong(double value);

  // required float timeOfDay = 9;
  inline bool has_timeofday() const;
  inline void clear_timeofday();
  static const int kTimeOfDayFieldNumber = 9;
  inline float timeofday() const;
  inline void set_timeofday(float value);

  // optional .com.zhichenhaixin.proto.CNF trackType = 10;
  inline bool has_tracktype() const;
  inline void clear_tracktype();
  static const int kTrackTypeFieldNumber = 10;
  inline ::com::zhichenhaixin::proto::CNF tracktype() const;
  inline void set_tracktype(::com::zhichenhaixin::proto::CNF value);

  // optional bool trackLastReport = 11;
  inline bool has_tracklastreport() const;
  inline void clear_tracklastreport();
  static const int kTrackLastReportFieldNumber = 11;
  inline bool tracklastreport() const;
  inline void set_tracklastreport(bool value);

  // optional .com.zhichenhaixin.proto.CST extrapolation = 12;
  inline bool has_extrapolation() const;
  inline void clear_extrapolation();
  static const int kExtrapolationFieldNumber = 12;
  inline ::com::zhichenhaixin::proto::CST extrapolation() const;
  inline void set_extrapolation(::com::zhichenhaixin::proto::CST value);

  // optional .com.zhichenhaixin.proto.STH trackPositionCode = 13;
  inline bool has_trackpositioncode() const;
  inline void clear_trackpositioncode();
  static const int kTrackPositionCodeFieldNumber = 13;
  inline ::com::zhichenhaixin::proto::STH trackpositioncode() const;
  inline void set_trackpositioncode(::com::zhichenhaixin::proto::STH value);

  // optional float sigmaX = 14;
  inline bool has_sigmax() const;
  inline void clear_sigmax();
  static const int kSigmaXFieldNumber = 14;
  inline float sigmax() const;
  inline void set_sigmax(float value);

  // optional float sigmaY = 15;
  inline bool has_sigmay() const;
  inline void clear_sigmay();
  static const int kSigmaYFieldNumber = 15;
  inline float sigmay() const;
  inline void set_sigmay(float value);

  // optional float sigmaXY = 16;
  inline bool has_sigmaxy() const;
  inline void clear_sigmaxy();
  static const int kSigmaXYFieldNumber = 16;
  inline float sigmaxy() const;
  inline void set_sigmaxy(float value);

  // optional float ampOfPriPlot = 17;
  inline bool has_ampofpriplot() const;
  inline void clear_ampofpriplot();
  static const int kAmpOfPriPlotFieldNumber = 17;
  inline float ampofpriplot() const;
  inline void set_ampofpriplot(float value);

  // required double cartesianTrkVel_vx = 18;
  inline bool has_cartesiantrkvel_vx() const;
  inline void clear_cartesiantrkvel_vx();
  static const int kCartesianTrkVelVxFieldNumber = 18;
  inline double cartesiantrkvel_vx() const;
  inline void set_cartesiantrkvel_vx(double value);

  // required double cartesianTrkVel_vy = 19;
  inline bool has_cartesiantrkvel_vy() const;
  inline void clear_cartesiantrkvel_vy();
  static const int kCartesianTrkVelVyFieldNumber = 19;
  inline double cartesiantrkvel_vy() const;
  inline void set_cartesiantrkvel_vy(double value);

  // required double cog = 20;
  inline bool has_cog() const;
  inline void clear_cog();
  static const int kCogFieldNumber = 20;
  inline double cog() const;
  inline void set_cog(double value);

  // required double sog = 21;
  inline bool has_sog() const;
  inline void clear_sog();
  static const int kSogFieldNumber = 21;
  inline double sog() const;
  inline void set_sog(double value);

  // optional .com.zhichenhaixin.proto.RadarHistoryTracks tracks = 22;
  inline bool has_tracks() const;
  inline void clear_tracks();
  static const int kTracksFieldNumber = 22;
  inline const ::com::zhichenhaixin::proto::RadarHistoryTracks& tracks() const;
  inline ::com::zhichenhaixin::proto::RadarHistoryTracks* mutable_tracks();
  inline ::com::zhichenhaixin::proto::RadarHistoryTracks* release_tracks();
  inline void set_allocated_tracks(::com::zhichenhaixin::proto::RadarHistoryTracks* tracks);

  // optional int32 isSmuggle = 23;
  inline bool has_issmuggle() const;
  inline void clear_issmuggle();
  static const int kIsSmuggleFieldNumber = 23;
  inline ::google::protobuf::int32 issmuggle() const;
  inline void set_issmuggle(::google::protobuf::int32 value);

  // optional double distance = 24;
  inline bool has_distance() const;
  inline void clear_distance();
  static const int kDistanceFieldNumber = 24;
  inline double distance() const;
  inline void set_distance(double value);

  // optional int32 mode = 25;
  inline bool has_mode() const;
  inline void clear_mode();
  static const int kModeFieldNumber = 25;
  inline ::google::protobuf::int32 mode() const;
  inline void set_mode(::google::protobuf::int32 value);

  // optional string trackby = 26;
  inline bool has_trackby() const;
  inline void clear_trackby();
  static const int kTrackbyFieldNumber = 26;
  inline const ::std::string& trackby() const;
  inline void set_trackby(const ::std::string& value);
  inline void set_trackby(const char* value);
  inline void set_trackby(const char* value, size_t size);
  inline ::std::string* mutable_trackby();
  inline ::std::string* release_trackby();
  inline void set_allocated_trackby(::std::string* trackby);

  // optional int32 fleetNumber = 27;
  inline bool has_fleetnumber() const;
  inline void clear_fleetnumber();
  static const int kFleetNumberFieldNumber = 27;
  inline ::google::protobuf::int32 fleetnumber() const;
  inline void set_fleetnumber(::google::protobuf::int32 value);

  // optional int32 status = 28;
  inline bool has_status() const;
  inline void clear_status();
  static const int kStatusFieldNumber = 28;
  inline ::google::protobuf::int32 status() const;
  inline void set_status(::google::protobuf::int32 value);

  // optional string lonType = 29;
  inline bool has_lontype() const;
  inline void clear_lontype();
  static const int kLonTypeFieldNumber = 29;
  inline const ::std::string& lontype() const;
  inline void set_lontype(const ::std::string& value);
  inline void set_lontype(const char* value);
  inline void set_lontype(const char* value, size_t size);
  inline ::std::string* mutable_lontype();
  inline ::std::string* release_lontype();
  inline void set_allocated_lontype(::std::string* lontype);

  // optional string latType = 30;
  inline bool has_lattype() const;
  inline void clear_lattype();
  static const int kLatTypeFieldNumber = 30;
  inline const ::std::string& lattype() const;
  inline void set_lattype(const ::std::string& value);
  inline void set_lattype(const char* value);
  inline void set_lattype(const char* value, size_t size);
  inline ::std::string* mutable_lattype();
  inline ::std::string* release_lattype();
  inline void set_allocated_lattype(::std::string* lattype);

  // optional int64 warn_utc = 31;
  inline bool has_warn_utc() const;
  inline void clear_warn_utc();
  static const int kWarnUtcFieldNumber = 31;
  inline ::google::protobuf::int64 warn_utc() const;
  inline void set_warn_utc(::google::protobuf::int64 value);

  // optional int32 warn_status = 32;
  inline bool has_warn_status() const;
  inline void clear_warn_status();
  static const int kWarnStatusFieldNumber = 32;
  inline ::google::protobuf::int32 warn_status() const;
  inline void set_warn_status(::google::protobuf::int32 value);

  // optional string warn_color = 33;
  inline bool has_warn_color() const;
  inline void clear_warn_color();
  static const int kWarnColorFieldNumber = 33;
  inline const ::std::string& warn_color() const;
  inline void set_warn_color(const ::std::string& value);
  inline void set_warn_color(const char* value);
  inline void set_warn_color(const char* value, size_t size);
  inline ::std::string* mutable_warn_color();
  inline ::std::string* release_warn_color();
  inline void set_allocated_warn_color(::std::string* warn_color);

  // optional int32 cameraId = 34;
  inline bool has_cameraid() const;
  inline void clear_cameraid();
  static const int kCameraIdFieldNumber = 34;
  inline ::google::protobuf::int32 cameraid() const;
  inline void set_cameraid(::google::protobuf::int32 value);

  // optional int32 targetType = 35;
  inline bool has_targettype() const;
  inline void clear_targettype();
  static const int kTargetTypeFieldNumber = 35;
  inline ::google::protobuf::int32 targettype() const;
  inline void set_targettype(::google::protobuf::int32 value);

  // optional int32 sign_window = 36;
  inline bool has_sign_window() const;
  inline void clear_sign_window();
  static const int kSignWindowFieldNumber = 36;
  inline ::google::protobuf::int32 sign_window() const;
  inline void set_sign_window(::google::protobuf::int32 value);

  // optional int32 is_warn = 37;
  inline bool has_is_warn() const;
  inline void clear_is_warn();
  static const int kIsWarnFieldNumber = 37;
  inline ::google::protobuf::int32 is_warn() const;
  inline void set_is_warn(::google::protobuf::int32 value);

  // optional string rtsp = 38;
  inline bool has_rtsp() const;
  inline void clear_rtsp();
  static const int kRtspFieldNumber = 38;
  inline const ::std::string& rtsp() const;
  inline void set_rtsp(const ::std::string& value);
  inline void set_rtsp(const char* value);
  inline void set_rtsp(const char* value, size_t size);
  inline ::std::string* mutable_rtsp();
  inline ::std::string* release_rtsp();
  inline void set_allocated_rtsp(::std::string* rtsp);

  // optional int32 fllow = 39;
  inline bool has_fllow() const;
  inline void clear_fllow();
  static const int kFllowFieldNumber = 39;
  inline ::google::protobuf::int32 fllow() const;
  inline void set_fllow(::google::protobuf::int32 value);

  // repeated .com.zhichenhaixin.proto.RadarMeet pointMeet = 40;
  inline int pointmeet_size() const;
  inline void clear_pointmeet();
  static const int kPointMeetFieldNumber = 40;
  inline const ::com::zhichenhaixin::proto::RadarMeet& pointmeet(int index) const;
  inline ::com::zhichenhaixin::proto::RadarMeet* mutable_pointmeet(int index);
  inline ::com::zhichenhaixin::proto::RadarMeet* add_pointmeet();
  inline const ::google::protobuf::RepeatedPtrField< ::com::zhichenhaixin::proto::RadarMeet >&
      pointmeet() const;
  inline ::google::protobuf::RepeatedPtrField< ::com::zhichenhaixin::proto::RadarMeet >*
      mutable_pointmeet();

  // optional int32 defenceId = 41;
  inline bool has_defenceid() const;
  inline void clear_defenceid();
  static const int kDefenceIdFieldNumber = 41;
  inline ::google::protobuf::int32 defenceid() const;
  inline void set_defenceid(::google::protobuf::int32 value);

  // optional string defenceName = 42;
  inline bool has_defencename() const;
  inline void clear_defencename();
  static const int kDefenceNameFieldNumber = 42;
  inline const ::std::string& defencename() const;
  inline void set_defencename(const ::std::string& value);
  inline void set_defencename(const char* value);
  inline void set_defencename(const char* value, size_t size);
  inline ::std::string* mutable_defencename();
  inline ::std::string* release_defencename();
  inline void set_allocated_defencename(::std::string* defencename);
  friend QDebug operator <<(QDebug os, const TrackPoint& point)
  {
      os<<point.tracknumber()<<point.timeofday()<<QString::number(point.wgs84poslong(), 'f', 10)<<QString::number(point.wgs84poslat(), 'f', 10);
          return os;
  }

  // @@protoc_insertion_point(class_scope:com.zhichenhaixin.proto.TrackPoint)
 private:
  inline void set_has_systemareacode();
  inline void clear_has_systemareacode();
  inline void set_has_systemidentificationcode();
  inline void clear_has_systemidentificationcode();
  inline void set_has_messagetype();
  inline void clear_has_messagetype();
  inline void set_has_tracknumber();
  inline void clear_has_tracknumber();
  inline void set_has_cartesianposx();
  inline void clear_has_cartesianposx();
  inline void set_has_cartesianposy();
  inline void clear_has_cartesianposy();
  inline void set_has_wgs84poslat();
  inline void clear_has_wgs84poslat();
  inline void set_has_wgs84poslong();
  inline void clear_has_wgs84poslong();
  inline void set_has_timeofday();
  inline void clear_has_timeofday();
  inline void set_has_tracktype();
  inline void clear_has_tracktype();
  inline void set_has_tracklastreport();
  inline void clear_has_tracklastreport();
  inline void set_has_extrapolation();
  inline void clear_has_extrapolation();
  inline void set_has_trackpositioncode();
  inline void clear_has_trackpositioncode();
  inline void set_has_sigmax();
  inline void clear_has_sigmax();
  inline void set_has_sigmay();
  inline void clear_has_sigmay();
  inline void set_has_sigmaxy();
  inline void clear_has_sigmaxy();
  inline void set_has_ampofpriplot();
  inline void clear_has_ampofpriplot();
  inline void set_has_cartesiantrkvel_vx();
  inline void clear_has_cartesiantrkvel_vx();
  inline void set_has_cartesiantrkvel_vy();
  inline void clear_has_cartesiantrkvel_vy();
  inline void set_has_cog();
  inline void clear_has_cog();
  inline void set_has_sog();
  inline void clear_has_sog();
  inline void set_has_tracks();
  inline void clear_has_tracks();
  inline void set_has_issmuggle();
  inline void clear_has_issmuggle();
  inline void set_has_distance();
  inline void clear_has_distance();
  inline void set_has_mode();
  inline void clear_has_mode();
  inline void set_has_trackby();
  inline void clear_has_trackby();
  inline void set_has_fleetnumber();
  inline void clear_has_fleetnumber();
  inline void set_has_status();
  inline void clear_has_status();
  inline void set_has_lontype();
  inline void clear_has_lontype();
  inline void set_has_lattype();
  inline void clear_has_lattype();
  inline void set_has_warn_utc();
  inline void clear_has_warn_utc();
  inline void set_has_warn_status();
  inline void clear_has_warn_status();
  inline void set_has_warn_color();
  inline void clear_has_warn_color();
  inline void set_has_cameraid();
  inline void clear_has_cameraid();
  inline void set_has_targettype();
  inline void clear_has_targettype();
  inline void set_has_sign_window();
  inline void clear_has_sign_window();
  inline void set_has_is_warn();
  inline void clear_has_is_warn();
  inline void set_has_rtsp();
  inline void clear_has_rtsp();
  inline void set_has_fllow();
  inline void clear_has_fllow();
  inline void set_has_defenceid();
  inline void clear_has_defenceid();
  inline void set_has_defencename();
  inline void clear_has_defencename();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[2];
  ::google::protobuf::int32 systemareacode_;
  ::google::protobuf::int32 systemidentificationcode_;
  int messagetype_;
  ::google::protobuf::uint32 tracknumber_;
  float cartesianposx_;
  float cartesianposy_;
  double wgs84poslat_;
  double wgs84poslong_;
  float timeofday_;
  int tracktype_;
  bool tracklastreport_;
  int extrapolation_;
  int trackpositioncode_;
  float sigmax_;
  float sigmay_;
  float sigmaxy_;
  double cartesiantrkvel_vx_;
  double cartesiantrkvel_vy_;
  double cog_;
  float ampofpriplot_;
  ::google::protobuf::int32 issmuggle_;
  double sog_;
  ::com::zhichenhaixin::proto::RadarHistoryTracks* tracks_;
  double distance_;
  ::std::string* trackby_;
  ::google::protobuf::int32 mode_;
  ::google::protobuf::int32 fleetnumber_;
  ::std::string* lontype_;
  ::std::string* lattype_;
  ::google::protobuf::int32 status_;
  ::google::protobuf::int32 warn_status_;
  ::google::protobuf::int64 warn_utc_;
  ::std::string* warn_color_;
  ::google::protobuf::int32 cameraid_;
  ::google::protobuf::int32 targettype_;
  ::google::protobuf::int32 sign_window_;
  ::google::protobuf::int32 is_warn_;
  ::std::string* rtsp_;
  ::google::protobuf::RepeatedPtrField< ::com::zhichenhaixin::proto::RadarMeet > pointmeet_;
  ::google::protobuf::int32 fllow_;
  ::google::protobuf::int32 defenceid_;
  ::std::string* defencename_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_ZCHXRadar_2eproto();
  friend void protobuf_AssignDesc_ZCHXRadar_2eproto();
  friend void protobuf_ShutdownFile_ZCHXRadar_2eproto();

  void InitAsDefaultInstance();
  static TrackPoint* default_instance_;
};
// -------------------------------------------------------------------

class FllowVo : public ::google::protobuf::Message {
 public:
  FllowVo();
  virtual ~FllowVo();

  FllowVo(const FllowVo& from);

  inline FllowVo& operator=(const FllowVo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FllowVo& default_instance();

  void Swap(FllowVo* other);

  // implements Message ----------------------------------------------

  FllowVo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FllowVo& from);
  void MergeFrom(const FllowVo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bool flag = 1;
  inline bool has_flag() const;
  inline void clear_flag();
  static const int kFlagFieldNumber = 1;
  inline bool flag() const;
  inline void set_flag(bool value);

  // required bool fllow = 2;
  inline bool has_fllow() const;
  inline void clear_fllow();
  static const int kFllowFieldNumber = 2;
  inline bool fllow() const;
  inline void set_fllow(bool value);

  // repeated .com.zhichenhaixin.proto.TrackPoint trackPoints = 3;
  inline int trackpoints_size() const;
  inline void clear_trackpoints();
  static const int kTrackPointsFieldNumber = 3;
  inline const ::com::zhichenhaixin::proto::TrackPoint& trackpoints(int index) const;
  inline ::com::zhichenhaixin::proto::TrackPoint* mutable_trackpoints(int index);
  inline ::com::zhichenhaixin::proto::TrackPoint* add_trackpoints();
  inline const ::google::protobuf::RepeatedPtrField< ::com::zhichenhaixin::proto::TrackPoint >&
      trackpoints() const;
  inline ::google::protobuf::RepeatedPtrField< ::com::zhichenhaixin::proto::TrackPoint >*
      mutable_trackpoints();

  // required int32 mode = 4;
  inline bool has_mode() const;
  inline void clear_mode();
  static const int kModeFieldNumber = 4;
  inline ::google::protobuf::int32 mode() const;
  inline void set_mode(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:com.zhichenhaixin.proto.FllowVo)
 private:
  inline void set_has_flag();
  inline void clear_has_flag();
  inline void set_has_fllow();
  inline void clear_has_fllow();
  inline void set_has_mode();
  inline void clear_has_mode();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  bool flag_;
  bool fllow_;
  ::google::protobuf::int32 mode_;
  ::google::protobuf::RepeatedPtrField< ::com::zhichenhaixin::proto::TrackPoint > trackpoints_;
  friend void  protobuf_AddDesc_ZCHXRadar_2eproto();
  friend void protobuf_AssignDesc_ZCHXRadar_2eproto();
  friend void protobuf_ShutdownFile_ZCHXRadar_2eproto();

  void InitAsDefaultInstance();
  static FllowVo* default_instance_;
};
// -------------------------------------------------------------------

class RadarSurfaceTrack : public ::google::protobuf::Message {
 public:
  RadarSurfaceTrack();
  virtual ~RadarSurfaceTrack();

  RadarSurfaceTrack(const RadarSurfaceTrack& from);

  inline RadarSurfaceTrack& operator=(const RadarSurfaceTrack& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RadarSurfaceTrack& default_instance();

  void Swap(RadarSurfaceTrack* other);

  // implements Message ----------------------------------------------

  RadarSurfaceTrack* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RadarSurfaceTrack& from);
  void MergeFrom(const RadarSurfaceTrack& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 flag = 1;
  inline bool has_flag() const;
  inline void clear_flag();
  static const int kFlagFieldNumber = 1;
  inline ::google::protobuf::int32 flag() const;
  inline void set_flag(::google::protobuf::int32 value);

  // required string sourceId = 2;
  inline bool has_sourceid() const;
  inline void clear_sourceid();
  static const int kSourceIdFieldNumber = 2;
  inline const ::std::string& sourceid() const;
  inline void set_sourceid(const ::std::string& value);
  inline void set_sourceid(const char* value);
  inline void set_sourceid(const char* value, size_t size);
  inline ::std::string* mutable_sourceid();
  inline ::std::string* release_sourceid();
  inline void set_allocated_sourceid(::std::string* sourceid);

  // required uint64 UTC = 3;
  inline bool has_utc() const;
  inline void clear_utc();
  static const int kUTCFieldNumber = 3;
  inline ::google::protobuf::uint64 utc() const;
  inline void set_utc(::google::protobuf::uint64 value);

  // required int32 length = 4;
  inline bool has_length() const;
  inline void clear_length();
  static const int kLengthFieldNumber = 4;
  inline ::google::protobuf::int32 length() const;
  inline void set_length(::google::protobuf::int32 value);

  // repeated .com.zhichenhaixin.proto.TrackPoint trackPoints = 5;
  inline int trackpoints_size() const;
  inline void clear_trackpoints();
  static const int kTrackPointsFieldNumber = 5;
  inline const ::com::zhichenhaixin::proto::TrackPoint& trackpoints(int index) const;
  inline ::com::zhichenhaixin::proto::TrackPoint* mutable_trackpoints(int index);
  inline ::com::zhichenhaixin::proto::TrackPoint* add_trackpoints();
  inline const ::google::protobuf::RepeatedPtrField< ::com::zhichenhaixin::proto::TrackPoint >&
      trackpoints() const;
  inline ::google::protobuf::RepeatedPtrField< ::com::zhichenhaixin::proto::TrackPoint >*
      mutable_trackpoints();

  // @@protoc_insertion_point(class_scope:com.zhichenhaixin.proto.RadarSurfaceTrack)
 private:
  inline void set_has_flag();
  inline void clear_has_flag();
  inline void set_has_sourceid();
  inline void clear_has_sourceid();
  inline void set_has_utc();
  inline void clear_has_utc();
  inline void set_has_length();
  inline void clear_has_length();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* sourceid_;
  ::google::protobuf::int32 flag_;
  ::google::protobuf::int32 length_;
  ::google::protobuf::uint64 utc_;
  ::google::protobuf::RepeatedPtrField< ::com::zhichenhaixin::proto::TrackPoint > trackpoints_;
  friend void  protobuf_AddDesc_ZCHXRadar_2eproto();
  friend void protobuf_AssignDesc_ZCHXRadar_2eproto();
  friend void protobuf_ShutdownFile_ZCHXRadar_2eproto();

  void InitAsDefaultInstance();
  static RadarSurfaceTrack* default_instance_;
};
// -------------------------------------------------------------------

class VideoFrame : public ::google::protobuf::Message {
 public:
  VideoFrame();
  virtual ~VideoFrame();

  VideoFrame(const VideoFrame& from);

  inline VideoFrame& operator=(const VideoFrame& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const VideoFrame& default_instance();

  void Swap(VideoFrame* other);

  // implements Message ----------------------------------------------

  VideoFrame* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const VideoFrame& from);
  void MergeFrom(const VideoFrame& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 systemAreaCode = 1;
  inline bool has_systemareacode() const;
  inline void clear_systemareacode();
  static const int kSystemAreaCodeFieldNumber = 1;
  inline ::google::protobuf::int32 systemareacode() const;
  inline void set_systemareacode(::google::protobuf::int32 value);

  // required int32 systemIdentificationCode = 2;
  inline bool has_systemidentificationcode() const;
  inline void clear_systemidentificationcode();
  static const int kSystemIdentificationCodeFieldNumber = 2;
  inline ::google::protobuf::int32 systemidentificationcode() const;
  inline void set_systemidentificationcode(::google::protobuf::int32 value);

  // required int32 msgIndex = 3;
  inline bool has_msgindex() const;
  inline void clear_msgindex();
  static const int kMsgIndexFieldNumber = 3;
  inline ::google::protobuf::int32 msgindex() const;
  inline void set_msgindex(::google::protobuf::int32 value);

  // required uint32 azimuth = 4;
  inline bool has_azimuth() const;
  inline void clear_azimuth();
  static const int kAzimuthFieldNumber = 4;
  inline ::google::protobuf::uint32 azimuth() const;
  inline void set_azimuth(::google::protobuf::uint32 value);

  // optional uint32 heading = 5;
  inline bool has_heading() const;
  inline void clear_heading();
  static const int kHeadingFieldNumber = 5;
  inline ::google::protobuf::uint32 heading() const;
  inline void set_heading(::google::protobuf::uint32 value);

  // required double startRange = 6;
  inline bool has_startrange() const;
  inline void clear_startrange();
  static const int kStartRangeFieldNumber = 6;
  inline double startrange() const;
  inline void set_startrange(double value);

  // required double rangeFactor = 7;
  inline bool has_rangefactor() const;
  inline void clear_rangefactor();
  static const int kRangeFactorFieldNumber = 7;
  inline double rangefactor() const;
  inline void set_rangefactor(double value);

  // required .com.zhichenhaixin.proto.RES bitResolution = 8;
  inline bool has_bitresolution() const;
  inline void clear_bitresolution();
  static const int kBitResolutionFieldNumber = 8;
  inline ::com::zhichenhaixin::proto::RES bitresolution() const;
  inline void set_bitresolution(::com::zhichenhaixin::proto::RES value);

  // required int32 timeOfDay = 9;
  inline bool has_timeofday() const;
  inline void clear_timeofday();
  static const int kTimeOfDayFieldNumber = 9;
  inline ::google::protobuf::int32 timeofday() const;
  inline void set_timeofday(::google::protobuf::int32 value);

  // repeated int32 amplitude = 10;
  inline int amplitude_size() const;
  inline void clear_amplitude();
  static const int kAmplitudeFieldNumber = 10;
  inline ::google::protobuf::int32 amplitude(int index) const;
  inline void set_amplitude(int index, ::google::protobuf::int32 value);
  inline void add_amplitude(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      amplitude() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_amplitude();

  // @@protoc_insertion_point(class_scope:com.zhichenhaixin.proto.VideoFrame)
 private:
  inline void set_has_systemareacode();
  inline void clear_has_systemareacode();
  inline void set_has_systemidentificationcode();
  inline void clear_has_systemidentificationcode();
  inline void set_has_msgindex();
  inline void clear_has_msgindex();
  inline void set_has_azimuth();
  inline void clear_has_azimuth();
  inline void set_has_heading();
  inline void clear_has_heading();
  inline void set_has_startrange();
  inline void clear_has_startrange();
  inline void set_has_rangefactor();
  inline void clear_has_rangefactor();
  inline void set_has_bitresolution();
  inline void clear_has_bitresolution();
  inline void set_has_timeofday();
  inline void clear_has_timeofday();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 systemareacode_;
  ::google::protobuf::int32 systemidentificationcode_;
  ::google::protobuf::int32 msgindex_;
  ::google::protobuf::uint32 azimuth_;
  double startrange_;
  ::google::protobuf::uint32 heading_;
  int bitresolution_;
  double rangefactor_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > amplitude_;
  ::google::protobuf::int32 timeofday_;
  friend void  protobuf_AddDesc_ZCHXRadar_2eproto();
  friend void protobuf_AssignDesc_ZCHXRadar_2eproto();
  friend void protobuf_ShutdownFile_ZCHXRadar_2eproto();

  void InitAsDefaultInstance();
  static VideoFrame* default_instance_;
};
// -------------------------------------------------------------------

class LineSpectrum : public ::google::protobuf::Message {
 public:
  LineSpectrum();
  virtual ~LineSpectrum();

  LineSpectrum(const LineSpectrum& from);

  inline LineSpectrum& operator=(const LineSpectrum& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const LineSpectrum& default_instance();

  void Swap(LineSpectrum* other);

  // implements Message ----------------------------------------------

  LineSpectrum* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const LineSpectrum& from);
  void MergeFrom(const LineSpectrum& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required double azimuth = 1;
  inline bool has_azimuth() const;
  inline void clear_azimuth();
  static const int kAzimuthFieldNumber = 1;
  inline double azimuth() const;
  inline void set_azimuth(double value);

  // repeated int32 amplitude = 2;
  inline int amplitude_size() const;
  inline void clear_amplitude();
  static const int kAmplitudeFieldNumber = 2;
  inline ::google::protobuf::int32 amplitude(int index) const;
  inline void set_amplitude(int index, ::google::protobuf::int32 value);
  inline void add_amplitude(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      amplitude() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_amplitude();

  // @@protoc_insertion_point(class_scope:com.zhichenhaixin.proto.LineSpectrum)
 private:
  inline void set_has_azimuth();
  inline void clear_has_azimuth();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  double azimuth_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > amplitude_;
  friend void  protobuf_AddDesc_ZCHXRadar_2eproto();
  friend void protobuf_AssignDesc_ZCHXRadar_2eproto();
  friend void protobuf_ShutdownFile_ZCHXRadar_2eproto();

  void InitAsDefaultInstance();
  static LineSpectrum* default_instance_;
};
// -------------------------------------------------------------------

class SectorSpectrum : public ::google::protobuf::Message {
 public:
  SectorSpectrum();
  virtual ~SectorSpectrum();

  SectorSpectrum(const SectorSpectrum& from);

  inline SectorSpectrum& operator=(const SectorSpectrum& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SectorSpectrum& default_instance();

  void Swap(SectorSpectrum* other);

  // implements Message ----------------------------------------------

  SectorSpectrum* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SectorSpectrum& from);
  void MergeFrom(const SectorSpectrum& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 sectorIndex = 1;
  inline bool has_sectorindex() const;
  inline void clear_sectorindex();
  static const int kSectorIndexFieldNumber = 1;
  inline ::google::protobuf::int32 sectorindex() const;
  inline void set_sectorindex(::google::protobuf::int32 value);

  // repeated .com.zhichenhaixin.proto.LineSpectrum lineSpectrums = 2;
  inline int linespectrums_size() const;
  inline void clear_linespectrums();
  static const int kLineSpectrumsFieldNumber = 2;
  inline const ::com::zhichenhaixin::proto::LineSpectrum& linespectrums(int index) const;
  inline ::com::zhichenhaixin::proto::LineSpectrum* mutable_linespectrums(int index);
  inline ::com::zhichenhaixin::proto::LineSpectrum* add_linespectrums();
  inline const ::google::protobuf::RepeatedPtrField< ::com::zhichenhaixin::proto::LineSpectrum >&
      linespectrums() const;
  inline ::google::protobuf::RepeatedPtrField< ::com::zhichenhaixin::proto::LineSpectrum >*
      mutable_linespectrums();

  // @@protoc_insertion_point(class_scope:com.zhichenhaixin.proto.SectorSpectrum)
 private:
  inline void set_has_sectorindex();
  inline void clear_has_sectorindex();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::com::zhichenhaixin::proto::LineSpectrum > linespectrums_;
  ::google::protobuf::int32 sectorindex_;
  friend void  protobuf_AddDesc_ZCHXRadar_2eproto();
  friend void protobuf_AssignDesc_ZCHXRadar_2eproto();
  friend void protobuf_ShutdownFile_ZCHXRadar_2eproto();

  void InitAsDefaultInstance();
  static SectorSpectrum* default_instance_;
};
// ===================================================================


// ===================================================================

// RadarMeet

// required uint32 trackNumber = 1;
inline bool RadarMeet::has_tracknumber() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RadarMeet::set_has_tracknumber() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RadarMeet::clear_has_tracknumber() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RadarMeet::clear_tracknumber() {
  tracknumber_ = 0u;
  clear_has_tracknumber();
}
inline ::google::protobuf::uint32 RadarMeet::tracknumber() const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.proto.RadarMeet.trackNumber)
  return tracknumber_;
}
inline void RadarMeet::set_tracknumber(::google::protobuf::uint32 value) {
  set_has_tracknumber();
  tracknumber_ = value;
  // @@protoc_insertion_point(field_set:com.zhichenhaixin.proto.RadarMeet.trackNumber)
}

// required double lat = 2;
inline bool RadarMeet::has_lat() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RadarMeet::set_has_lat() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RadarMeet::clear_has_lat() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RadarMeet::clear_lat() {
  lat_ = 0;
  clear_has_lat();
}
inline double RadarMeet::lat() const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.proto.RadarMeet.lat)
  return lat_;
}
inline void RadarMeet::set_lat(double value) {
  set_has_lat();
  lat_ = value;
  // @@protoc_insertion_point(field_set:com.zhichenhaixin.proto.RadarMeet.lat)
}

// required double lon = 3;
inline bool RadarMeet::has_lon() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void RadarMeet::set_has_lon() {
  _has_bits_[0] |= 0x00000004u;
}
inline void RadarMeet::clear_has_lon() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void RadarMeet::clear_lon() {
  lon_ = 0;
  clear_has_lon();
}
inline double RadarMeet::lon() const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.proto.RadarMeet.lon)
  return lon_;
}
inline void RadarMeet::set_lon(double value) {
  set_has_lon();
  lon_ = value;
  // @@protoc_insertion_point(field_set:com.zhichenhaixin.proto.RadarMeet.lon)
}

// required double disrance = 4;
inline bool RadarMeet::has_disrance() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void RadarMeet::set_has_disrance() {
  _has_bits_[0] |= 0x00000008u;
}
inline void RadarMeet::clear_has_disrance() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void RadarMeet::clear_disrance() {
  disrance_ = 0;
  clear_has_disrance();
}
inline double RadarMeet::disrance() const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.proto.RadarMeet.disrance)
  return disrance_;
}
inline void RadarMeet::set_disrance(double value) {
  set_has_disrance();
  disrance_ = value;
  // @@protoc_insertion_point(field_set:com.zhichenhaixin.proto.RadarMeet.disrance)
}

// required uint64 UTC = 5;
inline bool RadarMeet::has_utc() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void RadarMeet::set_has_utc() {
  _has_bits_[0] |= 0x00000010u;
}
inline void RadarMeet::clear_has_utc() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void RadarMeet::clear_utc() {
  utc_ = GOOGLE_ULONGLONG(0);
  clear_has_utc();
}
inline ::google::protobuf::uint64 RadarMeet::utc() const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.proto.RadarMeet.UTC)
  return utc_;
}
inline void RadarMeet::set_utc(::google::protobuf::uint64 value) {
  set_has_utc();
  utc_ = value;
  // @@protoc_insertion_point(field_set:com.zhichenhaixin.proto.RadarMeet.UTC)
}

// -------------------------------------------------------------------

// RadarHistoryTrack

// required uint32 trackNumber = 1;
inline bool RadarHistoryTrack::has_tracknumber() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RadarHistoryTrack::set_has_tracknumber() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RadarHistoryTrack::clear_has_tracknumber() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RadarHistoryTrack::clear_tracknumber() {
  tracknumber_ = 0u;
  clear_has_tracknumber();
}
inline ::google::protobuf::uint32 RadarHistoryTrack::tracknumber() const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.proto.RadarHistoryTrack.trackNumber)
  return tracknumber_;
}
inline void RadarHistoryTrack::set_tracknumber(::google::protobuf::uint32 value) {
  set_has_tracknumber();
  tracknumber_ = value;
  // @@protoc_insertion_point(field_set:com.zhichenhaixin.proto.RadarHistoryTrack.trackNumber)
}

// required double wgs84PosLat = 2;
inline bool RadarHistoryTrack::has_wgs84poslat() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RadarHistoryTrack::set_has_wgs84poslat() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RadarHistoryTrack::clear_has_wgs84poslat() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RadarHistoryTrack::clear_wgs84poslat() {
  wgs84poslat_ = 0;
  clear_has_wgs84poslat();
}
inline double RadarHistoryTrack::wgs84poslat() const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.proto.RadarHistoryTrack.wgs84PosLat)
  return wgs84poslat_;
}
inline void RadarHistoryTrack::set_wgs84poslat(double value) {
  set_has_wgs84poslat();
  wgs84poslat_ = value;
  // @@protoc_insertion_point(field_set:com.zhichenhaixin.proto.RadarHistoryTrack.wgs84PosLat)
}

// required double wgs84PosLong = 3;
inline bool RadarHistoryTrack::has_wgs84poslong() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void RadarHistoryTrack::set_has_wgs84poslong() {
  _has_bits_[0] |= 0x00000004u;
}
inline void RadarHistoryTrack::clear_has_wgs84poslong() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void RadarHistoryTrack::clear_wgs84poslong() {
  wgs84poslong_ = 0;
  clear_has_wgs84poslong();
}
inline double RadarHistoryTrack::wgs84poslong() const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.proto.RadarHistoryTrack.wgs84PosLong)
  return wgs84poslong_;
}
inline void RadarHistoryTrack::set_wgs84poslong(double value) {
  set_has_wgs84poslong();
  wgs84poslong_ = value;
  // @@protoc_insertion_point(field_set:com.zhichenhaixin.proto.RadarHistoryTrack.wgs84PosLong)
}

// required float timeOfDay = 4;
inline bool RadarHistoryTrack::has_timeofday() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void RadarHistoryTrack::set_has_timeofday() {
  _has_bits_[0] |= 0x00000008u;
}
inline void RadarHistoryTrack::clear_has_timeofday() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void RadarHistoryTrack::clear_timeofday() {
  timeofday_ = 0;
  clear_has_timeofday();
}
inline float RadarHistoryTrack::timeofday() const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.proto.RadarHistoryTrack.timeOfDay)
  return timeofday_;
}
inline void RadarHistoryTrack::set_timeofday(float value) {
  set_has_timeofday();
  timeofday_ = value;
  // @@protoc_insertion_point(field_set:com.zhichenhaixin.proto.RadarHistoryTrack.timeOfDay)
}

// optional .com.zhichenhaixin.proto.CNF trackType = 5;
inline bool RadarHistoryTrack::has_tracktype() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void RadarHistoryTrack::set_has_tracktype() {
  _has_bits_[0] |= 0x00000010u;
}
inline void RadarHistoryTrack::clear_has_tracktype() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void RadarHistoryTrack::clear_tracktype() {
  tracktype_ = 0;
  clear_has_tracktype();
}
inline ::com::zhichenhaixin::proto::CNF RadarHistoryTrack::tracktype() const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.proto.RadarHistoryTrack.trackType)
  return static_cast< ::com::zhichenhaixin::proto::CNF >(tracktype_);
}
inline void RadarHistoryTrack::set_tracktype(::com::zhichenhaixin::proto::CNF value) {
  assert(::com::zhichenhaixin::proto::CNF_IsValid(value));
  set_has_tracktype();
  tracktype_ = value;
  // @@protoc_insertion_point(field_set:com.zhichenhaixin.proto.RadarHistoryTrack.trackType)
}

// optional bool trackLastReport = 6;
inline bool RadarHistoryTrack::has_tracklastreport() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void RadarHistoryTrack::set_has_tracklastreport() {
  _has_bits_[0] |= 0x00000020u;
}
inline void RadarHistoryTrack::clear_has_tracklastreport() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void RadarHistoryTrack::clear_tracklastreport() {
  tracklastreport_ = false;
  clear_has_tracklastreport();
}
inline bool RadarHistoryTrack::tracklastreport() const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.proto.RadarHistoryTrack.trackLastReport)
  return tracklastreport_;
}
inline void RadarHistoryTrack::set_tracklastreport(bool value) {
  set_has_tracklastreport();
  tracklastreport_ = value;
  // @@protoc_insertion_point(field_set:com.zhichenhaixin.proto.RadarHistoryTrack.trackLastReport)
}

// optional .com.zhichenhaixin.proto.CST extrapolation = 7;
inline bool RadarHistoryTrack::has_extrapolation() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void RadarHistoryTrack::set_has_extrapolation() {
  _has_bits_[0] |= 0x00000040u;
}
inline void RadarHistoryTrack::clear_has_extrapolation() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void RadarHistoryTrack::clear_extrapolation() {
  extrapolation_ = 0;
  clear_has_extrapolation();
}
inline ::com::zhichenhaixin::proto::CST RadarHistoryTrack::extrapolation() const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.proto.RadarHistoryTrack.extrapolation)
  return static_cast< ::com::zhichenhaixin::proto::CST >(extrapolation_);
}
inline void RadarHistoryTrack::set_extrapolation(::com::zhichenhaixin::proto::CST value) {
  assert(::com::zhichenhaixin::proto::CST_IsValid(value));
  set_has_extrapolation();
  extrapolation_ = value;
  // @@protoc_insertion_point(field_set:com.zhichenhaixin.proto.RadarHistoryTrack.extrapolation)
}

// optional .com.zhichenhaixin.proto.STH trackPositionCode = 8;
inline bool RadarHistoryTrack::has_trackpositioncode() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void RadarHistoryTrack::set_has_trackpositioncode() {
  _has_bits_[0] |= 0x00000080u;
}
inline void RadarHistoryTrack::clear_has_trackpositioncode() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void RadarHistoryTrack::clear_trackpositioncode() {
  trackpositioncode_ = 0;
  clear_has_trackpositioncode();
}
inline ::com::zhichenhaixin::proto::STH RadarHistoryTrack::trackpositioncode() const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.proto.RadarHistoryTrack.trackPositionCode)
  return static_cast< ::com::zhichenhaixin::proto::STH >(trackpositioncode_);
}
inline void RadarHistoryTrack::set_trackpositioncode(::com::zhichenhaixin::proto::STH value) {
  assert(::com::zhichenhaixin::proto::STH_IsValid(value));
  set_has_trackpositioncode();
  trackpositioncode_ = value;
  // @@protoc_insertion_point(field_set:com.zhichenhaixin.proto.RadarHistoryTrack.trackPositionCode)
}

// required double cog = 9;
inline bool RadarHistoryTrack::has_cog() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void RadarHistoryTrack::set_has_cog() {
  _has_bits_[0] |= 0x00000100u;
}
inline void RadarHistoryTrack::clear_has_cog() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void RadarHistoryTrack::clear_cog() {
  cog_ = 0;
  clear_has_cog();
}
inline double RadarHistoryTrack::cog() const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.proto.RadarHistoryTrack.cog)
  return cog_;
}
inline void RadarHistoryTrack::set_cog(double value) {
  set_has_cog();
  cog_ = value;
  // @@protoc_insertion_point(field_set:com.zhichenhaixin.proto.RadarHistoryTrack.cog)
}

// required double sog = 10;
inline bool RadarHistoryTrack::has_sog() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void RadarHistoryTrack::set_has_sog() {
  _has_bits_[0] |= 0x00000200u;
}
inline void RadarHistoryTrack::clear_has_sog() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void RadarHistoryTrack::clear_sog() {
  sog_ = 0;
  clear_has_sog();
}
inline double RadarHistoryTrack::sog() const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.proto.RadarHistoryTrack.sog)
  return sog_;
}
inline void RadarHistoryTrack::set_sog(double value) {
  set_has_sog();
  sog_ = value;
  // @@protoc_insertion_point(field_set:com.zhichenhaixin.proto.RadarHistoryTrack.sog)
}

// required uint64 UTC = 11;
inline bool RadarHistoryTrack::has_utc() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void RadarHistoryTrack::set_has_utc() {
  _has_bits_[0] |= 0x00000400u;
}
inline void RadarHistoryTrack::clear_has_utc() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void RadarHistoryTrack::clear_utc() {
  utc_ = GOOGLE_ULONGLONG(0);
  clear_has_utc();
}
inline ::google::protobuf::uint64 RadarHistoryTrack::utc() const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.proto.RadarHistoryTrack.UTC)
  return utc_;
}
inline void RadarHistoryTrack::set_utc(::google::protobuf::uint64 value) {
  set_has_utc();
  utc_ = value;
  // @@protoc_insertion_point(field_set:com.zhichenhaixin.proto.RadarHistoryTrack.UTC)
}

// -------------------------------------------------------------------

// RadarHistoryTracks

// repeated .com.zhichenhaixin.proto.RadarHistoryTrack tracks = 1;
inline int RadarHistoryTracks::tracks_size() const {
  return tracks_.size();
}
inline void RadarHistoryTracks::clear_tracks() {
  tracks_.Clear();
}
inline const ::com::zhichenhaixin::proto::RadarHistoryTrack& RadarHistoryTracks::tracks(int index) const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.proto.RadarHistoryTracks.tracks)
  return tracks_.Get(index);
}
inline ::com::zhichenhaixin::proto::RadarHistoryTrack* RadarHistoryTracks::mutable_tracks(int index) {
  // @@protoc_insertion_point(field_mutable:com.zhichenhaixin.proto.RadarHistoryTracks.tracks)
  return tracks_.Mutable(index);
}
inline ::com::zhichenhaixin::proto::RadarHistoryTrack* RadarHistoryTracks::add_tracks() {
  // @@protoc_insertion_point(field_add:com.zhichenhaixin.proto.RadarHistoryTracks.tracks)
  return tracks_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::com::zhichenhaixin::proto::RadarHistoryTrack >&
RadarHistoryTracks::tracks() const {
  // @@protoc_insertion_point(field_list:com.zhichenhaixin.proto.RadarHistoryTracks.tracks)
  return tracks_;
}
inline ::google::protobuf::RepeatedPtrField< ::com::zhichenhaixin::proto::RadarHistoryTrack >*
RadarHistoryTracks::mutable_tracks() {
  // @@protoc_insertion_point(field_mutable_list:com.zhichenhaixin.proto.RadarHistoryTracks.tracks)
  return &tracks_;
}

// -------------------------------------------------------------------

// TrackPoint

// required int32 systemAreaCode = 1;
inline bool TrackPoint::has_systemareacode() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TrackPoint::set_has_systemareacode() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TrackPoint::clear_has_systemareacode() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TrackPoint::clear_systemareacode() {
  systemareacode_ = 0;
  clear_has_systemareacode();
}
inline ::google::protobuf::int32 TrackPoint::systemareacode() const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.proto.TrackPoint.systemAreaCode)
  return systemareacode_;
}
inline void TrackPoint::set_systemareacode(::google::protobuf::int32 value) {
  set_has_systemareacode();
  systemareacode_ = value;
  // @@protoc_insertion_point(field_set:com.zhichenhaixin.proto.TrackPoint.systemAreaCode)
}

// required int32 systemIdentificationCode = 2;
inline bool TrackPoint::has_systemidentificationcode() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TrackPoint::set_has_systemidentificationcode() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TrackPoint::clear_has_systemidentificationcode() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TrackPoint::clear_systemidentificationcode() {
  systemidentificationcode_ = 0;
  clear_has_systemidentificationcode();
}
inline ::google::protobuf::int32 TrackPoint::systemidentificationcode() const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.proto.TrackPoint.systemIdentificationCode)
  return systemidentificationcode_;
}
inline void TrackPoint::set_systemidentificationcode(::google::protobuf::int32 value) {
  set_has_systemidentificationcode();
  systemidentificationcode_ = value;
  // @@protoc_insertion_point(field_set:com.zhichenhaixin.proto.TrackPoint.systemIdentificationCode)
}

// required .com.zhichenhaixin.proto.MSGTYP messageType = 3;
inline bool TrackPoint::has_messagetype() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TrackPoint::set_has_messagetype() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TrackPoint::clear_has_messagetype() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TrackPoint::clear_messagetype() {
  messagetype_ = 0;
  clear_has_messagetype();
}
inline ::com::zhichenhaixin::proto::MSGTYP TrackPoint::messagetype() const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.proto.TrackPoint.messageType)
  return static_cast< ::com::zhichenhaixin::proto::MSGTYP >(messagetype_);
}
inline void TrackPoint::set_messagetype(::com::zhichenhaixin::proto::MSGTYP value) {
  assert(::com::zhichenhaixin::proto::MSGTYP_IsValid(value));
  set_has_messagetype();
  messagetype_ = value;
  // @@protoc_insertion_point(field_set:com.zhichenhaixin.proto.TrackPoint.messageType)
}

// required uint32 trackNumber = 4;
inline bool TrackPoint::has_tracknumber() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void TrackPoint::set_has_tracknumber() {
  _has_bits_[0] |= 0x00000008u;
}
inline void TrackPoint::clear_has_tracknumber() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void TrackPoint::clear_tracknumber() {
  tracknumber_ = 0u;
  clear_has_tracknumber();
}
inline ::google::protobuf::uint32 TrackPoint::tracknumber() const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.proto.TrackPoint.trackNumber)
  return tracknumber_;
}
inline void TrackPoint::set_tracknumber(::google::protobuf::uint32 value) {
  set_has_tracknumber();
  tracknumber_ = value;
  // @@protoc_insertion_point(field_set:com.zhichenhaixin.proto.TrackPoint.trackNumber)
}

// required float cartesianPosX = 5;
inline bool TrackPoint::has_cartesianposx() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void TrackPoint::set_has_cartesianposx() {
  _has_bits_[0] |= 0x00000010u;
}
inline void TrackPoint::clear_has_cartesianposx() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void TrackPoint::clear_cartesianposx() {
  cartesianposx_ = 0;
  clear_has_cartesianposx();
}
inline float TrackPoint::cartesianposx() const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.proto.TrackPoint.cartesianPosX)
  return cartesianposx_;
}
inline void TrackPoint::set_cartesianposx(float value) {
  set_has_cartesianposx();
  cartesianposx_ = value;
  // @@protoc_insertion_point(field_set:com.zhichenhaixin.proto.TrackPoint.cartesianPosX)
}

// required float cartesianPosY = 6;
inline bool TrackPoint::has_cartesianposy() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void TrackPoint::set_has_cartesianposy() {
  _has_bits_[0] |= 0x00000020u;
}
inline void TrackPoint::clear_has_cartesianposy() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void TrackPoint::clear_cartesianposy() {
  cartesianposy_ = 0;
  clear_has_cartesianposy();
}
inline float TrackPoint::cartesianposy() const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.proto.TrackPoint.cartesianPosY)
  return cartesianposy_;
}
inline void TrackPoint::set_cartesianposy(float value) {
  set_has_cartesianposy();
  cartesianposy_ = value;
  // @@protoc_insertion_point(field_set:com.zhichenhaixin.proto.TrackPoint.cartesianPosY)
}

// required double wgs84PosLat = 7;
inline bool TrackPoint::has_wgs84poslat() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void TrackPoint::set_has_wgs84poslat() {
  _has_bits_[0] |= 0x00000040u;
}
inline void TrackPoint::clear_has_wgs84poslat() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void TrackPoint::clear_wgs84poslat() {
  wgs84poslat_ = 0;
  clear_has_wgs84poslat();
}
inline double TrackPoint::wgs84poslat() const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.proto.TrackPoint.wgs84PosLat)
  return wgs84poslat_;
}
inline void TrackPoint::set_wgs84poslat(double value) {
  set_has_wgs84poslat();
  wgs84poslat_ = value;
  // @@protoc_insertion_point(field_set:com.zhichenhaixin.proto.TrackPoint.wgs84PosLat)
}

// required double wgs84PosLong = 8;
inline bool TrackPoint::has_wgs84poslong() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void TrackPoint::set_has_wgs84poslong() {
  _has_bits_[0] |= 0x00000080u;
}
inline void TrackPoint::clear_has_wgs84poslong() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void TrackPoint::clear_wgs84poslong() {
  wgs84poslong_ = 0;
  clear_has_wgs84poslong();
}
inline double TrackPoint::wgs84poslong() const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.proto.TrackPoint.wgs84PosLong)
  return wgs84poslong_;
}
inline void TrackPoint::set_wgs84poslong(double value) {
  set_has_wgs84poslong();
  wgs84poslong_ = value;
  // @@protoc_insertion_point(field_set:com.zhichenhaixin.proto.TrackPoint.wgs84PosLong)
}

// required float timeOfDay = 9;
inline bool TrackPoint::has_timeofday() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void TrackPoint::set_has_timeofday() {
  _has_bits_[0] |= 0x00000100u;
}
inline void TrackPoint::clear_has_timeofday() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void TrackPoint::clear_timeofday() {
  timeofday_ = 0;
  clear_has_timeofday();
}
inline float TrackPoint::timeofday() const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.proto.TrackPoint.timeOfDay)
  return timeofday_;
}
inline void TrackPoint::set_timeofday(float value) {
  set_has_timeofday();
  timeofday_ = value;
  // @@protoc_insertion_point(field_set:com.zhichenhaixin.proto.TrackPoint.timeOfDay)
}

// optional .com.zhichenhaixin.proto.CNF trackType = 10;
inline bool TrackPoint::has_tracktype() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void TrackPoint::set_has_tracktype() {
  _has_bits_[0] |= 0x00000200u;
}
inline void TrackPoint::clear_has_tracktype() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void TrackPoint::clear_tracktype() {
  tracktype_ = 0;
  clear_has_tracktype();
}
inline ::com::zhichenhaixin::proto::CNF TrackPoint::tracktype() const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.proto.TrackPoint.trackType)
  return static_cast< ::com::zhichenhaixin::proto::CNF >(tracktype_);
}
inline void TrackPoint::set_tracktype(::com::zhichenhaixin::proto::CNF value) {
  assert(::com::zhichenhaixin::proto::CNF_IsValid(value));
  set_has_tracktype();
  tracktype_ = value;
  // @@protoc_insertion_point(field_set:com.zhichenhaixin.proto.TrackPoint.trackType)
}

// optional bool trackLastReport = 11;
inline bool TrackPoint::has_tracklastreport() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void TrackPoint::set_has_tracklastreport() {
  _has_bits_[0] |= 0x00000400u;
}
inline void TrackPoint::clear_has_tracklastreport() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void TrackPoint::clear_tracklastreport() {
  tracklastreport_ = false;
  clear_has_tracklastreport();
}
inline bool TrackPoint::tracklastreport() const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.proto.TrackPoint.trackLastReport)
  return tracklastreport_;
}
inline void TrackPoint::set_tracklastreport(bool value) {
  set_has_tracklastreport();
  tracklastreport_ = value;
  // @@protoc_insertion_point(field_set:com.zhichenhaixin.proto.TrackPoint.trackLastReport)
}

// optional .com.zhichenhaixin.proto.CST extrapolation = 12;
inline bool TrackPoint::has_extrapolation() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void TrackPoint::set_has_extrapolation() {
  _has_bits_[0] |= 0x00000800u;
}
inline void TrackPoint::clear_has_extrapolation() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void TrackPoint::clear_extrapolation() {
  extrapolation_ = 0;
  clear_has_extrapolation();
}
inline ::com::zhichenhaixin::proto::CST TrackPoint::extrapolation() const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.proto.TrackPoint.extrapolation)
  return static_cast< ::com::zhichenhaixin::proto::CST >(extrapolation_);
}
inline void TrackPoint::set_extrapolation(::com::zhichenhaixin::proto::CST value) {
  assert(::com::zhichenhaixin::proto::CST_IsValid(value));
  set_has_extrapolation();
  extrapolation_ = value;
  // @@protoc_insertion_point(field_set:com.zhichenhaixin.proto.TrackPoint.extrapolation)
}

// optional .com.zhichenhaixin.proto.STH trackPositionCode = 13;
inline bool TrackPoint::has_trackpositioncode() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void TrackPoint::set_has_trackpositioncode() {
  _has_bits_[0] |= 0x00001000u;
}
inline void TrackPoint::clear_has_trackpositioncode() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void TrackPoint::clear_trackpositioncode() {
  trackpositioncode_ = 0;
  clear_has_trackpositioncode();
}
inline ::com::zhichenhaixin::proto::STH TrackPoint::trackpositioncode() const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.proto.TrackPoint.trackPositionCode)
  return static_cast< ::com::zhichenhaixin::proto::STH >(trackpositioncode_);
}
inline void TrackPoint::set_trackpositioncode(::com::zhichenhaixin::proto::STH value) {
  assert(::com::zhichenhaixin::proto::STH_IsValid(value));
  set_has_trackpositioncode();
  trackpositioncode_ = value;
  // @@protoc_insertion_point(field_set:com.zhichenhaixin.proto.TrackPoint.trackPositionCode)
}

// optional float sigmaX = 14;
inline bool TrackPoint::has_sigmax() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void TrackPoint::set_has_sigmax() {
  _has_bits_[0] |= 0x00002000u;
}
inline void TrackPoint::clear_has_sigmax() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void TrackPoint::clear_sigmax() {
  sigmax_ = 0;
  clear_has_sigmax();
}
inline float TrackPoint::sigmax() const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.proto.TrackPoint.sigmaX)
  return sigmax_;
}
inline void TrackPoint::set_sigmax(float value) {
  set_has_sigmax();
  sigmax_ = value;
  // @@protoc_insertion_point(field_set:com.zhichenhaixin.proto.TrackPoint.sigmaX)
}

// optional float sigmaY = 15;
inline bool TrackPoint::has_sigmay() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void TrackPoint::set_has_sigmay() {
  _has_bits_[0] |= 0x00004000u;
}
inline void TrackPoint::clear_has_sigmay() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void TrackPoint::clear_sigmay() {
  sigmay_ = 0;
  clear_has_sigmay();
}
inline float TrackPoint::sigmay() const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.proto.TrackPoint.sigmaY)
  return sigmay_;
}
inline void TrackPoint::set_sigmay(float value) {
  set_has_sigmay();
  sigmay_ = value;
  // @@protoc_insertion_point(field_set:com.zhichenhaixin.proto.TrackPoint.sigmaY)
}

// optional float sigmaXY = 16;
inline bool TrackPoint::has_sigmaxy() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void TrackPoint::set_has_sigmaxy() {
  _has_bits_[0] |= 0x00008000u;
}
inline void TrackPoint::clear_has_sigmaxy() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void TrackPoint::clear_sigmaxy() {
  sigmaxy_ = 0;
  clear_has_sigmaxy();
}
inline float TrackPoint::sigmaxy() const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.proto.TrackPoint.sigmaXY)
  return sigmaxy_;
}
inline void TrackPoint::set_sigmaxy(float value) {
  set_has_sigmaxy();
  sigmaxy_ = value;
  // @@protoc_insertion_point(field_set:com.zhichenhaixin.proto.TrackPoint.sigmaXY)
}

// optional float ampOfPriPlot = 17;
inline bool TrackPoint::has_ampofpriplot() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void TrackPoint::set_has_ampofpriplot() {
  _has_bits_[0] |= 0x00010000u;
}
inline void TrackPoint::clear_has_ampofpriplot() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void TrackPoint::clear_ampofpriplot() {
  ampofpriplot_ = 0;
  clear_has_ampofpriplot();
}
inline float TrackPoint::ampofpriplot() const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.proto.TrackPoint.ampOfPriPlot)
  return ampofpriplot_;
}
inline void TrackPoint::set_ampofpriplot(float value) {
  set_has_ampofpriplot();
  ampofpriplot_ = value;
  // @@protoc_insertion_point(field_set:com.zhichenhaixin.proto.TrackPoint.ampOfPriPlot)
}

// required double cartesianTrkVel_vx = 18;
inline bool TrackPoint::has_cartesiantrkvel_vx() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void TrackPoint::set_has_cartesiantrkvel_vx() {
  _has_bits_[0] |= 0x00020000u;
}
inline void TrackPoint::clear_has_cartesiantrkvel_vx() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void TrackPoint::clear_cartesiantrkvel_vx() {
  cartesiantrkvel_vx_ = 0;
  clear_has_cartesiantrkvel_vx();
}
inline double TrackPoint::cartesiantrkvel_vx() const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.proto.TrackPoint.cartesianTrkVel_vx)
  return cartesiantrkvel_vx_;
}
inline void TrackPoint::set_cartesiantrkvel_vx(double value) {
  set_has_cartesiantrkvel_vx();
  cartesiantrkvel_vx_ = value;
  // @@protoc_insertion_point(field_set:com.zhichenhaixin.proto.TrackPoint.cartesianTrkVel_vx)
}

// required double cartesianTrkVel_vy = 19;
inline bool TrackPoint::has_cartesiantrkvel_vy() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void TrackPoint::set_has_cartesiantrkvel_vy() {
  _has_bits_[0] |= 0x00040000u;
}
inline void TrackPoint::clear_has_cartesiantrkvel_vy() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void TrackPoint::clear_cartesiantrkvel_vy() {
  cartesiantrkvel_vy_ = 0;
  clear_has_cartesiantrkvel_vy();
}
inline double TrackPoint::cartesiantrkvel_vy() const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.proto.TrackPoint.cartesianTrkVel_vy)
  return cartesiantrkvel_vy_;
}
inline void TrackPoint::set_cartesiantrkvel_vy(double value) {
  set_has_cartesiantrkvel_vy();
  cartesiantrkvel_vy_ = value;
  // @@protoc_insertion_point(field_set:com.zhichenhaixin.proto.TrackPoint.cartesianTrkVel_vy)
}

// required double cog = 20;
inline bool TrackPoint::has_cog() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void TrackPoint::set_has_cog() {
  _has_bits_[0] |= 0x00080000u;
}
inline void TrackPoint::clear_has_cog() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void TrackPoint::clear_cog() {
  cog_ = 0;
  clear_has_cog();
}
inline double TrackPoint::cog() const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.proto.TrackPoint.cog)
  return cog_;
}
inline void TrackPoint::set_cog(double value) {
  set_has_cog();
  cog_ = value;
  // @@protoc_insertion_point(field_set:com.zhichenhaixin.proto.TrackPoint.cog)
}

// required double sog = 21;
inline bool TrackPoint::has_sog() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void TrackPoint::set_has_sog() {
  _has_bits_[0] |= 0x00100000u;
}
inline void TrackPoint::clear_has_sog() {
  _has_bits_[0] &= ~0x00100000u;
}
inline void TrackPoint::clear_sog() {
  sog_ = 0;
  clear_has_sog();
}
inline double TrackPoint::sog() const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.proto.TrackPoint.sog)
  return sog_;
}
inline void TrackPoint::set_sog(double value) {
  set_has_sog();
  sog_ = value;
  // @@protoc_insertion_point(field_set:com.zhichenhaixin.proto.TrackPoint.sog)
}

// optional .com.zhichenhaixin.proto.RadarHistoryTracks tracks = 22;
inline bool TrackPoint::has_tracks() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
inline void TrackPoint::set_has_tracks() {
  _has_bits_[0] |= 0x00200000u;
}
inline void TrackPoint::clear_has_tracks() {
  _has_bits_[0] &= ~0x00200000u;
}
inline void TrackPoint::clear_tracks() {
  if (tracks_ != NULL) tracks_->::com::zhichenhaixin::proto::RadarHistoryTracks::Clear();
  clear_has_tracks();
}
inline const ::com::zhichenhaixin::proto::RadarHistoryTracks& TrackPoint::tracks() const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.proto.TrackPoint.tracks)
  return tracks_ != NULL ? *tracks_ : *default_instance_->tracks_;
}
inline ::com::zhichenhaixin::proto::RadarHistoryTracks* TrackPoint::mutable_tracks() {
  set_has_tracks();
  if (tracks_ == NULL) tracks_ = new ::com::zhichenhaixin::proto::RadarHistoryTracks;
  // @@protoc_insertion_point(field_mutable:com.zhichenhaixin.proto.TrackPoint.tracks)
  return tracks_;
}
inline ::com::zhichenhaixin::proto::RadarHistoryTracks* TrackPoint::release_tracks() {
  clear_has_tracks();
  ::com::zhichenhaixin::proto::RadarHistoryTracks* temp = tracks_;
  tracks_ = NULL;
  return temp;
}
inline void TrackPoint::set_allocated_tracks(::com::zhichenhaixin::proto::RadarHistoryTracks* tracks) {
  delete tracks_;
  tracks_ = tracks;
  if (tracks) {
    set_has_tracks();
  } else {
    clear_has_tracks();
  }
  // @@protoc_insertion_point(field_set_allocated:com.zhichenhaixin.proto.TrackPoint.tracks)
}

// optional int32 isSmuggle = 23;
inline bool TrackPoint::has_issmuggle() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
inline void TrackPoint::set_has_issmuggle() {
  _has_bits_[0] |= 0x00400000u;
}
inline void TrackPoint::clear_has_issmuggle() {
  _has_bits_[0] &= ~0x00400000u;
}
inline void TrackPoint::clear_issmuggle() {
  issmuggle_ = 0;
  clear_has_issmuggle();
}
inline ::google::protobuf::int32 TrackPoint::issmuggle() const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.proto.TrackPoint.isSmuggle)
  return issmuggle_;
}
inline void TrackPoint::set_issmuggle(::google::protobuf::int32 value) {
  set_has_issmuggle();
  issmuggle_ = value;
  // @@protoc_insertion_point(field_set:com.zhichenhaixin.proto.TrackPoint.isSmuggle)
}

// optional double distance = 24;
inline bool TrackPoint::has_distance() const {
  return (_has_bits_[0] & 0x00800000u) != 0;
}
inline void TrackPoint::set_has_distance() {
  _has_bits_[0] |= 0x00800000u;
}
inline void TrackPoint::clear_has_distance() {
  _has_bits_[0] &= ~0x00800000u;
}
inline void TrackPoint::clear_distance() {
  distance_ = 0;
  clear_has_distance();
}
inline double TrackPoint::distance() const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.proto.TrackPoint.distance)
  return distance_;
}
inline void TrackPoint::set_distance(double value) {
  set_has_distance();
  distance_ = value;
  // @@protoc_insertion_point(field_set:com.zhichenhaixin.proto.TrackPoint.distance)
}

// optional int32 mode = 25;
inline bool TrackPoint::has_mode() const {
  return (_has_bits_[0] & 0x01000000u) != 0;
}
inline void TrackPoint::set_has_mode() {
  _has_bits_[0] |= 0x01000000u;
}
inline void TrackPoint::clear_has_mode() {
  _has_bits_[0] &= ~0x01000000u;
}
inline void TrackPoint::clear_mode() {
  mode_ = 0;
  clear_has_mode();
}
inline ::google::protobuf::int32 TrackPoint::mode() const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.proto.TrackPoint.mode)
  return mode_;
}
inline void TrackPoint::set_mode(::google::protobuf::int32 value) {
  set_has_mode();
  mode_ = value;
  // @@protoc_insertion_point(field_set:com.zhichenhaixin.proto.TrackPoint.mode)
}

// optional string trackby = 26;
inline bool TrackPoint::has_trackby() const {
  return (_has_bits_[0] & 0x02000000u) != 0;
}
inline void TrackPoint::set_has_trackby() {
  _has_bits_[0] |= 0x02000000u;
}
inline void TrackPoint::clear_has_trackby() {
  _has_bits_[0] &= ~0x02000000u;
}
inline void TrackPoint::clear_trackby() {
  if (trackby_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    trackby_->clear();
  }
  clear_has_trackby();
}
inline const ::std::string& TrackPoint::trackby() const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.proto.TrackPoint.trackby)
  return *trackby_;
}
inline void TrackPoint::set_trackby(const ::std::string& value) {
  set_has_trackby();
  if (trackby_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    trackby_ = new ::std::string;
  }
  trackby_->assign(value);
  // @@protoc_insertion_point(field_set:com.zhichenhaixin.proto.TrackPoint.trackby)
}
inline void TrackPoint::set_trackby(const char* value) {
  set_has_trackby();
  if (trackby_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    trackby_ = new ::std::string;
  }
  trackby_->assign(value);
  // @@protoc_insertion_point(field_set_char:com.zhichenhaixin.proto.TrackPoint.trackby)
}
inline void TrackPoint::set_trackby(const char* value, size_t size) {
  set_has_trackby();
  if (trackby_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    trackby_ = new ::std::string;
  }
  trackby_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:com.zhichenhaixin.proto.TrackPoint.trackby)
}
inline ::std::string* TrackPoint::mutable_trackby() {
  set_has_trackby();
  if (trackby_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    trackby_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:com.zhichenhaixin.proto.TrackPoint.trackby)
  return trackby_;
}
inline ::std::string* TrackPoint::release_trackby() {
  clear_has_trackby();
  if (trackby_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = trackby_;
    trackby_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void TrackPoint::set_allocated_trackby(::std::string* trackby) {
  if (trackby_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete trackby_;
  }
  if (trackby) {
    set_has_trackby();
    trackby_ = trackby;
  } else {
    clear_has_trackby();
    trackby_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:com.zhichenhaixin.proto.TrackPoint.trackby)
}

// optional int32 fleetNumber = 27;
inline bool TrackPoint::has_fleetnumber() const {
  return (_has_bits_[0] & 0x04000000u) != 0;
}
inline void TrackPoint::set_has_fleetnumber() {
  _has_bits_[0] |= 0x04000000u;
}
inline void TrackPoint::clear_has_fleetnumber() {
  _has_bits_[0] &= ~0x04000000u;
}
inline void TrackPoint::clear_fleetnumber() {
  fleetnumber_ = 0;
  clear_has_fleetnumber();
}
inline ::google::protobuf::int32 TrackPoint::fleetnumber() const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.proto.TrackPoint.fleetNumber)
  return fleetnumber_;
}
inline void TrackPoint::set_fleetnumber(::google::protobuf::int32 value) {
  set_has_fleetnumber();
  fleetnumber_ = value;
  // @@protoc_insertion_point(field_set:com.zhichenhaixin.proto.TrackPoint.fleetNumber)
}

// optional int32 status = 28;
inline bool TrackPoint::has_status() const {
  return (_has_bits_[0] & 0x08000000u) != 0;
}
inline void TrackPoint::set_has_status() {
  _has_bits_[0] |= 0x08000000u;
}
inline void TrackPoint::clear_has_status() {
  _has_bits_[0] &= ~0x08000000u;
}
inline void TrackPoint::clear_status() {
  status_ = 0;
  clear_has_status();
}
inline ::google::protobuf::int32 TrackPoint::status() const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.proto.TrackPoint.status)
  return status_;
}
inline void TrackPoint::set_status(::google::protobuf::int32 value) {
  set_has_status();
  status_ = value;
  // @@protoc_insertion_point(field_set:com.zhichenhaixin.proto.TrackPoint.status)
}

// optional string lonType = 29;
inline bool TrackPoint::has_lontype() const {
  return (_has_bits_[0] & 0x10000000u) != 0;
}
inline void TrackPoint::set_has_lontype() {
  _has_bits_[0] |= 0x10000000u;
}
inline void TrackPoint::clear_has_lontype() {
  _has_bits_[0] &= ~0x10000000u;
}
inline void TrackPoint::clear_lontype() {
  if (lontype_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    lontype_->clear();
  }
  clear_has_lontype();
}
inline const ::std::string& TrackPoint::lontype() const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.proto.TrackPoint.lonType)
  return *lontype_;
}
inline void TrackPoint::set_lontype(const ::std::string& value) {
  set_has_lontype();
  if (lontype_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    lontype_ = new ::std::string;
  }
  lontype_->assign(value);
  // @@protoc_insertion_point(field_set:com.zhichenhaixin.proto.TrackPoint.lonType)
}
inline void TrackPoint::set_lontype(const char* value) {
  set_has_lontype();
  if (lontype_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    lontype_ = new ::std::string;
  }
  lontype_->assign(value);
  // @@protoc_insertion_point(field_set_char:com.zhichenhaixin.proto.TrackPoint.lonType)
}
inline void TrackPoint::set_lontype(const char* value, size_t size) {
  set_has_lontype();
  if (lontype_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    lontype_ = new ::std::string;
  }
  lontype_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:com.zhichenhaixin.proto.TrackPoint.lonType)
}
inline ::std::string* TrackPoint::mutable_lontype() {
  set_has_lontype();
  if (lontype_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    lontype_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:com.zhichenhaixin.proto.TrackPoint.lonType)
  return lontype_;
}
inline ::std::string* TrackPoint::release_lontype() {
  clear_has_lontype();
  if (lontype_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = lontype_;
    lontype_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void TrackPoint::set_allocated_lontype(::std::string* lontype) {
  if (lontype_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete lontype_;
  }
  if (lontype) {
    set_has_lontype();
    lontype_ = lontype;
  } else {
    clear_has_lontype();
    lontype_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:com.zhichenhaixin.proto.TrackPoint.lonType)
}

// optional string latType = 30;
inline bool TrackPoint::has_lattype() const {
  return (_has_bits_[0] & 0x20000000u) != 0;
}
inline void TrackPoint::set_has_lattype() {
  _has_bits_[0] |= 0x20000000u;
}
inline void TrackPoint::clear_has_lattype() {
  _has_bits_[0] &= ~0x20000000u;
}
inline void TrackPoint::clear_lattype() {
  if (lattype_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    lattype_->clear();
  }
  clear_has_lattype();
}
inline const ::std::string& TrackPoint::lattype() const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.proto.TrackPoint.latType)
  return *lattype_;
}
inline void TrackPoint::set_lattype(const ::std::string& value) {
  set_has_lattype();
  if (lattype_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    lattype_ = new ::std::string;
  }
  lattype_->assign(value);
  // @@protoc_insertion_point(field_set:com.zhichenhaixin.proto.TrackPoint.latType)
}
inline void TrackPoint::set_lattype(const char* value) {
  set_has_lattype();
  if (lattype_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    lattype_ = new ::std::string;
  }
  lattype_->assign(value);
  // @@protoc_insertion_point(field_set_char:com.zhichenhaixin.proto.TrackPoint.latType)
}
inline void TrackPoint::set_lattype(const char* value, size_t size) {
  set_has_lattype();
  if (lattype_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    lattype_ = new ::std::string;
  }
  lattype_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:com.zhichenhaixin.proto.TrackPoint.latType)
}
inline ::std::string* TrackPoint::mutable_lattype() {
  set_has_lattype();
  if (lattype_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    lattype_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:com.zhichenhaixin.proto.TrackPoint.latType)
  return lattype_;
}
inline ::std::string* TrackPoint::release_lattype() {
  clear_has_lattype();
  if (lattype_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = lattype_;
    lattype_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void TrackPoint::set_allocated_lattype(::std::string* lattype) {
  if (lattype_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete lattype_;
  }
  if (lattype) {
    set_has_lattype();
    lattype_ = lattype;
  } else {
    clear_has_lattype();
    lattype_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:com.zhichenhaixin.proto.TrackPoint.latType)
}

// optional int64 warn_utc = 31;
inline bool TrackPoint::has_warn_utc() const {
  return (_has_bits_[0] & 0x40000000u) != 0;
}
inline void TrackPoint::set_has_warn_utc() {
  _has_bits_[0] |= 0x40000000u;
}
inline void TrackPoint::clear_has_warn_utc() {
  _has_bits_[0] &= ~0x40000000u;
}
inline void TrackPoint::clear_warn_utc() {
  warn_utc_ = GOOGLE_LONGLONG(0);
  clear_has_warn_utc();
}
inline ::google::protobuf::int64 TrackPoint::warn_utc() const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.proto.TrackPoint.warn_utc)
  return warn_utc_;
}
inline void TrackPoint::set_warn_utc(::google::protobuf::int64 value) {
  set_has_warn_utc();
  warn_utc_ = value;
  // @@protoc_insertion_point(field_set:com.zhichenhaixin.proto.TrackPoint.warn_utc)
}

// optional int32 warn_status = 32;
inline bool TrackPoint::has_warn_status() const {
  return (_has_bits_[0] & 0x80000000u) != 0;
}
inline void TrackPoint::set_has_warn_status() {
  _has_bits_[0] |= 0x80000000u;
}
inline void TrackPoint::clear_has_warn_status() {
  _has_bits_[0] &= ~0x80000000u;
}
inline void TrackPoint::clear_warn_status() {
  warn_status_ = 0;
  clear_has_warn_status();
}
inline ::google::protobuf::int32 TrackPoint::warn_status() const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.proto.TrackPoint.warn_status)
  return warn_status_;
}
inline void TrackPoint::set_warn_status(::google::protobuf::int32 value) {
  set_has_warn_status();
  warn_status_ = value;
  // @@protoc_insertion_point(field_set:com.zhichenhaixin.proto.TrackPoint.warn_status)
}

// optional string warn_color = 33;
inline bool TrackPoint::has_warn_color() const {
  return (_has_bits_[1] & 0x00000001u) != 0;
}
inline void TrackPoint::set_has_warn_color() {
  _has_bits_[1] |= 0x00000001u;
}
inline void TrackPoint::clear_has_warn_color() {
  _has_bits_[1] &= ~0x00000001u;
}
inline void TrackPoint::clear_warn_color() {
  if (warn_color_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    warn_color_->clear();
  }
  clear_has_warn_color();
}
inline const ::std::string& TrackPoint::warn_color() const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.proto.TrackPoint.warn_color)
  return *warn_color_;
}
inline void TrackPoint::set_warn_color(const ::std::string& value) {
  set_has_warn_color();
  if (warn_color_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    warn_color_ = new ::std::string;
  }
  warn_color_->assign(value);
  // @@protoc_insertion_point(field_set:com.zhichenhaixin.proto.TrackPoint.warn_color)
}
inline void TrackPoint::set_warn_color(const char* value) {
  set_has_warn_color();
  if (warn_color_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    warn_color_ = new ::std::string;
  }
  warn_color_->assign(value);
  // @@protoc_insertion_point(field_set_char:com.zhichenhaixin.proto.TrackPoint.warn_color)
}
inline void TrackPoint::set_warn_color(const char* value, size_t size) {
  set_has_warn_color();
  if (warn_color_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    warn_color_ = new ::std::string;
  }
  warn_color_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:com.zhichenhaixin.proto.TrackPoint.warn_color)
}
inline ::std::string* TrackPoint::mutable_warn_color() {
  set_has_warn_color();
  if (warn_color_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    warn_color_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:com.zhichenhaixin.proto.TrackPoint.warn_color)
  return warn_color_;
}
inline ::std::string* TrackPoint::release_warn_color() {
  clear_has_warn_color();
  if (warn_color_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = warn_color_;
    warn_color_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void TrackPoint::set_allocated_warn_color(::std::string* warn_color) {
  if (warn_color_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete warn_color_;
  }
  if (warn_color) {
    set_has_warn_color();
    warn_color_ = warn_color;
  } else {
    clear_has_warn_color();
    warn_color_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:com.zhichenhaixin.proto.TrackPoint.warn_color)
}

// optional int32 cameraId = 34;
inline bool TrackPoint::has_cameraid() const {
  return (_has_bits_[1] & 0x00000002u) != 0;
}
inline void TrackPoint::set_has_cameraid() {
  _has_bits_[1] |= 0x00000002u;
}
inline void TrackPoint::clear_has_cameraid() {
  _has_bits_[1] &= ~0x00000002u;
}
inline void TrackPoint::clear_cameraid() {
  cameraid_ = 0;
  clear_has_cameraid();
}
inline ::google::protobuf::int32 TrackPoint::cameraid() const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.proto.TrackPoint.cameraId)
  return cameraid_;
}
inline void TrackPoint::set_cameraid(::google::protobuf::int32 value) {
  set_has_cameraid();
  cameraid_ = value;
  // @@protoc_insertion_point(field_set:com.zhichenhaixin.proto.TrackPoint.cameraId)
}

// optional int32 targetType = 35;
inline bool TrackPoint::has_targettype() const {
  return (_has_bits_[1] & 0x00000004u) != 0;
}
inline void TrackPoint::set_has_targettype() {
  _has_bits_[1] |= 0x00000004u;
}
inline void TrackPoint::clear_has_targettype() {
  _has_bits_[1] &= ~0x00000004u;
}
inline void TrackPoint::clear_targettype() {
  targettype_ = 0;
  clear_has_targettype();
}
inline ::google::protobuf::int32 TrackPoint::targettype() const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.proto.TrackPoint.targetType)
  return targettype_;
}
inline void TrackPoint::set_targettype(::google::protobuf::int32 value) {
  set_has_targettype();
  targettype_ = value;
  // @@protoc_insertion_point(field_set:com.zhichenhaixin.proto.TrackPoint.targetType)
}

// optional int32 sign_window = 36;
inline bool TrackPoint::has_sign_window() const {
  return (_has_bits_[1] & 0x00000008u) != 0;
}
inline void TrackPoint::set_has_sign_window() {
  _has_bits_[1] |= 0x00000008u;
}
inline void TrackPoint::clear_has_sign_window() {
  _has_bits_[1] &= ~0x00000008u;
}
inline void TrackPoint::clear_sign_window() {
  sign_window_ = 0;
  clear_has_sign_window();
}
inline ::google::protobuf::int32 TrackPoint::sign_window() const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.proto.TrackPoint.sign_window)
  return sign_window_;
}
inline void TrackPoint::set_sign_window(::google::protobuf::int32 value) {
  set_has_sign_window();
  sign_window_ = value;
  // @@protoc_insertion_point(field_set:com.zhichenhaixin.proto.TrackPoint.sign_window)
}

// optional int32 is_warn = 37;
inline bool TrackPoint::has_is_warn() const {
  return (_has_bits_[1] & 0x00000010u) != 0;
}
inline void TrackPoint::set_has_is_warn() {
  _has_bits_[1] |= 0x00000010u;
}
inline void TrackPoint::clear_has_is_warn() {
  _has_bits_[1] &= ~0x00000010u;
}
inline void TrackPoint::clear_is_warn() {
  is_warn_ = 0;
  clear_has_is_warn();
}
inline ::google::protobuf::int32 TrackPoint::is_warn() const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.proto.TrackPoint.is_warn)
  return is_warn_;
}
inline void TrackPoint::set_is_warn(::google::protobuf::int32 value) {
  set_has_is_warn();
  is_warn_ = value;
  // @@protoc_insertion_point(field_set:com.zhichenhaixin.proto.TrackPoint.is_warn)
}

// optional string rtsp = 38;
inline bool TrackPoint::has_rtsp() const {
  return (_has_bits_[1] & 0x00000020u) != 0;
}
inline void TrackPoint::set_has_rtsp() {
  _has_bits_[1] |= 0x00000020u;
}
inline void TrackPoint::clear_has_rtsp() {
  _has_bits_[1] &= ~0x00000020u;
}
inline void TrackPoint::clear_rtsp() {
  if (rtsp_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    rtsp_->clear();
  }
  clear_has_rtsp();
}
inline const ::std::string& TrackPoint::rtsp() const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.proto.TrackPoint.rtsp)
  return *rtsp_;
}
inline void TrackPoint::set_rtsp(const ::std::string& value) {
  set_has_rtsp();
  if (rtsp_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    rtsp_ = new ::std::string;
  }
  rtsp_->assign(value);
  // @@protoc_insertion_point(field_set:com.zhichenhaixin.proto.TrackPoint.rtsp)
}
inline void TrackPoint::set_rtsp(const char* value) {
  set_has_rtsp();
  if (rtsp_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    rtsp_ = new ::std::string;
  }
  rtsp_->assign(value);
  // @@protoc_insertion_point(field_set_char:com.zhichenhaixin.proto.TrackPoint.rtsp)
}
inline void TrackPoint::set_rtsp(const char* value, size_t size) {
  set_has_rtsp();
  if (rtsp_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    rtsp_ = new ::std::string;
  }
  rtsp_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:com.zhichenhaixin.proto.TrackPoint.rtsp)
}
inline ::std::string* TrackPoint::mutable_rtsp() {
  set_has_rtsp();
  if (rtsp_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    rtsp_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:com.zhichenhaixin.proto.TrackPoint.rtsp)
  return rtsp_;
}
inline ::std::string* TrackPoint::release_rtsp() {
  clear_has_rtsp();
  if (rtsp_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = rtsp_;
    rtsp_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void TrackPoint::set_allocated_rtsp(::std::string* rtsp) {
  if (rtsp_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete rtsp_;
  }
  if (rtsp) {
    set_has_rtsp();
    rtsp_ = rtsp;
  } else {
    clear_has_rtsp();
    rtsp_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:com.zhichenhaixin.proto.TrackPoint.rtsp)
}

// optional int32 fllow = 39;
inline bool TrackPoint::has_fllow() const {
  return (_has_bits_[1] & 0x00000040u) != 0;
}
inline void TrackPoint::set_has_fllow() {
  _has_bits_[1] |= 0x00000040u;
}
inline void TrackPoint::clear_has_fllow() {
  _has_bits_[1] &= ~0x00000040u;
}
inline void TrackPoint::clear_fllow() {
  fllow_ = 0;
  clear_has_fllow();
}
inline ::google::protobuf::int32 TrackPoint::fllow() const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.proto.TrackPoint.fllow)
  return fllow_;
}
inline void TrackPoint::set_fllow(::google::protobuf::int32 value) {
  set_has_fllow();
  fllow_ = value;
  // @@protoc_insertion_point(field_set:com.zhichenhaixin.proto.TrackPoint.fllow)
}

// repeated .com.zhichenhaixin.proto.RadarMeet pointMeet = 40;
inline int TrackPoint::pointmeet_size() const {
  return pointmeet_.size();
}
inline void TrackPoint::clear_pointmeet() {
  pointmeet_.Clear();
}
inline const ::com::zhichenhaixin::proto::RadarMeet& TrackPoint::pointmeet(int index) const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.proto.TrackPoint.pointMeet)
  return pointmeet_.Get(index);
}
inline ::com::zhichenhaixin::proto::RadarMeet* TrackPoint::mutable_pointmeet(int index) {
  // @@protoc_insertion_point(field_mutable:com.zhichenhaixin.proto.TrackPoint.pointMeet)
  return pointmeet_.Mutable(index);
}
inline ::com::zhichenhaixin::proto::RadarMeet* TrackPoint::add_pointmeet() {
  // @@protoc_insertion_point(field_add:com.zhichenhaixin.proto.TrackPoint.pointMeet)
  return pointmeet_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::com::zhichenhaixin::proto::RadarMeet >&
TrackPoint::pointmeet() const {
  // @@protoc_insertion_point(field_list:com.zhichenhaixin.proto.TrackPoint.pointMeet)
  return pointmeet_;
}
inline ::google::protobuf::RepeatedPtrField< ::com::zhichenhaixin::proto::RadarMeet >*
TrackPoint::mutable_pointmeet() {
  // @@protoc_insertion_point(field_mutable_list:com.zhichenhaixin.proto.TrackPoint.pointMeet)
  return &pointmeet_;
}

// optional int32 defenceId = 41;
inline bool TrackPoint::has_defenceid() const {
  return (_has_bits_[1] & 0x00000100u) != 0;
}
inline void TrackPoint::set_has_defenceid() {
  _has_bits_[1] |= 0x00000100u;
}
inline void TrackPoint::clear_has_defenceid() {
  _has_bits_[1] &= ~0x00000100u;
}
inline void TrackPoint::clear_defenceid() {
  defenceid_ = 0;
  clear_has_defenceid();
}
inline ::google::protobuf::int32 TrackPoint::defenceid() const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.proto.TrackPoint.defenceId)
  return defenceid_;
}
inline void TrackPoint::set_defenceid(::google::protobuf::int32 value) {
  set_has_defenceid();
  defenceid_ = value;
  // @@protoc_insertion_point(field_set:com.zhichenhaixin.proto.TrackPoint.defenceId)
}

// optional string defenceName = 42;
inline bool TrackPoint::has_defencename() const {
  return (_has_bits_[1] & 0x00000200u) != 0;
}
inline void TrackPoint::set_has_defencename() {
  _has_bits_[1] |= 0x00000200u;
}
inline void TrackPoint::clear_has_defencename() {
  _has_bits_[1] &= ~0x00000200u;
}
inline void TrackPoint::clear_defencename() {
  if (defencename_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    defencename_->clear();
  }
  clear_has_defencename();
}
inline const ::std::string& TrackPoint::defencename() const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.proto.TrackPoint.defenceName)
  return *defencename_;
}
inline void TrackPoint::set_defencename(const ::std::string& value) {
  set_has_defencename();
  if (defencename_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    defencename_ = new ::std::string;
  }
  defencename_->assign(value);
  // @@protoc_insertion_point(field_set:com.zhichenhaixin.proto.TrackPoint.defenceName)
}
inline void TrackPoint::set_defencename(const char* value) {
  set_has_defencename();
  if (defencename_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    defencename_ = new ::std::string;
  }
  defencename_->assign(value);
  // @@protoc_insertion_point(field_set_char:com.zhichenhaixin.proto.TrackPoint.defenceName)
}
inline void TrackPoint::set_defencename(const char* value, size_t size) {
  set_has_defencename();
  if (defencename_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    defencename_ = new ::std::string;
  }
  defencename_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:com.zhichenhaixin.proto.TrackPoint.defenceName)
}
inline ::std::string* TrackPoint::mutable_defencename() {
  set_has_defencename();
  if (defencename_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    defencename_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:com.zhichenhaixin.proto.TrackPoint.defenceName)
  return defencename_;
}
inline ::std::string* TrackPoint::release_defencename() {
  clear_has_defencename();
  if (defencename_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = defencename_;
    defencename_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void TrackPoint::set_allocated_defencename(::std::string* defencename) {
  if (defencename_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete defencename_;
  }
  if (defencename) {
    set_has_defencename();
    defencename_ = defencename;
  } else {
    clear_has_defencename();
    defencename_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:com.zhichenhaixin.proto.TrackPoint.defenceName)
}

// -------------------------------------------------------------------

// FllowVo

// required bool flag = 1;
inline bool FllowVo::has_flag() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FllowVo::set_has_flag() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FllowVo::clear_has_flag() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FllowVo::clear_flag() {
  flag_ = false;
  clear_has_flag();
}
inline bool FllowVo::flag() const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.proto.FllowVo.flag)
  return flag_;
}
inline void FllowVo::set_flag(bool value) {
  set_has_flag();
  flag_ = value;
  // @@protoc_insertion_point(field_set:com.zhichenhaixin.proto.FllowVo.flag)
}

// required bool fllow = 2;
inline bool FllowVo::has_fllow() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void FllowVo::set_has_fllow() {
  _has_bits_[0] |= 0x00000002u;
}
inline void FllowVo::clear_has_fllow() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void FllowVo::clear_fllow() {
  fllow_ = false;
  clear_has_fllow();
}
inline bool FllowVo::fllow() const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.proto.FllowVo.fllow)
  return fllow_;
}
inline void FllowVo::set_fllow(bool value) {
  set_has_fllow();
  fllow_ = value;
  // @@protoc_insertion_point(field_set:com.zhichenhaixin.proto.FllowVo.fllow)
}

// repeated .com.zhichenhaixin.proto.TrackPoint trackPoints = 3;
inline int FllowVo::trackpoints_size() const {
  return trackpoints_.size();
}
inline void FllowVo::clear_trackpoints() {
  trackpoints_.Clear();
}
inline const ::com::zhichenhaixin::proto::TrackPoint& FllowVo::trackpoints(int index) const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.proto.FllowVo.trackPoints)
  return trackpoints_.Get(index);
}
inline ::com::zhichenhaixin::proto::TrackPoint* FllowVo::mutable_trackpoints(int index) {
  // @@protoc_insertion_point(field_mutable:com.zhichenhaixin.proto.FllowVo.trackPoints)
  return trackpoints_.Mutable(index);
}
inline ::com::zhichenhaixin::proto::TrackPoint* FllowVo::add_trackpoints() {
  // @@protoc_insertion_point(field_add:com.zhichenhaixin.proto.FllowVo.trackPoints)
  return trackpoints_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::com::zhichenhaixin::proto::TrackPoint >&
FllowVo::trackpoints() const {
  // @@protoc_insertion_point(field_list:com.zhichenhaixin.proto.FllowVo.trackPoints)
  return trackpoints_;
}
inline ::google::protobuf::RepeatedPtrField< ::com::zhichenhaixin::proto::TrackPoint >*
FllowVo::mutable_trackpoints() {
  // @@protoc_insertion_point(field_mutable_list:com.zhichenhaixin.proto.FllowVo.trackPoints)
  return &trackpoints_;
}

// required int32 mode = 4;
inline bool FllowVo::has_mode() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void FllowVo::set_has_mode() {
  _has_bits_[0] |= 0x00000008u;
}
inline void FllowVo::clear_has_mode() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void FllowVo::clear_mode() {
  mode_ = 0;
  clear_has_mode();
}
inline ::google::protobuf::int32 FllowVo::mode() const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.proto.FllowVo.mode)
  return mode_;
}
inline void FllowVo::set_mode(::google::protobuf::int32 value) {
  set_has_mode();
  mode_ = value;
  // @@protoc_insertion_point(field_set:com.zhichenhaixin.proto.FllowVo.mode)
}

// -------------------------------------------------------------------

// RadarSurfaceTrack

// required int32 flag = 1;
inline bool RadarSurfaceTrack::has_flag() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RadarSurfaceTrack::set_has_flag() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RadarSurfaceTrack::clear_has_flag() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RadarSurfaceTrack::clear_flag() {
  flag_ = 0;
  clear_has_flag();
}
inline ::google::protobuf::int32 RadarSurfaceTrack::flag() const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.proto.RadarSurfaceTrack.flag)
  return flag_;
}
inline void RadarSurfaceTrack::set_flag(::google::protobuf::int32 value) {
  set_has_flag();
  flag_ = value;
  // @@protoc_insertion_point(field_set:com.zhichenhaixin.proto.RadarSurfaceTrack.flag)
}

// required string sourceId = 2;
inline bool RadarSurfaceTrack::has_sourceid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RadarSurfaceTrack::set_has_sourceid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RadarSurfaceTrack::clear_has_sourceid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RadarSurfaceTrack::clear_sourceid() {
  if (sourceid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sourceid_->clear();
  }
  clear_has_sourceid();
}
inline const ::std::string& RadarSurfaceTrack::sourceid() const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.proto.RadarSurfaceTrack.sourceId)
  return *sourceid_;
}
inline void RadarSurfaceTrack::set_sourceid(const ::std::string& value) {
  set_has_sourceid();
  if (sourceid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sourceid_ = new ::std::string;
  }
  sourceid_->assign(value);
  // @@protoc_insertion_point(field_set:com.zhichenhaixin.proto.RadarSurfaceTrack.sourceId)
}
inline void RadarSurfaceTrack::set_sourceid(const char* value) {
  set_has_sourceid();
  if (sourceid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sourceid_ = new ::std::string;
  }
  sourceid_->assign(value);
  // @@protoc_insertion_point(field_set_char:com.zhichenhaixin.proto.RadarSurfaceTrack.sourceId)
}
inline void RadarSurfaceTrack::set_sourceid(const char* value, size_t size) {
  set_has_sourceid();
  if (sourceid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sourceid_ = new ::std::string;
  }
  sourceid_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:com.zhichenhaixin.proto.RadarSurfaceTrack.sourceId)
}
inline ::std::string* RadarSurfaceTrack::mutable_sourceid() {
  set_has_sourceid();
  if (sourceid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sourceid_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:com.zhichenhaixin.proto.RadarSurfaceTrack.sourceId)
  return sourceid_;
}
inline ::std::string* RadarSurfaceTrack::release_sourceid() {
  clear_has_sourceid();
  if (sourceid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = sourceid_;
    sourceid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void RadarSurfaceTrack::set_allocated_sourceid(::std::string* sourceid) {
  if (sourceid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete sourceid_;
  }
  if (sourceid) {
    set_has_sourceid();
    sourceid_ = sourceid;
  } else {
    clear_has_sourceid();
    sourceid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:com.zhichenhaixin.proto.RadarSurfaceTrack.sourceId)
}

// required uint64 UTC = 3;
inline bool RadarSurfaceTrack::has_utc() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void RadarSurfaceTrack::set_has_utc() {
  _has_bits_[0] |= 0x00000004u;
}
inline void RadarSurfaceTrack::clear_has_utc() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void RadarSurfaceTrack::clear_utc() {
  utc_ = GOOGLE_ULONGLONG(0);
  clear_has_utc();
}
inline ::google::protobuf::uint64 RadarSurfaceTrack::utc() const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.proto.RadarSurfaceTrack.UTC)
  return utc_;
}
inline void RadarSurfaceTrack::set_utc(::google::protobuf::uint64 value) {
  set_has_utc();
  utc_ = value;
  // @@protoc_insertion_point(field_set:com.zhichenhaixin.proto.RadarSurfaceTrack.UTC)
}

// required int32 length = 4;
inline bool RadarSurfaceTrack::has_length() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void RadarSurfaceTrack::set_has_length() {
  _has_bits_[0] |= 0x00000008u;
}
inline void RadarSurfaceTrack::clear_has_length() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void RadarSurfaceTrack::clear_length() {
  length_ = 0;
  clear_has_length();
}
inline ::google::protobuf::int32 RadarSurfaceTrack::length() const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.proto.RadarSurfaceTrack.length)
  return length_;
}
inline void RadarSurfaceTrack::set_length(::google::protobuf::int32 value) {
  set_has_length();
  length_ = value;
  // @@protoc_insertion_point(field_set:com.zhichenhaixin.proto.RadarSurfaceTrack.length)
}

// repeated .com.zhichenhaixin.proto.TrackPoint trackPoints = 5;
inline int RadarSurfaceTrack::trackpoints_size() const {
  return trackpoints_.size();
}
inline void RadarSurfaceTrack::clear_trackpoints() {
  trackpoints_.Clear();
}
inline const ::com::zhichenhaixin::proto::TrackPoint& RadarSurfaceTrack::trackpoints(int index) const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.proto.RadarSurfaceTrack.trackPoints)
  return trackpoints_.Get(index);
}
inline ::com::zhichenhaixin::proto::TrackPoint* RadarSurfaceTrack::mutable_trackpoints(int index) {
  // @@protoc_insertion_point(field_mutable:com.zhichenhaixin.proto.RadarSurfaceTrack.trackPoints)
  return trackpoints_.Mutable(index);
}
inline ::com::zhichenhaixin::proto::TrackPoint* RadarSurfaceTrack::add_trackpoints() {
  // @@protoc_insertion_point(field_add:com.zhichenhaixin.proto.RadarSurfaceTrack.trackPoints)
  return trackpoints_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::com::zhichenhaixin::proto::TrackPoint >&
RadarSurfaceTrack::trackpoints() const {
  // @@protoc_insertion_point(field_list:com.zhichenhaixin.proto.RadarSurfaceTrack.trackPoints)
  return trackpoints_;
}
inline ::google::protobuf::RepeatedPtrField< ::com::zhichenhaixin::proto::TrackPoint >*
RadarSurfaceTrack::mutable_trackpoints() {
  // @@protoc_insertion_point(field_mutable_list:com.zhichenhaixin.proto.RadarSurfaceTrack.trackPoints)
  return &trackpoints_;
}

// -------------------------------------------------------------------

// VideoFrame

// required int32 systemAreaCode = 1;
inline bool VideoFrame::has_systemareacode() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void VideoFrame::set_has_systemareacode() {
  _has_bits_[0] |= 0x00000001u;
}
inline void VideoFrame::clear_has_systemareacode() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void VideoFrame::clear_systemareacode() {
  systemareacode_ = 0;
  clear_has_systemareacode();
}
inline ::google::protobuf::int32 VideoFrame::systemareacode() const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.proto.VideoFrame.systemAreaCode)
  return systemareacode_;
}
inline void VideoFrame::set_systemareacode(::google::protobuf::int32 value) {
  set_has_systemareacode();
  systemareacode_ = value;
  // @@protoc_insertion_point(field_set:com.zhichenhaixin.proto.VideoFrame.systemAreaCode)
}

// required int32 systemIdentificationCode = 2;
inline bool VideoFrame::has_systemidentificationcode() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void VideoFrame::set_has_systemidentificationcode() {
  _has_bits_[0] |= 0x00000002u;
}
inline void VideoFrame::clear_has_systemidentificationcode() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void VideoFrame::clear_systemidentificationcode() {
  systemidentificationcode_ = 0;
  clear_has_systemidentificationcode();
}
inline ::google::protobuf::int32 VideoFrame::systemidentificationcode() const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.proto.VideoFrame.systemIdentificationCode)
  return systemidentificationcode_;
}
inline void VideoFrame::set_systemidentificationcode(::google::protobuf::int32 value) {
  set_has_systemidentificationcode();
  systemidentificationcode_ = value;
  // @@protoc_insertion_point(field_set:com.zhichenhaixin.proto.VideoFrame.systemIdentificationCode)
}

// required int32 msgIndex = 3;
inline bool VideoFrame::has_msgindex() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void VideoFrame::set_has_msgindex() {
  _has_bits_[0] |= 0x00000004u;
}
inline void VideoFrame::clear_has_msgindex() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void VideoFrame::clear_msgindex() {
  msgindex_ = 0;
  clear_has_msgindex();
}
inline ::google::protobuf::int32 VideoFrame::msgindex() const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.proto.VideoFrame.msgIndex)
  return msgindex_;
}
inline void VideoFrame::set_msgindex(::google::protobuf::int32 value) {
  set_has_msgindex();
  msgindex_ = value;
  // @@protoc_insertion_point(field_set:com.zhichenhaixin.proto.VideoFrame.msgIndex)
}

// required uint32 azimuth = 4;
inline bool VideoFrame::has_azimuth() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void VideoFrame::set_has_azimuth() {
  _has_bits_[0] |= 0x00000008u;
}
inline void VideoFrame::clear_has_azimuth() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void VideoFrame::clear_azimuth() {
  azimuth_ = 0u;
  clear_has_azimuth();
}
inline ::google::protobuf::uint32 VideoFrame::azimuth() const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.proto.VideoFrame.azimuth)
  return azimuth_;
}
inline void VideoFrame::set_azimuth(::google::protobuf::uint32 value) {
  set_has_azimuth();
  azimuth_ = value;
  // @@protoc_insertion_point(field_set:com.zhichenhaixin.proto.VideoFrame.azimuth)
}

// optional uint32 heading = 5;
inline bool VideoFrame::has_heading() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void VideoFrame::set_has_heading() {
  _has_bits_[0] |= 0x00000010u;
}
inline void VideoFrame::clear_has_heading() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void VideoFrame::clear_heading() {
  heading_ = 0u;
  clear_has_heading();
}
inline ::google::protobuf::uint32 VideoFrame::heading() const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.proto.VideoFrame.heading)
  return heading_;
}
inline void VideoFrame::set_heading(::google::protobuf::uint32 value) {
  set_has_heading();
  heading_ = value;
  // @@protoc_insertion_point(field_set:com.zhichenhaixin.proto.VideoFrame.heading)
}

// required double startRange = 6;
inline bool VideoFrame::has_startrange() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void VideoFrame::set_has_startrange() {
  _has_bits_[0] |= 0x00000020u;
}
inline void VideoFrame::clear_has_startrange() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void VideoFrame::clear_startrange() {
  startrange_ = 0;
  clear_has_startrange();
}
inline double VideoFrame::startrange() const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.proto.VideoFrame.startRange)
  return startrange_;
}
inline void VideoFrame::set_startrange(double value) {
  set_has_startrange();
  startrange_ = value;
  // @@protoc_insertion_point(field_set:com.zhichenhaixin.proto.VideoFrame.startRange)
}

// required double rangeFactor = 7;
inline bool VideoFrame::has_rangefactor() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void VideoFrame::set_has_rangefactor() {
  _has_bits_[0] |= 0x00000040u;
}
inline void VideoFrame::clear_has_rangefactor() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void VideoFrame::clear_rangefactor() {
  rangefactor_ = 0;
  clear_has_rangefactor();
}
inline double VideoFrame::rangefactor() const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.proto.VideoFrame.rangeFactor)
  return rangefactor_;
}
inline void VideoFrame::set_rangefactor(double value) {
  set_has_rangefactor();
  rangefactor_ = value;
  // @@protoc_insertion_point(field_set:com.zhichenhaixin.proto.VideoFrame.rangeFactor)
}

// required .com.zhichenhaixin.proto.RES bitResolution = 8;
inline bool VideoFrame::has_bitresolution() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void VideoFrame::set_has_bitresolution() {
  _has_bits_[0] |= 0x00000080u;
}
inline void VideoFrame::clear_has_bitresolution() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void VideoFrame::clear_bitresolution() {
  bitresolution_ = 1;
  clear_has_bitresolution();
}
inline ::com::zhichenhaixin::proto::RES VideoFrame::bitresolution() const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.proto.VideoFrame.bitResolution)
  return static_cast< ::com::zhichenhaixin::proto::RES >(bitresolution_);
}
inline void VideoFrame::set_bitresolution(::com::zhichenhaixin::proto::RES value) {
  assert(::com::zhichenhaixin::proto::RES_IsValid(value));
  set_has_bitresolution();
  bitresolution_ = value;
  // @@protoc_insertion_point(field_set:com.zhichenhaixin.proto.VideoFrame.bitResolution)
}

// required int32 timeOfDay = 9;
inline bool VideoFrame::has_timeofday() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void VideoFrame::set_has_timeofday() {
  _has_bits_[0] |= 0x00000100u;
}
inline void VideoFrame::clear_has_timeofday() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void VideoFrame::clear_timeofday() {
  timeofday_ = 0;
  clear_has_timeofday();
}
inline ::google::protobuf::int32 VideoFrame::timeofday() const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.proto.VideoFrame.timeOfDay)
  return timeofday_;
}
inline void VideoFrame::set_timeofday(::google::protobuf::int32 value) {
  set_has_timeofday();
  timeofday_ = value;
  // @@protoc_insertion_point(field_set:com.zhichenhaixin.proto.VideoFrame.timeOfDay)
}

// repeated int32 amplitude = 10;
inline int VideoFrame::amplitude_size() const {
  return amplitude_.size();
}
inline void VideoFrame::clear_amplitude() {
  amplitude_.Clear();
}
inline ::google::protobuf::int32 VideoFrame::amplitude(int index) const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.proto.VideoFrame.amplitude)
  return amplitude_.Get(index);
}
inline void VideoFrame::set_amplitude(int index, ::google::protobuf::int32 value) {
  amplitude_.Set(index, value);
  // @@protoc_insertion_point(field_set:com.zhichenhaixin.proto.VideoFrame.amplitude)
}
inline void VideoFrame::add_amplitude(::google::protobuf::int32 value) {
  amplitude_.Add(value);
  // @@protoc_insertion_point(field_add:com.zhichenhaixin.proto.VideoFrame.amplitude)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
VideoFrame::amplitude() const {
  // @@protoc_insertion_point(field_list:com.zhichenhaixin.proto.VideoFrame.amplitude)
  return amplitude_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
VideoFrame::mutable_amplitude() {
  // @@protoc_insertion_point(field_mutable_list:com.zhichenhaixin.proto.VideoFrame.amplitude)
  return &amplitude_;
}

// -------------------------------------------------------------------

// LineSpectrum

// required double azimuth = 1;
inline bool LineSpectrum::has_azimuth() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void LineSpectrum::set_has_azimuth() {
  _has_bits_[0] |= 0x00000001u;
}
inline void LineSpectrum::clear_has_azimuth() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void LineSpectrum::clear_azimuth() {
  azimuth_ = 0;
  clear_has_azimuth();
}
inline double LineSpectrum::azimuth() const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.proto.LineSpectrum.azimuth)
  return azimuth_;
}
inline void LineSpectrum::set_azimuth(double value) {
  set_has_azimuth();
  azimuth_ = value;
  // @@protoc_insertion_point(field_set:com.zhichenhaixin.proto.LineSpectrum.azimuth)
}

// repeated int32 amplitude = 2;
inline int LineSpectrum::amplitude_size() const {
  return amplitude_.size();
}
inline void LineSpectrum::clear_amplitude() {
  amplitude_.Clear();
}
inline ::google::protobuf::int32 LineSpectrum::amplitude(int index) const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.proto.LineSpectrum.amplitude)
  return amplitude_.Get(index);
}
inline void LineSpectrum::set_amplitude(int index, ::google::protobuf::int32 value) {
  amplitude_.Set(index, value);
  // @@protoc_insertion_point(field_set:com.zhichenhaixin.proto.LineSpectrum.amplitude)
}
inline void LineSpectrum::add_amplitude(::google::protobuf::int32 value) {
  amplitude_.Add(value);
  // @@protoc_insertion_point(field_add:com.zhichenhaixin.proto.LineSpectrum.amplitude)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
LineSpectrum::amplitude() const {
  // @@protoc_insertion_point(field_list:com.zhichenhaixin.proto.LineSpectrum.amplitude)
  return amplitude_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
LineSpectrum::mutable_amplitude() {
  // @@protoc_insertion_point(field_mutable_list:com.zhichenhaixin.proto.LineSpectrum.amplitude)
  return &amplitude_;
}

// -------------------------------------------------------------------

// SectorSpectrum

// required int32 sectorIndex = 1;
inline bool SectorSpectrum::has_sectorindex() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SectorSpectrum::set_has_sectorindex() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SectorSpectrum::clear_has_sectorindex() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SectorSpectrum::clear_sectorindex() {
  sectorindex_ = 0;
  clear_has_sectorindex();
}
inline ::google::protobuf::int32 SectorSpectrum::sectorindex() const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.proto.SectorSpectrum.sectorIndex)
  return sectorindex_;
}
inline void SectorSpectrum::set_sectorindex(::google::protobuf::int32 value) {
  set_has_sectorindex();
  sectorindex_ = value;
  // @@protoc_insertion_point(field_set:com.zhichenhaixin.proto.SectorSpectrum.sectorIndex)
}

// repeated .com.zhichenhaixin.proto.LineSpectrum lineSpectrums = 2;
inline int SectorSpectrum::linespectrums_size() const {
  return linespectrums_.size();
}
inline void SectorSpectrum::clear_linespectrums() {
  linespectrums_.Clear();
}
inline const ::com::zhichenhaixin::proto::LineSpectrum& SectorSpectrum::linespectrums(int index) const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.proto.SectorSpectrum.lineSpectrums)
  return linespectrums_.Get(index);
}
inline ::com::zhichenhaixin::proto::LineSpectrum* SectorSpectrum::mutable_linespectrums(int index) {
  // @@protoc_insertion_point(field_mutable:com.zhichenhaixin.proto.SectorSpectrum.lineSpectrums)
  return linespectrums_.Mutable(index);
}
inline ::com::zhichenhaixin::proto::LineSpectrum* SectorSpectrum::add_linespectrums() {
  // @@protoc_insertion_point(field_add:com.zhichenhaixin.proto.SectorSpectrum.lineSpectrums)
  return linespectrums_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::com::zhichenhaixin::proto::LineSpectrum >&
SectorSpectrum::linespectrums() const {
  // @@protoc_insertion_point(field_list:com.zhichenhaixin.proto.SectorSpectrum.lineSpectrums)
  return linespectrums_;
}
inline ::google::protobuf::RepeatedPtrField< ::com::zhichenhaixin::proto::LineSpectrum >*
SectorSpectrum::mutable_linespectrums() {
  // @@protoc_insertion_point(field_mutable_list:com.zhichenhaixin.proto.SectorSpectrum.lineSpectrums)
  return &linespectrums_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace zhichenhaixin
}  // namespace com

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::com::zhichenhaixin::proto::MSGTYP> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::com::zhichenhaixin::proto::MSGTYP>() {
  return ::com::zhichenhaixin::proto::MSGTYP_descriptor();
}
template <> struct is_proto_enum< ::com::zhichenhaixin::proto::CNF> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::com::zhichenhaixin::proto::CNF>() {
  return ::com::zhichenhaixin::proto::CNF_descriptor();
}
template <> struct is_proto_enum< ::com::zhichenhaixin::proto::CST> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::com::zhichenhaixin::proto::CST>() {
  return ::com::zhichenhaixin::proto::CST_descriptor();
}
template <> struct is_proto_enum< ::com::zhichenhaixin::proto::STH> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::com::zhichenhaixin::proto::STH>() {
  return ::com::zhichenhaixin::proto::STH_descriptor();
}
template <> struct is_proto_enum< ::com::zhichenhaixin::proto::RES> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::com::zhichenhaixin::proto::RES>() {
  return ::com::zhichenhaixin::proto::RES_descriptor();
}

}  // namespace google
}  // namespace protobuf

typedef com::zhichenhaixin::proto::VideoFrame  ITF_VideoFrame;
typedef QList<ITF_VideoFrame>                  ITF_VideoFrameList;

#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_ZCHXRadar_2eproto__INCLUDED
