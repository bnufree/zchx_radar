// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ZCHXRadarVideo.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "ZCHXRadarVideo.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace com {
namespace zhichenhaixin {
namespace proto {

namespace {

const ::google::protobuf::Descriptor* RadarVideo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RadarVideo_reflection_ = NULL;
const ::google::protobuf::Descriptor* RadarVideoPoint_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RadarVideoPoint_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_ZCHXRadarVideo_2eproto() {
  protobuf_AddDesc_ZCHXRadarVideo_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "ZCHXRadarVideo.proto");
  GOOGLE_CHECK(file != NULL);
  RadarVideo_descriptor_ = file->message_type(0);
  static const int RadarVideo_offsets_[13] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RadarVideo, radarid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RadarVideo, radarname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RadarVideo, latitude_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RadarVideo, longitude_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RadarVideo, utc_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RadarVideo, imagedata_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RadarVideo, curimagedata_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RadarVideo, preimagedata_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RadarVideo, width_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RadarVideo, height_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RadarVideo, radius_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RadarVideo, curindex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RadarVideo, loopnum_),
  };
  RadarVideo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RadarVideo_descriptor_,
      RadarVideo::default_instance_,
      RadarVideo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RadarVideo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RadarVideo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RadarVideo));
  RadarVideoPoint_descriptor_ = file->message_type(1);
  static const int RadarVideoPoint_offsets_[11] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RadarVideoPoint, radarname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RadarVideoPoint, latitude_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RadarVideoPoint, longitude_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RadarVideoPoint, utc_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RadarVideoPoint, imagedata_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RadarVideoPoint, preimagedata_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RadarVideoPoint, width_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RadarVideoPoint, height_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RadarVideoPoint, radius_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RadarVideoPoint, curindex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RadarVideoPoint, loopnum_),
  };
  RadarVideoPoint_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RadarVideoPoint_descriptor_,
      RadarVideoPoint::default_instance_,
      RadarVideoPoint_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RadarVideoPoint, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RadarVideoPoint, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RadarVideoPoint));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_ZCHXRadarVideo_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RadarVideo_descriptor_, &RadarVideo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RadarVideoPoint_descriptor_, &RadarVideoPoint::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_ZCHXRadarVideo_2eproto() {
  delete RadarVideo::default_instance_;
  delete RadarVideo_reflection_;
  delete RadarVideoPoint::default_instance_;
  delete RadarVideoPoint_reflection_;
}

void protobuf_AddDesc_ZCHXRadarVideo_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\024ZCHXRadarVideo.proto\022\027com.zhichenhaixi"
    "n.proto\"\363\001\n\nRadarVideo\022\017\n\007radarId\030\001 \002(\004\022"
    "\021\n\tradarName\030\002 \002(\t\022\020\n\010latitude\030\003 \002(\001\022\021\n\t"
    "longitude\030\004 \002(\001\022\013\n\003UTC\030\005 \002(\004\022\021\n\timageDat"
    "a\030\006 \002(\014\022\024\n\014curImageData\030\007 \002(\014\022\024\n\014preImag"
    "eData\030\010 \002(\014\022\r\n\005width\030\t \002(\r\022\016\n\006height\030\n \002"
    "(\r\022\016\n\006radius\030\013 \002(\001\022\020\n\010curIndex\030\014 \002(\r\022\017\n\007"
    "loopNum\030\r \002(\r\"\321\001\n\017RadarVideoPoint\022\021\n\trad"
    "arName\030\002 \002(\t\022\020\n\010latitude\030\003 \002(\001\022\021\n\tlongit"
    "ude\030\004 \002(\001\022\013\n\003UTC\030\005 \002(\004\022\021\n\timageData\030\006 \002("
    "\014\022\024\n\014preImageData\030\007 \002(\014\022\r\n\005width\030\010 \002(\r\022\016"
    "\n\006height\030\t \002(\r\022\016\n\006radius\030\n \002(\001\022\020\n\010curInd"
    "ex\030\013 \002(\r\022\017\n\007loopNum\030\014 \002(\r", 505);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "ZCHXRadarVideo.proto", &protobuf_RegisterTypes);
  RadarVideo::default_instance_ = new RadarVideo();
  RadarVideoPoint::default_instance_ = new RadarVideoPoint();
  RadarVideo::default_instance_->InitAsDefaultInstance();
  RadarVideoPoint::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_ZCHXRadarVideo_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_ZCHXRadarVideo_2eproto {
  StaticDescriptorInitializer_ZCHXRadarVideo_2eproto() {
    protobuf_AddDesc_ZCHXRadarVideo_2eproto();
  }
} static_descriptor_initializer_ZCHXRadarVideo_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int RadarVideo::kRadarIdFieldNumber;
const int RadarVideo::kRadarNameFieldNumber;
const int RadarVideo::kLatitudeFieldNumber;
const int RadarVideo::kLongitudeFieldNumber;
const int RadarVideo::kUTCFieldNumber;
const int RadarVideo::kImageDataFieldNumber;
const int RadarVideo::kCurImageDataFieldNumber;
const int RadarVideo::kPreImageDataFieldNumber;
const int RadarVideo::kWidthFieldNumber;
const int RadarVideo::kHeightFieldNumber;
const int RadarVideo::kRadiusFieldNumber;
const int RadarVideo::kCurIndexFieldNumber;
const int RadarVideo::kLoopNumFieldNumber;
#endif  // !_MSC_VER

RadarVideo::RadarVideo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.zhichenhaixin.proto.RadarVideo)
}

void RadarVideo::InitAsDefaultInstance() {
}

RadarVideo::RadarVideo(const RadarVideo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:com.zhichenhaixin.proto.RadarVideo)
}

void RadarVideo::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  radarid_ = GOOGLE_ULONGLONG(0);
  radarname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  latitude_ = 0;
  longitude_ = 0;
  utc_ = GOOGLE_ULONGLONG(0);
  imagedata_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  curimagedata_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  preimagedata_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  width_ = 0u;
  height_ = 0u;
  radius_ = 0;
  curindex_ = 0u;
  loopnum_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RadarVideo::~RadarVideo() {
  // @@protoc_insertion_point(destructor:com.zhichenhaixin.proto.RadarVideo)
  SharedDtor();
}

void RadarVideo::SharedDtor() {
  if (radarname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete radarname_;
  }
  if (imagedata_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete imagedata_;
  }
  if (curimagedata_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete curimagedata_;
  }
  if (preimagedata_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete preimagedata_;
  }
  if (this != default_instance_) {
  }
}

void RadarVideo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RadarVideo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RadarVideo_descriptor_;
}

const RadarVideo& RadarVideo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ZCHXRadarVideo_2eproto();
  return *default_instance_;
}

RadarVideo* RadarVideo::default_instance_ = NULL;

RadarVideo* RadarVideo::New() const {
  return new RadarVideo;
}

void RadarVideo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<RadarVideo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(latitude_, utc_);
    radarid_ = GOOGLE_ULONGLONG(0);
    if (has_radarname()) {
      if (radarname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        radarname_->clear();
      }
    }
    if (has_imagedata()) {
      if (imagedata_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        imagedata_->clear();
      }
    }
    if (has_curimagedata()) {
      if (curimagedata_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        curimagedata_->clear();
      }
    }
    if (has_preimagedata()) {
      if (preimagedata_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        preimagedata_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & 7936) {
    ZR_(width_, loopnum_);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RadarVideo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.zhichenhaixin.proto.RadarVideo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 radarId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &radarid_)));
          set_has_radarid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_radarName;
        break;
      }

      // required string radarName = 2;
      case 2: {
        if (tag == 18) {
         parse_radarName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_radarname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->radarname().data(), this->radarname().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "radarname");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(25)) goto parse_latitude;
        break;
      }

      // required double latitude = 3;
      case 3: {
        if (tag == 25) {
         parse_latitude:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &latitude_)));
          set_has_latitude();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(33)) goto parse_longitude;
        break;
      }

      // required double longitude = 4;
      case 4: {
        if (tag == 33) {
         parse_longitude:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &longitude_)));
          set_has_longitude();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_UTC;
        break;
      }

      // required uint64 UTC = 5;
      case 5: {
        if (tag == 40) {
         parse_UTC:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &utc_)));
          set_has_utc();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_imageData;
        break;
      }

      // required bytes imageData = 6;
      case 6: {
        if (tag == 50) {
         parse_imageData:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_imagedata()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_curImageData;
        break;
      }

      // required bytes curImageData = 7;
      case 7: {
        if (tag == 58) {
         parse_curImageData:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_curimagedata()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_preImageData;
        break;
      }

      // required bytes preImageData = 8;
      case 8: {
        if (tag == 66) {
         parse_preImageData:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_preimagedata()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_width;
        break;
      }

      // required uint32 width = 9;
      case 9: {
        if (tag == 72) {
         parse_width:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &width_)));
          set_has_width();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_height;
        break;
      }

      // required uint32 height = 10;
      case 10: {
        if (tag == 80) {
         parse_height:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &height_)));
          set_has_height();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(89)) goto parse_radius;
        break;
      }

      // required double radius = 11;
      case 11: {
        if (tag == 89) {
         parse_radius:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &radius_)));
          set_has_radius();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(96)) goto parse_curIndex;
        break;
      }

      // required uint32 curIndex = 12;
      case 12: {
        if (tag == 96) {
         parse_curIndex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &curindex_)));
          set_has_curindex();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(104)) goto parse_loopNum;
        break;
      }

      // required uint32 loopNum = 13;
      case 13: {
        if (tag == 104) {
         parse_loopNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &loopnum_)));
          set_has_loopnum();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.zhichenhaixin.proto.RadarVideo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.zhichenhaixin.proto.RadarVideo)
  return false;
#undef DO_
}

void RadarVideo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.zhichenhaixin.proto.RadarVideo)
  // required uint64 radarId = 1;
  if (has_radarid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->radarid(), output);
  }

  // required string radarName = 2;
  if (has_radarname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->radarname().data(), this->radarname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "radarname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->radarname(), output);
  }

  // required double latitude = 3;
  if (has_latitude()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->latitude(), output);
  }

  // required double longitude = 4;
  if (has_longitude()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->longitude(), output);
  }

  // required uint64 UTC = 5;
  if (has_utc()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->utc(), output);
  }

  // required bytes imageData = 6;
  if (has_imagedata()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      6, this->imagedata(), output);
  }

  // required bytes curImageData = 7;
  if (has_curimagedata()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      7, this->curimagedata(), output);
  }

  // required bytes preImageData = 8;
  if (has_preimagedata()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      8, this->preimagedata(), output);
  }

  // required uint32 width = 9;
  if (has_width()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->width(), output);
  }

  // required uint32 height = 10;
  if (has_height()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->height(), output);
  }

  // required double radius = 11;
  if (has_radius()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(11, this->radius(), output);
  }

  // required uint32 curIndex = 12;
  if (has_curindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->curindex(), output);
  }

  // required uint32 loopNum = 13;
  if (has_loopnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(13, this->loopnum(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.zhichenhaixin.proto.RadarVideo)
}

::google::protobuf::uint8* RadarVideo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.zhichenhaixin.proto.RadarVideo)
  // required uint64 radarId = 1;
  if (has_radarid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->radarid(), target);
  }

  // required string radarName = 2;
  if (has_radarname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->radarname().data(), this->radarname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "radarname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->radarname(), target);
  }

  // required double latitude = 3;
  if (has_latitude()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->latitude(), target);
  }

  // required double longitude = 4;
  if (has_longitude()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->longitude(), target);
  }

  // required uint64 UTC = 5;
  if (has_utc()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->utc(), target);
  }

  // required bytes imageData = 6;
  if (has_imagedata()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        6, this->imagedata(), target);
  }

  // required bytes curImageData = 7;
  if (has_curimagedata()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        7, this->curimagedata(), target);
  }

  // required bytes preImageData = 8;
  if (has_preimagedata()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        8, this->preimagedata(), target);
  }

  // required uint32 width = 9;
  if (has_width()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->width(), target);
  }

  // required uint32 height = 10;
  if (has_height()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->height(), target);
  }

  // required double radius = 11;
  if (has_radius()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(11, this->radius(), target);
  }

  // required uint32 curIndex = 12;
  if (has_curindex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(12, this->curindex(), target);
  }

  // required uint32 loopNum = 13;
  if (has_loopnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(13, this->loopnum(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.zhichenhaixin.proto.RadarVideo)
  return target;
}

int RadarVideo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 radarId = 1;
    if (has_radarid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->radarid());
    }

    // required string radarName = 2;
    if (has_radarname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->radarname());
    }

    // required double latitude = 3;
    if (has_latitude()) {
      total_size += 1 + 8;
    }

    // required double longitude = 4;
    if (has_longitude()) {
      total_size += 1 + 8;
    }

    // required uint64 UTC = 5;
    if (has_utc()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->utc());
    }

    // required bytes imageData = 6;
    if (has_imagedata()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->imagedata());
    }

    // required bytes curImageData = 7;
    if (has_curimagedata()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->curimagedata());
    }

    // required bytes preImageData = 8;
    if (has_preimagedata()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->preimagedata());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required uint32 width = 9;
    if (has_width()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->width());
    }

    // required uint32 height = 10;
    if (has_height()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->height());
    }

    // required double radius = 11;
    if (has_radius()) {
      total_size += 1 + 8;
    }

    // required uint32 curIndex = 12;
    if (has_curindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->curindex());
    }

    // required uint32 loopNum = 13;
    if (has_loopnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->loopnum());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RadarVideo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RadarVideo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RadarVideo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RadarVideo::MergeFrom(const RadarVideo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_radarid()) {
      set_radarid(from.radarid());
    }
    if (from.has_radarname()) {
      set_radarname(from.radarname());
    }
    if (from.has_latitude()) {
      set_latitude(from.latitude());
    }
    if (from.has_longitude()) {
      set_longitude(from.longitude());
    }
    if (from.has_utc()) {
      set_utc(from.utc());
    }
    if (from.has_imagedata()) {
      set_imagedata(from.imagedata());
    }
    if (from.has_curimagedata()) {
      set_curimagedata(from.curimagedata());
    }
    if (from.has_preimagedata()) {
      set_preimagedata(from.preimagedata());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_width()) {
      set_width(from.width());
    }
    if (from.has_height()) {
      set_height(from.height());
    }
    if (from.has_radius()) {
      set_radius(from.radius());
    }
    if (from.has_curindex()) {
      set_curindex(from.curindex());
    }
    if (from.has_loopnum()) {
      set_loopnum(from.loopnum());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RadarVideo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RadarVideo::CopyFrom(const RadarVideo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RadarVideo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00001fff) != 0x00001fff) return false;

  return true;
}

void RadarVideo::Swap(RadarVideo* other) {
  if (other != this) {
    std::swap(radarid_, other->radarid_);
    std::swap(radarname_, other->radarname_);
    std::swap(latitude_, other->latitude_);
    std::swap(longitude_, other->longitude_);
    std::swap(utc_, other->utc_);
    std::swap(imagedata_, other->imagedata_);
    std::swap(curimagedata_, other->curimagedata_);
    std::swap(preimagedata_, other->preimagedata_);
    std::swap(width_, other->width_);
    std::swap(height_, other->height_);
    std::swap(radius_, other->radius_);
    std::swap(curindex_, other->curindex_);
    std::swap(loopnum_, other->loopnum_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RadarVideo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RadarVideo_descriptor_;
  metadata.reflection = RadarVideo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RadarVideoPoint::kRadarNameFieldNumber;
const int RadarVideoPoint::kLatitudeFieldNumber;
const int RadarVideoPoint::kLongitudeFieldNumber;
const int RadarVideoPoint::kUTCFieldNumber;
const int RadarVideoPoint::kImageDataFieldNumber;
const int RadarVideoPoint::kPreImageDataFieldNumber;
const int RadarVideoPoint::kWidthFieldNumber;
const int RadarVideoPoint::kHeightFieldNumber;
const int RadarVideoPoint::kRadiusFieldNumber;
const int RadarVideoPoint::kCurIndexFieldNumber;
const int RadarVideoPoint::kLoopNumFieldNumber;
#endif  // !_MSC_VER

RadarVideoPoint::RadarVideoPoint()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.zhichenhaixin.proto.RadarVideoPoint)
}

void RadarVideoPoint::InitAsDefaultInstance() {
}

RadarVideoPoint::RadarVideoPoint(const RadarVideoPoint& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:com.zhichenhaixin.proto.RadarVideoPoint)
}

void RadarVideoPoint::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  radarname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  latitude_ = 0;
  longitude_ = 0;
  utc_ = GOOGLE_ULONGLONG(0);
  imagedata_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  preimagedata_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  width_ = 0u;
  height_ = 0u;
  radius_ = 0;
  curindex_ = 0u;
  loopnum_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RadarVideoPoint::~RadarVideoPoint() {
  // @@protoc_insertion_point(destructor:com.zhichenhaixin.proto.RadarVideoPoint)
  SharedDtor();
}

void RadarVideoPoint::SharedDtor() {
  if (radarname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete radarname_;
  }
  if (imagedata_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete imagedata_;
  }
  if (preimagedata_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete preimagedata_;
  }
  if (this != default_instance_) {
  }
}

void RadarVideoPoint::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RadarVideoPoint::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RadarVideoPoint_descriptor_;
}

const RadarVideoPoint& RadarVideoPoint::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ZCHXRadarVideo_2eproto();
  return *default_instance_;
}

RadarVideoPoint* RadarVideoPoint::default_instance_ = NULL;

RadarVideoPoint* RadarVideoPoint::New() const {
  return new RadarVideoPoint;
}

void RadarVideoPoint::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<RadarVideoPoint*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(latitude_, utc_);
    ZR_(width_, height_);
    if (has_radarname()) {
      if (radarname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        radarname_->clear();
      }
    }
    if (has_imagedata()) {
      if (imagedata_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        imagedata_->clear();
      }
    }
    if (has_preimagedata()) {
      if (preimagedata_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        preimagedata_->clear();
      }
    }
  }
  ZR_(radius_, loopnum_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RadarVideoPoint::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.zhichenhaixin.proto.RadarVideoPoint)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string radarName = 2;
      case 2: {
        if (tag == 18) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_radarname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->radarname().data(), this->radarname().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "radarname");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(25)) goto parse_latitude;
        break;
      }

      // required double latitude = 3;
      case 3: {
        if (tag == 25) {
         parse_latitude:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &latitude_)));
          set_has_latitude();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(33)) goto parse_longitude;
        break;
      }

      // required double longitude = 4;
      case 4: {
        if (tag == 33) {
         parse_longitude:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &longitude_)));
          set_has_longitude();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_UTC;
        break;
      }

      // required uint64 UTC = 5;
      case 5: {
        if (tag == 40) {
         parse_UTC:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &utc_)));
          set_has_utc();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_imageData;
        break;
      }

      // required bytes imageData = 6;
      case 6: {
        if (tag == 50) {
         parse_imageData:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_imagedata()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_preImageData;
        break;
      }

      // required bytes preImageData = 7;
      case 7: {
        if (tag == 58) {
         parse_preImageData:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_preimagedata()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_width;
        break;
      }

      // required uint32 width = 8;
      case 8: {
        if (tag == 64) {
         parse_width:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &width_)));
          set_has_width();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_height;
        break;
      }

      // required uint32 height = 9;
      case 9: {
        if (tag == 72) {
         parse_height:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &height_)));
          set_has_height();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(81)) goto parse_radius;
        break;
      }

      // required double radius = 10;
      case 10: {
        if (tag == 81) {
         parse_radius:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &radius_)));
          set_has_radius();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_curIndex;
        break;
      }

      // required uint32 curIndex = 11;
      case 11: {
        if (tag == 88) {
         parse_curIndex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &curindex_)));
          set_has_curindex();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(96)) goto parse_loopNum;
        break;
      }

      // required uint32 loopNum = 12;
      case 12: {
        if (tag == 96) {
         parse_loopNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &loopnum_)));
          set_has_loopnum();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.zhichenhaixin.proto.RadarVideoPoint)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.zhichenhaixin.proto.RadarVideoPoint)
  return false;
#undef DO_
}

void RadarVideoPoint::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.zhichenhaixin.proto.RadarVideoPoint)
  // required string radarName = 2;
  if (has_radarname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->radarname().data(), this->radarname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "radarname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->radarname(), output);
  }

  // required double latitude = 3;
  if (has_latitude()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->latitude(), output);
  }

  // required double longitude = 4;
  if (has_longitude()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->longitude(), output);
  }

  // required uint64 UTC = 5;
  if (has_utc()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->utc(), output);
  }

  // required bytes imageData = 6;
  if (has_imagedata()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      6, this->imagedata(), output);
  }

  // required bytes preImageData = 7;
  if (has_preimagedata()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      7, this->preimagedata(), output);
  }

  // required uint32 width = 8;
  if (has_width()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->width(), output);
  }

  // required uint32 height = 9;
  if (has_height()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->height(), output);
  }

  // required double radius = 10;
  if (has_radius()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(10, this->radius(), output);
  }

  // required uint32 curIndex = 11;
  if (has_curindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->curindex(), output);
  }

  // required uint32 loopNum = 12;
  if (has_loopnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->loopnum(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.zhichenhaixin.proto.RadarVideoPoint)
}

::google::protobuf::uint8* RadarVideoPoint::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.zhichenhaixin.proto.RadarVideoPoint)
  // required string radarName = 2;
  if (has_radarname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->radarname().data(), this->radarname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "radarname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->radarname(), target);
  }

  // required double latitude = 3;
  if (has_latitude()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->latitude(), target);
  }

  // required double longitude = 4;
  if (has_longitude()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->longitude(), target);
  }

  // required uint64 UTC = 5;
  if (has_utc()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->utc(), target);
  }

  // required bytes imageData = 6;
  if (has_imagedata()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        6, this->imagedata(), target);
  }

  // required bytes preImageData = 7;
  if (has_preimagedata()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        7, this->preimagedata(), target);
  }

  // required uint32 width = 8;
  if (has_width()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->width(), target);
  }

  // required uint32 height = 9;
  if (has_height()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->height(), target);
  }

  // required double radius = 10;
  if (has_radius()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(10, this->radius(), target);
  }

  // required uint32 curIndex = 11;
  if (has_curindex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->curindex(), target);
  }

  // required uint32 loopNum = 12;
  if (has_loopnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(12, this->loopnum(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.zhichenhaixin.proto.RadarVideoPoint)
  return target;
}

int RadarVideoPoint::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string radarName = 2;
    if (has_radarname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->radarname());
    }

    // required double latitude = 3;
    if (has_latitude()) {
      total_size += 1 + 8;
    }

    // required double longitude = 4;
    if (has_longitude()) {
      total_size += 1 + 8;
    }

    // required uint64 UTC = 5;
    if (has_utc()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->utc());
    }

    // required bytes imageData = 6;
    if (has_imagedata()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->imagedata());
    }

    // required bytes preImageData = 7;
    if (has_preimagedata()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->preimagedata());
    }

    // required uint32 width = 8;
    if (has_width()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->width());
    }

    // required uint32 height = 9;
    if (has_height()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->height());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required double radius = 10;
    if (has_radius()) {
      total_size += 1 + 8;
    }

    // required uint32 curIndex = 11;
    if (has_curindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->curindex());
    }

    // required uint32 loopNum = 12;
    if (has_loopnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->loopnum());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RadarVideoPoint::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RadarVideoPoint* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RadarVideoPoint*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RadarVideoPoint::MergeFrom(const RadarVideoPoint& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_radarname()) {
      set_radarname(from.radarname());
    }
    if (from.has_latitude()) {
      set_latitude(from.latitude());
    }
    if (from.has_longitude()) {
      set_longitude(from.longitude());
    }
    if (from.has_utc()) {
      set_utc(from.utc());
    }
    if (from.has_imagedata()) {
      set_imagedata(from.imagedata());
    }
    if (from.has_preimagedata()) {
      set_preimagedata(from.preimagedata());
    }
    if (from.has_width()) {
      set_width(from.width());
    }
    if (from.has_height()) {
      set_height(from.height());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_radius()) {
      set_radius(from.radius());
    }
    if (from.has_curindex()) {
      set_curindex(from.curindex());
    }
    if (from.has_loopnum()) {
      set_loopnum(from.loopnum());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RadarVideoPoint::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RadarVideoPoint::CopyFrom(const RadarVideoPoint& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RadarVideoPoint::IsInitialized() const {
  if ((_has_bits_[0] & 0x000007ff) != 0x000007ff) return false;

  return true;
}

void RadarVideoPoint::Swap(RadarVideoPoint* other) {
  if (other != this) {
    std::swap(radarname_, other->radarname_);
    std::swap(latitude_, other->latitude_);
    std::swap(longitude_, other->longitude_);
    std::swap(utc_, other->utc_);
    std::swap(imagedata_, other->imagedata_);
    std::swap(preimagedata_, other->preimagedata_);
    std::swap(width_, other->width_);
    std::swap(height_, other->height_);
    std::swap(radius_, other->radius_);
    std::swap(curindex_, other->curindex_);
    std::swap(loopnum_, other->loopnum_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RadarVideoPoint::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RadarVideoPoint_descriptor_;
  metadata.reflection = RadarVideoPoint_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace zhichenhaixin
}  // namespace com

// @@protoc_insertion_point(global_scope)
