// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ZCHXRadar.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "ZCHXRadar.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace com {
namespace zchxlab {
namespace radar {
namespace protobuf {

namespace {

const ::google::protobuf::Descriptor* TrackPoint_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TrackPoint_reflection_ = NULL;
const ::google::protobuf::Descriptor* VideoFrame_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  VideoFrame_reflection_ = NULL;
const ::google::protobuf::Descriptor* RadarVideoPNG_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RadarVideoPNG_reflection_ = NULL;
const ::google::protobuf::Descriptor* RadarVideoGIF_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RadarVideoGIF_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* MSGTYP_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* CNF_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* CST_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* STH_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* RES_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_ZCHXRadar_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_ZCHXRadar_2eproto() {
  protobuf_AddDesc_ZCHXRadar_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "ZCHXRadar.proto");
  GOOGLE_CHECK(file != NULL);
  TrackPoint_descriptor_ = file->message_type(0);
  static const int TrackPoint_offsets_[21] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrackPoint, systemareacode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrackPoint, systemidentificationcode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrackPoint, messagetype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrackPoint, tracknumber_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrackPoint, cartesianposx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrackPoint, cartesianposy_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrackPoint, wgs84poslat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrackPoint, wgs84poslong_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrackPoint, timeofday_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrackPoint, tracktype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrackPoint, tracklastreport_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrackPoint, extrapolation_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrackPoint, trackpositioncode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrackPoint, sigmax_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrackPoint, sigmay_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrackPoint, sigmaxy_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrackPoint, ampofpriplot_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrackPoint, cartesiantrkvel_vx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrackPoint, cartesiantrkvel_vy_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrackPoint, cog_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrackPoint, sog_),
  };
  TrackPoint_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      TrackPoint_descriptor_,
      TrackPoint::internal_default_instance(),
      TrackPoint_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrackPoint, _has_bits_),
      -1,
      -1,
      sizeof(TrackPoint),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrackPoint, _internal_metadata_));
  VideoFrame_descriptor_ = file->message_type(1);
  static const int VideoFrame_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VideoFrame, systemareacode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VideoFrame, systemidentificationcode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VideoFrame, msgindex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VideoFrame, azimuth_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VideoFrame, heading_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VideoFrame, startrange_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VideoFrame, rangefactor_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VideoFrame, bitresolution_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VideoFrame, timeofday_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VideoFrame, amplitude_),
  };
  VideoFrame_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      VideoFrame_descriptor_,
      VideoFrame::internal_default_instance(),
      VideoFrame_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VideoFrame, _has_bits_),
      -1,
      -1,
      sizeof(VideoFrame),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VideoFrame, _internal_metadata_));
  RadarVideoPNG_descriptor_ = file->message_type(2);
  static const int RadarVideoPNG_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RadarVideoPNG, radarid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RadarVideoPNG, radarname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RadarVideoPNG, latitude_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RadarVideoPNG, longitude_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RadarVideoPNG, utc_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RadarVideoPNG, imagedata_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RadarVideoPNG, width_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RadarVideoPNG, height_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RadarVideoPNG, radius_),
  };
  RadarVideoPNG_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      RadarVideoPNG_descriptor_,
      RadarVideoPNG::internal_default_instance(),
      RadarVideoPNG_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RadarVideoPNG, _has_bits_),
      -1,
      -1,
      sizeof(RadarVideoPNG),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RadarVideoPNG, _internal_metadata_));
  RadarVideoGIF_descriptor_ = file->message_type(3);
  static const int RadarVideoGIF_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RadarVideoGIF, radarid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RadarVideoGIF, radarname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RadarVideoGIF, latitude_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RadarVideoGIF, longitude_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RadarVideoGIF, startutc_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RadarVideoGIF, endutc_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RadarVideoGIF, imagedata_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RadarVideoGIF, width_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RadarVideoGIF, height_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RadarVideoGIF, radius_),
  };
  RadarVideoGIF_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      RadarVideoGIF_descriptor_,
      RadarVideoGIF::internal_default_instance(),
      RadarVideoGIF_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RadarVideoGIF, _has_bits_),
      -1,
      -1,
      sizeof(RadarVideoGIF),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RadarVideoGIF, _internal_metadata_));
  MSGTYP_descriptor_ = file->enum_type(0);
  CNF_descriptor_ = file->enum_type(1);
  CST_descriptor_ = file->enum_type(2);
  STH_descriptor_ = file->enum_type(3);
  RES_descriptor_ = file->enum_type(4);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_ZCHXRadar_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      TrackPoint_descriptor_, TrackPoint::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      VideoFrame_descriptor_, VideoFrame::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      RadarVideoPNG_descriptor_, RadarVideoPNG::internal_default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      RadarVideoGIF_descriptor_, RadarVideoGIF::internal_default_instance());
}

}  // namespace

void protobuf_ShutdownFile_ZCHXRadar_2eproto() {
  TrackPoint_default_instance_.Shutdown();
  delete TrackPoint_reflection_;
  VideoFrame_default_instance_.Shutdown();
  delete VideoFrame_reflection_;
  RadarVideoPNG_default_instance_.Shutdown();
  delete RadarVideoPNG_reflection_;
  RadarVideoGIF_default_instance_.Shutdown();
  delete RadarVideoGIF_reflection_;
}

void protobuf_InitDefaults_ZCHXRadar_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  TrackPoint_default_instance_.DefaultConstruct();
  VideoFrame_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  RadarVideoPNG_default_instance_.DefaultConstruct();
  ::google::protobuf::internal::GetEmptyString();
  RadarVideoGIF_default_instance_.DefaultConstruct();
  TrackPoint_default_instance_.get_mutable()->InitAsDefaultInstance();
  VideoFrame_default_instance_.get_mutable()->InitAsDefaultInstance();
  RadarVideoPNG_default_instance_.get_mutable()->InitAsDefaultInstance();
  RadarVideoGIF_default_instance_.get_mutable()->InitAsDefaultInstance();
}

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_InitDefaults_ZCHXRadar_2eproto_once_);
void protobuf_InitDefaults_ZCHXRadar_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_InitDefaults_ZCHXRadar_2eproto_once_,
                 &protobuf_InitDefaults_ZCHXRadar_2eproto_impl);
}
void protobuf_AddDesc_ZCHXRadar_2eproto_impl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  protobuf_InitDefaults_ZCHXRadar_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\017ZCHXRadar.proto\022\032com.zchxlab.radar.pro"
    "tobuf\"\332\004\n\nTrackPoint\022\026\n\016systemAreaCode\030\001"
    " \002(\005\022 \n\030systemIdentificationCode\030\002 \002(\005\0227"
    "\n\013messageType\030\003 \002(\0162\".com.zchxlab.radar."
    "protobuf.MSGTYP\022\023\n\013trackNumber\030\004 \002(\r\022\025\n\r"
    "cartesianPosX\030\005 \002(\002\022\025\n\rcartesianPosY\030\006 \002"
    "(\002\022\023\n\013wgs84PosLat\030\007 \002(\001\022\024\n\014wgs84PosLong\030"
    "\010 \002(\001\022\021\n\ttimeOfDay\030\t \002(\002\0222\n\ttrackType\030\n "
    "\001(\0162\037.com.zchxlab.radar.protobuf.CNF\022\027\n\017"
    "trackLastReport\030\013 \001(\010\0226\n\rextrapolation\030\014"
    " \001(\0162\037.com.zchxlab.radar.protobuf.CST\022:\n"
    "\021trackPositionCode\030\r \001(\0162\037.com.zchxlab.r"
    "adar.protobuf.STH\022\016\n\006sigmaX\030\016 \001(\002\022\016\n\006sig"
    "maY\030\017 \001(\002\022\017\n\007sigmaXY\030\020 \001(\002\022\024\n\014ampOfPriPl"
    "ot\030\021 \001(\002\022\032\n\022cartesianTrkVel_vx\030\022 \002(\001\022\032\n\022"
    "cartesianTrkVel_vy\030\023 \002(\001\022\013\n\003cog\030\024 \002(\001\022\013\n"
    "\003sog\030\025 \002(\001\"\201\002\n\nVideoFrame\022\026\n\016systemAreaC"
    "ode\030\001 \002(\005\022 \n\030systemIdentificationCode\030\002 "
    "\002(\005\022\020\n\010msgIndex\030\003 \002(\005\022\017\n\007azimuth\030\004 \002(\r\022\017"
    "\n\007heading\030\005 \001(\r\022\022\n\nstartRange\030\006 \002(\001\022\023\n\013r"
    "angeFactor\030\007 \002(\001\0226\n\rbitResolution\030\010 \002(\0162"
    "\037.com.zchxlab.radar.protobuf.RES\022\021\n\ttime"
    "OfDay\030\t \002(\005\022\021\n\tamplitude\030\n \003(\005\"\247\001\n\rRadar"
    "VideoPNG\022\017\n\007radarId\030\001 \002(\004\022\021\n\tradarName\030\002"
    " \002(\t\022\020\n\010latitude\030\003 \002(\001\022\021\n\tlongitude\030\004 \002("
    "\001\022\013\n\003UTC\030\005 \002(\004\022\021\n\timageData\030\006 \002(\014\022\r\n\005wid"
    "th\030\007 \002(\r\022\016\n\006height\030\010 \002(\r\022\016\n\006radius\030\t \001(\001"
    "\"\274\001\n\rRadarVideoGIF\022\017\n\007radarId\030\001 \002(\004\022\021\n\tr"
    "adarName\030\002 \002(\t\022\020\n\010latitude\030\003 \002(\001\022\021\n\tlong"
    "itude\030\004 \002(\001\022\020\n\010startUTC\030\005 \002(\004\022\016\n\006endUTC\030"
    "\006 \002(\004\022\021\n\timageData\030\007 \002(\014\022\r\n\005width\030\010 \002(\r\022"
    "\016\n\006height\030\t \002(\r\022\016\n\006radius\030\n \001(\001*}\n\006MSGTY"
    "P\022\024\n\020MSGTYP_UNDEFINED\020\000\022\021\n\rTARGET_REPORT"
    "\020\001\022\031\n\025START_OF_UPDATE_CYCLE\020\002\022\023\n\017PERIODI"
    "C_STATUS\020\003\022\032\n\026EVENT_TRIGGERED_STATUS\020\004*B"
    "\n\003CNF\022\023\n\017CONFIRMED_TRACK\020\000\022\023\n\017TENTATIVE_"
    "TRACK\020\001\022\021\n\rUNKNOWN_TRACK\020\002*\230\001\n\003CST\022\021\n\rCS"
    "T_UNDEFINED\020\000\022(\n$PREDICTABLE_EXTRAPOLATI"
    "ON_DUE_PERIOD\020\001\022%\n!PREDICTABLE_EXTRAPOLA"
    "TION_IN_AREA\020\002\022-\n)EXTRAPOLATION_DUE_UNPR"
    "EDICTABLE_DETECTION\020\003*3\n\003STH\022\025\n\021MEASURED"
    "_POSITION\020\000\022\025\n\021SMOOTHED_POSITION\020\001*\222\001\n\003R"
    "ES\022\026\n\022MONOBIT_RESOLUTION\020\001\022\022\n\016LOW_RESOLU"
    "TION\020\002\022\025\n\021MEDIUM_RESOLUTION\020\003\022\023\n\017HIGH_RE"
    "SOLUTION\020\004\022\030\n\024VERY_HIGH_RESOLUTION\020\005\022\031\n\025"
    "ULTRA_HIGH_RESOLUTION\020\006", 1823);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "ZCHXRadar.proto", &protobuf_RegisterTypes);
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_ZCHXRadar_2eproto);
}

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AddDesc_ZCHXRadar_2eproto_once_);
void protobuf_AddDesc_ZCHXRadar_2eproto() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AddDesc_ZCHXRadar_2eproto_once_,
                 &protobuf_AddDesc_ZCHXRadar_2eproto_impl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_ZCHXRadar_2eproto {
  StaticDescriptorInitializer_ZCHXRadar_2eproto() {
    protobuf_AddDesc_ZCHXRadar_2eproto();
  }
} static_descriptor_initializer_ZCHXRadar_2eproto_;
const ::google::protobuf::EnumDescriptor* MSGTYP_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MSGTYP_descriptor_;
}
bool MSGTYP_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* CNF_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CNF_descriptor_;
}
bool CNF_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* CST_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CST_descriptor_;
}
bool CST_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* STH_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return STH_descriptor_;
}
bool STH_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* RES_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RES_descriptor_;
}
bool RES_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}


namespace {

static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD GOOGLE_ATTRIBUTE_NORETURN;
static void MergeFromFail(int line) {
  ::google::protobuf::internal::MergeFromFail(__FILE__, line);
}

}  // namespace


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int TrackPoint::kSystemAreaCodeFieldNumber;
const int TrackPoint::kSystemIdentificationCodeFieldNumber;
const int TrackPoint::kMessageTypeFieldNumber;
const int TrackPoint::kTrackNumberFieldNumber;
const int TrackPoint::kCartesianPosXFieldNumber;
const int TrackPoint::kCartesianPosYFieldNumber;
const int TrackPoint::kWgs84PosLatFieldNumber;
const int TrackPoint::kWgs84PosLongFieldNumber;
const int TrackPoint::kTimeOfDayFieldNumber;
const int TrackPoint::kTrackTypeFieldNumber;
const int TrackPoint::kTrackLastReportFieldNumber;
const int TrackPoint::kExtrapolationFieldNumber;
const int TrackPoint::kTrackPositionCodeFieldNumber;
const int TrackPoint::kSigmaXFieldNumber;
const int TrackPoint::kSigmaYFieldNumber;
const int TrackPoint::kSigmaXYFieldNumber;
const int TrackPoint::kAmpOfPriPlotFieldNumber;
const int TrackPoint::kCartesianTrkVelVxFieldNumber;
const int TrackPoint::kCartesianTrkVelVyFieldNumber;
const int TrackPoint::kCogFieldNumber;
const int TrackPoint::kSogFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

TrackPoint::TrackPoint()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_ZCHXRadar_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.zchxlab.radar.protobuf.TrackPoint)
}

void TrackPoint::InitAsDefaultInstance() {
}

TrackPoint::TrackPoint(const TrackPoint& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:com.zchxlab.radar.protobuf.TrackPoint)
}

void TrackPoint::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&systemareacode_, 0, reinterpret_cast<char*>(&ampofpriplot_) -
    reinterpret_cast<char*>(&systemareacode_) + sizeof(ampofpriplot_));
}

TrackPoint::~TrackPoint() {
  // @@protoc_insertion_point(destructor:com.zchxlab.radar.protobuf.TrackPoint)
  SharedDtor();
}

void TrackPoint::SharedDtor() {
}

void TrackPoint::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TrackPoint::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TrackPoint_descriptor_;
}

const TrackPoint& TrackPoint::default_instance() {
  protobuf_InitDefaults_ZCHXRadar_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<TrackPoint> TrackPoint_default_instance_;

TrackPoint* TrackPoint::New(::google::protobuf::Arena* arena) const {
  TrackPoint* n = new TrackPoint;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void TrackPoint::Clear() {
// @@protoc_insertion_point(message_clear_start:com.zchxlab.radar.protobuf.TrackPoint)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(TrackPoint, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<TrackPoint*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(systemareacode_, wgs84poslong_);
  ZR_(timeofday_, sigmaxy_);
  ZR_(cartesiantrkvel_vx_, ampofpriplot_);

#undef ZR_HELPER_
#undef ZR_

  _has_bits_.Clear();
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool TrackPoint::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.zchxlab.radar.protobuf.TrackPoint)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 systemAreaCode = 1;
      case 1: {
        if (tag == 8) {
          set_has_systemareacode();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &systemareacode_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_systemIdentificationCode;
        break;
      }

      // required int32 systemIdentificationCode = 2;
      case 2: {
        if (tag == 16) {
         parse_systemIdentificationCode:
          set_has_systemidentificationcode();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &systemidentificationcode_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_messageType;
        break;
      }

      // required .com.zchxlab.radar.protobuf.MSGTYP messageType = 3;
      case 3: {
        if (tag == 24) {
         parse_messageType:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::com::zchxlab::radar::protobuf::MSGTYP_IsValid(value)) {
            set_messagetype(static_cast< ::com::zchxlab::radar::protobuf::MSGTYP >(value));
          } else {
            mutable_unknown_fields()->AddVarint(3, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_trackNumber;
        break;
      }

      // required uint32 trackNumber = 4;
      case 4: {
        if (tag == 32) {
         parse_trackNumber:
          set_has_tracknumber();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &tracknumber_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(45)) goto parse_cartesianPosX;
        break;
      }

      // required float cartesianPosX = 5;
      case 5: {
        if (tag == 45) {
         parse_cartesianPosX:
          set_has_cartesianposx();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &cartesianposx_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(53)) goto parse_cartesianPosY;
        break;
      }

      // required float cartesianPosY = 6;
      case 6: {
        if (tag == 53) {
         parse_cartesianPosY:
          set_has_cartesianposy();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &cartesianposy_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(57)) goto parse_wgs84PosLat;
        break;
      }

      // required double wgs84PosLat = 7;
      case 7: {
        if (tag == 57) {
         parse_wgs84PosLat:
          set_has_wgs84poslat();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &wgs84poslat_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(65)) goto parse_wgs84PosLong;
        break;
      }

      // required double wgs84PosLong = 8;
      case 8: {
        if (tag == 65) {
         parse_wgs84PosLong:
          set_has_wgs84poslong();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &wgs84poslong_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(77)) goto parse_timeOfDay;
        break;
      }

      // required float timeOfDay = 9;
      case 9: {
        if (tag == 77) {
         parse_timeOfDay:
          set_has_timeofday();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &timeofday_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_trackType;
        break;
      }

      // optional .com.zchxlab.radar.protobuf.CNF trackType = 10;
      case 10: {
        if (tag == 80) {
         parse_trackType:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::com::zchxlab::radar::protobuf::CNF_IsValid(value)) {
            set_tracktype(static_cast< ::com::zchxlab::radar::protobuf::CNF >(value));
          } else {
            mutable_unknown_fields()->AddVarint(10, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_trackLastReport;
        break;
      }

      // optional bool trackLastReport = 11;
      case 11: {
        if (tag == 88) {
         parse_trackLastReport:
          set_has_tracklastreport();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &tracklastreport_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(96)) goto parse_extrapolation;
        break;
      }

      // optional .com.zchxlab.radar.protobuf.CST extrapolation = 12;
      case 12: {
        if (tag == 96) {
         parse_extrapolation:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::com::zchxlab::radar::protobuf::CST_IsValid(value)) {
            set_extrapolation(static_cast< ::com::zchxlab::radar::protobuf::CST >(value));
          } else {
            mutable_unknown_fields()->AddVarint(12, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(104)) goto parse_trackPositionCode;
        break;
      }

      // optional .com.zchxlab.radar.protobuf.STH trackPositionCode = 13;
      case 13: {
        if (tag == 104) {
         parse_trackPositionCode:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::com::zchxlab::radar::protobuf::STH_IsValid(value)) {
            set_trackpositioncode(static_cast< ::com::zchxlab::radar::protobuf::STH >(value));
          } else {
            mutable_unknown_fields()->AddVarint(13, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(117)) goto parse_sigmaX;
        break;
      }

      // optional float sigmaX = 14;
      case 14: {
        if (tag == 117) {
         parse_sigmaX:
          set_has_sigmax();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &sigmax_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(125)) goto parse_sigmaY;
        break;
      }

      // optional float sigmaY = 15;
      case 15: {
        if (tag == 125) {
         parse_sigmaY:
          set_has_sigmay();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &sigmay_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(133)) goto parse_sigmaXY;
        break;
      }

      // optional float sigmaXY = 16;
      case 16: {
        if (tag == 133) {
         parse_sigmaXY:
          set_has_sigmaxy();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &sigmaxy_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(141)) goto parse_ampOfPriPlot;
        break;
      }

      // optional float ampOfPriPlot = 17;
      case 17: {
        if (tag == 141) {
         parse_ampOfPriPlot:
          set_has_ampofpriplot();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &ampofpriplot_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(145)) goto parse_cartesianTrkVel_vx;
        break;
      }

      // required double cartesianTrkVel_vx = 18;
      case 18: {
        if (tag == 145) {
         parse_cartesianTrkVel_vx:
          set_has_cartesiantrkvel_vx();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &cartesiantrkvel_vx_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(153)) goto parse_cartesianTrkVel_vy;
        break;
      }

      // required double cartesianTrkVel_vy = 19;
      case 19: {
        if (tag == 153) {
         parse_cartesianTrkVel_vy:
          set_has_cartesiantrkvel_vy();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &cartesiantrkvel_vy_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(161)) goto parse_cog;
        break;
      }

      // required double cog = 20;
      case 20: {
        if (tag == 161) {
         parse_cog:
          set_has_cog();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &cog_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(169)) goto parse_sog;
        break;
      }

      // required double sog = 21;
      case 21: {
        if (tag == 169) {
         parse_sog:
          set_has_sog();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &sog_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.zchxlab.radar.protobuf.TrackPoint)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.zchxlab.radar.protobuf.TrackPoint)
  return false;
#undef DO_
}

void TrackPoint::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.zchxlab.radar.protobuf.TrackPoint)
  // required int32 systemAreaCode = 1;
  if (has_systemareacode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->systemareacode(), output);
  }

  // required int32 systemIdentificationCode = 2;
  if (has_systemidentificationcode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->systemidentificationcode(), output);
  }

  // required .com.zchxlab.radar.protobuf.MSGTYP messageType = 3;
  if (has_messagetype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->messagetype(), output);
  }

  // required uint32 trackNumber = 4;
  if (has_tracknumber()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->tracknumber(), output);
  }

  // required float cartesianPosX = 5;
  if (has_cartesianposx()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->cartesianposx(), output);
  }

  // required float cartesianPosY = 6;
  if (has_cartesianposy()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->cartesianposy(), output);
  }

  // required double wgs84PosLat = 7;
  if (has_wgs84poslat()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(7, this->wgs84poslat(), output);
  }

  // required double wgs84PosLong = 8;
  if (has_wgs84poslong()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(8, this->wgs84poslong(), output);
  }

  // required float timeOfDay = 9;
  if (has_timeofday()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(9, this->timeofday(), output);
  }

  // optional .com.zchxlab.radar.protobuf.CNF trackType = 10;
  if (has_tracktype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      10, this->tracktype(), output);
  }

  // optional bool trackLastReport = 11;
  if (has_tracklastreport()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(11, this->tracklastreport(), output);
  }

  // optional .com.zchxlab.radar.protobuf.CST extrapolation = 12;
  if (has_extrapolation()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      12, this->extrapolation(), output);
  }

  // optional .com.zchxlab.radar.protobuf.STH trackPositionCode = 13;
  if (has_trackpositioncode()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      13, this->trackpositioncode(), output);
  }

  // optional float sigmaX = 14;
  if (has_sigmax()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(14, this->sigmax(), output);
  }

  // optional float sigmaY = 15;
  if (has_sigmay()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(15, this->sigmay(), output);
  }

  // optional float sigmaXY = 16;
  if (has_sigmaxy()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(16, this->sigmaxy(), output);
  }

  // optional float ampOfPriPlot = 17;
  if (has_ampofpriplot()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(17, this->ampofpriplot(), output);
  }

  // required double cartesianTrkVel_vx = 18;
  if (has_cartesiantrkvel_vx()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(18, this->cartesiantrkvel_vx(), output);
  }

  // required double cartesianTrkVel_vy = 19;
  if (has_cartesiantrkvel_vy()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(19, this->cartesiantrkvel_vy(), output);
  }

  // required double cog = 20;
  if (has_cog()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(20, this->cog(), output);
  }

  // required double sog = 21;
  if (has_sog()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(21, this->sog(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.zchxlab.radar.protobuf.TrackPoint)
}

::google::protobuf::uint8* TrackPoint::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:com.zchxlab.radar.protobuf.TrackPoint)
  // required int32 systemAreaCode = 1;
  if (has_systemareacode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->systemareacode(), target);
  }

  // required int32 systemIdentificationCode = 2;
  if (has_systemidentificationcode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->systemidentificationcode(), target);
  }

  // required .com.zchxlab.radar.protobuf.MSGTYP messageType = 3;
  if (has_messagetype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->messagetype(), target);
  }

  // required uint32 trackNumber = 4;
  if (has_tracknumber()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->tracknumber(), target);
  }

  // required float cartesianPosX = 5;
  if (has_cartesianposx()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->cartesianposx(), target);
  }

  // required float cartesianPosY = 6;
  if (has_cartesianposy()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(6, this->cartesianposy(), target);
  }

  // required double wgs84PosLat = 7;
  if (has_wgs84poslat()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(7, this->wgs84poslat(), target);
  }

  // required double wgs84PosLong = 8;
  if (has_wgs84poslong()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(8, this->wgs84poslong(), target);
  }

  // required float timeOfDay = 9;
  if (has_timeofday()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(9, this->timeofday(), target);
  }

  // optional .com.zchxlab.radar.protobuf.CNF trackType = 10;
  if (has_tracktype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      10, this->tracktype(), target);
  }

  // optional bool trackLastReport = 11;
  if (has_tracklastreport()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(11, this->tracklastreport(), target);
  }

  // optional .com.zchxlab.radar.protobuf.CST extrapolation = 12;
  if (has_extrapolation()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      12, this->extrapolation(), target);
  }

  // optional .com.zchxlab.radar.protobuf.STH trackPositionCode = 13;
  if (has_trackpositioncode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      13, this->trackpositioncode(), target);
  }

  // optional float sigmaX = 14;
  if (has_sigmax()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(14, this->sigmax(), target);
  }

  // optional float sigmaY = 15;
  if (has_sigmay()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(15, this->sigmay(), target);
  }

  // optional float sigmaXY = 16;
  if (has_sigmaxy()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(16, this->sigmaxy(), target);
  }

  // optional float ampOfPriPlot = 17;
  if (has_ampofpriplot()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(17, this->ampofpriplot(), target);
  }

  // required double cartesianTrkVel_vx = 18;
  if (has_cartesiantrkvel_vx()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(18, this->cartesiantrkvel_vx(), target);
  }

  // required double cartesianTrkVel_vy = 19;
  if (has_cartesiantrkvel_vy()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(19, this->cartesiantrkvel_vy(), target);
  }

  // required double cog = 20;
  if (has_cog()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(20, this->cog(), target);
  }

  // required double sog = 21;
  if (has_sog()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(21, this->sog(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.zchxlab.radar.protobuf.TrackPoint)
  return target;
}

size_t TrackPoint::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:com.zchxlab.radar.protobuf.TrackPoint)
  size_t total_size = 0;

  if (has_systemareacode()) {
    // required int32 systemAreaCode = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->systemareacode());
  }

  if (has_systemidentificationcode()) {
    // required int32 systemIdentificationCode = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->systemidentificationcode());
  }

  if (has_messagetype()) {
    // required .com.zchxlab.radar.protobuf.MSGTYP messageType = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->messagetype());
  }

  if (has_tracknumber()) {
    // required uint32 trackNumber = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->tracknumber());
  }

  if (has_cartesianposx()) {
    // required float cartesianPosX = 5;
    total_size += 1 + 4;
  }

  if (has_cartesianposy()) {
    // required float cartesianPosY = 6;
    total_size += 1 + 4;
  }

  if (has_wgs84poslat()) {
    // required double wgs84PosLat = 7;
    total_size += 1 + 8;
  }

  if (has_wgs84poslong()) {
    // required double wgs84PosLong = 8;
    total_size += 1 + 8;
  }

  if (has_timeofday()) {
    // required float timeOfDay = 9;
    total_size += 1 + 4;
  }

  if (has_cartesiantrkvel_vx()) {
    // required double cartesianTrkVel_vx = 18;
    total_size += 2 + 8;
  }

  if (has_cartesiantrkvel_vy()) {
    // required double cartesianTrkVel_vy = 19;
    total_size += 2 + 8;
  }

  if (has_cog()) {
    // required double cog = 20;
    total_size += 2 + 8;
  }

  if (has_sog()) {
    // required double sog = 21;
    total_size += 2 + 8;
  }

  return total_size;
}
size_t TrackPoint::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.zchxlab.radar.protobuf.TrackPoint)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x001e01ff) ^ 0x001e01ff) == 0) {  // All required fields are present.
    // required int32 systemAreaCode = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->systemareacode());

    // required int32 systemIdentificationCode = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->systemidentificationcode());

    // required .com.zchxlab.radar.protobuf.MSGTYP messageType = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->messagetype());

    // required uint32 trackNumber = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->tracknumber());

    // required float cartesianPosX = 5;
    total_size += 1 + 4;

    // required float cartesianPosY = 6;
    total_size += 1 + 4;

    // required double wgs84PosLat = 7;
    total_size += 1 + 8;

    // required double wgs84PosLong = 8;
    total_size += 1 + 8;

    // required float timeOfDay = 9;
    total_size += 1 + 4;

    // required double cartesianTrkVel_vx = 18;
    total_size += 2 + 8;

    // required double cartesianTrkVel_vy = 19;
    total_size += 2 + 8;

    // required double cog = 20;
    total_size += 2 + 8;

    // required double sog = 21;
    total_size += 2 + 8;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_has_bits_[9 / 32] & 65024u) {
    // optional .com.zchxlab.radar.protobuf.CNF trackType = 10;
    if (has_tracktype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->tracktype());
    }

    // optional bool trackLastReport = 11;
    if (has_tracklastreport()) {
      total_size += 1 + 1;
    }

    // optional .com.zchxlab.radar.protobuf.CST extrapolation = 12;
    if (has_extrapolation()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->extrapolation());
    }

    // optional .com.zchxlab.radar.protobuf.STH trackPositionCode = 13;
    if (has_trackpositioncode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->trackpositioncode());
    }

    // optional float sigmaX = 14;
    if (has_sigmax()) {
      total_size += 1 + 4;
    }

    // optional float sigmaY = 15;
    if (has_sigmay()) {
      total_size += 1 + 4;
    }

    // optional float sigmaXY = 16;
    if (has_sigmaxy()) {
      total_size += 2 + 4;
    }

  }
  // optional float ampOfPriPlot = 17;
  if (has_ampofpriplot()) {
    total_size += 2 + 4;
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TrackPoint::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.zchxlab.radar.protobuf.TrackPoint)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const TrackPoint* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const TrackPoint>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.zchxlab.radar.protobuf.TrackPoint)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.zchxlab.radar.protobuf.TrackPoint)
    UnsafeMergeFrom(*source);
  }
}

void TrackPoint::MergeFrom(const TrackPoint& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.zchxlab.radar.protobuf.TrackPoint)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void TrackPoint::UnsafeMergeFrom(const TrackPoint& from) {
  GOOGLE_DCHECK(&from != this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_systemareacode()) {
      set_systemareacode(from.systemareacode());
    }
    if (from.has_systemidentificationcode()) {
      set_systemidentificationcode(from.systemidentificationcode());
    }
    if (from.has_messagetype()) {
      set_messagetype(from.messagetype());
    }
    if (from.has_tracknumber()) {
      set_tracknumber(from.tracknumber());
    }
    if (from.has_cartesianposx()) {
      set_cartesianposx(from.cartesianposx());
    }
    if (from.has_cartesianposy()) {
      set_cartesianposy(from.cartesianposy());
    }
    if (from.has_wgs84poslat()) {
      set_wgs84poslat(from.wgs84poslat());
    }
    if (from.has_wgs84poslong()) {
      set_wgs84poslong(from.wgs84poslong());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_timeofday()) {
      set_timeofday(from.timeofday());
    }
    if (from.has_tracktype()) {
      set_tracktype(from.tracktype());
    }
    if (from.has_tracklastreport()) {
      set_tracklastreport(from.tracklastreport());
    }
    if (from.has_extrapolation()) {
      set_extrapolation(from.extrapolation());
    }
    if (from.has_trackpositioncode()) {
      set_trackpositioncode(from.trackpositioncode());
    }
    if (from.has_sigmax()) {
      set_sigmax(from.sigmax());
    }
    if (from.has_sigmay()) {
      set_sigmay(from.sigmay());
    }
    if (from.has_sigmaxy()) {
      set_sigmaxy(from.sigmaxy());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_ampofpriplot()) {
      set_ampofpriplot(from.ampofpriplot());
    }
    if (from.has_cartesiantrkvel_vx()) {
      set_cartesiantrkvel_vx(from.cartesiantrkvel_vx());
    }
    if (from.has_cartesiantrkvel_vy()) {
      set_cartesiantrkvel_vy(from.cartesiantrkvel_vy());
    }
    if (from.has_cog()) {
      set_cog(from.cog());
    }
    if (from.has_sog()) {
      set_sog(from.sog());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::UnknownFieldSet::MergeToInternalMetdata(
      from.unknown_fields(), &_internal_metadata_);
  }
}

void TrackPoint::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.zchxlab.radar.protobuf.TrackPoint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TrackPoint::CopyFrom(const TrackPoint& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.zchxlab.radar.protobuf.TrackPoint)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool TrackPoint::IsInitialized() const {
  if ((_has_bits_[0] & 0x001e01ff) != 0x001e01ff) return false;

  return true;
}

void TrackPoint::Swap(TrackPoint* other) {
  if (other == this) return;
  InternalSwap(other);
}
void TrackPoint::InternalSwap(TrackPoint* other) {
  std::swap(systemareacode_, other->systemareacode_);
  std::swap(systemidentificationcode_, other->systemidentificationcode_);
  std::swap(messagetype_, other->messagetype_);
  std::swap(tracknumber_, other->tracknumber_);
  std::swap(cartesianposx_, other->cartesianposx_);
  std::swap(cartesianposy_, other->cartesianposy_);
  std::swap(wgs84poslat_, other->wgs84poslat_);
  std::swap(wgs84poslong_, other->wgs84poslong_);
  std::swap(timeofday_, other->timeofday_);
  std::swap(tracktype_, other->tracktype_);
  std::swap(tracklastreport_, other->tracklastreport_);
  std::swap(extrapolation_, other->extrapolation_);
  std::swap(trackpositioncode_, other->trackpositioncode_);
  std::swap(sigmax_, other->sigmax_);
  std::swap(sigmay_, other->sigmay_);
  std::swap(sigmaxy_, other->sigmaxy_);
  std::swap(ampofpriplot_, other->ampofpriplot_);
  std::swap(cartesiantrkvel_vx_, other->cartesiantrkvel_vx_);
  std::swap(cartesiantrkvel_vy_, other->cartesiantrkvel_vy_);
  std::swap(cog_, other->cog_);
  std::swap(sog_, other->sog_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata TrackPoint::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TrackPoint_descriptor_;
  metadata.reflection = TrackPoint_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// TrackPoint

// required int32 systemAreaCode = 1;
bool TrackPoint::has_systemareacode() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void TrackPoint::set_has_systemareacode() {
  _has_bits_[0] |= 0x00000001u;
}
void TrackPoint::clear_has_systemareacode() {
  _has_bits_[0] &= ~0x00000001u;
}
void TrackPoint::clear_systemareacode() {
  systemareacode_ = 0;
  clear_has_systemareacode();
}
::google::protobuf::int32 TrackPoint::systemareacode() const {
  // @@protoc_insertion_point(field_get:com.zchxlab.radar.protobuf.TrackPoint.systemAreaCode)
  return systemareacode_;
}
void TrackPoint::set_systemareacode(::google::protobuf::int32 value) {
  set_has_systemareacode();
  systemareacode_ = value;
  // @@protoc_insertion_point(field_set:com.zchxlab.radar.protobuf.TrackPoint.systemAreaCode)
}

// required int32 systemIdentificationCode = 2;
bool TrackPoint::has_systemidentificationcode() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void TrackPoint::set_has_systemidentificationcode() {
  _has_bits_[0] |= 0x00000002u;
}
void TrackPoint::clear_has_systemidentificationcode() {
  _has_bits_[0] &= ~0x00000002u;
}
void TrackPoint::clear_systemidentificationcode() {
  systemidentificationcode_ = 0;
  clear_has_systemidentificationcode();
}
::google::protobuf::int32 TrackPoint::systemidentificationcode() const {
  // @@protoc_insertion_point(field_get:com.zchxlab.radar.protobuf.TrackPoint.systemIdentificationCode)
  return systemidentificationcode_;
}
void TrackPoint::set_systemidentificationcode(::google::protobuf::int32 value) {
  set_has_systemidentificationcode();
  systemidentificationcode_ = value;
  // @@protoc_insertion_point(field_set:com.zchxlab.radar.protobuf.TrackPoint.systemIdentificationCode)
}

// required .com.zchxlab.radar.protobuf.MSGTYP messageType = 3;
bool TrackPoint::has_messagetype() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void TrackPoint::set_has_messagetype() {
  _has_bits_[0] |= 0x00000004u;
}
void TrackPoint::clear_has_messagetype() {
  _has_bits_[0] &= ~0x00000004u;
}
void TrackPoint::clear_messagetype() {
  messagetype_ = 0;
  clear_has_messagetype();
}
::com::zchxlab::radar::protobuf::MSGTYP TrackPoint::messagetype() const {
  // @@protoc_insertion_point(field_get:com.zchxlab.radar.protobuf.TrackPoint.messageType)
  return static_cast< ::com::zchxlab::radar::protobuf::MSGTYP >(messagetype_);
}
void TrackPoint::set_messagetype(::com::zchxlab::radar::protobuf::MSGTYP value) {
  assert(::com::zchxlab::radar::protobuf::MSGTYP_IsValid(value));
  set_has_messagetype();
  messagetype_ = value;
  // @@protoc_insertion_point(field_set:com.zchxlab.radar.protobuf.TrackPoint.messageType)
}

// required uint32 trackNumber = 4;
bool TrackPoint::has_tracknumber() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void TrackPoint::set_has_tracknumber() {
  _has_bits_[0] |= 0x00000008u;
}
void TrackPoint::clear_has_tracknumber() {
  _has_bits_[0] &= ~0x00000008u;
}
void TrackPoint::clear_tracknumber() {
  tracknumber_ = 0u;
  clear_has_tracknumber();
}
::google::protobuf::uint32 TrackPoint::tracknumber() const {
  // @@protoc_insertion_point(field_get:com.zchxlab.radar.protobuf.TrackPoint.trackNumber)
  return tracknumber_;
}
void TrackPoint::set_tracknumber(::google::protobuf::uint32 value) {
  set_has_tracknumber();
  tracknumber_ = value;
  // @@protoc_insertion_point(field_set:com.zchxlab.radar.protobuf.TrackPoint.trackNumber)
}

// required float cartesianPosX = 5;
bool TrackPoint::has_cartesianposx() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void TrackPoint::set_has_cartesianposx() {
  _has_bits_[0] |= 0x00000010u;
}
void TrackPoint::clear_has_cartesianposx() {
  _has_bits_[0] &= ~0x00000010u;
}
void TrackPoint::clear_cartesianposx() {
  cartesianposx_ = 0;
  clear_has_cartesianposx();
}
float TrackPoint::cartesianposx() const {
  // @@protoc_insertion_point(field_get:com.zchxlab.radar.protobuf.TrackPoint.cartesianPosX)
  return cartesianposx_;
}
void TrackPoint::set_cartesianposx(float value) {
  set_has_cartesianposx();
  cartesianposx_ = value;
  // @@protoc_insertion_point(field_set:com.zchxlab.radar.protobuf.TrackPoint.cartesianPosX)
}

// required float cartesianPosY = 6;
bool TrackPoint::has_cartesianposy() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void TrackPoint::set_has_cartesianposy() {
  _has_bits_[0] |= 0x00000020u;
}
void TrackPoint::clear_has_cartesianposy() {
  _has_bits_[0] &= ~0x00000020u;
}
void TrackPoint::clear_cartesianposy() {
  cartesianposy_ = 0;
  clear_has_cartesianposy();
}
float TrackPoint::cartesianposy() const {
  // @@protoc_insertion_point(field_get:com.zchxlab.radar.protobuf.TrackPoint.cartesianPosY)
  return cartesianposy_;
}
void TrackPoint::set_cartesianposy(float value) {
  set_has_cartesianposy();
  cartesianposy_ = value;
  // @@protoc_insertion_point(field_set:com.zchxlab.radar.protobuf.TrackPoint.cartesianPosY)
}

// required double wgs84PosLat = 7;
bool TrackPoint::has_wgs84poslat() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void TrackPoint::set_has_wgs84poslat() {
  _has_bits_[0] |= 0x00000040u;
}
void TrackPoint::clear_has_wgs84poslat() {
  _has_bits_[0] &= ~0x00000040u;
}
void TrackPoint::clear_wgs84poslat() {
  wgs84poslat_ = 0;
  clear_has_wgs84poslat();
}
double TrackPoint::wgs84poslat() const {
  // @@protoc_insertion_point(field_get:com.zchxlab.radar.protobuf.TrackPoint.wgs84PosLat)
  return wgs84poslat_;
}
void TrackPoint::set_wgs84poslat(double value) {
  set_has_wgs84poslat();
  wgs84poslat_ = value;
  // @@protoc_insertion_point(field_set:com.zchxlab.radar.protobuf.TrackPoint.wgs84PosLat)
}

// required double wgs84PosLong = 8;
bool TrackPoint::has_wgs84poslong() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void TrackPoint::set_has_wgs84poslong() {
  _has_bits_[0] |= 0x00000080u;
}
void TrackPoint::clear_has_wgs84poslong() {
  _has_bits_[0] &= ~0x00000080u;
}
void TrackPoint::clear_wgs84poslong() {
  wgs84poslong_ = 0;
  clear_has_wgs84poslong();
}
double TrackPoint::wgs84poslong() const {
  // @@protoc_insertion_point(field_get:com.zchxlab.radar.protobuf.TrackPoint.wgs84PosLong)
  return wgs84poslong_;
}
void TrackPoint::set_wgs84poslong(double value) {
  set_has_wgs84poslong();
  wgs84poslong_ = value;
  // @@protoc_insertion_point(field_set:com.zchxlab.radar.protobuf.TrackPoint.wgs84PosLong)
}

// required float timeOfDay = 9;
bool TrackPoint::has_timeofday() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void TrackPoint::set_has_timeofday() {
  _has_bits_[0] |= 0x00000100u;
}
void TrackPoint::clear_has_timeofday() {
  _has_bits_[0] &= ~0x00000100u;
}
void TrackPoint::clear_timeofday() {
  timeofday_ = 0;
  clear_has_timeofday();
}
float TrackPoint::timeofday() const {
  // @@protoc_insertion_point(field_get:com.zchxlab.radar.protobuf.TrackPoint.timeOfDay)
  return timeofday_;
}
void TrackPoint::set_timeofday(float value) {
  set_has_timeofday();
  timeofday_ = value;
  // @@protoc_insertion_point(field_set:com.zchxlab.radar.protobuf.TrackPoint.timeOfDay)
}

// optional .com.zchxlab.radar.protobuf.CNF trackType = 10;
bool TrackPoint::has_tracktype() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void TrackPoint::set_has_tracktype() {
  _has_bits_[0] |= 0x00000200u;
}
void TrackPoint::clear_has_tracktype() {
  _has_bits_[0] &= ~0x00000200u;
}
void TrackPoint::clear_tracktype() {
  tracktype_ = 0;
  clear_has_tracktype();
}
::com::zchxlab::radar::protobuf::CNF TrackPoint::tracktype() const {
  // @@protoc_insertion_point(field_get:com.zchxlab.radar.protobuf.TrackPoint.trackType)
  return static_cast< ::com::zchxlab::radar::protobuf::CNF >(tracktype_);
}
void TrackPoint::set_tracktype(::com::zchxlab::radar::protobuf::CNF value) {
  assert(::com::zchxlab::radar::protobuf::CNF_IsValid(value));
  set_has_tracktype();
  tracktype_ = value;
  // @@protoc_insertion_point(field_set:com.zchxlab.radar.protobuf.TrackPoint.trackType)
}

// optional bool trackLastReport = 11;
bool TrackPoint::has_tracklastreport() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
void TrackPoint::set_has_tracklastreport() {
  _has_bits_[0] |= 0x00000400u;
}
void TrackPoint::clear_has_tracklastreport() {
  _has_bits_[0] &= ~0x00000400u;
}
void TrackPoint::clear_tracklastreport() {
  tracklastreport_ = false;
  clear_has_tracklastreport();
}
bool TrackPoint::tracklastreport() const {
  // @@protoc_insertion_point(field_get:com.zchxlab.radar.protobuf.TrackPoint.trackLastReport)
  return tracklastreport_;
}
void TrackPoint::set_tracklastreport(bool value) {
  set_has_tracklastreport();
  tracklastreport_ = value;
  // @@protoc_insertion_point(field_set:com.zchxlab.radar.protobuf.TrackPoint.trackLastReport)
}

// optional .com.zchxlab.radar.protobuf.CST extrapolation = 12;
bool TrackPoint::has_extrapolation() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
void TrackPoint::set_has_extrapolation() {
  _has_bits_[0] |= 0x00000800u;
}
void TrackPoint::clear_has_extrapolation() {
  _has_bits_[0] &= ~0x00000800u;
}
void TrackPoint::clear_extrapolation() {
  extrapolation_ = 0;
  clear_has_extrapolation();
}
::com::zchxlab::radar::protobuf::CST TrackPoint::extrapolation() const {
  // @@protoc_insertion_point(field_get:com.zchxlab.radar.protobuf.TrackPoint.extrapolation)
  return static_cast< ::com::zchxlab::radar::protobuf::CST >(extrapolation_);
}
void TrackPoint::set_extrapolation(::com::zchxlab::radar::protobuf::CST value) {
  assert(::com::zchxlab::radar::protobuf::CST_IsValid(value));
  set_has_extrapolation();
  extrapolation_ = value;
  // @@protoc_insertion_point(field_set:com.zchxlab.radar.protobuf.TrackPoint.extrapolation)
}

// optional .com.zchxlab.radar.protobuf.STH trackPositionCode = 13;
bool TrackPoint::has_trackpositioncode() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
void TrackPoint::set_has_trackpositioncode() {
  _has_bits_[0] |= 0x00001000u;
}
void TrackPoint::clear_has_trackpositioncode() {
  _has_bits_[0] &= ~0x00001000u;
}
void TrackPoint::clear_trackpositioncode() {
  trackpositioncode_ = 0;
  clear_has_trackpositioncode();
}
::com::zchxlab::radar::protobuf::STH TrackPoint::trackpositioncode() const {
  // @@protoc_insertion_point(field_get:com.zchxlab.radar.protobuf.TrackPoint.trackPositionCode)
  return static_cast< ::com::zchxlab::radar::protobuf::STH >(trackpositioncode_);
}
void TrackPoint::set_trackpositioncode(::com::zchxlab::radar::protobuf::STH value) {
  assert(::com::zchxlab::radar::protobuf::STH_IsValid(value));
  set_has_trackpositioncode();
  trackpositioncode_ = value;
  // @@protoc_insertion_point(field_set:com.zchxlab.radar.protobuf.TrackPoint.trackPositionCode)
}

// optional float sigmaX = 14;
bool TrackPoint::has_sigmax() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
void TrackPoint::set_has_sigmax() {
  _has_bits_[0] |= 0x00002000u;
}
void TrackPoint::clear_has_sigmax() {
  _has_bits_[0] &= ~0x00002000u;
}
void TrackPoint::clear_sigmax() {
  sigmax_ = 0;
  clear_has_sigmax();
}
float TrackPoint::sigmax() const {
  // @@protoc_insertion_point(field_get:com.zchxlab.radar.protobuf.TrackPoint.sigmaX)
  return sigmax_;
}
void TrackPoint::set_sigmax(float value) {
  set_has_sigmax();
  sigmax_ = value;
  // @@protoc_insertion_point(field_set:com.zchxlab.radar.protobuf.TrackPoint.sigmaX)
}

// optional float sigmaY = 15;
bool TrackPoint::has_sigmay() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
void TrackPoint::set_has_sigmay() {
  _has_bits_[0] |= 0x00004000u;
}
void TrackPoint::clear_has_sigmay() {
  _has_bits_[0] &= ~0x00004000u;
}
void TrackPoint::clear_sigmay() {
  sigmay_ = 0;
  clear_has_sigmay();
}
float TrackPoint::sigmay() const {
  // @@protoc_insertion_point(field_get:com.zchxlab.radar.protobuf.TrackPoint.sigmaY)
  return sigmay_;
}
void TrackPoint::set_sigmay(float value) {
  set_has_sigmay();
  sigmay_ = value;
  // @@protoc_insertion_point(field_set:com.zchxlab.radar.protobuf.TrackPoint.sigmaY)
}

// optional float sigmaXY = 16;
bool TrackPoint::has_sigmaxy() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
void TrackPoint::set_has_sigmaxy() {
  _has_bits_[0] |= 0x00008000u;
}
void TrackPoint::clear_has_sigmaxy() {
  _has_bits_[0] &= ~0x00008000u;
}
void TrackPoint::clear_sigmaxy() {
  sigmaxy_ = 0;
  clear_has_sigmaxy();
}
float TrackPoint::sigmaxy() const {
  // @@protoc_insertion_point(field_get:com.zchxlab.radar.protobuf.TrackPoint.sigmaXY)
  return sigmaxy_;
}
void TrackPoint::set_sigmaxy(float value) {
  set_has_sigmaxy();
  sigmaxy_ = value;
  // @@protoc_insertion_point(field_set:com.zchxlab.radar.protobuf.TrackPoint.sigmaXY)
}

// optional float ampOfPriPlot = 17;
bool TrackPoint::has_ampofpriplot() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
void TrackPoint::set_has_ampofpriplot() {
  _has_bits_[0] |= 0x00010000u;
}
void TrackPoint::clear_has_ampofpriplot() {
  _has_bits_[0] &= ~0x00010000u;
}
void TrackPoint::clear_ampofpriplot() {
  ampofpriplot_ = 0;
  clear_has_ampofpriplot();
}
float TrackPoint::ampofpriplot() const {
  // @@protoc_insertion_point(field_get:com.zchxlab.radar.protobuf.TrackPoint.ampOfPriPlot)
  return ampofpriplot_;
}
void TrackPoint::set_ampofpriplot(float value) {
  set_has_ampofpriplot();
  ampofpriplot_ = value;
  // @@protoc_insertion_point(field_set:com.zchxlab.radar.protobuf.TrackPoint.ampOfPriPlot)
}

// required double cartesianTrkVel_vx = 18;
bool TrackPoint::has_cartesiantrkvel_vx() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
void TrackPoint::set_has_cartesiantrkvel_vx() {
  _has_bits_[0] |= 0x00020000u;
}
void TrackPoint::clear_has_cartesiantrkvel_vx() {
  _has_bits_[0] &= ~0x00020000u;
}
void TrackPoint::clear_cartesiantrkvel_vx() {
  cartesiantrkvel_vx_ = 0;
  clear_has_cartesiantrkvel_vx();
}
double TrackPoint::cartesiantrkvel_vx() const {
  // @@protoc_insertion_point(field_get:com.zchxlab.radar.protobuf.TrackPoint.cartesianTrkVel_vx)
  return cartesiantrkvel_vx_;
}
void TrackPoint::set_cartesiantrkvel_vx(double value) {
  set_has_cartesiantrkvel_vx();
  cartesiantrkvel_vx_ = value;
  // @@protoc_insertion_point(field_set:com.zchxlab.radar.protobuf.TrackPoint.cartesianTrkVel_vx)
}

// required double cartesianTrkVel_vy = 19;
bool TrackPoint::has_cartesiantrkvel_vy() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
void TrackPoint::set_has_cartesiantrkvel_vy() {
  _has_bits_[0] |= 0x00040000u;
}
void TrackPoint::clear_has_cartesiantrkvel_vy() {
  _has_bits_[0] &= ~0x00040000u;
}
void TrackPoint::clear_cartesiantrkvel_vy() {
  cartesiantrkvel_vy_ = 0;
  clear_has_cartesiantrkvel_vy();
}
double TrackPoint::cartesiantrkvel_vy() const {
  // @@protoc_insertion_point(field_get:com.zchxlab.radar.protobuf.TrackPoint.cartesianTrkVel_vy)
  return cartesiantrkvel_vy_;
}
void TrackPoint::set_cartesiantrkvel_vy(double value) {
  set_has_cartesiantrkvel_vy();
  cartesiantrkvel_vy_ = value;
  // @@protoc_insertion_point(field_set:com.zchxlab.radar.protobuf.TrackPoint.cartesianTrkVel_vy)
}

// required double cog = 20;
bool TrackPoint::has_cog() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
void TrackPoint::set_has_cog() {
  _has_bits_[0] |= 0x00080000u;
}
void TrackPoint::clear_has_cog() {
  _has_bits_[0] &= ~0x00080000u;
}
void TrackPoint::clear_cog() {
  cog_ = 0;
  clear_has_cog();
}
double TrackPoint::cog() const {
  // @@protoc_insertion_point(field_get:com.zchxlab.radar.protobuf.TrackPoint.cog)
  return cog_;
}
void TrackPoint::set_cog(double value) {
  set_has_cog();
  cog_ = value;
  // @@protoc_insertion_point(field_set:com.zchxlab.radar.protobuf.TrackPoint.cog)
}

// required double sog = 21;
bool TrackPoint::has_sog() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
void TrackPoint::set_has_sog() {
  _has_bits_[0] |= 0x00100000u;
}
void TrackPoint::clear_has_sog() {
  _has_bits_[0] &= ~0x00100000u;
}
void TrackPoint::clear_sog() {
  sog_ = 0;
  clear_has_sog();
}
double TrackPoint::sog() const {
  // @@protoc_insertion_point(field_get:com.zchxlab.radar.protobuf.TrackPoint.sog)
  return sog_;
}
void TrackPoint::set_sog(double value) {
  set_has_sog();
  sog_ = value;
  // @@protoc_insertion_point(field_set:com.zchxlab.radar.protobuf.TrackPoint.sog)
}

inline const TrackPoint* TrackPoint::internal_default_instance() {
  return &TrackPoint_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int VideoFrame::kSystemAreaCodeFieldNumber;
const int VideoFrame::kSystemIdentificationCodeFieldNumber;
const int VideoFrame::kMsgIndexFieldNumber;
const int VideoFrame::kAzimuthFieldNumber;
const int VideoFrame::kHeadingFieldNumber;
const int VideoFrame::kStartRangeFieldNumber;
const int VideoFrame::kRangeFactorFieldNumber;
const int VideoFrame::kBitResolutionFieldNumber;
const int VideoFrame::kTimeOfDayFieldNumber;
const int VideoFrame::kAmplitudeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

VideoFrame::VideoFrame()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_ZCHXRadar_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.zchxlab.radar.protobuf.VideoFrame)
}

void VideoFrame::InitAsDefaultInstance() {
}

VideoFrame::VideoFrame(const VideoFrame& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:com.zchxlab.radar.protobuf.VideoFrame)
}

void VideoFrame::SharedCtor() {
  _cached_size_ = 0;
  ::memset(&systemareacode_, 0, reinterpret_cast<char*>(&timeofday_) -
    reinterpret_cast<char*>(&systemareacode_) + sizeof(timeofday_));
  bitresolution_ = 1;
}

VideoFrame::~VideoFrame() {
  // @@protoc_insertion_point(destructor:com.zchxlab.radar.protobuf.VideoFrame)
  SharedDtor();
}

void VideoFrame::SharedDtor() {
}

void VideoFrame::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* VideoFrame::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return VideoFrame_descriptor_;
}

const VideoFrame& VideoFrame::default_instance() {
  protobuf_InitDefaults_ZCHXRadar_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<VideoFrame> VideoFrame_default_instance_;

VideoFrame* VideoFrame::New(::google::protobuf::Arena* arena) const {
  VideoFrame* n = new VideoFrame;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void VideoFrame::Clear() {
// @@protoc_insertion_point(message_clear_start:com.zchxlab.radar.protobuf.VideoFrame)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(VideoFrame, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<VideoFrame*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 255u) {
    ZR_(systemareacode_, heading_);
    bitresolution_ = 1;
  }
  timeofday_ = 0;

#undef ZR_HELPER_
#undef ZR_

  amplitude_.Clear();
  _has_bits_.Clear();
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool VideoFrame::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.zchxlab.radar.protobuf.VideoFrame)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 systemAreaCode = 1;
      case 1: {
        if (tag == 8) {
          set_has_systemareacode();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &systemareacode_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_systemIdentificationCode;
        break;
      }

      // required int32 systemIdentificationCode = 2;
      case 2: {
        if (tag == 16) {
         parse_systemIdentificationCode:
          set_has_systemidentificationcode();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &systemidentificationcode_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_msgIndex;
        break;
      }

      // required int32 msgIndex = 3;
      case 3: {
        if (tag == 24) {
         parse_msgIndex:
          set_has_msgindex();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &msgindex_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_azimuth;
        break;
      }

      // required uint32 azimuth = 4;
      case 4: {
        if (tag == 32) {
         parse_azimuth:
          set_has_azimuth();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &azimuth_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_heading;
        break;
      }

      // optional uint32 heading = 5;
      case 5: {
        if (tag == 40) {
         parse_heading:
          set_has_heading();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &heading_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(49)) goto parse_startRange;
        break;
      }

      // required double startRange = 6;
      case 6: {
        if (tag == 49) {
         parse_startRange:
          set_has_startrange();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &startrange_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(57)) goto parse_rangeFactor;
        break;
      }

      // required double rangeFactor = 7;
      case 7: {
        if (tag == 57) {
         parse_rangeFactor:
          set_has_rangefactor();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &rangefactor_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_bitResolution;
        break;
      }

      // required .com.zchxlab.radar.protobuf.RES bitResolution = 8;
      case 8: {
        if (tag == 64) {
         parse_bitResolution:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::com::zchxlab::radar::protobuf::RES_IsValid(value)) {
            set_bitresolution(static_cast< ::com::zchxlab::radar::protobuf::RES >(value));
          } else {
            mutable_unknown_fields()->AddVarint(8, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_timeOfDay;
        break;
      }

      // required int32 timeOfDay = 9;
      case 9: {
        if (tag == 72) {
         parse_timeOfDay:
          set_has_timeofday();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &timeofday_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_amplitude;
        break;
      }

      // repeated int32 amplitude = 10;
      case 10: {
        if (tag == 80) {
         parse_amplitude:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 80, input, this->mutable_amplitude())));
        } else if (tag == 82) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_amplitude())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_amplitude;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.zchxlab.radar.protobuf.VideoFrame)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.zchxlab.radar.protobuf.VideoFrame)
  return false;
#undef DO_
}

void VideoFrame::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.zchxlab.radar.protobuf.VideoFrame)
  // required int32 systemAreaCode = 1;
  if (has_systemareacode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->systemareacode(), output);
  }

  // required int32 systemIdentificationCode = 2;
  if (has_systemidentificationcode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->systemidentificationcode(), output);
  }

  // required int32 msgIndex = 3;
  if (has_msgindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->msgindex(), output);
  }

  // required uint32 azimuth = 4;
  if (has_azimuth()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->azimuth(), output);
  }

  // optional uint32 heading = 5;
  if (has_heading()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->heading(), output);
  }

  // required double startRange = 6;
  if (has_startrange()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->startrange(), output);
  }

  // required double rangeFactor = 7;
  if (has_rangefactor()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(7, this->rangefactor(), output);
  }

  // required .com.zchxlab.radar.protobuf.RES bitResolution = 8;
  if (has_bitresolution()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      8, this->bitresolution(), output);
  }

  // required int32 timeOfDay = 9;
  if (has_timeofday()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->timeofday(), output);
  }

  // repeated int32 amplitude = 10;
  for (int i = 0; i < this->amplitude_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      10, this->amplitude(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.zchxlab.radar.protobuf.VideoFrame)
}

::google::protobuf::uint8* VideoFrame::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:com.zchxlab.radar.protobuf.VideoFrame)
  // required int32 systemAreaCode = 1;
  if (has_systemareacode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->systemareacode(), target);
  }

  // required int32 systemIdentificationCode = 2;
  if (has_systemidentificationcode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->systemidentificationcode(), target);
  }

  // required int32 msgIndex = 3;
  if (has_msgindex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->msgindex(), target);
  }

  // required uint32 azimuth = 4;
  if (has_azimuth()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->azimuth(), target);
  }

  // optional uint32 heading = 5;
  if (has_heading()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->heading(), target);
  }

  // required double startRange = 6;
  if (has_startrange()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->startrange(), target);
  }

  // required double rangeFactor = 7;
  if (has_rangefactor()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(7, this->rangefactor(), target);
  }

  // required .com.zchxlab.radar.protobuf.RES bitResolution = 8;
  if (has_bitresolution()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      8, this->bitresolution(), target);
  }

  // required int32 timeOfDay = 9;
  if (has_timeofday()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->timeofday(), target);
  }

  // repeated int32 amplitude = 10;
  for (int i = 0; i < this->amplitude_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(10, this->amplitude(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.zchxlab.radar.protobuf.VideoFrame)
  return target;
}

size_t VideoFrame::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:com.zchxlab.radar.protobuf.VideoFrame)
  size_t total_size = 0;

  if (has_systemareacode()) {
    // required int32 systemAreaCode = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->systemareacode());
  }

  if (has_systemidentificationcode()) {
    // required int32 systemIdentificationCode = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->systemidentificationcode());
  }

  if (has_msgindex()) {
    // required int32 msgIndex = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->msgindex());
  }

  if (has_azimuth()) {
    // required uint32 azimuth = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->azimuth());
  }

  if (has_startrange()) {
    // required double startRange = 6;
    total_size += 1 + 8;
  }

  if (has_rangefactor()) {
    // required double rangeFactor = 7;
    total_size += 1 + 8;
  }

  if (has_bitresolution()) {
    // required .com.zchxlab.radar.protobuf.RES bitResolution = 8;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->bitresolution());
  }

  if (has_timeofday()) {
    // required int32 timeOfDay = 9;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->timeofday());
  }

  return total_size;
}
size_t VideoFrame::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.zchxlab.radar.protobuf.VideoFrame)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x000001ef) ^ 0x000001ef) == 0) {  // All required fields are present.
    // required int32 systemAreaCode = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->systemareacode());

    // required int32 systemIdentificationCode = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->systemidentificationcode());

    // required int32 msgIndex = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->msgindex());

    // required uint32 azimuth = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->azimuth());

    // required double startRange = 6;
    total_size += 1 + 8;

    // required double rangeFactor = 7;
    total_size += 1 + 8;

    // required .com.zchxlab.radar.protobuf.RES bitResolution = 8;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->bitresolution());

    // required int32 timeOfDay = 9;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->timeofday());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // optional uint32 heading = 5;
  if (has_heading()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->heading());
  }

  // repeated int32 amplitude = 10;
  {
    size_t data_size = 0;
    unsigned int count = this->amplitude_size();
    for (unsigned int i = 0; i < count; i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->amplitude(i));
    }
    total_size += 1 *
                  ::google::protobuf::internal::FromIntSize(this->amplitude_size());
    total_size += data_size;
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void VideoFrame::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.zchxlab.radar.protobuf.VideoFrame)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const VideoFrame* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const VideoFrame>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.zchxlab.radar.protobuf.VideoFrame)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.zchxlab.radar.protobuf.VideoFrame)
    UnsafeMergeFrom(*source);
  }
}

void VideoFrame::MergeFrom(const VideoFrame& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.zchxlab.radar.protobuf.VideoFrame)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void VideoFrame::UnsafeMergeFrom(const VideoFrame& from) {
  GOOGLE_DCHECK(&from != this);
  amplitude_.UnsafeMergeFrom(from.amplitude_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_systemareacode()) {
      set_systemareacode(from.systemareacode());
    }
    if (from.has_systemidentificationcode()) {
      set_systemidentificationcode(from.systemidentificationcode());
    }
    if (from.has_msgindex()) {
      set_msgindex(from.msgindex());
    }
    if (from.has_azimuth()) {
      set_azimuth(from.azimuth());
    }
    if (from.has_heading()) {
      set_heading(from.heading());
    }
    if (from.has_startrange()) {
      set_startrange(from.startrange());
    }
    if (from.has_rangefactor()) {
      set_rangefactor(from.rangefactor());
    }
    if (from.has_bitresolution()) {
      set_bitresolution(from.bitresolution());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_timeofday()) {
      set_timeofday(from.timeofday());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::UnknownFieldSet::MergeToInternalMetdata(
      from.unknown_fields(), &_internal_metadata_);
  }
}

void VideoFrame::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.zchxlab.radar.protobuf.VideoFrame)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VideoFrame::CopyFrom(const VideoFrame& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.zchxlab.radar.protobuf.VideoFrame)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool VideoFrame::IsInitialized() const {
  if ((_has_bits_[0] & 0x000001ef) != 0x000001ef) return false;

  return true;
}

void VideoFrame::Swap(VideoFrame* other) {
  if (other == this) return;
  InternalSwap(other);
}
void VideoFrame::InternalSwap(VideoFrame* other) {
  std::swap(systemareacode_, other->systemareacode_);
  std::swap(systemidentificationcode_, other->systemidentificationcode_);
  std::swap(msgindex_, other->msgindex_);
  std::swap(azimuth_, other->azimuth_);
  std::swap(heading_, other->heading_);
  std::swap(startrange_, other->startrange_);
  std::swap(rangefactor_, other->rangefactor_);
  std::swap(bitresolution_, other->bitresolution_);
  std::swap(timeofday_, other->timeofday_);
  amplitude_.UnsafeArenaSwap(&other->amplitude_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata VideoFrame::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = VideoFrame_descriptor_;
  metadata.reflection = VideoFrame_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// VideoFrame

// required int32 systemAreaCode = 1;
bool VideoFrame::has_systemareacode() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void VideoFrame::set_has_systemareacode() {
  _has_bits_[0] |= 0x00000001u;
}
void VideoFrame::clear_has_systemareacode() {
  _has_bits_[0] &= ~0x00000001u;
}
void VideoFrame::clear_systemareacode() {
  systemareacode_ = 0;
  clear_has_systemareacode();
}
::google::protobuf::int32 VideoFrame::systemareacode() const {
  // @@protoc_insertion_point(field_get:com.zchxlab.radar.protobuf.VideoFrame.systemAreaCode)
  return systemareacode_;
}
void VideoFrame::set_systemareacode(::google::protobuf::int32 value) {
  set_has_systemareacode();
  systemareacode_ = value;
  // @@protoc_insertion_point(field_set:com.zchxlab.radar.protobuf.VideoFrame.systemAreaCode)
}

// required int32 systemIdentificationCode = 2;
bool VideoFrame::has_systemidentificationcode() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void VideoFrame::set_has_systemidentificationcode() {
  _has_bits_[0] |= 0x00000002u;
}
void VideoFrame::clear_has_systemidentificationcode() {
  _has_bits_[0] &= ~0x00000002u;
}
void VideoFrame::clear_systemidentificationcode() {
  systemidentificationcode_ = 0;
  clear_has_systemidentificationcode();
}
::google::protobuf::int32 VideoFrame::systemidentificationcode() const {
  // @@protoc_insertion_point(field_get:com.zchxlab.radar.protobuf.VideoFrame.systemIdentificationCode)
  return systemidentificationcode_;
}
void VideoFrame::set_systemidentificationcode(::google::protobuf::int32 value) {
  set_has_systemidentificationcode();
  systemidentificationcode_ = value;
  // @@protoc_insertion_point(field_set:com.zchxlab.radar.protobuf.VideoFrame.systemIdentificationCode)
}

// required int32 msgIndex = 3;
bool VideoFrame::has_msgindex() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void VideoFrame::set_has_msgindex() {
  _has_bits_[0] |= 0x00000004u;
}
void VideoFrame::clear_has_msgindex() {
  _has_bits_[0] &= ~0x00000004u;
}
void VideoFrame::clear_msgindex() {
  msgindex_ = 0;
  clear_has_msgindex();
}
::google::protobuf::int32 VideoFrame::msgindex() const {
  // @@protoc_insertion_point(field_get:com.zchxlab.radar.protobuf.VideoFrame.msgIndex)
  return msgindex_;
}
void VideoFrame::set_msgindex(::google::protobuf::int32 value) {
  set_has_msgindex();
  msgindex_ = value;
  // @@protoc_insertion_point(field_set:com.zchxlab.radar.protobuf.VideoFrame.msgIndex)
}

// required uint32 azimuth = 4;
bool VideoFrame::has_azimuth() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void VideoFrame::set_has_azimuth() {
  _has_bits_[0] |= 0x00000008u;
}
void VideoFrame::clear_has_azimuth() {
  _has_bits_[0] &= ~0x00000008u;
}
void VideoFrame::clear_azimuth() {
  azimuth_ = 0u;
  clear_has_azimuth();
}
::google::protobuf::uint32 VideoFrame::azimuth() const {
  // @@protoc_insertion_point(field_get:com.zchxlab.radar.protobuf.VideoFrame.azimuth)
  return azimuth_;
}
void VideoFrame::set_azimuth(::google::protobuf::uint32 value) {
  set_has_azimuth();
  azimuth_ = value;
  // @@protoc_insertion_point(field_set:com.zchxlab.radar.protobuf.VideoFrame.azimuth)
}

// optional uint32 heading = 5;
bool VideoFrame::has_heading() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void VideoFrame::set_has_heading() {
  _has_bits_[0] |= 0x00000010u;
}
void VideoFrame::clear_has_heading() {
  _has_bits_[0] &= ~0x00000010u;
}
void VideoFrame::clear_heading() {
  heading_ = 0u;
  clear_has_heading();
}
::google::protobuf::uint32 VideoFrame::heading() const {
  // @@protoc_insertion_point(field_get:com.zchxlab.radar.protobuf.VideoFrame.heading)
  return heading_;
}
void VideoFrame::set_heading(::google::protobuf::uint32 value) {
  set_has_heading();
  heading_ = value;
  // @@protoc_insertion_point(field_set:com.zchxlab.radar.protobuf.VideoFrame.heading)
}

// required double startRange = 6;
bool VideoFrame::has_startrange() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void VideoFrame::set_has_startrange() {
  _has_bits_[0] |= 0x00000020u;
}
void VideoFrame::clear_has_startrange() {
  _has_bits_[0] &= ~0x00000020u;
}
void VideoFrame::clear_startrange() {
  startrange_ = 0;
  clear_has_startrange();
}
double VideoFrame::startrange() const {
  // @@protoc_insertion_point(field_get:com.zchxlab.radar.protobuf.VideoFrame.startRange)
  return startrange_;
}
void VideoFrame::set_startrange(double value) {
  set_has_startrange();
  startrange_ = value;
  // @@protoc_insertion_point(field_set:com.zchxlab.radar.protobuf.VideoFrame.startRange)
}

// required double rangeFactor = 7;
bool VideoFrame::has_rangefactor() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void VideoFrame::set_has_rangefactor() {
  _has_bits_[0] |= 0x00000040u;
}
void VideoFrame::clear_has_rangefactor() {
  _has_bits_[0] &= ~0x00000040u;
}
void VideoFrame::clear_rangefactor() {
  rangefactor_ = 0;
  clear_has_rangefactor();
}
double VideoFrame::rangefactor() const {
  // @@protoc_insertion_point(field_get:com.zchxlab.radar.protobuf.VideoFrame.rangeFactor)
  return rangefactor_;
}
void VideoFrame::set_rangefactor(double value) {
  set_has_rangefactor();
  rangefactor_ = value;
  // @@protoc_insertion_point(field_set:com.zchxlab.radar.protobuf.VideoFrame.rangeFactor)
}

// required .com.zchxlab.radar.protobuf.RES bitResolution = 8;
bool VideoFrame::has_bitresolution() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void VideoFrame::set_has_bitresolution() {
  _has_bits_[0] |= 0x00000080u;
}
void VideoFrame::clear_has_bitresolution() {
  _has_bits_[0] &= ~0x00000080u;
}
void VideoFrame::clear_bitresolution() {
  bitresolution_ = 1;
  clear_has_bitresolution();
}
::com::zchxlab::radar::protobuf::RES VideoFrame::bitresolution() const {
  // @@protoc_insertion_point(field_get:com.zchxlab.radar.protobuf.VideoFrame.bitResolution)
  return static_cast< ::com::zchxlab::radar::protobuf::RES >(bitresolution_);
}
void VideoFrame::set_bitresolution(::com::zchxlab::radar::protobuf::RES value) {
  assert(::com::zchxlab::radar::protobuf::RES_IsValid(value));
  set_has_bitresolution();
  bitresolution_ = value;
  // @@protoc_insertion_point(field_set:com.zchxlab.radar.protobuf.VideoFrame.bitResolution)
}

// required int32 timeOfDay = 9;
bool VideoFrame::has_timeofday() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void VideoFrame::set_has_timeofday() {
  _has_bits_[0] |= 0x00000100u;
}
void VideoFrame::clear_has_timeofday() {
  _has_bits_[0] &= ~0x00000100u;
}
void VideoFrame::clear_timeofday() {
  timeofday_ = 0;
  clear_has_timeofday();
}
::google::protobuf::int32 VideoFrame::timeofday() const {
  // @@protoc_insertion_point(field_get:com.zchxlab.radar.protobuf.VideoFrame.timeOfDay)
  return timeofday_;
}
void VideoFrame::set_timeofday(::google::protobuf::int32 value) {
  set_has_timeofday();
  timeofday_ = value;
  // @@protoc_insertion_point(field_set:com.zchxlab.radar.protobuf.VideoFrame.timeOfDay)
}

// repeated int32 amplitude = 10;
int VideoFrame::amplitude_size() const {
  return amplitude_.size();
}
void VideoFrame::clear_amplitude() {
  amplitude_.Clear();
}
::google::protobuf::int32 VideoFrame::amplitude(int index) const {
  // @@protoc_insertion_point(field_get:com.zchxlab.radar.protobuf.VideoFrame.amplitude)
  return amplitude_.Get(index);
}
void VideoFrame::set_amplitude(int index, ::google::protobuf::int32 value) {
  amplitude_.Set(index, value);
  // @@protoc_insertion_point(field_set:com.zchxlab.radar.protobuf.VideoFrame.amplitude)
}
void VideoFrame::add_amplitude(::google::protobuf::int32 value) {
  amplitude_.Add(value);
  // @@protoc_insertion_point(field_add:com.zchxlab.radar.protobuf.VideoFrame.amplitude)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
VideoFrame::amplitude() const {
  // @@protoc_insertion_point(field_list:com.zchxlab.radar.protobuf.VideoFrame.amplitude)
  return amplitude_;
}
::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
VideoFrame::mutable_amplitude() {
  // @@protoc_insertion_point(field_mutable_list:com.zchxlab.radar.protobuf.VideoFrame.amplitude)
  return &amplitude_;
}

inline const VideoFrame* VideoFrame::internal_default_instance() {
  return &VideoFrame_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RadarVideoPNG::kRadarIdFieldNumber;
const int RadarVideoPNG::kRadarNameFieldNumber;
const int RadarVideoPNG::kLatitudeFieldNumber;
const int RadarVideoPNG::kLongitudeFieldNumber;
const int RadarVideoPNG::kUTCFieldNumber;
const int RadarVideoPNG::kImageDataFieldNumber;
const int RadarVideoPNG::kWidthFieldNumber;
const int RadarVideoPNG::kHeightFieldNumber;
const int RadarVideoPNG::kRadiusFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RadarVideoPNG::RadarVideoPNG()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_ZCHXRadar_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.zchxlab.radar.protobuf.RadarVideoPNG)
}

void RadarVideoPNG::InitAsDefaultInstance() {
}

RadarVideoPNG::RadarVideoPNG(const RadarVideoPNG& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:com.zchxlab.radar.protobuf.RadarVideoPNG)
}

void RadarVideoPNG::SharedCtor() {
  _cached_size_ = 0;
  radarname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  imagedata_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&radarid_, 0, reinterpret_cast<char*>(&radius_) -
    reinterpret_cast<char*>(&radarid_) + sizeof(radius_));
}

RadarVideoPNG::~RadarVideoPNG() {
  // @@protoc_insertion_point(destructor:com.zchxlab.radar.protobuf.RadarVideoPNG)
  SharedDtor();
}

void RadarVideoPNG::SharedDtor() {
  radarname_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  imagedata_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void RadarVideoPNG::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RadarVideoPNG::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RadarVideoPNG_descriptor_;
}

const RadarVideoPNG& RadarVideoPNG::default_instance() {
  protobuf_InitDefaults_ZCHXRadar_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<RadarVideoPNG> RadarVideoPNG_default_instance_;

RadarVideoPNG* RadarVideoPNG::New(::google::protobuf::Arena* arena) const {
  RadarVideoPNG* n = new RadarVideoPNG;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RadarVideoPNG::Clear() {
// @@protoc_insertion_point(message_clear_start:com.zchxlab.radar.protobuf.RadarVideoPNG)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(RadarVideoPNG, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<RadarVideoPNG*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 255u) {
    ZR_(radarid_, height_);
    if (has_radarname()) {
      radarname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_imagedata()) {
      imagedata_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }
  radius_ = 0;

#undef ZR_HELPER_
#undef ZR_

  _has_bits_.Clear();
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool RadarVideoPNG::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.zchxlab.radar.protobuf.RadarVideoPNG)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 radarId = 1;
      case 1: {
        if (tag == 8) {
          set_has_radarid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &radarid_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_radarName;
        break;
      }

      // required string radarName = 2;
      case 2: {
        if (tag == 18) {
         parse_radarName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_radarname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->radarname().data(), this->radarname().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "com.zchxlab.radar.protobuf.RadarVideoPNG.radarName");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(25)) goto parse_latitude;
        break;
      }

      // required double latitude = 3;
      case 3: {
        if (tag == 25) {
         parse_latitude:
          set_has_latitude();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &latitude_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(33)) goto parse_longitude;
        break;
      }

      // required double longitude = 4;
      case 4: {
        if (tag == 33) {
         parse_longitude:
          set_has_longitude();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &longitude_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_UTC;
        break;
      }

      // required uint64 UTC = 5;
      case 5: {
        if (tag == 40) {
         parse_UTC:
          set_has_utc();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &utc_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_imageData;
        break;
      }

      // required bytes imageData = 6;
      case 6: {
        if (tag == 50) {
         parse_imageData:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_imagedata()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_width;
        break;
      }

      // required uint32 width = 7;
      case 7: {
        if (tag == 56) {
         parse_width:
          set_has_width();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &width_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_height;
        break;
      }

      // required uint32 height = 8;
      case 8: {
        if (tag == 64) {
         parse_height:
          set_has_height();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &height_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(73)) goto parse_radius;
        break;
      }

      // optional double radius = 9;
      case 9: {
        if (tag == 73) {
         parse_radius:
          set_has_radius();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &radius_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.zchxlab.radar.protobuf.RadarVideoPNG)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.zchxlab.radar.protobuf.RadarVideoPNG)
  return false;
#undef DO_
}

void RadarVideoPNG::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.zchxlab.radar.protobuf.RadarVideoPNG)
  // required uint64 radarId = 1;
  if (has_radarid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->radarid(), output);
  }

  // required string radarName = 2;
  if (has_radarname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->radarname().data(), this->radarname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "com.zchxlab.radar.protobuf.RadarVideoPNG.radarName");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->radarname(), output);
  }

  // required double latitude = 3;
  if (has_latitude()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->latitude(), output);
  }

  // required double longitude = 4;
  if (has_longitude()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->longitude(), output);
  }

  // required uint64 UTC = 5;
  if (has_utc()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->utc(), output);
  }

  // required bytes imageData = 6;
  if (has_imagedata()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      6, this->imagedata(), output);
  }

  // required uint32 width = 7;
  if (has_width()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->width(), output);
  }

  // required uint32 height = 8;
  if (has_height()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->height(), output);
  }

  // optional double radius = 9;
  if (has_radius()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(9, this->radius(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.zchxlab.radar.protobuf.RadarVideoPNG)
}

::google::protobuf::uint8* RadarVideoPNG::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:com.zchxlab.radar.protobuf.RadarVideoPNG)
  // required uint64 radarId = 1;
  if (has_radarid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->radarid(), target);
  }

  // required string radarName = 2;
  if (has_radarname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->radarname().data(), this->radarname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "com.zchxlab.radar.protobuf.RadarVideoPNG.radarName");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->radarname(), target);
  }

  // required double latitude = 3;
  if (has_latitude()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->latitude(), target);
  }

  // required double longitude = 4;
  if (has_longitude()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->longitude(), target);
  }

  // required uint64 UTC = 5;
  if (has_utc()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->utc(), target);
  }

  // required bytes imageData = 6;
  if (has_imagedata()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        6, this->imagedata(), target);
  }

  // required uint32 width = 7;
  if (has_width()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->width(), target);
  }

  // required uint32 height = 8;
  if (has_height()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->height(), target);
  }

  // optional double radius = 9;
  if (has_radius()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(9, this->radius(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.zchxlab.radar.protobuf.RadarVideoPNG)
  return target;
}

size_t RadarVideoPNG::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:com.zchxlab.radar.protobuf.RadarVideoPNG)
  size_t total_size = 0;

  if (has_radarid()) {
    // required uint64 radarId = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->radarid());
  }

  if (has_radarname()) {
    // required string radarName = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->radarname());
  }

  if (has_latitude()) {
    // required double latitude = 3;
    total_size += 1 + 8;
  }

  if (has_longitude()) {
    // required double longitude = 4;
    total_size += 1 + 8;
  }

  if (has_utc()) {
    // required uint64 UTC = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->utc());
  }

  if (has_imagedata()) {
    // required bytes imageData = 6;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->imagedata());
  }

  if (has_width()) {
    // required uint32 width = 7;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->width());
  }

  if (has_height()) {
    // required uint32 height = 8;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->height());
  }

  return total_size;
}
size_t RadarVideoPNG::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.zchxlab.radar.protobuf.RadarVideoPNG)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x000000ff) ^ 0x000000ff) == 0) {  // All required fields are present.
    // required uint64 radarId = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->radarid());

    // required string radarName = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->radarname());

    // required double latitude = 3;
    total_size += 1 + 8;

    // required double longitude = 4;
    total_size += 1 + 8;

    // required uint64 UTC = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->utc());

    // required bytes imageData = 6;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->imagedata());

    // required uint32 width = 7;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->width());

    // required uint32 height = 8;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->height());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // optional double radius = 9;
  if (has_radius()) {
    total_size += 1 + 8;
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RadarVideoPNG::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.zchxlab.radar.protobuf.RadarVideoPNG)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const RadarVideoPNG* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RadarVideoPNG>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.zchxlab.radar.protobuf.RadarVideoPNG)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.zchxlab.radar.protobuf.RadarVideoPNG)
    UnsafeMergeFrom(*source);
  }
}

void RadarVideoPNG::MergeFrom(const RadarVideoPNG& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.zchxlab.radar.protobuf.RadarVideoPNG)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void RadarVideoPNG::UnsafeMergeFrom(const RadarVideoPNG& from) {
  GOOGLE_DCHECK(&from != this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_radarid()) {
      set_radarid(from.radarid());
    }
    if (from.has_radarname()) {
      set_has_radarname();
      radarname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.radarname_);
    }
    if (from.has_latitude()) {
      set_latitude(from.latitude());
    }
    if (from.has_longitude()) {
      set_longitude(from.longitude());
    }
    if (from.has_utc()) {
      set_utc(from.utc());
    }
    if (from.has_imagedata()) {
      set_has_imagedata();
      imagedata_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.imagedata_);
    }
    if (from.has_width()) {
      set_width(from.width());
    }
    if (from.has_height()) {
      set_height(from.height());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_radius()) {
      set_radius(from.radius());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::UnknownFieldSet::MergeToInternalMetdata(
      from.unknown_fields(), &_internal_metadata_);
  }
}

void RadarVideoPNG::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.zchxlab.radar.protobuf.RadarVideoPNG)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RadarVideoPNG::CopyFrom(const RadarVideoPNG& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.zchxlab.radar.protobuf.RadarVideoPNG)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool RadarVideoPNG::IsInitialized() const {
  if ((_has_bits_[0] & 0x000000ff) != 0x000000ff) return false;

  return true;
}

void RadarVideoPNG::Swap(RadarVideoPNG* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RadarVideoPNG::InternalSwap(RadarVideoPNG* other) {
  std::swap(radarid_, other->radarid_);
  radarname_.Swap(&other->radarname_);
  std::swap(latitude_, other->latitude_);
  std::swap(longitude_, other->longitude_);
  std::swap(utc_, other->utc_);
  imagedata_.Swap(&other->imagedata_);
  std::swap(width_, other->width_);
  std::swap(height_, other->height_);
  std::swap(radius_, other->radius_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RadarVideoPNG::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RadarVideoPNG_descriptor_;
  metadata.reflection = RadarVideoPNG_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RadarVideoPNG

// required uint64 radarId = 1;
bool RadarVideoPNG::has_radarid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void RadarVideoPNG::set_has_radarid() {
  _has_bits_[0] |= 0x00000001u;
}
void RadarVideoPNG::clear_has_radarid() {
  _has_bits_[0] &= ~0x00000001u;
}
void RadarVideoPNG::clear_radarid() {
  radarid_ = GOOGLE_ULONGLONG(0);
  clear_has_radarid();
}
::google::protobuf::uint64 RadarVideoPNG::radarid() const {
  // @@protoc_insertion_point(field_get:com.zchxlab.radar.protobuf.RadarVideoPNG.radarId)
  return radarid_;
}
void RadarVideoPNG::set_radarid(::google::protobuf::uint64 value) {
  set_has_radarid();
  radarid_ = value;
  // @@protoc_insertion_point(field_set:com.zchxlab.radar.protobuf.RadarVideoPNG.radarId)
}

// required string radarName = 2;
bool RadarVideoPNG::has_radarname() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void RadarVideoPNG::set_has_radarname() {
  _has_bits_[0] |= 0x00000002u;
}
void RadarVideoPNG::clear_has_radarname() {
  _has_bits_[0] &= ~0x00000002u;
}
void RadarVideoPNG::clear_radarname() {
  radarname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_radarname();
}
const ::std::string& RadarVideoPNG::radarname() const {
  // @@protoc_insertion_point(field_get:com.zchxlab.radar.protobuf.RadarVideoPNG.radarName)
  return radarname_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void RadarVideoPNG::set_radarname(const ::std::string& value) {
  set_has_radarname();
  radarname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.zchxlab.radar.protobuf.RadarVideoPNG.radarName)
}
void RadarVideoPNG::set_radarname(const char* value) {
  set_has_radarname();
  radarname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.zchxlab.radar.protobuf.RadarVideoPNG.radarName)
}
void RadarVideoPNG::set_radarname(const char* value, size_t size) {
  set_has_radarname();
  radarname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.zchxlab.radar.protobuf.RadarVideoPNG.radarName)
}
::std::string* RadarVideoPNG::mutable_radarname() {
  set_has_radarname();
  // @@protoc_insertion_point(field_mutable:com.zchxlab.radar.protobuf.RadarVideoPNG.radarName)
  return radarname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* RadarVideoPNG::release_radarname() {
  // @@protoc_insertion_point(field_release:com.zchxlab.radar.protobuf.RadarVideoPNG.radarName)
  clear_has_radarname();
  return radarname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void RadarVideoPNG::set_allocated_radarname(::std::string* radarname) {
  if (radarname != NULL) {
    set_has_radarname();
  } else {
    clear_has_radarname();
  }
  radarname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), radarname);
  // @@protoc_insertion_point(field_set_allocated:com.zchxlab.radar.protobuf.RadarVideoPNG.radarName)
}

// required double latitude = 3;
bool RadarVideoPNG::has_latitude() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void RadarVideoPNG::set_has_latitude() {
  _has_bits_[0] |= 0x00000004u;
}
void RadarVideoPNG::clear_has_latitude() {
  _has_bits_[0] &= ~0x00000004u;
}
void RadarVideoPNG::clear_latitude() {
  latitude_ = 0;
  clear_has_latitude();
}
double RadarVideoPNG::latitude() const {
  // @@protoc_insertion_point(field_get:com.zchxlab.radar.protobuf.RadarVideoPNG.latitude)
  return latitude_;
}
void RadarVideoPNG::set_latitude(double value) {
  set_has_latitude();
  latitude_ = value;
  // @@protoc_insertion_point(field_set:com.zchxlab.radar.protobuf.RadarVideoPNG.latitude)
}

// required double longitude = 4;
bool RadarVideoPNG::has_longitude() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void RadarVideoPNG::set_has_longitude() {
  _has_bits_[0] |= 0x00000008u;
}
void RadarVideoPNG::clear_has_longitude() {
  _has_bits_[0] &= ~0x00000008u;
}
void RadarVideoPNG::clear_longitude() {
  longitude_ = 0;
  clear_has_longitude();
}
double RadarVideoPNG::longitude() const {
  // @@protoc_insertion_point(field_get:com.zchxlab.radar.protobuf.RadarVideoPNG.longitude)
  return longitude_;
}
void RadarVideoPNG::set_longitude(double value) {
  set_has_longitude();
  longitude_ = value;
  // @@protoc_insertion_point(field_set:com.zchxlab.radar.protobuf.RadarVideoPNG.longitude)
}

// required uint64 UTC = 5;
bool RadarVideoPNG::has_utc() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void RadarVideoPNG::set_has_utc() {
  _has_bits_[0] |= 0x00000010u;
}
void RadarVideoPNG::clear_has_utc() {
  _has_bits_[0] &= ~0x00000010u;
}
void RadarVideoPNG::clear_utc() {
  utc_ = GOOGLE_ULONGLONG(0);
  clear_has_utc();
}
::google::protobuf::uint64 RadarVideoPNG::utc() const {
  // @@protoc_insertion_point(field_get:com.zchxlab.radar.protobuf.RadarVideoPNG.UTC)
  return utc_;
}
void RadarVideoPNG::set_utc(::google::protobuf::uint64 value) {
  set_has_utc();
  utc_ = value;
  // @@protoc_insertion_point(field_set:com.zchxlab.radar.protobuf.RadarVideoPNG.UTC)
}

// required bytes imageData = 6;
bool RadarVideoPNG::has_imagedata() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void RadarVideoPNG::set_has_imagedata() {
  _has_bits_[0] |= 0x00000020u;
}
void RadarVideoPNG::clear_has_imagedata() {
  _has_bits_[0] &= ~0x00000020u;
}
void RadarVideoPNG::clear_imagedata() {
  imagedata_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_imagedata();
}
const ::std::string& RadarVideoPNG::imagedata() const {
  // @@protoc_insertion_point(field_get:com.zchxlab.radar.protobuf.RadarVideoPNG.imageData)
  return imagedata_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void RadarVideoPNG::set_imagedata(const ::std::string& value) {
  set_has_imagedata();
  imagedata_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.zchxlab.radar.protobuf.RadarVideoPNG.imageData)
}
void RadarVideoPNG::set_imagedata(const char* value) {
  set_has_imagedata();
  imagedata_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.zchxlab.radar.protobuf.RadarVideoPNG.imageData)
}
void RadarVideoPNG::set_imagedata(const void* value, size_t size) {
  set_has_imagedata();
  imagedata_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.zchxlab.radar.protobuf.RadarVideoPNG.imageData)
}
::std::string* RadarVideoPNG::mutable_imagedata() {
  set_has_imagedata();
  // @@protoc_insertion_point(field_mutable:com.zchxlab.radar.protobuf.RadarVideoPNG.imageData)
  return imagedata_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* RadarVideoPNG::release_imagedata() {
  // @@protoc_insertion_point(field_release:com.zchxlab.radar.protobuf.RadarVideoPNG.imageData)
  clear_has_imagedata();
  return imagedata_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void RadarVideoPNG::set_allocated_imagedata(::std::string* imagedata) {
  if (imagedata != NULL) {
    set_has_imagedata();
  } else {
    clear_has_imagedata();
  }
  imagedata_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), imagedata);
  // @@protoc_insertion_point(field_set_allocated:com.zchxlab.radar.protobuf.RadarVideoPNG.imageData)
}

// required uint32 width = 7;
bool RadarVideoPNG::has_width() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void RadarVideoPNG::set_has_width() {
  _has_bits_[0] |= 0x00000040u;
}
void RadarVideoPNG::clear_has_width() {
  _has_bits_[0] &= ~0x00000040u;
}
void RadarVideoPNG::clear_width() {
  width_ = 0u;
  clear_has_width();
}
::google::protobuf::uint32 RadarVideoPNG::width() const {
  // @@protoc_insertion_point(field_get:com.zchxlab.radar.protobuf.RadarVideoPNG.width)
  return width_;
}
void RadarVideoPNG::set_width(::google::protobuf::uint32 value) {
  set_has_width();
  width_ = value;
  // @@protoc_insertion_point(field_set:com.zchxlab.radar.protobuf.RadarVideoPNG.width)
}

// required uint32 height = 8;
bool RadarVideoPNG::has_height() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void RadarVideoPNG::set_has_height() {
  _has_bits_[0] |= 0x00000080u;
}
void RadarVideoPNG::clear_has_height() {
  _has_bits_[0] &= ~0x00000080u;
}
void RadarVideoPNG::clear_height() {
  height_ = 0u;
  clear_has_height();
}
::google::protobuf::uint32 RadarVideoPNG::height() const {
  // @@protoc_insertion_point(field_get:com.zchxlab.radar.protobuf.RadarVideoPNG.height)
  return height_;
}
void RadarVideoPNG::set_height(::google::protobuf::uint32 value) {
  set_has_height();
  height_ = value;
  // @@protoc_insertion_point(field_set:com.zchxlab.radar.protobuf.RadarVideoPNG.height)
}

// optional double radius = 9;
bool RadarVideoPNG::has_radius() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void RadarVideoPNG::set_has_radius() {
  _has_bits_[0] |= 0x00000100u;
}
void RadarVideoPNG::clear_has_radius() {
  _has_bits_[0] &= ~0x00000100u;
}
void RadarVideoPNG::clear_radius() {
  radius_ = 0;
  clear_has_radius();
}
double RadarVideoPNG::radius() const {
  // @@protoc_insertion_point(field_get:com.zchxlab.radar.protobuf.RadarVideoPNG.radius)
  return radius_;
}
void RadarVideoPNG::set_radius(double value) {
  set_has_radius();
  radius_ = value;
  // @@protoc_insertion_point(field_set:com.zchxlab.radar.protobuf.RadarVideoPNG.radius)
}

inline const RadarVideoPNG* RadarVideoPNG::internal_default_instance() {
  return &RadarVideoPNG_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RadarVideoGIF::kRadarIdFieldNumber;
const int RadarVideoGIF::kRadarNameFieldNumber;
const int RadarVideoGIF::kLatitudeFieldNumber;
const int RadarVideoGIF::kLongitudeFieldNumber;
const int RadarVideoGIF::kStartUTCFieldNumber;
const int RadarVideoGIF::kEndUTCFieldNumber;
const int RadarVideoGIF::kImageDataFieldNumber;
const int RadarVideoGIF::kWidthFieldNumber;
const int RadarVideoGIF::kHeightFieldNumber;
const int RadarVideoGIF::kRadiusFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RadarVideoGIF::RadarVideoGIF()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (this != internal_default_instance()) protobuf_InitDefaults_ZCHXRadar_2eproto();
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.zchxlab.radar.protobuf.RadarVideoGIF)
}

void RadarVideoGIF::InitAsDefaultInstance() {
}

RadarVideoGIF::RadarVideoGIF(const RadarVideoGIF& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  UnsafeMergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:com.zchxlab.radar.protobuf.RadarVideoGIF)
}

void RadarVideoGIF::SharedCtor() {
  _cached_size_ = 0;
  radarname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  imagedata_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&radarid_, 0, reinterpret_cast<char*>(&radius_) -
    reinterpret_cast<char*>(&radarid_) + sizeof(radius_));
}

RadarVideoGIF::~RadarVideoGIF() {
  // @@protoc_insertion_point(destructor:com.zchxlab.radar.protobuf.RadarVideoGIF)
  SharedDtor();
}

void RadarVideoGIF::SharedDtor() {
  radarname_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  imagedata_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void RadarVideoGIF::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RadarVideoGIF::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RadarVideoGIF_descriptor_;
}

const RadarVideoGIF& RadarVideoGIF::default_instance() {
  protobuf_InitDefaults_ZCHXRadar_2eproto();
  return *internal_default_instance();
}

::google::protobuf::internal::ExplicitlyConstructed<RadarVideoGIF> RadarVideoGIF_default_instance_;

RadarVideoGIF* RadarVideoGIF::New(::google::protobuf::Arena* arena) const {
  RadarVideoGIF* n = new RadarVideoGIF;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RadarVideoGIF::Clear() {
// @@protoc_insertion_point(message_clear_start:com.zchxlab.radar.protobuf.RadarVideoGIF)
#if defined(__clang__)
#define ZR_HELPER_(f) \
  _Pragma("clang diagnostic push") \
  _Pragma("clang diagnostic ignored \"-Winvalid-offsetof\"") \
  __builtin_offsetof(RadarVideoGIF, f) \
  _Pragma("clang diagnostic pop")
#else
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<RadarVideoGIF*>(16)->f)
#endif

#define ZR_(first, last) do {\
  ::memset(&(first), 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  if (_has_bits_[0 / 32] & 255u) {
    ZR_(radarid_, width_);
    if (has_radarname()) {
      radarname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_imagedata()) {
      imagedata_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
  }
  ZR_(height_, radius_);

#undef ZR_HELPER_
#undef ZR_

  _has_bits_.Clear();
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool RadarVideoGIF::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.zchxlab.radar.protobuf.RadarVideoGIF)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 radarId = 1;
      case 1: {
        if (tag == 8) {
          set_has_radarid();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &radarid_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_radarName;
        break;
      }

      // required string radarName = 2;
      case 2: {
        if (tag == 18) {
         parse_radarName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_radarname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->radarname().data(), this->radarname().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "com.zchxlab.radar.protobuf.RadarVideoGIF.radarName");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(25)) goto parse_latitude;
        break;
      }

      // required double latitude = 3;
      case 3: {
        if (tag == 25) {
         parse_latitude:
          set_has_latitude();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &latitude_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(33)) goto parse_longitude;
        break;
      }

      // required double longitude = 4;
      case 4: {
        if (tag == 33) {
         parse_longitude:
          set_has_longitude();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &longitude_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_startUTC;
        break;
      }

      // required uint64 startUTC = 5;
      case 5: {
        if (tag == 40) {
         parse_startUTC:
          set_has_startutc();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &startutc_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_endUTC;
        break;
      }

      // required uint64 endUTC = 6;
      case 6: {
        if (tag == 48) {
         parse_endUTC:
          set_has_endutc();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &endutc_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_imageData;
        break;
      }

      // required bytes imageData = 7;
      case 7: {
        if (tag == 58) {
         parse_imageData:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_imagedata()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_width;
        break;
      }

      // required uint32 width = 8;
      case 8: {
        if (tag == 64) {
         parse_width:
          set_has_width();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &width_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_height;
        break;
      }

      // required uint32 height = 9;
      case 9: {
        if (tag == 72) {
         parse_height:
          set_has_height();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &height_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(81)) goto parse_radius;
        break;
      }

      // optional double radius = 10;
      case 10: {
        if (tag == 81) {
         parse_radius:
          set_has_radius();
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &radius_)));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.zchxlab.radar.protobuf.RadarVideoGIF)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.zchxlab.radar.protobuf.RadarVideoGIF)
  return false;
#undef DO_
}

void RadarVideoGIF::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.zchxlab.radar.protobuf.RadarVideoGIF)
  // required uint64 radarId = 1;
  if (has_radarid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->radarid(), output);
  }

  // required string radarName = 2;
  if (has_radarname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->radarname().data(), this->radarname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "com.zchxlab.radar.protobuf.RadarVideoGIF.radarName");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->radarname(), output);
  }

  // required double latitude = 3;
  if (has_latitude()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->latitude(), output);
  }

  // required double longitude = 4;
  if (has_longitude()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->longitude(), output);
  }

  // required uint64 startUTC = 5;
  if (has_startutc()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->startutc(), output);
  }

  // required uint64 endUTC = 6;
  if (has_endutc()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(6, this->endutc(), output);
  }

  // required bytes imageData = 7;
  if (has_imagedata()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      7, this->imagedata(), output);
  }

  // required uint32 width = 8;
  if (has_width()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->width(), output);
  }

  // required uint32 height = 9;
  if (has_height()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->height(), output);
  }

  // optional double radius = 10;
  if (has_radius()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(10, this->radius(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.zchxlab.radar.protobuf.RadarVideoGIF)
}

::google::protobuf::uint8* RadarVideoGIF::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:com.zchxlab.radar.protobuf.RadarVideoGIF)
  // required uint64 radarId = 1;
  if (has_radarid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->radarid(), target);
  }

  // required string radarName = 2;
  if (has_radarname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->radarname().data(), this->radarname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "com.zchxlab.radar.protobuf.RadarVideoGIF.radarName");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->radarname(), target);
  }

  // required double latitude = 3;
  if (has_latitude()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->latitude(), target);
  }

  // required double longitude = 4;
  if (has_longitude()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->longitude(), target);
  }

  // required uint64 startUTC = 5;
  if (has_startutc()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->startutc(), target);
  }

  // required uint64 endUTC = 6;
  if (has_endutc()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(6, this->endutc(), target);
  }

  // required bytes imageData = 7;
  if (has_imagedata()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        7, this->imagedata(), target);
  }

  // required uint32 width = 8;
  if (has_width()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->width(), target);
  }

  // required uint32 height = 9;
  if (has_height()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->height(), target);
  }

  // optional double radius = 10;
  if (has_radius()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(10, this->radius(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.zchxlab.radar.protobuf.RadarVideoGIF)
  return target;
}

size_t RadarVideoGIF::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:com.zchxlab.radar.protobuf.RadarVideoGIF)
  size_t total_size = 0;

  if (has_radarid()) {
    // required uint64 radarId = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->radarid());
  }

  if (has_radarname()) {
    // required string radarName = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->radarname());
  }

  if (has_latitude()) {
    // required double latitude = 3;
    total_size += 1 + 8;
  }

  if (has_longitude()) {
    // required double longitude = 4;
    total_size += 1 + 8;
  }

  if (has_startutc()) {
    // required uint64 startUTC = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->startutc());
  }

  if (has_endutc()) {
    // required uint64 endUTC = 6;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->endutc());
  }

  if (has_imagedata()) {
    // required bytes imageData = 7;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->imagedata());
  }

  if (has_width()) {
    // required uint32 width = 8;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->width());
  }

  if (has_height()) {
    // required uint32 height = 9;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->height());
  }

  return total_size;
}
size_t RadarVideoGIF::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.zchxlab.radar.protobuf.RadarVideoGIF)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x000001ff) ^ 0x000001ff) == 0) {  // All required fields are present.
    // required uint64 radarId = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->radarid());

    // required string radarName = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->radarname());

    // required double latitude = 3;
    total_size += 1 + 8;

    // required double longitude = 4;
    total_size += 1 + 8;

    // required uint64 startUTC = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->startutc());

    // required uint64 endUTC = 6;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->endutc());

    // required bytes imageData = 7;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->imagedata());

    // required uint32 width = 8;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->width());

    // required uint32 height = 9;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->height());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  // optional double radius = 10;
  if (has_radius()) {
    total_size += 1 + 8;
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RadarVideoGIF::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.zchxlab.radar.protobuf.RadarVideoGIF)
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const RadarVideoGIF* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RadarVideoGIF>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.zchxlab.radar.protobuf.RadarVideoGIF)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.zchxlab.radar.protobuf.RadarVideoGIF)
    UnsafeMergeFrom(*source);
  }
}

void RadarVideoGIF::MergeFrom(const RadarVideoGIF& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.zchxlab.radar.protobuf.RadarVideoGIF)
  if (GOOGLE_PREDICT_TRUE(&from != this)) {
    UnsafeMergeFrom(from);
  } else {
    MergeFromFail(__LINE__);
  }
}

void RadarVideoGIF::UnsafeMergeFrom(const RadarVideoGIF& from) {
  GOOGLE_DCHECK(&from != this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_radarid()) {
      set_radarid(from.radarid());
    }
    if (from.has_radarname()) {
      set_has_radarname();
      radarname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.radarname_);
    }
    if (from.has_latitude()) {
      set_latitude(from.latitude());
    }
    if (from.has_longitude()) {
      set_longitude(from.longitude());
    }
    if (from.has_startutc()) {
      set_startutc(from.startutc());
    }
    if (from.has_endutc()) {
      set_endutc(from.endutc());
    }
    if (from.has_imagedata()) {
      set_has_imagedata();
      imagedata_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.imagedata_);
    }
    if (from.has_width()) {
      set_width(from.width());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_height()) {
      set_height(from.height());
    }
    if (from.has_radius()) {
      set_radius(from.radius());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::UnknownFieldSet::MergeToInternalMetdata(
      from.unknown_fields(), &_internal_metadata_);
  }
}

void RadarVideoGIF::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.zchxlab.radar.protobuf.RadarVideoGIF)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RadarVideoGIF::CopyFrom(const RadarVideoGIF& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.zchxlab.radar.protobuf.RadarVideoGIF)
  if (&from == this) return;
  Clear();
  UnsafeMergeFrom(from);
}

bool RadarVideoGIF::IsInitialized() const {
  if ((_has_bits_[0] & 0x000001ff) != 0x000001ff) return false;

  return true;
}

void RadarVideoGIF::Swap(RadarVideoGIF* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RadarVideoGIF::InternalSwap(RadarVideoGIF* other) {
  std::swap(radarid_, other->radarid_);
  radarname_.Swap(&other->radarname_);
  std::swap(latitude_, other->latitude_);
  std::swap(longitude_, other->longitude_);
  std::swap(startutc_, other->startutc_);
  std::swap(endutc_, other->endutc_);
  imagedata_.Swap(&other->imagedata_);
  std::swap(width_, other->width_);
  std::swap(height_, other->height_);
  std::swap(radius_, other->radius_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RadarVideoGIF::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RadarVideoGIF_descriptor_;
  metadata.reflection = RadarVideoGIF_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RadarVideoGIF

// required uint64 radarId = 1;
bool RadarVideoGIF::has_radarid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void RadarVideoGIF::set_has_radarid() {
  _has_bits_[0] |= 0x00000001u;
}
void RadarVideoGIF::clear_has_radarid() {
  _has_bits_[0] &= ~0x00000001u;
}
void RadarVideoGIF::clear_radarid() {
  radarid_ = GOOGLE_ULONGLONG(0);
  clear_has_radarid();
}
::google::protobuf::uint64 RadarVideoGIF::radarid() const {
  // @@protoc_insertion_point(field_get:com.zchxlab.radar.protobuf.RadarVideoGIF.radarId)
  return radarid_;
}
void RadarVideoGIF::set_radarid(::google::protobuf::uint64 value) {
  set_has_radarid();
  radarid_ = value;
  // @@protoc_insertion_point(field_set:com.zchxlab.radar.protobuf.RadarVideoGIF.radarId)
}

// required string radarName = 2;
bool RadarVideoGIF::has_radarname() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void RadarVideoGIF::set_has_radarname() {
  _has_bits_[0] |= 0x00000002u;
}
void RadarVideoGIF::clear_has_radarname() {
  _has_bits_[0] &= ~0x00000002u;
}
void RadarVideoGIF::clear_radarname() {
  radarname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_radarname();
}
const ::std::string& RadarVideoGIF::radarname() const {
  // @@protoc_insertion_point(field_get:com.zchxlab.radar.protobuf.RadarVideoGIF.radarName)
  return radarname_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void RadarVideoGIF::set_radarname(const ::std::string& value) {
  set_has_radarname();
  radarname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.zchxlab.radar.protobuf.RadarVideoGIF.radarName)
}
void RadarVideoGIF::set_radarname(const char* value) {
  set_has_radarname();
  radarname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.zchxlab.radar.protobuf.RadarVideoGIF.radarName)
}
void RadarVideoGIF::set_radarname(const char* value, size_t size) {
  set_has_radarname();
  radarname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.zchxlab.radar.protobuf.RadarVideoGIF.radarName)
}
::std::string* RadarVideoGIF::mutable_radarname() {
  set_has_radarname();
  // @@protoc_insertion_point(field_mutable:com.zchxlab.radar.protobuf.RadarVideoGIF.radarName)
  return radarname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* RadarVideoGIF::release_radarname() {
  // @@protoc_insertion_point(field_release:com.zchxlab.radar.protobuf.RadarVideoGIF.radarName)
  clear_has_radarname();
  return radarname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void RadarVideoGIF::set_allocated_radarname(::std::string* radarname) {
  if (radarname != NULL) {
    set_has_radarname();
  } else {
    clear_has_radarname();
  }
  radarname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), radarname);
  // @@protoc_insertion_point(field_set_allocated:com.zchxlab.radar.protobuf.RadarVideoGIF.radarName)
}

// required double latitude = 3;
bool RadarVideoGIF::has_latitude() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void RadarVideoGIF::set_has_latitude() {
  _has_bits_[0] |= 0x00000004u;
}
void RadarVideoGIF::clear_has_latitude() {
  _has_bits_[0] &= ~0x00000004u;
}
void RadarVideoGIF::clear_latitude() {
  latitude_ = 0;
  clear_has_latitude();
}
double RadarVideoGIF::latitude() const {
  // @@protoc_insertion_point(field_get:com.zchxlab.radar.protobuf.RadarVideoGIF.latitude)
  return latitude_;
}
void RadarVideoGIF::set_latitude(double value) {
  set_has_latitude();
  latitude_ = value;
  // @@protoc_insertion_point(field_set:com.zchxlab.radar.protobuf.RadarVideoGIF.latitude)
}

// required double longitude = 4;
bool RadarVideoGIF::has_longitude() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void RadarVideoGIF::set_has_longitude() {
  _has_bits_[0] |= 0x00000008u;
}
void RadarVideoGIF::clear_has_longitude() {
  _has_bits_[0] &= ~0x00000008u;
}
void RadarVideoGIF::clear_longitude() {
  longitude_ = 0;
  clear_has_longitude();
}
double RadarVideoGIF::longitude() const {
  // @@protoc_insertion_point(field_get:com.zchxlab.radar.protobuf.RadarVideoGIF.longitude)
  return longitude_;
}
void RadarVideoGIF::set_longitude(double value) {
  set_has_longitude();
  longitude_ = value;
  // @@protoc_insertion_point(field_set:com.zchxlab.radar.protobuf.RadarVideoGIF.longitude)
}

// required uint64 startUTC = 5;
bool RadarVideoGIF::has_startutc() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
void RadarVideoGIF::set_has_startutc() {
  _has_bits_[0] |= 0x00000010u;
}
void RadarVideoGIF::clear_has_startutc() {
  _has_bits_[0] &= ~0x00000010u;
}
void RadarVideoGIF::clear_startutc() {
  startutc_ = GOOGLE_ULONGLONG(0);
  clear_has_startutc();
}
::google::protobuf::uint64 RadarVideoGIF::startutc() const {
  // @@protoc_insertion_point(field_get:com.zchxlab.radar.protobuf.RadarVideoGIF.startUTC)
  return startutc_;
}
void RadarVideoGIF::set_startutc(::google::protobuf::uint64 value) {
  set_has_startutc();
  startutc_ = value;
  // @@protoc_insertion_point(field_set:com.zchxlab.radar.protobuf.RadarVideoGIF.startUTC)
}

// required uint64 endUTC = 6;
bool RadarVideoGIF::has_endutc() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
void RadarVideoGIF::set_has_endutc() {
  _has_bits_[0] |= 0x00000020u;
}
void RadarVideoGIF::clear_has_endutc() {
  _has_bits_[0] &= ~0x00000020u;
}
void RadarVideoGIF::clear_endutc() {
  endutc_ = GOOGLE_ULONGLONG(0);
  clear_has_endutc();
}
::google::protobuf::uint64 RadarVideoGIF::endutc() const {
  // @@protoc_insertion_point(field_get:com.zchxlab.radar.protobuf.RadarVideoGIF.endUTC)
  return endutc_;
}
void RadarVideoGIF::set_endutc(::google::protobuf::uint64 value) {
  set_has_endutc();
  endutc_ = value;
  // @@protoc_insertion_point(field_set:com.zchxlab.radar.protobuf.RadarVideoGIF.endUTC)
}

// required bytes imageData = 7;
bool RadarVideoGIF::has_imagedata() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
void RadarVideoGIF::set_has_imagedata() {
  _has_bits_[0] |= 0x00000040u;
}
void RadarVideoGIF::clear_has_imagedata() {
  _has_bits_[0] &= ~0x00000040u;
}
void RadarVideoGIF::clear_imagedata() {
  imagedata_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_imagedata();
}
const ::std::string& RadarVideoGIF::imagedata() const {
  // @@protoc_insertion_point(field_get:com.zchxlab.radar.protobuf.RadarVideoGIF.imageData)
  return imagedata_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void RadarVideoGIF::set_imagedata(const ::std::string& value) {
  set_has_imagedata();
  imagedata_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.zchxlab.radar.protobuf.RadarVideoGIF.imageData)
}
void RadarVideoGIF::set_imagedata(const char* value) {
  set_has_imagedata();
  imagedata_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.zchxlab.radar.protobuf.RadarVideoGIF.imageData)
}
void RadarVideoGIF::set_imagedata(const void* value, size_t size) {
  set_has_imagedata();
  imagedata_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.zchxlab.radar.protobuf.RadarVideoGIF.imageData)
}
::std::string* RadarVideoGIF::mutable_imagedata() {
  set_has_imagedata();
  // @@protoc_insertion_point(field_mutable:com.zchxlab.radar.protobuf.RadarVideoGIF.imageData)
  return imagedata_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* RadarVideoGIF::release_imagedata() {
  // @@protoc_insertion_point(field_release:com.zchxlab.radar.protobuf.RadarVideoGIF.imageData)
  clear_has_imagedata();
  return imagedata_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void RadarVideoGIF::set_allocated_imagedata(::std::string* imagedata) {
  if (imagedata != NULL) {
    set_has_imagedata();
  } else {
    clear_has_imagedata();
  }
  imagedata_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), imagedata);
  // @@protoc_insertion_point(field_set_allocated:com.zchxlab.radar.protobuf.RadarVideoGIF.imageData)
}

// required uint32 width = 8;
bool RadarVideoGIF::has_width() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
void RadarVideoGIF::set_has_width() {
  _has_bits_[0] |= 0x00000080u;
}
void RadarVideoGIF::clear_has_width() {
  _has_bits_[0] &= ~0x00000080u;
}
void RadarVideoGIF::clear_width() {
  width_ = 0u;
  clear_has_width();
}
::google::protobuf::uint32 RadarVideoGIF::width() const {
  // @@protoc_insertion_point(field_get:com.zchxlab.radar.protobuf.RadarVideoGIF.width)
  return width_;
}
void RadarVideoGIF::set_width(::google::protobuf::uint32 value) {
  set_has_width();
  width_ = value;
  // @@protoc_insertion_point(field_set:com.zchxlab.radar.protobuf.RadarVideoGIF.width)
}

// required uint32 height = 9;
bool RadarVideoGIF::has_height() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
void RadarVideoGIF::set_has_height() {
  _has_bits_[0] |= 0x00000100u;
}
void RadarVideoGIF::clear_has_height() {
  _has_bits_[0] &= ~0x00000100u;
}
void RadarVideoGIF::clear_height() {
  height_ = 0u;
  clear_has_height();
}
::google::protobuf::uint32 RadarVideoGIF::height() const {
  // @@protoc_insertion_point(field_get:com.zchxlab.radar.protobuf.RadarVideoGIF.height)
  return height_;
}
void RadarVideoGIF::set_height(::google::protobuf::uint32 value) {
  set_has_height();
  height_ = value;
  // @@protoc_insertion_point(field_set:com.zchxlab.radar.protobuf.RadarVideoGIF.height)
}

// optional double radius = 10;
bool RadarVideoGIF::has_radius() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
void RadarVideoGIF::set_has_radius() {
  _has_bits_[0] |= 0x00000200u;
}
void RadarVideoGIF::clear_has_radius() {
  _has_bits_[0] &= ~0x00000200u;
}
void RadarVideoGIF::clear_radius() {
  radius_ = 0;
  clear_has_radius();
}
double RadarVideoGIF::radius() const {
  // @@protoc_insertion_point(field_get:com.zchxlab.radar.protobuf.RadarVideoGIF.radius)
  return radius_;
}
void RadarVideoGIF::set_radius(double value) {
  set_has_radius();
  radius_ = value;
  // @@protoc_insertion_point(field_set:com.zchxlab.radar.protobuf.RadarVideoGIF.radius)
}

inline const RadarVideoGIF* RadarVideoGIF::internal_default_instance() {
  return &RadarVideoGIF_default_instance_.get();
}
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace protobuf
}  // namespace radar
}  // namespace zchxlab
}  // namespace com

// @@protoc_insertion_point(global_scope)
