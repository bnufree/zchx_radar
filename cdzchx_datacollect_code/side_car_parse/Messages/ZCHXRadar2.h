// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ZCHXRadar.proto

#ifndef PROTOBUF_ZCHXRadar_2eproto__INCLUDED
#define PROTOBUF_ZCHXRadar_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3001000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3001000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace com {
namespace zchxlab {
namespace radar {
namespace protobuf {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_ZCHXRadar_2eproto();
void protobuf_InitDefaults_ZCHXRadar_2eproto();
void protobuf_AssignDesc_ZCHXRadar_2eproto();
void protobuf_ShutdownFile_ZCHXRadar_2eproto();

class RadarVideoGIF;
class RadarVideoPNG;
class TrackPoint;
class VideoFrame;

enum MSGTYP {
  MSGTYP_UNDEFINED = 0,
  TARGET_REPORT = 1,
  START_OF_UPDATE_CYCLE = 2,
  PERIODIC_STATUS = 3,
  EVENT_TRIGGERED_STATUS = 4
};
bool MSGTYP_IsValid(int value);
const MSGTYP MSGTYP_MIN = MSGTYP_UNDEFINED;
const MSGTYP MSGTYP_MAX = EVENT_TRIGGERED_STATUS;
const int MSGTYP_ARRAYSIZE = MSGTYP_MAX + 1;

const ::google::protobuf::EnumDescriptor* MSGTYP_descriptor();
inline const ::std::string& MSGTYP_Name(MSGTYP value) {
  return ::google::protobuf::internal::NameOfEnum(
    MSGTYP_descriptor(), value);
}
inline bool MSGTYP_Parse(
    const ::std::string& name, MSGTYP* value) {
  return ::google::protobuf::internal::ParseNamedEnum<MSGTYP>(
    MSGTYP_descriptor(), name, value);
}
enum CNF {
  CONFIRMED_TRACK = 0,
  TENTATIVE_TRACK = 1,
  UNKNOWN_TRACK = 2
};
bool CNF_IsValid(int value);
const CNF CNF_MIN = CONFIRMED_TRACK;
const CNF CNF_MAX = UNKNOWN_TRACK;
const int CNF_ARRAYSIZE = CNF_MAX + 1;

const ::google::protobuf::EnumDescriptor* CNF_descriptor();
inline const ::std::string& CNF_Name(CNF value) {
  return ::google::protobuf::internal::NameOfEnum(
    CNF_descriptor(), value);
}
inline bool CNF_Parse(
    const ::std::string& name, CNF* value) {
  return ::google::protobuf::internal::ParseNamedEnum<CNF>(
    CNF_descriptor(), name, value);
}
enum CST {
  CST_UNDEFINED = 0,
  PREDICTABLE_EXTRAPOLATION_DUE_PERIOD = 1,
  PREDICTABLE_EXTRAPOLATION_IN_AREA = 2,
  EXTRAPOLATION_DUE_UNPREDICTABLE_DETECTION = 3
};
bool CST_IsValid(int value);
const CST CST_MIN = CST_UNDEFINED;
const CST CST_MAX = EXTRAPOLATION_DUE_UNPREDICTABLE_DETECTION;
const int CST_ARRAYSIZE = CST_MAX + 1;

const ::google::protobuf::EnumDescriptor* CST_descriptor();
inline const ::std::string& CST_Name(CST value) {
  return ::google::protobuf::internal::NameOfEnum(
    CST_descriptor(), value);
}
inline bool CST_Parse(
    const ::std::string& name, CST* value) {
  return ::google::protobuf::internal::ParseNamedEnum<CST>(
    CST_descriptor(), name, value);
}
enum STH {
  MEASURED_POSITION = 0,
  SMOOTHED_POSITION = 1
};
bool STH_IsValid(int value);
const STH STH_MIN = MEASURED_POSITION;
const STH STH_MAX = SMOOTHED_POSITION;
const int STH_ARRAYSIZE = STH_MAX + 1;

const ::google::protobuf::EnumDescriptor* STH_descriptor();
inline const ::std::string& STH_Name(STH value) {
  return ::google::protobuf::internal::NameOfEnum(
    STH_descriptor(), value);
}
inline bool STH_Parse(
    const ::std::string& name, STH* value) {
  return ::google::protobuf::internal::ParseNamedEnum<STH>(
    STH_descriptor(), name, value);
}
enum RES {
  MONOBIT_RESOLUTION = 1,
  LOW_RESOLUTION = 2,
  MEDIUM_RESOLUTION = 3,
  HIGH_RESOLUTION = 4,
  VERY_HIGH_RESOLUTION = 5,
  ULTRA_HIGH_RESOLUTION = 6
};
bool RES_IsValid(int value);
const RES RES_MIN = MONOBIT_RESOLUTION;
const RES RES_MAX = ULTRA_HIGH_RESOLUTION;
const int RES_ARRAYSIZE = RES_MAX + 1;

const ::google::protobuf::EnumDescriptor* RES_descriptor();
inline const ::std::string& RES_Name(RES value) {
  return ::google::protobuf::internal::NameOfEnum(
    RES_descriptor(), value);
}
inline bool RES_Parse(
    const ::std::string& name, RES* value) {
  return ::google::protobuf::internal::ParseNamedEnum<RES>(
    RES_descriptor(), name, value);
}
// ===================================================================

class TrackPoint : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:com.zchxlab.radar.protobuf.TrackPoint) */ {
 public:
  TrackPoint();
  virtual ~TrackPoint();

  TrackPoint(const TrackPoint& from);

  inline TrackPoint& operator=(const TrackPoint& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TrackPoint& default_instance();

  static const TrackPoint* internal_default_instance();

  void Swap(TrackPoint* other);

  // implements Message ----------------------------------------------

  inline TrackPoint* New() const { return New(NULL); }

  TrackPoint* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TrackPoint& from);
  void MergeFrom(const TrackPoint& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(TrackPoint* other);
  void UnsafeMergeFrom(const TrackPoint& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 systemAreaCode = 1;
  bool has_systemareacode() const;
  void clear_systemareacode();
  static const int kSystemAreaCodeFieldNumber = 1;
  ::google::protobuf::int32 systemareacode() const;
  void set_systemareacode(::google::protobuf::int32 value);

  // required int32 systemIdentificationCode = 2;
  bool has_systemidentificationcode() const;
  void clear_systemidentificationcode();
  static const int kSystemIdentificationCodeFieldNumber = 2;
  ::google::protobuf::int32 systemidentificationcode() const;
  void set_systemidentificationcode(::google::protobuf::int32 value);

  // required .com.zchxlab.radar.protobuf.MSGTYP messageType = 3;
  bool has_messagetype() const;
  void clear_messagetype();
  static const int kMessageTypeFieldNumber = 3;
  ::com::zchxlab::radar::protobuf::MSGTYP messagetype() const;
  void set_messagetype(::com::zchxlab::radar::protobuf::MSGTYP value);

  // required uint32 trackNumber = 4;
  bool has_tracknumber() const;
  void clear_tracknumber();
  static const int kTrackNumberFieldNumber = 4;
  ::google::protobuf::uint32 tracknumber() const;
  void set_tracknumber(::google::protobuf::uint32 value);

  // required float cartesianPosX = 5;
  bool has_cartesianposx() const;
  void clear_cartesianposx();
  static const int kCartesianPosXFieldNumber = 5;
  float cartesianposx() const;
  void set_cartesianposx(float value);

  // required float cartesianPosY = 6;
  bool has_cartesianposy() const;
  void clear_cartesianposy();
  static const int kCartesianPosYFieldNumber = 6;
  float cartesianposy() const;
  void set_cartesianposy(float value);

  // required double wgs84PosLat = 7;
  bool has_wgs84poslat() const;
  void clear_wgs84poslat();
  static const int kWgs84PosLatFieldNumber = 7;
  double wgs84poslat() const;
  void set_wgs84poslat(double value);

  // required double wgs84PosLong = 8;
  bool has_wgs84poslong() const;
  void clear_wgs84poslong();
  static const int kWgs84PosLongFieldNumber = 8;
  double wgs84poslong() const;
  void set_wgs84poslong(double value);

  // required float timeOfDay = 9;
  bool has_timeofday() const;
  void clear_timeofday();
  static const int kTimeOfDayFieldNumber = 9;
  float timeofday() const;
  void set_timeofday(float value);

  // optional .com.zchxlab.radar.protobuf.CNF trackType = 10;
  bool has_tracktype() const;
  void clear_tracktype();
  static const int kTrackTypeFieldNumber = 10;
  ::com::zchxlab::radar::protobuf::CNF tracktype() const;
  void set_tracktype(::com::zchxlab::radar::protobuf::CNF value);

  // optional bool trackLastReport = 11;
  bool has_tracklastreport() const;
  void clear_tracklastreport();
  static const int kTrackLastReportFieldNumber = 11;
  bool tracklastreport() const;
  void set_tracklastreport(bool value);

  // optional .com.zchxlab.radar.protobuf.CST extrapolation = 12;
  bool has_extrapolation() const;
  void clear_extrapolation();
  static const int kExtrapolationFieldNumber = 12;
  ::com::zchxlab::radar::protobuf::CST extrapolation() const;
  void set_extrapolation(::com::zchxlab::radar::protobuf::CST value);

  // optional .com.zchxlab.radar.protobuf.STH trackPositionCode = 13;
  bool has_trackpositioncode() const;
  void clear_trackpositioncode();
  static const int kTrackPositionCodeFieldNumber = 13;
  ::com::zchxlab::radar::protobuf::STH trackpositioncode() const;
  void set_trackpositioncode(::com::zchxlab::radar::protobuf::STH value);

  // optional float sigmaX = 14;
  bool has_sigmax() const;
  void clear_sigmax();
  static const int kSigmaXFieldNumber = 14;
  float sigmax() const;
  void set_sigmax(float value);

  // optional float sigmaY = 15;
  bool has_sigmay() const;
  void clear_sigmay();
  static const int kSigmaYFieldNumber = 15;
  float sigmay() const;
  void set_sigmay(float value);

  // optional float sigmaXY = 16;
  bool has_sigmaxy() const;
  void clear_sigmaxy();
  static const int kSigmaXYFieldNumber = 16;
  float sigmaxy() const;
  void set_sigmaxy(float value);

  // optional float ampOfPriPlot = 17;
  bool has_ampofpriplot() const;
  void clear_ampofpriplot();
  static const int kAmpOfPriPlotFieldNumber = 17;
  float ampofpriplot() const;
  void set_ampofpriplot(float value);

  // required double cartesianTrkVel_vx = 18;
  bool has_cartesiantrkvel_vx() const;
  void clear_cartesiantrkvel_vx();
  static const int kCartesianTrkVelVxFieldNumber = 18;
  double cartesiantrkvel_vx() const;
  void set_cartesiantrkvel_vx(double value);

  // required double cartesianTrkVel_vy = 19;
  bool has_cartesiantrkvel_vy() const;
  void clear_cartesiantrkvel_vy();
  static const int kCartesianTrkVelVyFieldNumber = 19;
  double cartesiantrkvel_vy() const;
  void set_cartesiantrkvel_vy(double value);

  // required double cog = 20;
  bool has_cog() const;
  void clear_cog();
  static const int kCogFieldNumber = 20;
  double cog() const;
  void set_cog(double value);

  // required double sog = 21;
  bool has_sog() const;
  void clear_sog();
  static const int kSogFieldNumber = 21;
  double sog() const;
  void set_sog(double value);

  // @@protoc_insertion_point(class_scope:com.zchxlab.radar.protobuf.TrackPoint)
 private:
  inline void set_has_systemareacode();
  inline void clear_has_systemareacode();
  inline void set_has_systemidentificationcode();
  inline void clear_has_systemidentificationcode();
  inline void set_has_messagetype();
  inline void clear_has_messagetype();
  inline void set_has_tracknumber();
  inline void clear_has_tracknumber();
  inline void set_has_cartesianposx();
  inline void clear_has_cartesianposx();
  inline void set_has_cartesianposy();
  inline void clear_has_cartesianposy();
  inline void set_has_wgs84poslat();
  inline void clear_has_wgs84poslat();
  inline void set_has_wgs84poslong();
  inline void clear_has_wgs84poslong();
  inline void set_has_timeofday();
  inline void clear_has_timeofday();
  inline void set_has_tracktype();
  inline void clear_has_tracktype();
  inline void set_has_tracklastreport();
  inline void clear_has_tracklastreport();
  inline void set_has_extrapolation();
  inline void clear_has_extrapolation();
  inline void set_has_trackpositioncode();
  inline void clear_has_trackpositioncode();
  inline void set_has_sigmax();
  inline void clear_has_sigmax();
  inline void set_has_sigmay();
  inline void clear_has_sigmay();
  inline void set_has_sigmaxy();
  inline void clear_has_sigmaxy();
  inline void set_has_ampofpriplot();
  inline void clear_has_ampofpriplot();
  inline void set_has_cartesiantrkvel_vx();
  inline void clear_has_cartesiantrkvel_vx();
  inline void set_has_cartesiantrkvel_vy();
  inline void clear_has_cartesiantrkvel_vy();
  inline void set_has_cog();
  inline void clear_has_cog();
  inline void set_has_sog();
  inline void clear_has_sog();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::int32 systemareacode_;
  ::google::protobuf::int32 systemidentificationcode_;
  int messagetype_;
  ::google::protobuf::uint32 tracknumber_;
  float cartesianposx_;
  float cartesianposy_;
  double wgs84poslat_;
  double wgs84poslong_;
  float timeofday_;
  int tracktype_;
  bool tracklastreport_;
  int extrapolation_;
  int trackpositioncode_;
  float sigmax_;
  float sigmay_;
  float sigmaxy_;
  double cartesiantrkvel_vx_;
  double cartesiantrkvel_vy_;
  double cog_;
  double sog_;
  float ampofpriplot_;
  friend void  protobuf_InitDefaults_ZCHXRadar_2eproto_impl();
  friend void  protobuf_AddDesc_ZCHXRadar_2eproto_impl();
  friend void protobuf_AssignDesc_ZCHXRadar_2eproto();
  friend void protobuf_ShutdownFile_ZCHXRadar_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<TrackPoint> TrackPoint_default_instance_;

// -------------------------------------------------------------------

class VideoFrame : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:com.zchxlab.radar.protobuf.VideoFrame) */ {
 public:
  VideoFrame();
  virtual ~VideoFrame();

  VideoFrame(const VideoFrame& from);

  inline VideoFrame& operator=(const VideoFrame& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const VideoFrame& default_instance();

  static const VideoFrame* internal_default_instance();

  void Swap(VideoFrame* other);

  // implements Message ----------------------------------------------

  inline VideoFrame* New() const { return New(NULL); }

  VideoFrame* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const VideoFrame& from);
  void MergeFrom(const VideoFrame& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(VideoFrame* other);
  void UnsafeMergeFrom(const VideoFrame& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 systemAreaCode = 1;
  bool has_systemareacode() const;
  void clear_systemareacode();
  static const int kSystemAreaCodeFieldNumber = 1;
  ::google::protobuf::int32 systemareacode() const;
  void set_systemareacode(::google::protobuf::int32 value);

  // required int32 systemIdentificationCode = 2;
  bool has_systemidentificationcode() const;
  void clear_systemidentificationcode();
  static const int kSystemIdentificationCodeFieldNumber = 2;
  ::google::protobuf::int32 systemidentificationcode() const;
  void set_systemidentificationcode(::google::protobuf::int32 value);

  // required int32 msgIndex = 3;
  bool has_msgindex() const;
  void clear_msgindex();
  static const int kMsgIndexFieldNumber = 3;
  ::google::protobuf::int32 msgindex() const;
  void set_msgindex(::google::protobuf::int32 value);

  // required uint32 azimuth = 4;
  bool has_azimuth() const;
  void clear_azimuth();
  static const int kAzimuthFieldNumber = 4;
  ::google::protobuf::uint32 azimuth() const;
  void set_azimuth(::google::protobuf::uint32 value);

  // optional uint32 heading = 5;
  bool has_heading() const;
  void clear_heading();
  static const int kHeadingFieldNumber = 5;
  ::google::protobuf::uint32 heading() const;
  void set_heading(::google::protobuf::uint32 value);

  // required double startRange = 6;
  bool has_startrange() const;
  void clear_startrange();
  static const int kStartRangeFieldNumber = 6;
  double startrange() const;
  void set_startrange(double value);

  // required double rangeFactor = 7;
  bool has_rangefactor() const;
  void clear_rangefactor();
  static const int kRangeFactorFieldNumber = 7;
  double rangefactor() const;
  void set_rangefactor(double value);

  // required .com.zchxlab.radar.protobuf.RES bitResolution = 8;
  bool has_bitresolution() const;
  void clear_bitresolution();
  static const int kBitResolutionFieldNumber = 8;
  ::com::zchxlab::radar::protobuf::RES bitresolution() const;
  void set_bitresolution(::com::zchxlab::radar::protobuf::RES value);

  // required int32 timeOfDay = 9;
  bool has_timeofday() const;
  void clear_timeofday();
  static const int kTimeOfDayFieldNumber = 9;
  ::google::protobuf::int32 timeofday() const;
  void set_timeofday(::google::protobuf::int32 value);

  // repeated int32 amplitude = 10;
  int amplitude_size() const;
  void clear_amplitude();
  static const int kAmplitudeFieldNumber = 10;
  ::google::protobuf::int32 amplitude(int index) const;
  void set_amplitude(int index, ::google::protobuf::int32 value);
  void add_amplitude(::google::protobuf::int32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      amplitude() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_amplitude();

  // @@protoc_insertion_point(class_scope:com.zchxlab.radar.protobuf.VideoFrame)
 private:
  inline void set_has_systemareacode();
  inline void clear_has_systemareacode();
  inline void set_has_systemidentificationcode();
  inline void clear_has_systemidentificationcode();
  inline void set_has_msgindex();
  inline void clear_has_msgindex();
  inline void set_has_azimuth();
  inline void clear_has_azimuth();
  inline void set_has_heading();
  inline void clear_has_heading();
  inline void set_has_startrange();
  inline void clear_has_startrange();
  inline void set_has_rangefactor();
  inline void clear_has_rangefactor();
  inline void set_has_bitresolution();
  inline void clear_has_bitresolution();
  inline void set_has_timeofday();
  inline void clear_has_timeofday();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > amplitude_;
  ::google::protobuf::int32 systemareacode_;
  ::google::protobuf::int32 systemidentificationcode_;
  ::google::protobuf::int32 msgindex_;
  ::google::protobuf::uint32 azimuth_;
  double startrange_;
  double rangefactor_;
  ::google::protobuf::uint32 heading_;
  ::google::protobuf::int32 timeofday_;
  int bitresolution_;
  friend void  protobuf_InitDefaults_ZCHXRadar_2eproto_impl();
  friend void  protobuf_AddDesc_ZCHXRadar_2eproto_impl();
  friend void protobuf_AssignDesc_ZCHXRadar_2eproto();
  friend void protobuf_ShutdownFile_ZCHXRadar_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<VideoFrame> VideoFrame_default_instance_;

// -------------------------------------------------------------------

class RadarVideoPNG : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:com.zchxlab.radar.protobuf.RadarVideoPNG) */ {
 public:
  RadarVideoPNG();
  virtual ~RadarVideoPNG();

  RadarVideoPNG(const RadarVideoPNG& from);

  inline RadarVideoPNG& operator=(const RadarVideoPNG& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RadarVideoPNG& default_instance();

  static const RadarVideoPNG* internal_default_instance();

  void Swap(RadarVideoPNG* other);

  // implements Message ----------------------------------------------

  inline RadarVideoPNG* New() const { return New(NULL); }

  RadarVideoPNG* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RadarVideoPNG& from);
  void MergeFrom(const RadarVideoPNG& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(RadarVideoPNG* other);
  void UnsafeMergeFrom(const RadarVideoPNG& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint64 radarId = 1;
  bool has_radarid() const;
  void clear_radarid();
  static const int kRadarIdFieldNumber = 1;
  ::google::protobuf::uint64 radarid() const;
  void set_radarid(::google::protobuf::uint64 value);

  // required string radarName = 2;
  bool has_radarname() const;
  void clear_radarname();
  static const int kRadarNameFieldNumber = 2;
  const ::std::string& radarname() const;
  void set_radarname(const ::std::string& value);
  void set_radarname(const char* value);
  void set_radarname(const char* value, size_t size);
  ::std::string* mutable_radarname();
  ::std::string* release_radarname();
  void set_allocated_radarname(::std::string* radarname);

  // required double latitude = 3;
  bool has_latitude() const;
  void clear_latitude();
  static const int kLatitudeFieldNumber = 3;
  double latitude() const;
  void set_latitude(double value);

  // required double longitude = 4;
  bool has_longitude() const;
  void clear_longitude();
  static const int kLongitudeFieldNumber = 4;
  double longitude() const;
  void set_longitude(double value);

  // required uint64 UTC = 5;
  bool has_utc() const;
  void clear_utc();
  static const int kUTCFieldNumber = 5;
  ::google::protobuf::uint64 utc() const;
  void set_utc(::google::protobuf::uint64 value);

  // required bytes imageData = 6;
  bool has_imagedata() const;
  void clear_imagedata();
  static const int kImageDataFieldNumber = 6;
  const ::std::string& imagedata() const;
  void set_imagedata(const ::std::string& value);
  void set_imagedata(const char* value);
  void set_imagedata(const void* value, size_t size);
  ::std::string* mutable_imagedata();
  ::std::string* release_imagedata();
  void set_allocated_imagedata(::std::string* imagedata);

  // required uint32 width = 7;
  bool has_width() const;
  void clear_width();
  static const int kWidthFieldNumber = 7;
  ::google::protobuf::uint32 width() const;
  void set_width(::google::protobuf::uint32 value);

  // required uint32 height = 8;
  bool has_height() const;
  void clear_height();
  static const int kHeightFieldNumber = 8;
  ::google::protobuf::uint32 height() const;
  void set_height(::google::protobuf::uint32 value);

  // optional double radius = 9;
  bool has_radius() const;
  void clear_radius();
  static const int kRadiusFieldNumber = 9;
  double radius() const;
  void set_radius(double value);

  // @@protoc_insertion_point(class_scope:com.zchxlab.radar.protobuf.RadarVideoPNG)
 private:
  inline void set_has_radarid();
  inline void clear_has_radarid();
  inline void set_has_radarname();
  inline void clear_has_radarname();
  inline void set_has_latitude();
  inline void clear_has_latitude();
  inline void set_has_longitude();
  inline void clear_has_longitude();
  inline void set_has_utc();
  inline void clear_has_utc();
  inline void set_has_imagedata();
  inline void clear_has_imagedata();
  inline void set_has_width();
  inline void clear_has_width();
  inline void set_has_height();
  inline void clear_has_height();
  inline void set_has_radius();
  inline void clear_has_radius();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr radarname_;
  ::google::protobuf::internal::ArenaStringPtr imagedata_;
  ::google::protobuf::uint64 radarid_;
  double latitude_;
  double longitude_;
  ::google::protobuf::uint64 utc_;
  ::google::protobuf::uint32 width_;
  ::google::protobuf::uint32 height_;
  double radius_;
  friend void  protobuf_InitDefaults_ZCHXRadar_2eproto_impl();
  friend void  protobuf_AddDesc_ZCHXRadar_2eproto_impl();
  friend void protobuf_AssignDesc_ZCHXRadar_2eproto();
  friend void protobuf_ShutdownFile_ZCHXRadar_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<RadarVideoPNG> RadarVideoPNG_default_instance_;

// -------------------------------------------------------------------

class RadarVideoGIF : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:com.zchxlab.radar.protobuf.RadarVideoGIF) */ {
 public:
  RadarVideoGIF();
  virtual ~RadarVideoGIF();

  RadarVideoGIF(const RadarVideoGIF& from);

  inline RadarVideoGIF& operator=(const RadarVideoGIF& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RadarVideoGIF& default_instance();

  static const RadarVideoGIF* internal_default_instance();

  void Swap(RadarVideoGIF* other);

  // implements Message ----------------------------------------------

  inline RadarVideoGIF* New() const { return New(NULL); }

  RadarVideoGIF* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RadarVideoGIF& from);
  void MergeFrom(const RadarVideoGIF& from);
  void Clear();
  bool IsInitialized() const;

  size_t ByteSizeLong() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const {
    return InternalSerializeWithCachedSizesToArray(false, output);
  }
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(RadarVideoGIF* other);
  void UnsafeMergeFrom(const RadarVideoGIF& from);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint64 radarId = 1;
  bool has_radarid() const;
  void clear_radarid();
  static const int kRadarIdFieldNumber = 1;
  ::google::protobuf::uint64 radarid() const;
  void set_radarid(::google::protobuf::uint64 value);

  // required string radarName = 2;
  bool has_radarname() const;
  void clear_radarname();
  static const int kRadarNameFieldNumber = 2;
  const ::std::string& radarname() const;
  void set_radarname(const ::std::string& value);
  void set_radarname(const char* value);
  void set_radarname(const char* value, size_t size);
  ::std::string* mutable_radarname();
  ::std::string* release_radarname();
  void set_allocated_radarname(::std::string* radarname);

  // required double latitude = 3;
  bool has_latitude() const;
  void clear_latitude();
  static const int kLatitudeFieldNumber = 3;
  double latitude() const;
  void set_latitude(double value);

  // required double longitude = 4;
  bool has_longitude() const;
  void clear_longitude();
  static const int kLongitudeFieldNumber = 4;
  double longitude() const;
  void set_longitude(double value);

  // required uint64 startUTC = 5;
  bool has_startutc() const;
  void clear_startutc();
  static const int kStartUTCFieldNumber = 5;
  ::google::protobuf::uint64 startutc() const;
  void set_startutc(::google::protobuf::uint64 value);

  // required uint64 endUTC = 6;
  bool has_endutc() const;
  void clear_endutc();
  static const int kEndUTCFieldNumber = 6;
  ::google::protobuf::uint64 endutc() const;
  void set_endutc(::google::protobuf::uint64 value);

  // required bytes imageData = 7;
  bool has_imagedata() const;
  void clear_imagedata();
  static const int kImageDataFieldNumber = 7;
  const ::std::string& imagedata() const;
  void set_imagedata(const ::std::string& value);
  void set_imagedata(const char* value);
  void set_imagedata(const void* value, size_t size);
  ::std::string* mutable_imagedata();
  ::std::string* release_imagedata();
  void set_allocated_imagedata(::std::string* imagedata);

  // required uint32 width = 8;
  bool has_width() const;
  void clear_width();
  static const int kWidthFieldNumber = 8;
  ::google::protobuf::uint32 width() const;
  void set_width(::google::protobuf::uint32 value);

  // required uint32 height = 9;
  bool has_height() const;
  void clear_height();
  static const int kHeightFieldNumber = 9;
  ::google::protobuf::uint32 height() const;
  void set_height(::google::protobuf::uint32 value);

  // optional double radius = 10;
  bool has_radius() const;
  void clear_radius();
  static const int kRadiusFieldNumber = 10;
  double radius() const;
  void set_radius(double value);

  // @@protoc_insertion_point(class_scope:com.zchxlab.radar.protobuf.RadarVideoGIF)
 private:
  inline void set_has_radarid();
  inline void clear_has_radarid();
  inline void set_has_radarname();
  inline void clear_has_radarname();
  inline void set_has_latitude();
  inline void clear_has_latitude();
  inline void set_has_longitude();
  inline void clear_has_longitude();
  inline void set_has_startutc();
  inline void clear_has_startutc();
  inline void set_has_endutc();
  inline void clear_has_endutc();
  inline void set_has_imagedata();
  inline void clear_has_imagedata();
  inline void set_has_width();
  inline void clear_has_width();
  inline void set_has_height();
  inline void clear_has_height();
  inline void set_has_radius();
  inline void clear_has_radius();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable int _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr radarname_;
  ::google::protobuf::internal::ArenaStringPtr imagedata_;
  ::google::protobuf::uint64 radarid_;
  double latitude_;
  double longitude_;
  ::google::protobuf::uint64 startutc_;
  ::google::protobuf::uint64 endutc_;
  ::google::protobuf::uint32 width_;
  ::google::protobuf::uint32 height_;
  double radius_;
  friend void  protobuf_InitDefaults_ZCHXRadar_2eproto_impl();
  friend void  protobuf_AddDesc_ZCHXRadar_2eproto_impl();
  friend void protobuf_AssignDesc_ZCHXRadar_2eproto();
  friend void protobuf_ShutdownFile_ZCHXRadar_2eproto();

  void InitAsDefaultInstance();
};
extern ::google::protobuf::internal::ExplicitlyConstructed<RadarVideoGIF> RadarVideoGIF_default_instance_;

// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// TrackPoint

// required int32 systemAreaCode = 1;
inline bool TrackPoint::has_systemareacode() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TrackPoint::set_has_systemareacode() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TrackPoint::clear_has_systemareacode() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TrackPoint::clear_systemareacode() {
  systemareacode_ = 0;
  clear_has_systemareacode();
}
inline ::google::protobuf::int32 TrackPoint::systemareacode() const {
  // @@protoc_insertion_point(field_get:com.zchxlab.radar.protobuf.TrackPoint.systemAreaCode)
  return systemareacode_;
}
inline void TrackPoint::set_systemareacode(::google::protobuf::int32 value) {
  set_has_systemareacode();
  systemareacode_ = value;
  // @@protoc_insertion_point(field_set:com.zchxlab.radar.protobuf.TrackPoint.systemAreaCode)
}

// required int32 systemIdentificationCode = 2;
inline bool TrackPoint::has_systemidentificationcode() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TrackPoint::set_has_systemidentificationcode() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TrackPoint::clear_has_systemidentificationcode() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TrackPoint::clear_systemidentificationcode() {
  systemidentificationcode_ = 0;
  clear_has_systemidentificationcode();
}
inline ::google::protobuf::int32 TrackPoint::systemidentificationcode() const {
  // @@protoc_insertion_point(field_get:com.zchxlab.radar.protobuf.TrackPoint.systemIdentificationCode)
  return systemidentificationcode_;
}
inline void TrackPoint::set_systemidentificationcode(::google::protobuf::int32 value) {
  set_has_systemidentificationcode();
  systemidentificationcode_ = value;
  // @@protoc_insertion_point(field_set:com.zchxlab.radar.protobuf.TrackPoint.systemIdentificationCode)
}

// required .com.zchxlab.radar.protobuf.MSGTYP messageType = 3;
inline bool TrackPoint::has_messagetype() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TrackPoint::set_has_messagetype() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TrackPoint::clear_has_messagetype() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TrackPoint::clear_messagetype() {
  messagetype_ = 0;
  clear_has_messagetype();
}
inline ::com::zchxlab::radar::protobuf::MSGTYP TrackPoint::messagetype() const {
  // @@protoc_insertion_point(field_get:com.zchxlab.radar.protobuf.TrackPoint.messageType)
  return static_cast< ::com::zchxlab::radar::protobuf::MSGTYP >(messagetype_);
}
inline void TrackPoint::set_messagetype(::com::zchxlab::radar::protobuf::MSGTYP value) {
  assert(::com::zchxlab::radar::protobuf::MSGTYP_IsValid(value));
  set_has_messagetype();
  messagetype_ = value;
  // @@protoc_insertion_point(field_set:com.zchxlab.radar.protobuf.TrackPoint.messageType)
}

// required uint32 trackNumber = 4;
inline bool TrackPoint::has_tracknumber() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void TrackPoint::set_has_tracknumber() {
  _has_bits_[0] |= 0x00000008u;
}
inline void TrackPoint::clear_has_tracknumber() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void TrackPoint::clear_tracknumber() {
  tracknumber_ = 0u;
  clear_has_tracknumber();
}
inline ::google::protobuf::uint32 TrackPoint::tracknumber() const {
  // @@protoc_insertion_point(field_get:com.zchxlab.radar.protobuf.TrackPoint.trackNumber)
  return tracknumber_;
}
inline void TrackPoint::set_tracknumber(::google::protobuf::uint32 value) {
  set_has_tracknumber();
  tracknumber_ = value;
  // @@protoc_insertion_point(field_set:com.zchxlab.radar.protobuf.TrackPoint.trackNumber)
}

// required float cartesianPosX = 5;
inline bool TrackPoint::has_cartesianposx() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void TrackPoint::set_has_cartesianposx() {
  _has_bits_[0] |= 0x00000010u;
}
inline void TrackPoint::clear_has_cartesianposx() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void TrackPoint::clear_cartesianposx() {
  cartesianposx_ = 0;
  clear_has_cartesianposx();
}
inline float TrackPoint::cartesianposx() const {
  // @@protoc_insertion_point(field_get:com.zchxlab.radar.protobuf.TrackPoint.cartesianPosX)
  return cartesianposx_;
}
inline void TrackPoint::set_cartesianposx(float value) {
  set_has_cartesianposx();
  cartesianposx_ = value;
  // @@protoc_insertion_point(field_set:com.zchxlab.radar.protobuf.TrackPoint.cartesianPosX)
}

// required float cartesianPosY = 6;
inline bool TrackPoint::has_cartesianposy() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void TrackPoint::set_has_cartesianposy() {
  _has_bits_[0] |= 0x00000020u;
}
inline void TrackPoint::clear_has_cartesianposy() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void TrackPoint::clear_cartesianposy() {
  cartesianposy_ = 0;
  clear_has_cartesianposy();
}
inline float TrackPoint::cartesianposy() const {
  // @@protoc_insertion_point(field_get:com.zchxlab.radar.protobuf.TrackPoint.cartesianPosY)
  return cartesianposy_;
}
inline void TrackPoint::set_cartesianposy(float value) {
  set_has_cartesianposy();
  cartesianposy_ = value;
  // @@protoc_insertion_point(field_set:com.zchxlab.radar.protobuf.TrackPoint.cartesianPosY)
}

// required double wgs84PosLat = 7;
inline bool TrackPoint::has_wgs84poslat() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void TrackPoint::set_has_wgs84poslat() {
  _has_bits_[0] |= 0x00000040u;
}
inline void TrackPoint::clear_has_wgs84poslat() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void TrackPoint::clear_wgs84poslat() {
  wgs84poslat_ = 0;
  clear_has_wgs84poslat();
}
inline double TrackPoint::wgs84poslat() const {
  // @@protoc_insertion_point(field_get:com.zchxlab.radar.protobuf.TrackPoint.wgs84PosLat)
  return wgs84poslat_;
}
inline void TrackPoint::set_wgs84poslat(double value) {
  set_has_wgs84poslat();
  wgs84poslat_ = value;
  // @@protoc_insertion_point(field_set:com.zchxlab.radar.protobuf.TrackPoint.wgs84PosLat)
}

// required double wgs84PosLong = 8;
inline bool TrackPoint::has_wgs84poslong() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void TrackPoint::set_has_wgs84poslong() {
  _has_bits_[0] |= 0x00000080u;
}
inline void TrackPoint::clear_has_wgs84poslong() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void TrackPoint::clear_wgs84poslong() {
  wgs84poslong_ = 0;
  clear_has_wgs84poslong();
}
inline double TrackPoint::wgs84poslong() const {
  // @@protoc_insertion_point(field_get:com.zchxlab.radar.protobuf.TrackPoint.wgs84PosLong)
  return wgs84poslong_;
}
inline void TrackPoint::set_wgs84poslong(double value) {
  set_has_wgs84poslong();
  wgs84poslong_ = value;
  // @@protoc_insertion_point(field_set:com.zchxlab.radar.protobuf.TrackPoint.wgs84PosLong)
}

// required float timeOfDay = 9;
inline bool TrackPoint::has_timeofday() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void TrackPoint::set_has_timeofday() {
  _has_bits_[0] |= 0x00000100u;
}
inline void TrackPoint::clear_has_timeofday() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void TrackPoint::clear_timeofday() {
  timeofday_ = 0;
  clear_has_timeofday();
}
inline float TrackPoint::timeofday() const {
  // @@protoc_insertion_point(field_get:com.zchxlab.radar.protobuf.TrackPoint.timeOfDay)
  return timeofday_;
}
inline void TrackPoint::set_timeofday(float value) {
  set_has_timeofday();
  timeofday_ = value;
  // @@protoc_insertion_point(field_set:com.zchxlab.radar.protobuf.TrackPoint.timeOfDay)
}

// optional .com.zchxlab.radar.protobuf.CNF trackType = 10;
inline bool TrackPoint::has_tracktype() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void TrackPoint::set_has_tracktype() {
  _has_bits_[0] |= 0x00000200u;
}
inline void TrackPoint::clear_has_tracktype() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void TrackPoint::clear_tracktype() {
  tracktype_ = 0;
  clear_has_tracktype();
}
inline ::com::zchxlab::radar::protobuf::CNF TrackPoint::tracktype() const {
  // @@protoc_insertion_point(field_get:com.zchxlab.radar.protobuf.TrackPoint.trackType)
  return static_cast< ::com::zchxlab::radar::protobuf::CNF >(tracktype_);
}
inline void TrackPoint::set_tracktype(::com::zchxlab::radar::protobuf::CNF value) {
  assert(::com::zchxlab::radar::protobuf::CNF_IsValid(value));
  set_has_tracktype();
  tracktype_ = value;
  // @@protoc_insertion_point(field_set:com.zchxlab.radar.protobuf.TrackPoint.trackType)
}

// optional bool trackLastReport = 11;
inline bool TrackPoint::has_tracklastreport() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void TrackPoint::set_has_tracklastreport() {
  _has_bits_[0] |= 0x00000400u;
}
inline void TrackPoint::clear_has_tracklastreport() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void TrackPoint::clear_tracklastreport() {
  tracklastreport_ = false;
  clear_has_tracklastreport();
}
inline bool TrackPoint::tracklastreport() const {
  // @@protoc_insertion_point(field_get:com.zchxlab.radar.protobuf.TrackPoint.trackLastReport)
  return tracklastreport_;
}
inline void TrackPoint::set_tracklastreport(bool value) {
  set_has_tracklastreport();
  tracklastreport_ = value;
  // @@protoc_insertion_point(field_set:com.zchxlab.radar.protobuf.TrackPoint.trackLastReport)
}

// optional .com.zchxlab.radar.protobuf.CST extrapolation = 12;
inline bool TrackPoint::has_extrapolation() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void TrackPoint::set_has_extrapolation() {
  _has_bits_[0] |= 0x00000800u;
}
inline void TrackPoint::clear_has_extrapolation() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void TrackPoint::clear_extrapolation() {
  extrapolation_ = 0;
  clear_has_extrapolation();
}
inline ::com::zchxlab::radar::protobuf::CST TrackPoint::extrapolation() const {
  // @@protoc_insertion_point(field_get:com.zchxlab.radar.protobuf.TrackPoint.extrapolation)
  return static_cast< ::com::zchxlab::radar::protobuf::CST >(extrapolation_);
}
inline void TrackPoint::set_extrapolation(::com::zchxlab::radar::protobuf::CST value) {
  assert(::com::zchxlab::radar::protobuf::CST_IsValid(value));
  set_has_extrapolation();
  extrapolation_ = value;
  // @@protoc_insertion_point(field_set:com.zchxlab.radar.protobuf.TrackPoint.extrapolation)
}

// optional .com.zchxlab.radar.protobuf.STH trackPositionCode = 13;
inline bool TrackPoint::has_trackpositioncode() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void TrackPoint::set_has_trackpositioncode() {
  _has_bits_[0] |= 0x00001000u;
}
inline void TrackPoint::clear_has_trackpositioncode() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void TrackPoint::clear_trackpositioncode() {
  trackpositioncode_ = 0;
  clear_has_trackpositioncode();
}
inline ::com::zchxlab::radar::protobuf::STH TrackPoint::trackpositioncode() const {
  // @@protoc_insertion_point(field_get:com.zchxlab.radar.protobuf.TrackPoint.trackPositionCode)
  return static_cast< ::com::zchxlab::radar::protobuf::STH >(trackpositioncode_);
}
inline void TrackPoint::set_trackpositioncode(::com::zchxlab::radar::protobuf::STH value) {
  assert(::com::zchxlab::radar::protobuf::STH_IsValid(value));
  set_has_trackpositioncode();
  trackpositioncode_ = value;
  // @@protoc_insertion_point(field_set:com.zchxlab.radar.protobuf.TrackPoint.trackPositionCode)
}

// optional float sigmaX = 14;
inline bool TrackPoint::has_sigmax() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void TrackPoint::set_has_sigmax() {
  _has_bits_[0] |= 0x00002000u;
}
inline void TrackPoint::clear_has_sigmax() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void TrackPoint::clear_sigmax() {
  sigmax_ = 0;
  clear_has_sigmax();
}
inline float TrackPoint::sigmax() const {
  // @@protoc_insertion_point(field_get:com.zchxlab.radar.protobuf.TrackPoint.sigmaX)
  return sigmax_;
}
inline void TrackPoint::set_sigmax(float value) {
  set_has_sigmax();
  sigmax_ = value;
  // @@protoc_insertion_point(field_set:com.zchxlab.radar.protobuf.TrackPoint.sigmaX)
}

// optional float sigmaY = 15;
inline bool TrackPoint::has_sigmay() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void TrackPoint::set_has_sigmay() {
  _has_bits_[0] |= 0x00004000u;
}
inline void TrackPoint::clear_has_sigmay() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void TrackPoint::clear_sigmay() {
  sigmay_ = 0;
  clear_has_sigmay();
}
inline float TrackPoint::sigmay() const {
  // @@protoc_insertion_point(field_get:com.zchxlab.radar.protobuf.TrackPoint.sigmaY)
  return sigmay_;
}
inline void TrackPoint::set_sigmay(float value) {
  set_has_sigmay();
  sigmay_ = value;
  // @@protoc_insertion_point(field_set:com.zchxlab.radar.protobuf.TrackPoint.sigmaY)
}

// optional float sigmaXY = 16;
inline bool TrackPoint::has_sigmaxy() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void TrackPoint::set_has_sigmaxy() {
  _has_bits_[0] |= 0x00008000u;
}
inline void TrackPoint::clear_has_sigmaxy() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void TrackPoint::clear_sigmaxy() {
  sigmaxy_ = 0;
  clear_has_sigmaxy();
}
inline float TrackPoint::sigmaxy() const {
  // @@protoc_insertion_point(field_get:com.zchxlab.radar.protobuf.TrackPoint.sigmaXY)
  return sigmaxy_;
}
inline void TrackPoint::set_sigmaxy(float value) {
  set_has_sigmaxy();
  sigmaxy_ = value;
  // @@protoc_insertion_point(field_set:com.zchxlab.radar.protobuf.TrackPoint.sigmaXY)
}

// optional float ampOfPriPlot = 17;
inline bool TrackPoint::has_ampofpriplot() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void TrackPoint::set_has_ampofpriplot() {
  _has_bits_[0] |= 0x00010000u;
}
inline void TrackPoint::clear_has_ampofpriplot() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void TrackPoint::clear_ampofpriplot() {
  ampofpriplot_ = 0;
  clear_has_ampofpriplot();
}
inline float TrackPoint::ampofpriplot() const {
  // @@protoc_insertion_point(field_get:com.zchxlab.radar.protobuf.TrackPoint.ampOfPriPlot)
  return ampofpriplot_;
}
inline void TrackPoint::set_ampofpriplot(float value) {
  set_has_ampofpriplot();
  ampofpriplot_ = value;
  // @@protoc_insertion_point(field_set:com.zchxlab.radar.protobuf.TrackPoint.ampOfPriPlot)
}

// required double cartesianTrkVel_vx = 18;
inline bool TrackPoint::has_cartesiantrkvel_vx() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void TrackPoint::set_has_cartesiantrkvel_vx() {
  _has_bits_[0] |= 0x00020000u;
}
inline void TrackPoint::clear_has_cartesiantrkvel_vx() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void TrackPoint::clear_cartesiantrkvel_vx() {
  cartesiantrkvel_vx_ = 0;
  clear_has_cartesiantrkvel_vx();
}
inline double TrackPoint::cartesiantrkvel_vx() const {
  // @@protoc_insertion_point(field_get:com.zchxlab.radar.protobuf.TrackPoint.cartesianTrkVel_vx)
  return cartesiantrkvel_vx_;
}
inline void TrackPoint::set_cartesiantrkvel_vx(double value) {
  set_has_cartesiantrkvel_vx();
  cartesiantrkvel_vx_ = value;
  // @@protoc_insertion_point(field_set:com.zchxlab.radar.protobuf.TrackPoint.cartesianTrkVel_vx)
}

// required double cartesianTrkVel_vy = 19;
inline bool TrackPoint::has_cartesiantrkvel_vy() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void TrackPoint::set_has_cartesiantrkvel_vy() {
  _has_bits_[0] |= 0x00040000u;
}
inline void TrackPoint::clear_has_cartesiantrkvel_vy() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void TrackPoint::clear_cartesiantrkvel_vy() {
  cartesiantrkvel_vy_ = 0;
  clear_has_cartesiantrkvel_vy();
}
inline double TrackPoint::cartesiantrkvel_vy() const {
  // @@protoc_insertion_point(field_get:com.zchxlab.radar.protobuf.TrackPoint.cartesianTrkVel_vy)
  return cartesiantrkvel_vy_;
}
inline void TrackPoint::set_cartesiantrkvel_vy(double value) {
  set_has_cartesiantrkvel_vy();
  cartesiantrkvel_vy_ = value;
  // @@protoc_insertion_point(field_set:com.zchxlab.radar.protobuf.TrackPoint.cartesianTrkVel_vy)
}

// required double cog = 20;
inline bool TrackPoint::has_cog() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void TrackPoint::set_has_cog() {
  _has_bits_[0] |= 0x00080000u;
}
inline void TrackPoint::clear_has_cog() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void TrackPoint::clear_cog() {
  cog_ = 0;
  clear_has_cog();
}
inline double TrackPoint::cog() const {
  // @@protoc_insertion_point(field_get:com.zchxlab.radar.protobuf.TrackPoint.cog)
  return cog_;
}
inline void TrackPoint::set_cog(double value) {
  set_has_cog();
  cog_ = value;
  // @@protoc_insertion_point(field_set:com.zchxlab.radar.protobuf.TrackPoint.cog)
}

// required double sog = 21;
inline bool TrackPoint::has_sog() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void TrackPoint::set_has_sog() {
  _has_bits_[0] |= 0x00100000u;
}
inline void TrackPoint::clear_has_sog() {
  _has_bits_[0] &= ~0x00100000u;
}
inline void TrackPoint::clear_sog() {
  sog_ = 0;
  clear_has_sog();
}
inline double TrackPoint::sog() const {
  // @@protoc_insertion_point(field_get:com.zchxlab.radar.protobuf.TrackPoint.sog)
  return sog_;
}
inline void TrackPoint::set_sog(double value) {
  set_has_sog();
  sog_ = value;
  // @@protoc_insertion_point(field_set:com.zchxlab.radar.protobuf.TrackPoint.sog)
}

inline const TrackPoint* TrackPoint::internal_default_instance() {
  return &TrackPoint_default_instance_.get();
}
// -------------------------------------------------------------------

// VideoFrame

// required int32 systemAreaCode = 1;
inline bool VideoFrame::has_systemareacode() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void VideoFrame::set_has_systemareacode() {
  _has_bits_[0] |= 0x00000001u;
}
inline void VideoFrame::clear_has_systemareacode() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void VideoFrame::clear_systemareacode() {
  systemareacode_ = 0;
  clear_has_systemareacode();
}
inline ::google::protobuf::int32 VideoFrame::systemareacode() const {
  // @@protoc_insertion_point(field_get:com.zchxlab.radar.protobuf.VideoFrame.systemAreaCode)
  return systemareacode_;
}
inline void VideoFrame::set_systemareacode(::google::protobuf::int32 value) {
  set_has_systemareacode();
  systemareacode_ = value;
  // @@protoc_insertion_point(field_set:com.zchxlab.radar.protobuf.VideoFrame.systemAreaCode)
}

// required int32 systemIdentificationCode = 2;
inline bool VideoFrame::has_systemidentificationcode() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void VideoFrame::set_has_systemidentificationcode() {
  _has_bits_[0] |= 0x00000002u;
}
inline void VideoFrame::clear_has_systemidentificationcode() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void VideoFrame::clear_systemidentificationcode() {
  systemidentificationcode_ = 0;
  clear_has_systemidentificationcode();
}
inline ::google::protobuf::int32 VideoFrame::systemidentificationcode() const {
  // @@protoc_insertion_point(field_get:com.zchxlab.radar.protobuf.VideoFrame.systemIdentificationCode)
  return systemidentificationcode_;
}
inline void VideoFrame::set_systemidentificationcode(::google::protobuf::int32 value) {
  set_has_systemidentificationcode();
  systemidentificationcode_ = value;
  // @@protoc_insertion_point(field_set:com.zchxlab.radar.protobuf.VideoFrame.systemIdentificationCode)
}

// required int32 msgIndex = 3;
inline bool VideoFrame::has_msgindex() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void VideoFrame::set_has_msgindex() {
  _has_bits_[0] |= 0x00000004u;
}
inline void VideoFrame::clear_has_msgindex() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void VideoFrame::clear_msgindex() {
  msgindex_ = 0;
  clear_has_msgindex();
}
inline ::google::protobuf::int32 VideoFrame::msgindex() const {
  // @@protoc_insertion_point(field_get:com.zchxlab.radar.protobuf.VideoFrame.msgIndex)
  return msgindex_;
}
inline void VideoFrame::set_msgindex(::google::protobuf::int32 value) {
  set_has_msgindex();
  msgindex_ = value;
  // @@protoc_insertion_point(field_set:com.zchxlab.radar.protobuf.VideoFrame.msgIndex)
}

// required uint32 azimuth = 4;
inline bool VideoFrame::has_azimuth() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void VideoFrame::set_has_azimuth() {
  _has_bits_[0] |= 0x00000008u;
}
inline void VideoFrame::clear_has_azimuth() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void VideoFrame::clear_azimuth() {
  azimuth_ = 0u;
  clear_has_azimuth();
}
inline ::google::protobuf::uint32 VideoFrame::azimuth() const {
  // @@protoc_insertion_point(field_get:com.zchxlab.radar.protobuf.VideoFrame.azimuth)
  return azimuth_;
}
inline void VideoFrame::set_azimuth(::google::protobuf::uint32 value) {
  set_has_azimuth();
  azimuth_ = value;
  // @@protoc_insertion_point(field_set:com.zchxlab.radar.protobuf.VideoFrame.azimuth)
}

// optional uint32 heading = 5;
inline bool VideoFrame::has_heading() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void VideoFrame::set_has_heading() {
  _has_bits_[0] |= 0x00000010u;
}
inline void VideoFrame::clear_has_heading() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void VideoFrame::clear_heading() {
  heading_ = 0u;
  clear_has_heading();
}
inline ::google::protobuf::uint32 VideoFrame::heading() const {
  // @@protoc_insertion_point(field_get:com.zchxlab.radar.protobuf.VideoFrame.heading)
  return heading_;
}
inline void VideoFrame::set_heading(::google::protobuf::uint32 value) {
  set_has_heading();
  heading_ = value;
  // @@protoc_insertion_point(field_set:com.zchxlab.radar.protobuf.VideoFrame.heading)
}

// required double startRange = 6;
inline bool VideoFrame::has_startrange() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void VideoFrame::set_has_startrange() {
  _has_bits_[0] |= 0x00000020u;
}
inline void VideoFrame::clear_has_startrange() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void VideoFrame::clear_startrange() {
  startrange_ = 0;
  clear_has_startrange();
}
inline double VideoFrame::startrange() const {
  // @@protoc_insertion_point(field_get:com.zchxlab.radar.protobuf.VideoFrame.startRange)
  return startrange_;
}
inline void VideoFrame::set_startrange(double value) {
  set_has_startrange();
  startrange_ = value;
  // @@protoc_insertion_point(field_set:com.zchxlab.radar.protobuf.VideoFrame.startRange)
}

// required double rangeFactor = 7;
inline bool VideoFrame::has_rangefactor() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void VideoFrame::set_has_rangefactor() {
  _has_bits_[0] |= 0x00000040u;
}
inline void VideoFrame::clear_has_rangefactor() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void VideoFrame::clear_rangefactor() {
  rangefactor_ = 0;
  clear_has_rangefactor();
}
inline double VideoFrame::rangefactor() const {
  // @@protoc_insertion_point(field_get:com.zchxlab.radar.protobuf.VideoFrame.rangeFactor)
  return rangefactor_;
}
inline void VideoFrame::set_rangefactor(double value) {
  set_has_rangefactor();
  rangefactor_ = value;
  // @@protoc_insertion_point(field_set:com.zchxlab.radar.protobuf.VideoFrame.rangeFactor)
}

// required .com.zchxlab.radar.protobuf.RES bitResolution = 8;
inline bool VideoFrame::has_bitresolution() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void VideoFrame::set_has_bitresolution() {
  _has_bits_[0] |= 0x00000080u;
}
inline void VideoFrame::clear_has_bitresolution() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void VideoFrame::clear_bitresolution() {
  bitresolution_ = 1;
  clear_has_bitresolution();
}
inline ::com::zchxlab::radar::protobuf::RES VideoFrame::bitresolution() const {
  // @@protoc_insertion_point(field_get:com.zchxlab.radar.protobuf.VideoFrame.bitResolution)
  return static_cast< ::com::zchxlab::radar::protobuf::RES >(bitresolution_);
}
inline void VideoFrame::set_bitresolution(::com::zchxlab::radar::protobuf::RES value) {
  assert(::com::zchxlab::radar::protobuf::RES_IsValid(value));
  set_has_bitresolution();
  bitresolution_ = value;
  // @@protoc_insertion_point(field_set:com.zchxlab.radar.protobuf.VideoFrame.bitResolution)
}

// required int32 timeOfDay = 9;
inline bool VideoFrame::has_timeofday() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void VideoFrame::set_has_timeofday() {
  _has_bits_[0] |= 0x00000100u;
}
inline void VideoFrame::clear_has_timeofday() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void VideoFrame::clear_timeofday() {
  timeofday_ = 0;
  clear_has_timeofday();
}
inline ::google::protobuf::int32 VideoFrame::timeofday() const {
  // @@protoc_insertion_point(field_get:com.zchxlab.radar.protobuf.VideoFrame.timeOfDay)
  return timeofday_;
}
inline void VideoFrame::set_timeofday(::google::protobuf::int32 value) {
  set_has_timeofday();
  timeofday_ = value;
  // @@protoc_insertion_point(field_set:com.zchxlab.radar.protobuf.VideoFrame.timeOfDay)
}

// repeated int32 amplitude = 10;
inline int VideoFrame::amplitude_size() const {
  return amplitude_.size();
}
inline void VideoFrame::clear_amplitude() {
  amplitude_.Clear();
}
inline ::google::protobuf::int32 VideoFrame::amplitude(int index) const {
  // @@protoc_insertion_point(field_get:com.zchxlab.radar.protobuf.VideoFrame.amplitude)
  return amplitude_.Get(index);
}
inline void VideoFrame::set_amplitude(int index, ::google::protobuf::int32 value) {
  amplitude_.Set(index, value);
  // @@protoc_insertion_point(field_set:com.zchxlab.radar.protobuf.VideoFrame.amplitude)
}
inline void VideoFrame::add_amplitude(::google::protobuf::int32 value) {
  amplitude_.Add(value);
  // @@protoc_insertion_point(field_add:com.zchxlab.radar.protobuf.VideoFrame.amplitude)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
VideoFrame::amplitude() const {
  // @@protoc_insertion_point(field_list:com.zchxlab.radar.protobuf.VideoFrame.amplitude)
  return amplitude_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
VideoFrame::mutable_amplitude() {
  // @@protoc_insertion_point(field_mutable_list:com.zchxlab.radar.protobuf.VideoFrame.amplitude)
  return &amplitude_;
}

inline const VideoFrame* VideoFrame::internal_default_instance() {
  return &VideoFrame_default_instance_.get();
}
// -------------------------------------------------------------------

// RadarVideoPNG

// required uint64 radarId = 1;
inline bool RadarVideoPNG::has_radarid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RadarVideoPNG::set_has_radarid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RadarVideoPNG::clear_has_radarid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RadarVideoPNG::clear_radarid() {
  radarid_ = GOOGLE_ULONGLONG(0);
  clear_has_radarid();
}
inline ::google::protobuf::uint64 RadarVideoPNG::radarid() const {
  // @@protoc_insertion_point(field_get:com.zchxlab.radar.protobuf.RadarVideoPNG.radarId)
  return radarid_;
}
inline void RadarVideoPNG::set_radarid(::google::protobuf::uint64 value) {
  set_has_radarid();
  radarid_ = value;
  // @@protoc_insertion_point(field_set:com.zchxlab.radar.protobuf.RadarVideoPNG.radarId)
}

// required string radarName = 2;
inline bool RadarVideoPNG::has_radarname() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RadarVideoPNG::set_has_radarname() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RadarVideoPNG::clear_has_radarname() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RadarVideoPNG::clear_radarname() {
  radarname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_radarname();
}
inline const ::std::string& RadarVideoPNG::radarname() const {
  // @@protoc_insertion_point(field_get:com.zchxlab.radar.protobuf.RadarVideoPNG.radarName)
  return radarname_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RadarVideoPNG::set_radarname(const ::std::string& value) {
  set_has_radarname();
  radarname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.zchxlab.radar.protobuf.RadarVideoPNG.radarName)
}
inline void RadarVideoPNG::set_radarname(const char* value) {
  set_has_radarname();
  radarname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.zchxlab.radar.protobuf.RadarVideoPNG.radarName)
}
inline void RadarVideoPNG::set_radarname(const char* value, size_t size) {
  set_has_radarname();
  radarname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.zchxlab.radar.protobuf.RadarVideoPNG.radarName)
}
inline ::std::string* RadarVideoPNG::mutable_radarname() {
  set_has_radarname();
  // @@protoc_insertion_point(field_mutable:com.zchxlab.radar.protobuf.RadarVideoPNG.radarName)
  return radarname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RadarVideoPNG::release_radarname() {
  // @@protoc_insertion_point(field_release:com.zchxlab.radar.protobuf.RadarVideoPNG.radarName)
  clear_has_radarname();
  return radarname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RadarVideoPNG::set_allocated_radarname(::std::string* radarname) {
  if (radarname != NULL) {
    set_has_radarname();
  } else {
    clear_has_radarname();
  }
  radarname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), radarname);
  // @@protoc_insertion_point(field_set_allocated:com.zchxlab.radar.protobuf.RadarVideoPNG.radarName)
}

// required double latitude = 3;
inline bool RadarVideoPNG::has_latitude() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void RadarVideoPNG::set_has_latitude() {
  _has_bits_[0] |= 0x00000004u;
}
inline void RadarVideoPNG::clear_has_latitude() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void RadarVideoPNG::clear_latitude() {
  latitude_ = 0;
  clear_has_latitude();
}
inline double RadarVideoPNG::latitude() const {
  // @@protoc_insertion_point(field_get:com.zchxlab.radar.protobuf.RadarVideoPNG.latitude)
  return latitude_;
}
inline void RadarVideoPNG::set_latitude(double value) {
  set_has_latitude();
  latitude_ = value;
  // @@protoc_insertion_point(field_set:com.zchxlab.radar.protobuf.RadarVideoPNG.latitude)
}

// required double longitude = 4;
inline bool RadarVideoPNG::has_longitude() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void RadarVideoPNG::set_has_longitude() {
  _has_bits_[0] |= 0x00000008u;
}
inline void RadarVideoPNG::clear_has_longitude() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void RadarVideoPNG::clear_longitude() {
  longitude_ = 0;
  clear_has_longitude();
}
inline double RadarVideoPNG::longitude() const {
  // @@protoc_insertion_point(field_get:com.zchxlab.radar.protobuf.RadarVideoPNG.longitude)
  return longitude_;
}
inline void RadarVideoPNG::set_longitude(double value) {
  set_has_longitude();
  longitude_ = value;
  // @@protoc_insertion_point(field_set:com.zchxlab.radar.protobuf.RadarVideoPNG.longitude)
}

// required uint64 UTC = 5;
inline bool RadarVideoPNG::has_utc() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void RadarVideoPNG::set_has_utc() {
  _has_bits_[0] |= 0x00000010u;
}
inline void RadarVideoPNG::clear_has_utc() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void RadarVideoPNG::clear_utc() {
  utc_ = GOOGLE_ULONGLONG(0);
  clear_has_utc();
}
inline ::google::protobuf::uint64 RadarVideoPNG::utc() const {
  // @@protoc_insertion_point(field_get:com.zchxlab.radar.protobuf.RadarVideoPNG.UTC)
  return utc_;
}
inline void RadarVideoPNG::set_utc(::google::protobuf::uint64 value) {
  set_has_utc();
  utc_ = value;
  // @@protoc_insertion_point(field_set:com.zchxlab.radar.protobuf.RadarVideoPNG.UTC)
}

// required bytes imageData = 6;
inline bool RadarVideoPNG::has_imagedata() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void RadarVideoPNG::set_has_imagedata() {
  _has_bits_[0] |= 0x00000020u;
}
inline void RadarVideoPNG::clear_has_imagedata() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void RadarVideoPNG::clear_imagedata() {
  imagedata_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_imagedata();
}
inline const ::std::string& RadarVideoPNG::imagedata() const {
  // @@protoc_insertion_point(field_get:com.zchxlab.radar.protobuf.RadarVideoPNG.imageData)
  return imagedata_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RadarVideoPNG::set_imagedata(const ::std::string& value) {
  set_has_imagedata();
  imagedata_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.zchxlab.radar.protobuf.RadarVideoPNG.imageData)
}
inline void RadarVideoPNG::set_imagedata(const char* value) {
  set_has_imagedata();
  imagedata_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.zchxlab.radar.protobuf.RadarVideoPNG.imageData)
}
inline void RadarVideoPNG::set_imagedata(const void* value, size_t size) {
  set_has_imagedata();
  imagedata_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.zchxlab.radar.protobuf.RadarVideoPNG.imageData)
}
inline ::std::string* RadarVideoPNG::mutable_imagedata() {
  set_has_imagedata();
  // @@protoc_insertion_point(field_mutable:com.zchxlab.radar.protobuf.RadarVideoPNG.imageData)
  return imagedata_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RadarVideoPNG::release_imagedata() {
  // @@protoc_insertion_point(field_release:com.zchxlab.radar.protobuf.RadarVideoPNG.imageData)
  clear_has_imagedata();
  return imagedata_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RadarVideoPNG::set_allocated_imagedata(::std::string* imagedata) {
  if (imagedata != NULL) {
    set_has_imagedata();
  } else {
    clear_has_imagedata();
  }
  imagedata_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), imagedata);
  // @@protoc_insertion_point(field_set_allocated:com.zchxlab.radar.protobuf.RadarVideoPNG.imageData)
}

// required uint32 width = 7;
inline bool RadarVideoPNG::has_width() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void RadarVideoPNG::set_has_width() {
  _has_bits_[0] |= 0x00000040u;
}
inline void RadarVideoPNG::clear_has_width() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void RadarVideoPNG::clear_width() {
  width_ = 0u;
  clear_has_width();
}
inline ::google::protobuf::uint32 RadarVideoPNG::width() const {
  // @@protoc_insertion_point(field_get:com.zchxlab.radar.protobuf.RadarVideoPNG.width)
  return width_;
}
inline void RadarVideoPNG::set_width(::google::protobuf::uint32 value) {
  set_has_width();
  width_ = value;
  // @@protoc_insertion_point(field_set:com.zchxlab.radar.protobuf.RadarVideoPNG.width)
}

// required uint32 height = 8;
inline bool RadarVideoPNG::has_height() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void RadarVideoPNG::set_has_height() {
  _has_bits_[0] |= 0x00000080u;
}
inline void RadarVideoPNG::clear_has_height() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void RadarVideoPNG::clear_height() {
  height_ = 0u;
  clear_has_height();
}
inline ::google::protobuf::uint32 RadarVideoPNG::height() const {
  // @@protoc_insertion_point(field_get:com.zchxlab.radar.protobuf.RadarVideoPNG.height)
  return height_;
}
inline void RadarVideoPNG::set_height(::google::protobuf::uint32 value) {
  set_has_height();
  height_ = value;
  // @@protoc_insertion_point(field_set:com.zchxlab.radar.protobuf.RadarVideoPNG.height)
}

// optional double radius = 9;
inline bool RadarVideoPNG::has_radius() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void RadarVideoPNG::set_has_radius() {
  _has_bits_[0] |= 0x00000100u;
}
inline void RadarVideoPNG::clear_has_radius() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void RadarVideoPNG::clear_radius() {
  radius_ = 0;
  clear_has_radius();
}
inline double RadarVideoPNG::radius() const {
  // @@protoc_insertion_point(field_get:com.zchxlab.radar.protobuf.RadarVideoPNG.radius)
  return radius_;
}
inline void RadarVideoPNG::set_radius(double value) {
  set_has_radius();
  radius_ = value;
  // @@protoc_insertion_point(field_set:com.zchxlab.radar.protobuf.RadarVideoPNG.radius)
}

inline const RadarVideoPNG* RadarVideoPNG::internal_default_instance() {
  return &RadarVideoPNG_default_instance_.get();
}
// -------------------------------------------------------------------

// RadarVideoGIF

// required uint64 radarId = 1;
inline bool RadarVideoGIF::has_radarid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RadarVideoGIF::set_has_radarid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RadarVideoGIF::clear_has_radarid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RadarVideoGIF::clear_radarid() {
  radarid_ = GOOGLE_ULONGLONG(0);
  clear_has_radarid();
}
inline ::google::protobuf::uint64 RadarVideoGIF::radarid() const {
  // @@protoc_insertion_point(field_get:com.zchxlab.radar.protobuf.RadarVideoGIF.radarId)
  return radarid_;
}
inline void RadarVideoGIF::set_radarid(::google::protobuf::uint64 value) {
  set_has_radarid();
  radarid_ = value;
  // @@protoc_insertion_point(field_set:com.zchxlab.radar.protobuf.RadarVideoGIF.radarId)
}

// required string radarName = 2;
inline bool RadarVideoGIF::has_radarname() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RadarVideoGIF::set_has_radarname() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RadarVideoGIF::clear_has_radarname() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RadarVideoGIF::clear_radarname() {
  radarname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_radarname();
}
inline const ::std::string& RadarVideoGIF::radarname() const {
  // @@protoc_insertion_point(field_get:com.zchxlab.radar.protobuf.RadarVideoGIF.radarName)
  return radarname_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RadarVideoGIF::set_radarname(const ::std::string& value) {
  set_has_radarname();
  radarname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.zchxlab.radar.protobuf.RadarVideoGIF.radarName)
}
inline void RadarVideoGIF::set_radarname(const char* value) {
  set_has_radarname();
  radarname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.zchxlab.radar.protobuf.RadarVideoGIF.radarName)
}
inline void RadarVideoGIF::set_radarname(const char* value, size_t size) {
  set_has_radarname();
  radarname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.zchxlab.radar.protobuf.RadarVideoGIF.radarName)
}
inline ::std::string* RadarVideoGIF::mutable_radarname() {
  set_has_radarname();
  // @@protoc_insertion_point(field_mutable:com.zchxlab.radar.protobuf.RadarVideoGIF.radarName)
  return radarname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RadarVideoGIF::release_radarname() {
  // @@protoc_insertion_point(field_release:com.zchxlab.radar.protobuf.RadarVideoGIF.radarName)
  clear_has_radarname();
  return radarname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RadarVideoGIF::set_allocated_radarname(::std::string* radarname) {
  if (radarname != NULL) {
    set_has_radarname();
  } else {
    clear_has_radarname();
  }
  radarname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), radarname);
  // @@protoc_insertion_point(field_set_allocated:com.zchxlab.radar.protobuf.RadarVideoGIF.radarName)
}

// required double latitude = 3;
inline bool RadarVideoGIF::has_latitude() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void RadarVideoGIF::set_has_latitude() {
  _has_bits_[0] |= 0x00000004u;
}
inline void RadarVideoGIF::clear_has_latitude() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void RadarVideoGIF::clear_latitude() {
  latitude_ = 0;
  clear_has_latitude();
}
inline double RadarVideoGIF::latitude() const {
  // @@protoc_insertion_point(field_get:com.zchxlab.radar.protobuf.RadarVideoGIF.latitude)
  return latitude_;
}
inline void RadarVideoGIF::set_latitude(double value) {
  set_has_latitude();
  latitude_ = value;
  // @@protoc_insertion_point(field_set:com.zchxlab.radar.protobuf.RadarVideoGIF.latitude)
}

// required double longitude = 4;
inline bool RadarVideoGIF::has_longitude() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void RadarVideoGIF::set_has_longitude() {
  _has_bits_[0] |= 0x00000008u;
}
inline void RadarVideoGIF::clear_has_longitude() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void RadarVideoGIF::clear_longitude() {
  longitude_ = 0;
  clear_has_longitude();
}
inline double RadarVideoGIF::longitude() const {
  // @@protoc_insertion_point(field_get:com.zchxlab.radar.protobuf.RadarVideoGIF.longitude)
  return longitude_;
}
inline void RadarVideoGIF::set_longitude(double value) {
  set_has_longitude();
  longitude_ = value;
  // @@protoc_insertion_point(field_set:com.zchxlab.radar.protobuf.RadarVideoGIF.longitude)
}

// required uint64 startUTC = 5;
inline bool RadarVideoGIF::has_startutc() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void RadarVideoGIF::set_has_startutc() {
  _has_bits_[0] |= 0x00000010u;
}
inline void RadarVideoGIF::clear_has_startutc() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void RadarVideoGIF::clear_startutc() {
  startutc_ = GOOGLE_ULONGLONG(0);
  clear_has_startutc();
}
inline ::google::protobuf::uint64 RadarVideoGIF::startutc() const {
  // @@protoc_insertion_point(field_get:com.zchxlab.radar.protobuf.RadarVideoGIF.startUTC)
  return startutc_;
}
inline void RadarVideoGIF::set_startutc(::google::protobuf::uint64 value) {
  set_has_startutc();
  startutc_ = value;
  // @@protoc_insertion_point(field_set:com.zchxlab.radar.protobuf.RadarVideoGIF.startUTC)
}

// required uint64 endUTC = 6;
inline bool RadarVideoGIF::has_endutc() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void RadarVideoGIF::set_has_endutc() {
  _has_bits_[0] |= 0x00000020u;
}
inline void RadarVideoGIF::clear_has_endutc() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void RadarVideoGIF::clear_endutc() {
  endutc_ = GOOGLE_ULONGLONG(0);
  clear_has_endutc();
}
inline ::google::protobuf::uint64 RadarVideoGIF::endutc() const {
  // @@protoc_insertion_point(field_get:com.zchxlab.radar.protobuf.RadarVideoGIF.endUTC)
  return endutc_;
}
inline void RadarVideoGIF::set_endutc(::google::protobuf::uint64 value) {
  set_has_endutc();
  endutc_ = value;
  // @@protoc_insertion_point(field_set:com.zchxlab.radar.protobuf.RadarVideoGIF.endUTC)
}

// required bytes imageData = 7;
inline bool RadarVideoGIF::has_imagedata() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void RadarVideoGIF::set_has_imagedata() {
  _has_bits_[0] |= 0x00000040u;
}
inline void RadarVideoGIF::clear_has_imagedata() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void RadarVideoGIF::clear_imagedata() {
  imagedata_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_imagedata();
}
inline const ::std::string& RadarVideoGIF::imagedata() const {
  // @@protoc_insertion_point(field_get:com.zchxlab.radar.protobuf.RadarVideoGIF.imageData)
  return imagedata_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RadarVideoGIF::set_imagedata(const ::std::string& value) {
  set_has_imagedata();
  imagedata_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:com.zchxlab.radar.protobuf.RadarVideoGIF.imageData)
}
inline void RadarVideoGIF::set_imagedata(const char* value) {
  set_has_imagedata();
  imagedata_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:com.zchxlab.radar.protobuf.RadarVideoGIF.imageData)
}
inline void RadarVideoGIF::set_imagedata(const void* value, size_t size) {
  set_has_imagedata();
  imagedata_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:com.zchxlab.radar.protobuf.RadarVideoGIF.imageData)
}
inline ::std::string* RadarVideoGIF::mutable_imagedata() {
  set_has_imagedata();
  // @@protoc_insertion_point(field_mutable:com.zchxlab.radar.protobuf.RadarVideoGIF.imageData)
  return imagedata_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* RadarVideoGIF::release_imagedata() {
  // @@protoc_insertion_point(field_release:com.zchxlab.radar.protobuf.RadarVideoGIF.imageData)
  clear_has_imagedata();
  return imagedata_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void RadarVideoGIF::set_allocated_imagedata(::std::string* imagedata) {
  if (imagedata != NULL) {
    set_has_imagedata();
  } else {
    clear_has_imagedata();
  }
  imagedata_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), imagedata);
  // @@protoc_insertion_point(field_set_allocated:com.zchxlab.radar.protobuf.RadarVideoGIF.imageData)
}

// required uint32 width = 8;
inline bool RadarVideoGIF::has_width() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void RadarVideoGIF::set_has_width() {
  _has_bits_[0] |= 0x00000080u;
}
inline void RadarVideoGIF::clear_has_width() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void RadarVideoGIF::clear_width() {
  width_ = 0u;
  clear_has_width();
}
inline ::google::protobuf::uint32 RadarVideoGIF::width() const {
  // @@protoc_insertion_point(field_get:com.zchxlab.radar.protobuf.RadarVideoGIF.width)
  return width_;
}
inline void RadarVideoGIF::set_width(::google::protobuf::uint32 value) {
  set_has_width();
  width_ = value;
  // @@protoc_insertion_point(field_set:com.zchxlab.radar.protobuf.RadarVideoGIF.width)
}

// required uint32 height = 9;
inline bool RadarVideoGIF::has_height() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void RadarVideoGIF::set_has_height() {
  _has_bits_[0] |= 0x00000100u;
}
inline void RadarVideoGIF::clear_has_height() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void RadarVideoGIF::clear_height() {
  height_ = 0u;
  clear_has_height();
}
inline ::google::protobuf::uint32 RadarVideoGIF::height() const {
  // @@protoc_insertion_point(field_get:com.zchxlab.radar.protobuf.RadarVideoGIF.height)
  return height_;
}
inline void RadarVideoGIF::set_height(::google::protobuf::uint32 value) {
  set_has_height();
  height_ = value;
  // @@protoc_insertion_point(field_set:com.zchxlab.radar.protobuf.RadarVideoGIF.height)
}

// optional double radius = 10;
inline bool RadarVideoGIF::has_radius() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void RadarVideoGIF::set_has_radius() {
  _has_bits_[0] |= 0x00000200u;
}
inline void RadarVideoGIF::clear_has_radius() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void RadarVideoGIF::clear_radius() {
  radius_ = 0;
  clear_has_radius();
}
inline double RadarVideoGIF::radius() const {
  // @@protoc_insertion_point(field_get:com.zchxlab.radar.protobuf.RadarVideoGIF.radius)
  return radius_;
}
inline void RadarVideoGIF::set_radius(double value) {
  set_has_radius();
  radius_ = value;
  // @@protoc_insertion_point(field_set:com.zchxlab.radar.protobuf.RadarVideoGIF.radius)
}

inline const RadarVideoGIF* RadarVideoGIF::internal_default_instance() {
  return &RadarVideoGIF_default_instance_.get();
}
#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace protobuf
}  // namespace radar
}  // namespace zchxlab
}  // namespace com

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::com::zchxlab::radar::protobuf::MSGTYP> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::com::zchxlab::radar::protobuf::MSGTYP>() {
  return ::com::zchxlab::radar::protobuf::MSGTYP_descriptor();
}
template <> struct is_proto_enum< ::com::zchxlab::radar::protobuf::CNF> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::com::zchxlab::radar::protobuf::CNF>() {
  return ::com::zchxlab::radar::protobuf::CNF_descriptor();
}
template <> struct is_proto_enum< ::com::zchxlab::radar::protobuf::CST> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::com::zchxlab::radar::protobuf::CST>() {
  return ::com::zchxlab::radar::protobuf::CST_descriptor();
}
template <> struct is_proto_enum< ::com::zchxlab::radar::protobuf::STH> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::com::zchxlab::radar::protobuf::STH>() {
  return ::com::zchxlab::radar::protobuf::STH_descriptor();
}
template <> struct is_proto_enum< ::com::zchxlab::radar::protobuf::RES> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::com::zchxlab::radar::protobuf::RES>() {
  return ::com::zchxlab::radar::protobuf::RES_descriptor();
}

}  // namespace protobuf
}  // namespace google
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_ZCHXRadar_2eproto__INCLUDED
