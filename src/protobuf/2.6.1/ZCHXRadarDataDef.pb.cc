// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ZCHXRadarDataDef.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "ZCHXRadarDataDef.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace com {
namespace zhichenhaixin {
namespace proto {

namespace {

const ::google::protobuf::Descriptor* Latlon_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Latlon_reflection_ = NULL;
const ::google::protobuf::Descriptor* PixelPoint_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PixelPoint_reflection_ = NULL;
const ::google::protobuf::Descriptor* VideoImage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  VideoImage_reflection_ = NULL;
const ::google::protobuf::Descriptor* PredictionArea_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PredictionArea_reflection_ = NULL;
const ::google::protobuf::Descriptor* Segment_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Segment_reflection_ = NULL;
const ::google::protobuf::Descriptor* BoundRect_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BoundRect_reflection_ = NULL;
const ::google::protobuf::Descriptor* RadarRectDef_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RadarRectDef_reflection_ = NULL;
const ::google::protobuf::Descriptor* RoutePath_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RoutePath_reflection_ = NULL;
const ::google::protobuf::Descriptor* RouteNode_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RouteNode_reflection_ = NULL;
const ::google::protobuf::Descriptor* RouteNodes_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RouteNodes_reflection_ = NULL;
const ::google::protobuf::Descriptor* RadarRect_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RadarRect_reflection_ = NULL;
const ::google::protobuf::Descriptor* RadarRects_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RadarRects_reflection_ = NULL;
const ::google::protobuf::Descriptor* TrackPoint_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TrackPoint_reflection_ = NULL;
const ::google::protobuf::Descriptor* RadarSurfaceTrack_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RadarSurfaceTrack_reflection_ = NULL;
const ::google::protobuf::Descriptor* RadarVideoImage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RadarVideoImage_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* MSGTYP_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* CNF_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* CST_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* STH_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* RES_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_ZCHXRadarDataDef_2eproto() {
  protobuf_AddDesc_ZCHXRadarDataDef_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "ZCHXRadarDataDef.proto");
  GOOGLE_CHECK(file != NULL);
  Latlon_descriptor_ = file->message_type(0);
  static const int Latlon_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Latlon, latitude_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Latlon, longitude_),
  };
  Latlon_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Latlon_descriptor_,
      Latlon::default_instance_,
      Latlon_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Latlon, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Latlon, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Latlon));
  PixelPoint_descriptor_ = file->message_type(1);
  static const int PixelPoint_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PixelPoint, x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PixelPoint, y_),
  };
  PixelPoint_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PixelPoint_descriptor_,
      PixelPoint::default_instance_,
      PixelPoint_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PixelPoint, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PixelPoint, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PixelPoint));
  VideoImage_descriptor_ = file->message_type(2);
  static const int VideoImage_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VideoImage, width_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VideoImage, height_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VideoImage, points_),
  };
  VideoImage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      VideoImage_descriptor_,
      VideoImage::default_instance_,
      VideoImage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VideoImage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VideoImage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(VideoImage));
  PredictionArea_descriptor_ = file->message_type(3);
  static const int PredictionArea_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PredictionArea, area_),
  };
  PredictionArea_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PredictionArea_descriptor_,
      PredictionArea::default_instance_,
      PredictionArea_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PredictionArea, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PredictionArea, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PredictionArea));
  Segment_descriptor_ = file->message_type(4);
  static const int Segment_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Segment, start_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Segment, end_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Segment, angle_),
  };
  Segment_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Segment_descriptor_,
      Segment::default_instance_,
      Segment_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Segment, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Segment, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Segment));
  BoundRect_descriptor_ = file->message_type(5);
  static const int BoundRect_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BoundRect, topleft_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BoundRect, bottomright_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BoundRect, diameter_),
  };
  BoundRect_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BoundRect_descriptor_,
      BoundRect::default_instance_,
      BoundRect_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BoundRect, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BoundRect, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BoundRect));
  RadarRectDef_descriptor_ = file->message_type(6);
  static const int RadarRectDef_offsets_[13] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RadarRectDef, rectnumber_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RadarRectDef, center_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RadarRectDef, updatetime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RadarRectDef, realdata_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RadarRectDef, sogknot_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RadarRectDef, sogms_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RadarRectDef, cog_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RadarRectDef, outline_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RadarRectDef, boundrect_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RadarRectDef, seg_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RadarRectDef, fixedimg_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RadarRectDef, prediction_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RadarRectDef, videocycleindex_),
  };
  RadarRectDef_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RadarRectDef_descriptor_,
      RadarRectDef::default_instance_,
      RadarRectDef_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RadarRectDef, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RadarRectDef, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RadarRectDef));
  RoutePath_descriptor_ = file->message_type(7);
  static const int RoutePath_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoutePath, path_),
  };
  RoutePath_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RoutePath_descriptor_,
      RoutePath::default_instance_,
      RoutePath_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoutePath, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoutePath, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RoutePath));
  RouteNode_descriptor_ = file->message_type(8);
  static const int RouteNode_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RouteNode, node_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RouteNode, top_node_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RouteNode, path_list_),
  };
  RouteNode_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RouteNode_descriptor_,
      RouteNode::default_instance_,
      RouteNode_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RouteNode, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RouteNode, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RouteNode));
  RouteNodes_descriptor_ = file->message_type(9);
  static const int RouteNodes_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RouteNodes, node_list_),
  };
  RouteNodes_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RouteNodes_descriptor_,
      RouteNodes::default_instance_,
      RouteNodes_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RouteNodes, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RouteNodes, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RouteNodes));
  RadarRect_descriptor_ = file->message_type(10);
  static const int RadarRect_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RadarRect, current_rect_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RadarRect, history_rect_list_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RadarRect, dir_confirmed_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RadarRect, cur_est_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RadarRect, node_num_),
  };
  RadarRect_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RadarRect_descriptor_,
      RadarRect::default_instance_,
      RadarRect_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RadarRect, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RadarRect, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RadarRect));
  RadarRects_descriptor_ = file->message_type(11);
  static const int RadarRects_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RadarRects, utc_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RadarRects, length_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RadarRects, rect_list_),
  };
  RadarRects_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RadarRects_descriptor_,
      RadarRects::default_instance_,
      RadarRects_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RadarRects, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RadarRects, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RadarRects));
  TrackPoint_descriptor_ = file->message_type(12);
  static const int TrackPoint_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrackPoint, radarsiteid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrackPoint, tracknumber_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrackPoint, current_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrackPoint, tracks_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrackPoint, trackconfirmed_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrackPoint, objtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrackPoint, objname_),
  };
  TrackPoint_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TrackPoint_descriptor_,
      TrackPoint::default_instance_,
      TrackPoint_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrackPoint, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TrackPoint, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TrackPoint));
  RadarSurfaceTrack_descriptor_ = file->message_type(13);
  static const int RadarSurfaceTrack_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RadarSurfaceTrack, flag_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RadarSurfaceTrack, sourceid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RadarSurfaceTrack, utc_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RadarSurfaceTrack, length_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RadarSurfaceTrack, trackpoints_),
  };
  RadarSurfaceTrack_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RadarSurfaceTrack_descriptor_,
      RadarSurfaceTrack::default_instance_,
      RadarSurfaceTrack_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RadarSurfaceTrack, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RadarSurfaceTrack, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RadarSurfaceTrack));
  RadarVideoImage_descriptor_ = file->message_type(14);
  static const int RadarVideoImage_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RadarVideoImage, radarid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RadarVideoImage, radarname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RadarVideoImage, center_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RadarVideoImage, utc_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RadarVideoImage, imagedata_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RadarVideoImage, width_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RadarVideoImage, height_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RadarVideoImage, radius_),
  };
  RadarVideoImage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RadarVideoImage_descriptor_,
      RadarVideoImage::default_instance_,
      RadarVideoImage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RadarVideoImage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RadarVideoImage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RadarVideoImage));
  MSGTYP_descriptor_ = file->enum_type(0);
  CNF_descriptor_ = file->enum_type(1);
  CST_descriptor_ = file->enum_type(2);
  STH_descriptor_ = file->enum_type(3);
  RES_descriptor_ = file->enum_type(4);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_ZCHXRadarDataDef_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Latlon_descriptor_, &Latlon::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PixelPoint_descriptor_, &PixelPoint::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    VideoImage_descriptor_, &VideoImage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PredictionArea_descriptor_, &PredictionArea::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Segment_descriptor_, &Segment::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BoundRect_descriptor_, &BoundRect::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RadarRectDef_descriptor_, &RadarRectDef::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RoutePath_descriptor_, &RoutePath::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RouteNode_descriptor_, &RouteNode::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RouteNodes_descriptor_, &RouteNodes::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RadarRect_descriptor_, &RadarRect::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RadarRects_descriptor_, &RadarRects::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TrackPoint_descriptor_, &TrackPoint::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RadarSurfaceTrack_descriptor_, &RadarSurfaceTrack::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RadarVideoImage_descriptor_, &RadarVideoImage::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_ZCHXRadarDataDef_2eproto() {
  delete Latlon::default_instance_;
  delete Latlon_reflection_;
  delete PixelPoint::default_instance_;
  delete PixelPoint_reflection_;
  delete VideoImage::default_instance_;
  delete VideoImage_reflection_;
  delete PredictionArea::default_instance_;
  delete PredictionArea_reflection_;
  delete Segment::default_instance_;
  delete Segment_reflection_;
  delete BoundRect::default_instance_;
  delete BoundRect_reflection_;
  delete RadarRectDef::default_instance_;
  delete RadarRectDef_reflection_;
  delete RoutePath::default_instance_;
  delete RoutePath_reflection_;
  delete RouteNode::default_instance_;
  delete RouteNode_reflection_;
  delete RouteNodes::default_instance_;
  delete RouteNodes_reflection_;
  delete RadarRect::default_instance_;
  delete RadarRect_reflection_;
  delete RadarRects::default_instance_;
  delete RadarRects_reflection_;
  delete TrackPoint::default_instance_;
  delete TrackPoint_reflection_;
  delete RadarSurfaceTrack::default_instance_;
  delete RadarSurfaceTrack_reflection_;
  delete RadarVideoImage::default_instance_;
  delete RadarVideoImage_reflection_;
}

void protobuf_AddDesc_ZCHXRadarDataDef_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\026ZCHXRadarDataDef.proto\022\027com.zhichenhai"
    "xin.proto\"-\n\006Latlon\022\020\n\010latitude\030\001 \002(\001\022\021\n"
    "\tlongitude\030\002 \002(\001\"\"\n\nPixelPoint\022\t\n\001x\030\001 \002("
    "\r\022\t\n\001y\030\002 \002(\r\"`\n\nVideoImage\022\r\n\005width\030\001 \002("
    "\r\022\016\n\006height\030\002 \002(\r\0223\n\006points\030\003 \003(\0132#.com."
    "zhichenhaixin.proto.PixelPoint\"\?\n\016Predic"
    "tionArea\022-\n\004area\030\001 \003(\0132\037.com.zhichenhaix"
    "in.proto.Latlon\"v\n\007Segment\022.\n\005start\030\001 \002("
    "\0132\037.com.zhichenhaixin.proto.Latlon\022,\n\003en"
    "d\030\002 \002(\0132\037.com.zhichenhaixin.proto.Latlon"
    "\022\r\n\005angle\030\003 \001(\001\"\205\001\n\tBoundRect\0220\n\007topLeft"
    "\030\001 \002(\0132\037.com.zhichenhaixin.proto.Latlon\022"
    "4\n\013bottomRight\030\002 \002(\0132\037.com.zhichenhaixin"
    ".proto.Latlon\022\020\n\010diameter\030\003 \001(\005\"\313\003\n\014Rada"
    "rRectDef\022\022\n\nrectNumber\030\001 \002(\r\022/\n\006center\030\002"
    " \002(\0132\037.com.zhichenhaixin.proto.Latlon\022\022\n"
    "\nupdateTime\030\003 \002(\r\022\020\n\010realData\030\004 \002(\010\022\017\n\007s"
    "ogKnot\030\005 \002(\001\022\r\n\005sogMS\030\006 \002(\001\022\013\n\003cog\030\007 \002(\001"
    "\0220\n\007outline\030\010 \003(\0132\037.com.zhichenhaixin.pr"
    "oto.Latlon\0225\n\tboundRect\030\t \001(\0132\".com.zhic"
    "henhaixin.proto.BoundRect\022-\n\003seg\030\n \001(\0132 "
    ".com.zhichenhaixin.proto.Segment\0225\n\010fixe"
    "dImg\030\013 \001(\0132#.com.zhichenhaixin.proto.Vid"
    "eoImage\022;\n\nprediction\030\014 \001(\0132\'.com.zhiche"
    "nhaixin.proto.PredictionArea\022\027\n\017videoCyc"
    "leIndex\030\r \001(\005\"@\n\tRoutePath\0223\n\004path\030\001 \003(\013"
    "2%.com.zhichenhaixin.proto.RadarRectDef\""
    "\215\001\n\tRouteNode\022\020\n\010node_num\030\001 \002(\005\0227\n\010top_n"
    "ode\030\002 \002(\0132%.com.zhichenhaixin.proto.Rada"
    "rRectDef\0225\n\tpath_list\030\003 \003(\0132\".com.zhiche"
    "nhaixin.proto.RoutePath\"C\n\nRouteNodes\0225\n"
    "\tnode_list\030\001 \003(\0132\".com.zhichenhaixin.pro"
    "to.RouteNode\"\312\001\n\tRadarRect\022;\n\014current_re"
    "ct\030\001 \002(\0132%.com.zhichenhaixin.proto.Radar"
    "RectDef\022@\n\021history_rect_list\030\002 \003(\0132%.com"
    ".zhichenhaixin.proto.RadarRectDef\022\025\n\rdir"
    "_confirmed\030\003 \002(\010\022\025\n\rcur_est_count\030\004 \002(\r\022"
    "\020\n\010node_num\030\005 \002(\005\"`\n\nRadarRects\022\013\n\003UTC\030\001"
    " \002(\004\022\016\n\006length\030\002 \002(\005\0225\n\trect_list\030\003 \003(\0132"
    "\".com.zhichenhaixin.proto.RadarRect\"\337\001\n\n"
    "TrackPoint\022\023\n\013radarSiteID\030\001 \002(\t\022\023\n\013track"
    "Number\030\002 \002(\r\0226\n\007current\030\003 \002(\0132%.com.zhic"
    "henhaixin.proto.RadarRectDef\0225\n\006tracks\030\004"
    " \003(\0132%.com.zhichenhaixin.proto.RadarRect"
    "Def\022\026\n\016trackConfirmed\030\005 \001(\010\022\017\n\007objType\030\006"
    " \001(\005\022\017\n\007objName\030\007 \001(\t\"\212\001\n\021RadarSurfaceTr"
    "ack\022\014\n\004flag\030\001 \002(\005\022\020\n\010sourceId\030\002 \002(\t\022\013\n\003U"
    "TC\030\003 \002(\004\022\016\n\006length\030\004 \002(\005\0228\n\013trackPoints\030"
    "\005 \003(\0132#.com.zhichenhaixin.proto.TrackPoi"
    "nt\"\265\001\n\017RadarVideoImage\022\017\n\007radarId\030\001 \002(\004\022"
    "\021\n\tradarName\030\002 \002(\t\022/\n\006center\030\003 \002(\0132\037.com"
    ".zhichenhaixin.proto.Latlon\022\013\n\003UTC\030\004 \002(\004"
    "\022\021\n\timageData\030\005 \002(\014\022\r\n\005width\030\006 \002(\r\022\016\n\006he"
    "ight\030\007 \002(\r\022\016\n\006radius\030\010 \002(\001*}\n\006MSGTYP\022\024\n\020"
    "MSGTYP_UNDEFINED\020\000\022\021\n\rTARGET_REPORT\020\001\022\031\n"
    "\025START_OF_UPDATE_CYCLE\020\002\022\023\n\017PERIODIC_STA"
    "TUS\020\003\022\032\n\026EVENT_TRIGGERED_STATUS\020\004*B\n\003CNF"
    "\022\023\n\017CONFIRMED_TRACK\020\000\022\023\n\017TENTATIVE_TRACK"
    "\020\001\022\021\n\rUNKNOWN_TRACK\020\002*\230\001\n\003CST\022\021\n\rCST_UND"
    "EFINED\020\000\022(\n$PREDICTABLE_EXTRAPOLATION_DU"
    "E_PERIOD\020\001\022%\n!PREDICTABLE_EXTRAPOLATION_"
    "IN_AREA\020\002\022-\n)EXTRAPOLATION_DUE_UNPREDICT"
    "ABLE_DETECTION\020\003*3\n\003STH\022\025\n\021MEASURED_POSI"
    "TION\020\000\022\025\n\021SMOOTHED_POSITION\020\001*\222\001\n\003RES\022\026\n"
    "\022MONOBIT_RESOLUTION\020\001\022\022\n\016LOW_RESOLUTION\020"
    "\002\022\025\n\021MEDIUM_RESOLUTION\020\003\022\023\n\017HIGH_RESOLUT"
    "ION\020\004\022\030\n\024VERY_HIGH_RESOLUTION\020\005\022\031\n\025ULTRA"
    "_HIGH_RESOLUTION\020\006", 2698);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "ZCHXRadarDataDef.proto", &protobuf_RegisterTypes);
  Latlon::default_instance_ = new Latlon();
  PixelPoint::default_instance_ = new PixelPoint();
  VideoImage::default_instance_ = new VideoImage();
  PredictionArea::default_instance_ = new PredictionArea();
  Segment::default_instance_ = new Segment();
  BoundRect::default_instance_ = new BoundRect();
  RadarRectDef::default_instance_ = new RadarRectDef();
  RoutePath::default_instance_ = new RoutePath();
  RouteNode::default_instance_ = new RouteNode();
  RouteNodes::default_instance_ = new RouteNodes();
  RadarRect::default_instance_ = new RadarRect();
  RadarRects::default_instance_ = new RadarRects();
  TrackPoint::default_instance_ = new TrackPoint();
  RadarSurfaceTrack::default_instance_ = new RadarSurfaceTrack();
  RadarVideoImage::default_instance_ = new RadarVideoImage();
  Latlon::default_instance_->InitAsDefaultInstance();
  PixelPoint::default_instance_->InitAsDefaultInstance();
  VideoImage::default_instance_->InitAsDefaultInstance();
  PredictionArea::default_instance_->InitAsDefaultInstance();
  Segment::default_instance_->InitAsDefaultInstance();
  BoundRect::default_instance_->InitAsDefaultInstance();
  RadarRectDef::default_instance_->InitAsDefaultInstance();
  RoutePath::default_instance_->InitAsDefaultInstance();
  RouteNode::default_instance_->InitAsDefaultInstance();
  RouteNodes::default_instance_->InitAsDefaultInstance();
  RadarRect::default_instance_->InitAsDefaultInstance();
  RadarRects::default_instance_->InitAsDefaultInstance();
  TrackPoint::default_instance_->InitAsDefaultInstance();
  RadarSurfaceTrack::default_instance_->InitAsDefaultInstance();
  RadarVideoImage::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_ZCHXRadarDataDef_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_ZCHXRadarDataDef_2eproto {
  StaticDescriptorInitializer_ZCHXRadarDataDef_2eproto() {
    protobuf_AddDesc_ZCHXRadarDataDef_2eproto();
  }
} static_descriptor_initializer_ZCHXRadarDataDef_2eproto_;
const ::google::protobuf::EnumDescriptor* MSGTYP_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MSGTYP_descriptor_;
}
bool MSGTYP_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* CNF_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CNF_descriptor_;
}
bool CNF_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* CST_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CST_descriptor_;
}
bool CST_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* STH_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return STH_descriptor_;
}
bool STH_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* RES_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RES_descriptor_;
}
bool RES_IsValid(int value) {
  switch(value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int Latlon::kLatitudeFieldNumber;
const int Latlon::kLongitudeFieldNumber;
#endif  // !_MSC_VER

Latlon::Latlon()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.zhichenhaixin.proto.Latlon)
}

void Latlon::InitAsDefaultInstance() {
}

Latlon::Latlon(const Latlon& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:com.zhichenhaixin.proto.Latlon)
}

void Latlon::SharedCtor() {
  _cached_size_ = 0;
  latitude_ = 0;
  longitude_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Latlon::~Latlon() {
  // @@protoc_insertion_point(destructor:com.zhichenhaixin.proto.Latlon)
  SharedDtor();
}

void Latlon::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Latlon::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Latlon::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Latlon_descriptor_;
}

const Latlon& Latlon::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ZCHXRadarDataDef_2eproto();
  return *default_instance_;
}

Latlon* Latlon::default_instance_ = NULL;

Latlon* Latlon::New() const {
  return new Latlon;
}

void Latlon::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<Latlon*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(latitude_, longitude_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Latlon::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.zhichenhaixin.proto.Latlon)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required double latitude = 1;
      case 1: {
        if (tag == 9) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &latitude_)));
          set_has_latitude();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(17)) goto parse_longitude;
        break;
      }

      // required double longitude = 2;
      case 2: {
        if (tag == 17) {
         parse_longitude:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &longitude_)));
          set_has_longitude();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.zhichenhaixin.proto.Latlon)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.zhichenhaixin.proto.Latlon)
  return false;
#undef DO_
}

void Latlon::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.zhichenhaixin.proto.Latlon)
  // required double latitude = 1;
  if (has_latitude()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->latitude(), output);
  }

  // required double longitude = 2;
  if (has_longitude()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->longitude(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.zhichenhaixin.proto.Latlon)
}

::google::protobuf::uint8* Latlon::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.zhichenhaixin.proto.Latlon)
  // required double latitude = 1;
  if (has_latitude()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->latitude(), target);
  }

  // required double longitude = 2;
  if (has_longitude()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->longitude(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.zhichenhaixin.proto.Latlon)
  return target;
}

int Latlon::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required double latitude = 1;
    if (has_latitude()) {
      total_size += 1 + 8;
    }

    // required double longitude = 2;
    if (has_longitude()) {
      total_size += 1 + 8;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Latlon::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Latlon* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Latlon*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Latlon::MergeFrom(const Latlon& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_latitude()) {
      set_latitude(from.latitude());
    }
    if (from.has_longitude()) {
      set_longitude(from.longitude());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Latlon::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Latlon::CopyFrom(const Latlon& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Latlon::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void Latlon::Swap(Latlon* other) {
  if (other != this) {
    std::swap(latitude_, other->latitude_);
    std::swap(longitude_, other->longitude_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Latlon::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Latlon_descriptor_;
  metadata.reflection = Latlon_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PixelPoint::kXFieldNumber;
const int PixelPoint::kYFieldNumber;
#endif  // !_MSC_VER

PixelPoint::PixelPoint()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.zhichenhaixin.proto.PixelPoint)
}

void PixelPoint::InitAsDefaultInstance() {
}

PixelPoint::PixelPoint(const PixelPoint& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:com.zhichenhaixin.proto.PixelPoint)
}

void PixelPoint::SharedCtor() {
  _cached_size_ = 0;
  x_ = 0u;
  y_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PixelPoint::~PixelPoint() {
  // @@protoc_insertion_point(destructor:com.zhichenhaixin.proto.PixelPoint)
  SharedDtor();
}

void PixelPoint::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PixelPoint::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PixelPoint::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PixelPoint_descriptor_;
}

const PixelPoint& PixelPoint::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ZCHXRadarDataDef_2eproto();
  return *default_instance_;
}

PixelPoint* PixelPoint::default_instance_ = NULL;

PixelPoint* PixelPoint::New() const {
  return new PixelPoint;
}

void PixelPoint::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<PixelPoint*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(x_, y_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PixelPoint::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.zhichenhaixin.proto.PixelPoint)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 x = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &x_)));
          set_has_x();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_y;
        break;
      }

      // required uint32 y = 2;
      case 2: {
        if (tag == 16) {
         parse_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &y_)));
          set_has_y();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.zhichenhaixin.proto.PixelPoint)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.zhichenhaixin.proto.PixelPoint)
  return false;
#undef DO_
}

void PixelPoint::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.zhichenhaixin.proto.PixelPoint)
  // required uint32 x = 1;
  if (has_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->x(), output);
  }

  // required uint32 y = 2;
  if (has_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->y(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.zhichenhaixin.proto.PixelPoint)
}

::google::protobuf::uint8* PixelPoint::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.zhichenhaixin.proto.PixelPoint)
  // required uint32 x = 1;
  if (has_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->x(), target);
  }

  // required uint32 y = 2;
  if (has_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->y(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.zhichenhaixin.proto.PixelPoint)
  return target;
}

int PixelPoint::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 x = 1;
    if (has_x()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->x());
    }

    // required uint32 y = 2;
    if (has_y()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->y());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PixelPoint::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PixelPoint* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PixelPoint*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PixelPoint::MergeFrom(const PixelPoint& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_x()) {
      set_x(from.x());
    }
    if (from.has_y()) {
      set_y(from.y());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PixelPoint::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PixelPoint::CopyFrom(const PixelPoint& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PixelPoint::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void PixelPoint::Swap(PixelPoint* other) {
  if (other != this) {
    std::swap(x_, other->x_);
    std::swap(y_, other->y_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PixelPoint::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PixelPoint_descriptor_;
  metadata.reflection = PixelPoint_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int VideoImage::kWidthFieldNumber;
const int VideoImage::kHeightFieldNumber;
const int VideoImage::kPointsFieldNumber;
#endif  // !_MSC_VER

VideoImage::VideoImage()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.zhichenhaixin.proto.VideoImage)
}

void VideoImage::InitAsDefaultInstance() {
}

VideoImage::VideoImage(const VideoImage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:com.zhichenhaixin.proto.VideoImage)
}

void VideoImage::SharedCtor() {
  _cached_size_ = 0;
  width_ = 0u;
  height_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

VideoImage::~VideoImage() {
  // @@protoc_insertion_point(destructor:com.zhichenhaixin.proto.VideoImage)
  SharedDtor();
}

void VideoImage::SharedDtor() {
  if (this != default_instance_) {
  }
}

void VideoImage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* VideoImage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return VideoImage_descriptor_;
}

const VideoImage& VideoImage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ZCHXRadarDataDef_2eproto();
  return *default_instance_;
}

VideoImage* VideoImage::default_instance_ = NULL;

VideoImage* VideoImage::New() const {
  return new VideoImage;
}

void VideoImage::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<VideoImage*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(width_, height_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  points_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool VideoImage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.zhichenhaixin.proto.VideoImage)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 width = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &width_)));
          set_has_width();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_height;
        break;
      }

      // required uint32 height = 2;
      case 2: {
        if (tag == 16) {
         parse_height:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &height_)));
          set_has_height();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_points;
        break;
      }

      // repeated .com.zhichenhaixin.proto.PixelPoint points = 3;
      case 3: {
        if (tag == 26) {
         parse_points:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_points()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_points;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.zhichenhaixin.proto.VideoImage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.zhichenhaixin.proto.VideoImage)
  return false;
#undef DO_
}

void VideoImage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.zhichenhaixin.proto.VideoImage)
  // required uint32 width = 1;
  if (has_width()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->width(), output);
  }

  // required uint32 height = 2;
  if (has_height()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->height(), output);
  }

  // repeated .com.zhichenhaixin.proto.PixelPoint points = 3;
  for (int i = 0; i < this->points_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->points(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.zhichenhaixin.proto.VideoImage)
}

::google::protobuf::uint8* VideoImage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.zhichenhaixin.proto.VideoImage)
  // required uint32 width = 1;
  if (has_width()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->width(), target);
  }

  // required uint32 height = 2;
  if (has_height()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->height(), target);
  }

  // repeated .com.zhichenhaixin.proto.PixelPoint points = 3;
  for (int i = 0; i < this->points_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->points(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.zhichenhaixin.proto.VideoImage)
  return target;
}

int VideoImage::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 width = 1;
    if (has_width()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->width());
    }

    // required uint32 height = 2;
    if (has_height()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->height());
    }

  }
  // repeated .com.zhichenhaixin.proto.PixelPoint points = 3;
  total_size += 1 * this->points_size();
  for (int i = 0; i < this->points_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->points(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void VideoImage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const VideoImage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const VideoImage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void VideoImage::MergeFrom(const VideoImage& from) {
  GOOGLE_CHECK_NE(&from, this);
  points_.MergeFrom(from.points_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_width()) {
      set_width(from.width());
    }
    if (from.has_height()) {
      set_height(from.height());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void VideoImage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VideoImage::CopyFrom(const VideoImage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VideoImage::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->points())) return false;
  return true;
}

void VideoImage::Swap(VideoImage* other) {
  if (other != this) {
    std::swap(width_, other->width_);
    std::swap(height_, other->height_);
    points_.Swap(&other->points_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata VideoImage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = VideoImage_descriptor_;
  metadata.reflection = VideoImage_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PredictionArea::kAreaFieldNumber;
#endif  // !_MSC_VER

PredictionArea::PredictionArea()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.zhichenhaixin.proto.PredictionArea)
}

void PredictionArea::InitAsDefaultInstance() {
}

PredictionArea::PredictionArea(const PredictionArea& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:com.zhichenhaixin.proto.PredictionArea)
}

void PredictionArea::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PredictionArea::~PredictionArea() {
  // @@protoc_insertion_point(destructor:com.zhichenhaixin.proto.PredictionArea)
  SharedDtor();
}

void PredictionArea::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PredictionArea::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PredictionArea::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PredictionArea_descriptor_;
}

const PredictionArea& PredictionArea::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ZCHXRadarDataDef_2eproto();
  return *default_instance_;
}

PredictionArea* PredictionArea::default_instance_ = NULL;

PredictionArea* PredictionArea::New() const {
  return new PredictionArea;
}

void PredictionArea::Clear() {
  area_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PredictionArea::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.zhichenhaixin.proto.PredictionArea)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .com.zhichenhaixin.proto.Latlon area = 1;
      case 1: {
        if (tag == 10) {
         parse_area:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_area()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_area;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.zhichenhaixin.proto.PredictionArea)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.zhichenhaixin.proto.PredictionArea)
  return false;
#undef DO_
}

void PredictionArea::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.zhichenhaixin.proto.PredictionArea)
  // repeated .com.zhichenhaixin.proto.Latlon area = 1;
  for (int i = 0; i < this->area_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->area(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.zhichenhaixin.proto.PredictionArea)
}

::google::protobuf::uint8* PredictionArea::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.zhichenhaixin.proto.PredictionArea)
  // repeated .com.zhichenhaixin.proto.Latlon area = 1;
  for (int i = 0; i < this->area_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->area(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.zhichenhaixin.proto.PredictionArea)
  return target;
}

int PredictionArea::ByteSize() const {
  int total_size = 0;

  // repeated .com.zhichenhaixin.proto.Latlon area = 1;
  total_size += 1 * this->area_size();
  for (int i = 0; i < this->area_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->area(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PredictionArea::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PredictionArea* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PredictionArea*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PredictionArea::MergeFrom(const PredictionArea& from) {
  GOOGLE_CHECK_NE(&from, this);
  area_.MergeFrom(from.area_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PredictionArea::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PredictionArea::CopyFrom(const PredictionArea& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PredictionArea::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->area())) return false;
  return true;
}

void PredictionArea::Swap(PredictionArea* other) {
  if (other != this) {
    area_.Swap(&other->area_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PredictionArea::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PredictionArea_descriptor_;
  metadata.reflection = PredictionArea_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Segment::kStartFieldNumber;
const int Segment::kEndFieldNumber;
const int Segment::kAngleFieldNumber;
#endif  // !_MSC_VER

Segment::Segment()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.zhichenhaixin.proto.Segment)
}

void Segment::InitAsDefaultInstance() {
  start_ = const_cast< ::com::zhichenhaixin::proto::Latlon*>(&::com::zhichenhaixin::proto::Latlon::default_instance());
  end_ = const_cast< ::com::zhichenhaixin::proto::Latlon*>(&::com::zhichenhaixin::proto::Latlon::default_instance());
}

Segment::Segment(const Segment& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:com.zhichenhaixin.proto.Segment)
}

void Segment::SharedCtor() {
  _cached_size_ = 0;
  start_ = NULL;
  end_ = NULL;
  angle_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Segment::~Segment() {
  // @@protoc_insertion_point(destructor:com.zhichenhaixin.proto.Segment)
  SharedDtor();
}

void Segment::SharedDtor() {
  if (this != default_instance_) {
    delete start_;
    delete end_;
  }
}

void Segment::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Segment::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Segment_descriptor_;
}

const Segment& Segment::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ZCHXRadarDataDef_2eproto();
  return *default_instance_;
}

Segment* Segment::default_instance_ = NULL;

Segment* Segment::New() const {
  return new Segment;
}

void Segment::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    if (has_start()) {
      if (start_ != NULL) start_->::com::zhichenhaixin::proto::Latlon::Clear();
    }
    if (has_end()) {
      if (end_ != NULL) end_->::com::zhichenhaixin::proto::Latlon::Clear();
    }
    angle_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Segment::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.zhichenhaixin.proto.Segment)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .com.zhichenhaixin.proto.Latlon start = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_start()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_end;
        break;
      }

      // required .com.zhichenhaixin.proto.Latlon end = 2;
      case 2: {
        if (tag == 18) {
         parse_end:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_end()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(25)) goto parse_angle;
        break;
      }

      // optional double angle = 3;
      case 3: {
        if (tag == 25) {
         parse_angle:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &angle_)));
          set_has_angle();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.zhichenhaixin.proto.Segment)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.zhichenhaixin.proto.Segment)
  return false;
#undef DO_
}

void Segment::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.zhichenhaixin.proto.Segment)
  // required .com.zhichenhaixin.proto.Latlon start = 1;
  if (has_start()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->start(), output);
  }

  // required .com.zhichenhaixin.proto.Latlon end = 2;
  if (has_end()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->end(), output);
  }

  // optional double angle = 3;
  if (has_angle()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->angle(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.zhichenhaixin.proto.Segment)
}

::google::protobuf::uint8* Segment::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.zhichenhaixin.proto.Segment)
  // required .com.zhichenhaixin.proto.Latlon start = 1;
  if (has_start()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->start(), target);
  }

  // required .com.zhichenhaixin.proto.Latlon end = 2;
  if (has_end()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->end(), target);
  }

  // optional double angle = 3;
  if (has_angle()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->angle(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.zhichenhaixin.proto.Segment)
  return target;
}

int Segment::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .com.zhichenhaixin.proto.Latlon start = 1;
    if (has_start()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->start());
    }

    // required .com.zhichenhaixin.proto.Latlon end = 2;
    if (has_end()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->end());
    }

    // optional double angle = 3;
    if (has_angle()) {
      total_size += 1 + 8;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Segment::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Segment* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Segment*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Segment::MergeFrom(const Segment& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_start()) {
      mutable_start()->::com::zhichenhaixin::proto::Latlon::MergeFrom(from.start());
    }
    if (from.has_end()) {
      mutable_end()->::com::zhichenhaixin::proto::Latlon::MergeFrom(from.end());
    }
    if (from.has_angle()) {
      set_angle(from.angle());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Segment::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Segment::CopyFrom(const Segment& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Segment::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_start()) {
    if (!this->start().IsInitialized()) return false;
  }
  if (has_end()) {
    if (!this->end().IsInitialized()) return false;
  }
  return true;
}

void Segment::Swap(Segment* other) {
  if (other != this) {
    std::swap(start_, other->start_);
    std::swap(end_, other->end_);
    std::swap(angle_, other->angle_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Segment::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Segment_descriptor_;
  metadata.reflection = Segment_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BoundRect::kTopLeftFieldNumber;
const int BoundRect::kBottomRightFieldNumber;
const int BoundRect::kDiameterFieldNumber;
#endif  // !_MSC_VER

BoundRect::BoundRect()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.zhichenhaixin.proto.BoundRect)
}

void BoundRect::InitAsDefaultInstance() {
  topleft_ = const_cast< ::com::zhichenhaixin::proto::Latlon*>(&::com::zhichenhaixin::proto::Latlon::default_instance());
  bottomright_ = const_cast< ::com::zhichenhaixin::proto::Latlon*>(&::com::zhichenhaixin::proto::Latlon::default_instance());
}

BoundRect::BoundRect(const BoundRect& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:com.zhichenhaixin.proto.BoundRect)
}

void BoundRect::SharedCtor() {
  _cached_size_ = 0;
  topleft_ = NULL;
  bottomright_ = NULL;
  diameter_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BoundRect::~BoundRect() {
  // @@protoc_insertion_point(destructor:com.zhichenhaixin.proto.BoundRect)
  SharedDtor();
}

void BoundRect::SharedDtor() {
  if (this != default_instance_) {
    delete topleft_;
    delete bottomright_;
  }
}

void BoundRect::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BoundRect::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BoundRect_descriptor_;
}

const BoundRect& BoundRect::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ZCHXRadarDataDef_2eproto();
  return *default_instance_;
}

BoundRect* BoundRect::default_instance_ = NULL;

BoundRect* BoundRect::New() const {
  return new BoundRect;
}

void BoundRect::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    if (has_topleft()) {
      if (topleft_ != NULL) topleft_->::com::zhichenhaixin::proto::Latlon::Clear();
    }
    if (has_bottomright()) {
      if (bottomright_ != NULL) bottomright_->::com::zhichenhaixin::proto::Latlon::Clear();
    }
    diameter_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BoundRect::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.zhichenhaixin.proto.BoundRect)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .com.zhichenhaixin.proto.Latlon topLeft = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_topleft()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_bottomRight;
        break;
      }

      // required .com.zhichenhaixin.proto.Latlon bottomRight = 2;
      case 2: {
        if (tag == 18) {
         parse_bottomRight:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_bottomright()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_diameter;
        break;
      }

      // optional int32 diameter = 3;
      case 3: {
        if (tag == 24) {
         parse_diameter:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &diameter_)));
          set_has_diameter();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.zhichenhaixin.proto.BoundRect)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.zhichenhaixin.proto.BoundRect)
  return false;
#undef DO_
}

void BoundRect::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.zhichenhaixin.proto.BoundRect)
  // required .com.zhichenhaixin.proto.Latlon topLeft = 1;
  if (has_topleft()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->topleft(), output);
  }

  // required .com.zhichenhaixin.proto.Latlon bottomRight = 2;
  if (has_bottomright()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->bottomright(), output);
  }

  // optional int32 diameter = 3;
  if (has_diameter()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->diameter(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.zhichenhaixin.proto.BoundRect)
}

::google::protobuf::uint8* BoundRect::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.zhichenhaixin.proto.BoundRect)
  // required .com.zhichenhaixin.proto.Latlon topLeft = 1;
  if (has_topleft()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->topleft(), target);
  }

  // required .com.zhichenhaixin.proto.Latlon bottomRight = 2;
  if (has_bottomright()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->bottomright(), target);
  }

  // optional int32 diameter = 3;
  if (has_diameter()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->diameter(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.zhichenhaixin.proto.BoundRect)
  return target;
}

int BoundRect::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .com.zhichenhaixin.proto.Latlon topLeft = 1;
    if (has_topleft()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->topleft());
    }

    // required .com.zhichenhaixin.proto.Latlon bottomRight = 2;
    if (has_bottomright()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->bottomright());
    }

    // optional int32 diameter = 3;
    if (has_diameter()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->diameter());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BoundRect::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BoundRect* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BoundRect*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BoundRect::MergeFrom(const BoundRect& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_topleft()) {
      mutable_topleft()->::com::zhichenhaixin::proto::Latlon::MergeFrom(from.topleft());
    }
    if (from.has_bottomright()) {
      mutable_bottomright()->::com::zhichenhaixin::proto::Latlon::MergeFrom(from.bottomright());
    }
    if (from.has_diameter()) {
      set_diameter(from.diameter());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BoundRect::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BoundRect::CopyFrom(const BoundRect& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BoundRect::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_topleft()) {
    if (!this->topleft().IsInitialized()) return false;
  }
  if (has_bottomright()) {
    if (!this->bottomright().IsInitialized()) return false;
  }
  return true;
}

void BoundRect::Swap(BoundRect* other) {
  if (other != this) {
    std::swap(topleft_, other->topleft_);
    std::swap(bottomright_, other->bottomright_);
    std::swap(diameter_, other->diameter_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BoundRect::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BoundRect_descriptor_;
  metadata.reflection = BoundRect_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RadarRectDef::kRectNumberFieldNumber;
const int RadarRectDef::kCenterFieldNumber;
const int RadarRectDef::kUpdateTimeFieldNumber;
const int RadarRectDef::kRealDataFieldNumber;
const int RadarRectDef::kSogKnotFieldNumber;
const int RadarRectDef::kSogMSFieldNumber;
const int RadarRectDef::kCogFieldNumber;
const int RadarRectDef::kOutlineFieldNumber;
const int RadarRectDef::kBoundRectFieldNumber;
const int RadarRectDef::kSegFieldNumber;
const int RadarRectDef::kFixedImgFieldNumber;
const int RadarRectDef::kPredictionFieldNumber;
const int RadarRectDef::kVideoCycleIndexFieldNumber;
#endif  // !_MSC_VER

RadarRectDef::RadarRectDef()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.zhichenhaixin.proto.RadarRectDef)
}

void RadarRectDef::InitAsDefaultInstance() {
  center_ = const_cast< ::com::zhichenhaixin::proto::Latlon*>(&::com::zhichenhaixin::proto::Latlon::default_instance());
  boundrect_ = const_cast< ::com::zhichenhaixin::proto::BoundRect*>(&::com::zhichenhaixin::proto::BoundRect::default_instance());
  seg_ = const_cast< ::com::zhichenhaixin::proto::Segment*>(&::com::zhichenhaixin::proto::Segment::default_instance());
  fixedimg_ = const_cast< ::com::zhichenhaixin::proto::VideoImage*>(&::com::zhichenhaixin::proto::VideoImage::default_instance());
  prediction_ = const_cast< ::com::zhichenhaixin::proto::PredictionArea*>(&::com::zhichenhaixin::proto::PredictionArea::default_instance());
}

RadarRectDef::RadarRectDef(const RadarRectDef& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:com.zhichenhaixin.proto.RadarRectDef)
}

void RadarRectDef::SharedCtor() {
  _cached_size_ = 0;
  rectnumber_ = 0u;
  center_ = NULL;
  updatetime_ = 0u;
  realdata_ = false;
  sogknot_ = 0;
  sogms_ = 0;
  cog_ = 0;
  boundrect_ = NULL;
  seg_ = NULL;
  fixedimg_ = NULL;
  prediction_ = NULL;
  videocycleindex_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RadarRectDef::~RadarRectDef() {
  // @@protoc_insertion_point(destructor:com.zhichenhaixin.proto.RadarRectDef)
  SharedDtor();
}

void RadarRectDef::SharedDtor() {
  if (this != default_instance_) {
    delete center_;
    delete boundrect_;
    delete seg_;
    delete fixedimg_;
    delete prediction_;
  }
}

void RadarRectDef::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RadarRectDef::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RadarRectDef_descriptor_;
}

const RadarRectDef& RadarRectDef::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ZCHXRadarDataDef_2eproto();
  return *default_instance_;
}

RadarRectDef* RadarRectDef::default_instance_ = NULL;

RadarRectDef* RadarRectDef::New() const {
  return new RadarRectDef;
}

void RadarRectDef::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<RadarRectDef*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 127) {
    ZR_(rectnumber_, cog_);
    if (has_center()) {
      if (center_ != NULL) center_->::com::zhichenhaixin::proto::Latlon::Clear();
    }
    realdata_ = false;
  }
  if (_has_bits_[8 / 32] & 7936) {
    if (has_boundrect()) {
      if (boundrect_ != NULL) boundrect_->::com::zhichenhaixin::proto::BoundRect::Clear();
    }
    if (has_seg()) {
      if (seg_ != NULL) seg_->::com::zhichenhaixin::proto::Segment::Clear();
    }
    if (has_fixedimg()) {
      if (fixedimg_ != NULL) fixedimg_->::com::zhichenhaixin::proto::VideoImage::Clear();
    }
    if (has_prediction()) {
      if (prediction_ != NULL) prediction_->::com::zhichenhaixin::proto::PredictionArea::Clear();
    }
    videocycleindex_ = 0;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  outline_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RadarRectDef::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.zhichenhaixin.proto.RadarRectDef)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 rectNumber = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rectnumber_)));
          set_has_rectnumber();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_center;
        break;
      }

      // required .com.zhichenhaixin.proto.Latlon center = 2;
      case 2: {
        if (tag == 18) {
         parse_center:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_center()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_updateTime;
        break;
      }

      // required uint32 updateTime = 3;
      case 3: {
        if (tag == 24) {
         parse_updateTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &updatetime_)));
          set_has_updatetime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_realData;
        break;
      }

      // required bool realData = 4;
      case 4: {
        if (tag == 32) {
         parse_realData:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &realdata_)));
          set_has_realdata();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(41)) goto parse_sogKnot;
        break;
      }

      // required double sogKnot = 5;
      case 5: {
        if (tag == 41) {
         parse_sogKnot:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &sogknot_)));
          set_has_sogknot();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(49)) goto parse_sogMS;
        break;
      }

      // required double sogMS = 6;
      case 6: {
        if (tag == 49) {
         parse_sogMS:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &sogms_)));
          set_has_sogms();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(57)) goto parse_cog;
        break;
      }

      // required double cog = 7;
      case 7: {
        if (tag == 57) {
         parse_cog:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &cog_)));
          set_has_cog();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_outline;
        break;
      }

      // repeated .com.zhichenhaixin.proto.Latlon outline = 8;
      case 8: {
        if (tag == 66) {
         parse_outline:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_outline()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_outline;
        if (input->ExpectTag(74)) goto parse_boundRect;
        break;
      }

      // optional .com.zhichenhaixin.proto.BoundRect boundRect = 9;
      case 9: {
        if (tag == 74) {
         parse_boundRect:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_boundrect()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_seg;
        break;
      }

      // optional .com.zhichenhaixin.proto.Segment seg = 10;
      case 10: {
        if (tag == 82) {
         parse_seg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_seg()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(90)) goto parse_fixedImg;
        break;
      }

      // optional .com.zhichenhaixin.proto.VideoImage fixedImg = 11;
      case 11: {
        if (tag == 90) {
         parse_fixedImg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_fixedimg()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(98)) goto parse_prediction;
        break;
      }

      // optional .com.zhichenhaixin.proto.PredictionArea prediction = 12;
      case 12: {
        if (tag == 98) {
         parse_prediction:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_prediction()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(104)) goto parse_videoCycleIndex;
        break;
      }

      // optional int32 videoCycleIndex = 13;
      case 13: {
        if (tag == 104) {
         parse_videoCycleIndex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &videocycleindex_)));
          set_has_videocycleindex();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.zhichenhaixin.proto.RadarRectDef)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.zhichenhaixin.proto.RadarRectDef)
  return false;
#undef DO_
}

void RadarRectDef::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.zhichenhaixin.proto.RadarRectDef)
  // required uint32 rectNumber = 1;
  if (has_rectnumber()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->rectnumber(), output);
  }

  // required .com.zhichenhaixin.proto.Latlon center = 2;
  if (has_center()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->center(), output);
  }

  // required uint32 updateTime = 3;
  if (has_updatetime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->updatetime(), output);
  }

  // required bool realData = 4;
  if (has_realdata()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->realdata(), output);
  }

  // required double sogKnot = 5;
  if (has_sogknot()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->sogknot(), output);
  }

  // required double sogMS = 6;
  if (has_sogms()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->sogms(), output);
  }

  // required double cog = 7;
  if (has_cog()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(7, this->cog(), output);
  }

  // repeated .com.zhichenhaixin.proto.Latlon outline = 8;
  for (int i = 0; i < this->outline_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->outline(i), output);
  }

  // optional .com.zhichenhaixin.proto.BoundRect boundRect = 9;
  if (has_boundrect()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->boundrect(), output);
  }

  // optional .com.zhichenhaixin.proto.Segment seg = 10;
  if (has_seg()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->seg(), output);
  }

  // optional .com.zhichenhaixin.proto.VideoImage fixedImg = 11;
  if (has_fixedimg()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, this->fixedimg(), output);
  }

  // optional .com.zhichenhaixin.proto.PredictionArea prediction = 12;
  if (has_prediction()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, this->prediction(), output);
  }

  // optional int32 videoCycleIndex = 13;
  if (has_videocycleindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->videocycleindex(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.zhichenhaixin.proto.RadarRectDef)
}

::google::protobuf::uint8* RadarRectDef::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.zhichenhaixin.proto.RadarRectDef)
  // required uint32 rectNumber = 1;
  if (has_rectnumber()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->rectnumber(), target);
  }

  // required .com.zhichenhaixin.proto.Latlon center = 2;
  if (has_center()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->center(), target);
  }

  // required uint32 updateTime = 3;
  if (has_updatetime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->updatetime(), target);
  }

  // required bool realData = 4;
  if (has_realdata()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->realdata(), target);
  }

  // required double sogKnot = 5;
  if (has_sogknot()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->sogknot(), target);
  }

  // required double sogMS = 6;
  if (has_sogms()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->sogms(), target);
  }

  // required double cog = 7;
  if (has_cog()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(7, this->cog(), target);
  }

  // repeated .com.zhichenhaixin.proto.Latlon outline = 8;
  for (int i = 0; i < this->outline_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->outline(i), target);
  }

  // optional .com.zhichenhaixin.proto.BoundRect boundRect = 9;
  if (has_boundrect()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, this->boundrect(), target);
  }

  // optional .com.zhichenhaixin.proto.Segment seg = 10;
  if (has_seg()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, this->seg(), target);
  }

  // optional .com.zhichenhaixin.proto.VideoImage fixedImg = 11;
  if (has_fixedimg()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        11, this->fixedimg(), target);
  }

  // optional .com.zhichenhaixin.proto.PredictionArea prediction = 12;
  if (has_prediction()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        12, this->prediction(), target);
  }

  // optional int32 videoCycleIndex = 13;
  if (has_videocycleindex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->videocycleindex(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.zhichenhaixin.proto.RadarRectDef)
  return target;
}

int RadarRectDef::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 rectNumber = 1;
    if (has_rectnumber()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->rectnumber());
    }

    // required .com.zhichenhaixin.proto.Latlon center = 2;
    if (has_center()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->center());
    }

    // required uint32 updateTime = 3;
    if (has_updatetime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->updatetime());
    }

    // required bool realData = 4;
    if (has_realdata()) {
      total_size += 1 + 1;
    }

    // required double sogKnot = 5;
    if (has_sogknot()) {
      total_size += 1 + 8;
    }

    // required double sogMS = 6;
    if (has_sogms()) {
      total_size += 1 + 8;
    }

    // required double cog = 7;
    if (has_cog()) {
      total_size += 1 + 8;
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional .com.zhichenhaixin.proto.BoundRect boundRect = 9;
    if (has_boundrect()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->boundrect());
    }

    // optional .com.zhichenhaixin.proto.Segment seg = 10;
    if (has_seg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->seg());
    }

    // optional .com.zhichenhaixin.proto.VideoImage fixedImg = 11;
    if (has_fixedimg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->fixedimg());
    }

    // optional .com.zhichenhaixin.proto.PredictionArea prediction = 12;
    if (has_prediction()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->prediction());
    }

    // optional int32 videoCycleIndex = 13;
    if (has_videocycleindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->videocycleindex());
    }

  }
  // repeated .com.zhichenhaixin.proto.Latlon outline = 8;
  total_size += 1 * this->outline_size();
  for (int i = 0; i < this->outline_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->outline(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RadarRectDef::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RadarRectDef* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RadarRectDef*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RadarRectDef::MergeFrom(const RadarRectDef& from) {
  GOOGLE_CHECK_NE(&from, this);
  outline_.MergeFrom(from.outline_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_rectnumber()) {
      set_rectnumber(from.rectnumber());
    }
    if (from.has_center()) {
      mutable_center()->::com::zhichenhaixin::proto::Latlon::MergeFrom(from.center());
    }
    if (from.has_updatetime()) {
      set_updatetime(from.updatetime());
    }
    if (from.has_realdata()) {
      set_realdata(from.realdata());
    }
    if (from.has_sogknot()) {
      set_sogknot(from.sogknot());
    }
    if (from.has_sogms()) {
      set_sogms(from.sogms());
    }
    if (from.has_cog()) {
      set_cog(from.cog());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_boundrect()) {
      mutable_boundrect()->::com::zhichenhaixin::proto::BoundRect::MergeFrom(from.boundrect());
    }
    if (from.has_seg()) {
      mutable_seg()->::com::zhichenhaixin::proto::Segment::MergeFrom(from.seg());
    }
    if (from.has_fixedimg()) {
      mutable_fixedimg()->::com::zhichenhaixin::proto::VideoImage::MergeFrom(from.fixedimg());
    }
    if (from.has_prediction()) {
      mutable_prediction()->::com::zhichenhaixin::proto::PredictionArea::MergeFrom(from.prediction());
    }
    if (from.has_videocycleindex()) {
      set_videocycleindex(from.videocycleindex());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RadarRectDef::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RadarRectDef::CopyFrom(const RadarRectDef& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RadarRectDef::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000007f) != 0x0000007f) return false;

  if (has_center()) {
    if (!this->center().IsInitialized()) return false;
  }
  if (!::google::protobuf::internal::AllAreInitialized(this->outline())) return false;
  if (has_boundrect()) {
    if (!this->boundrect().IsInitialized()) return false;
  }
  if (has_seg()) {
    if (!this->seg().IsInitialized()) return false;
  }
  if (has_fixedimg()) {
    if (!this->fixedimg().IsInitialized()) return false;
  }
  if (has_prediction()) {
    if (!this->prediction().IsInitialized()) return false;
  }
  return true;
}

void RadarRectDef::Swap(RadarRectDef* other) {
  if (other != this) {
    std::swap(rectnumber_, other->rectnumber_);
    std::swap(center_, other->center_);
    std::swap(updatetime_, other->updatetime_);
    std::swap(realdata_, other->realdata_);
    std::swap(sogknot_, other->sogknot_);
    std::swap(sogms_, other->sogms_);
    std::swap(cog_, other->cog_);
    outline_.Swap(&other->outline_);
    std::swap(boundrect_, other->boundrect_);
    std::swap(seg_, other->seg_);
    std::swap(fixedimg_, other->fixedimg_);
    std::swap(prediction_, other->prediction_);
    std::swap(videocycleindex_, other->videocycleindex_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RadarRectDef::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RadarRectDef_descriptor_;
  metadata.reflection = RadarRectDef_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RoutePath::kPathFieldNumber;
#endif  // !_MSC_VER

RoutePath::RoutePath()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.zhichenhaixin.proto.RoutePath)
}

void RoutePath::InitAsDefaultInstance() {
}

RoutePath::RoutePath(const RoutePath& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:com.zhichenhaixin.proto.RoutePath)
}

void RoutePath::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RoutePath::~RoutePath() {
  // @@protoc_insertion_point(destructor:com.zhichenhaixin.proto.RoutePath)
  SharedDtor();
}

void RoutePath::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RoutePath::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RoutePath::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RoutePath_descriptor_;
}

const RoutePath& RoutePath::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ZCHXRadarDataDef_2eproto();
  return *default_instance_;
}

RoutePath* RoutePath::default_instance_ = NULL;

RoutePath* RoutePath::New() const {
  return new RoutePath;
}

void RoutePath::Clear() {
  path_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RoutePath::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.zhichenhaixin.proto.RoutePath)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .com.zhichenhaixin.proto.RadarRectDef path = 1;
      case 1: {
        if (tag == 10) {
         parse_path:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_path()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_path;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.zhichenhaixin.proto.RoutePath)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.zhichenhaixin.proto.RoutePath)
  return false;
#undef DO_
}

void RoutePath::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.zhichenhaixin.proto.RoutePath)
  // repeated .com.zhichenhaixin.proto.RadarRectDef path = 1;
  for (int i = 0; i < this->path_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->path(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.zhichenhaixin.proto.RoutePath)
}

::google::protobuf::uint8* RoutePath::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.zhichenhaixin.proto.RoutePath)
  // repeated .com.zhichenhaixin.proto.RadarRectDef path = 1;
  for (int i = 0; i < this->path_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->path(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.zhichenhaixin.proto.RoutePath)
  return target;
}

int RoutePath::ByteSize() const {
  int total_size = 0;

  // repeated .com.zhichenhaixin.proto.RadarRectDef path = 1;
  total_size += 1 * this->path_size();
  for (int i = 0; i < this->path_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->path(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RoutePath::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RoutePath* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RoutePath*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RoutePath::MergeFrom(const RoutePath& from) {
  GOOGLE_CHECK_NE(&from, this);
  path_.MergeFrom(from.path_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RoutePath::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RoutePath::CopyFrom(const RoutePath& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RoutePath::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->path())) return false;
  return true;
}

void RoutePath::Swap(RoutePath* other) {
  if (other != this) {
    path_.Swap(&other->path_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RoutePath::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RoutePath_descriptor_;
  metadata.reflection = RoutePath_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RouteNode::kNodeNumFieldNumber;
const int RouteNode::kTopNodeFieldNumber;
const int RouteNode::kPathListFieldNumber;
#endif  // !_MSC_VER

RouteNode::RouteNode()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.zhichenhaixin.proto.RouteNode)
}

void RouteNode::InitAsDefaultInstance() {
  top_node_ = const_cast< ::com::zhichenhaixin::proto::RadarRectDef*>(&::com::zhichenhaixin::proto::RadarRectDef::default_instance());
}

RouteNode::RouteNode(const RouteNode& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:com.zhichenhaixin.proto.RouteNode)
}

void RouteNode::SharedCtor() {
  _cached_size_ = 0;
  node_num_ = 0;
  top_node_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RouteNode::~RouteNode() {
  // @@protoc_insertion_point(destructor:com.zhichenhaixin.proto.RouteNode)
  SharedDtor();
}

void RouteNode::SharedDtor() {
  if (this != default_instance_) {
    delete top_node_;
  }
}

void RouteNode::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RouteNode::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RouteNode_descriptor_;
}

const RouteNode& RouteNode::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ZCHXRadarDataDef_2eproto();
  return *default_instance_;
}

RouteNode* RouteNode::default_instance_ = NULL;

RouteNode* RouteNode::New() const {
  return new RouteNode;
}

void RouteNode::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    node_num_ = 0;
    if (has_top_node()) {
      if (top_node_ != NULL) top_node_->::com::zhichenhaixin::proto::RadarRectDef::Clear();
    }
  }
  path_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RouteNode::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.zhichenhaixin.proto.RouteNode)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 node_num = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &node_num_)));
          set_has_node_num();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_top_node;
        break;
      }

      // required .com.zhichenhaixin.proto.RadarRectDef top_node = 2;
      case 2: {
        if (tag == 18) {
         parse_top_node:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_top_node()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_path_list;
        break;
      }

      // repeated .com.zhichenhaixin.proto.RoutePath path_list = 3;
      case 3: {
        if (tag == 26) {
         parse_path_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_path_list()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_path_list;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.zhichenhaixin.proto.RouteNode)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.zhichenhaixin.proto.RouteNode)
  return false;
#undef DO_
}

void RouteNode::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.zhichenhaixin.proto.RouteNode)
  // required int32 node_num = 1;
  if (has_node_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->node_num(), output);
  }

  // required .com.zhichenhaixin.proto.RadarRectDef top_node = 2;
  if (has_top_node()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->top_node(), output);
  }

  // repeated .com.zhichenhaixin.proto.RoutePath path_list = 3;
  for (int i = 0; i < this->path_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->path_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.zhichenhaixin.proto.RouteNode)
}

::google::protobuf::uint8* RouteNode::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.zhichenhaixin.proto.RouteNode)
  // required int32 node_num = 1;
  if (has_node_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->node_num(), target);
  }

  // required .com.zhichenhaixin.proto.RadarRectDef top_node = 2;
  if (has_top_node()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->top_node(), target);
  }

  // repeated .com.zhichenhaixin.proto.RoutePath path_list = 3;
  for (int i = 0; i < this->path_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->path_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.zhichenhaixin.proto.RouteNode)
  return target;
}

int RouteNode::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 node_num = 1;
    if (has_node_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->node_num());
    }

    // required .com.zhichenhaixin.proto.RadarRectDef top_node = 2;
    if (has_top_node()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->top_node());
    }

  }
  // repeated .com.zhichenhaixin.proto.RoutePath path_list = 3;
  total_size += 1 * this->path_list_size();
  for (int i = 0; i < this->path_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->path_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RouteNode::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RouteNode* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RouteNode*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RouteNode::MergeFrom(const RouteNode& from) {
  GOOGLE_CHECK_NE(&from, this);
  path_list_.MergeFrom(from.path_list_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_node_num()) {
      set_node_num(from.node_num());
    }
    if (from.has_top_node()) {
      mutable_top_node()->::com::zhichenhaixin::proto::RadarRectDef::MergeFrom(from.top_node());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RouteNode::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RouteNode::CopyFrom(const RouteNode& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RouteNode::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_top_node()) {
    if (!this->top_node().IsInitialized()) return false;
  }
  if (!::google::protobuf::internal::AllAreInitialized(this->path_list())) return false;
  return true;
}

void RouteNode::Swap(RouteNode* other) {
  if (other != this) {
    std::swap(node_num_, other->node_num_);
    std::swap(top_node_, other->top_node_);
    path_list_.Swap(&other->path_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RouteNode::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RouteNode_descriptor_;
  metadata.reflection = RouteNode_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RouteNodes::kNodeListFieldNumber;
#endif  // !_MSC_VER

RouteNodes::RouteNodes()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.zhichenhaixin.proto.RouteNodes)
}

void RouteNodes::InitAsDefaultInstance() {
}

RouteNodes::RouteNodes(const RouteNodes& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:com.zhichenhaixin.proto.RouteNodes)
}

void RouteNodes::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RouteNodes::~RouteNodes() {
  // @@protoc_insertion_point(destructor:com.zhichenhaixin.proto.RouteNodes)
  SharedDtor();
}

void RouteNodes::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RouteNodes::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RouteNodes::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RouteNodes_descriptor_;
}

const RouteNodes& RouteNodes::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ZCHXRadarDataDef_2eproto();
  return *default_instance_;
}

RouteNodes* RouteNodes::default_instance_ = NULL;

RouteNodes* RouteNodes::New() const {
  return new RouteNodes;
}

void RouteNodes::Clear() {
  node_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RouteNodes::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.zhichenhaixin.proto.RouteNodes)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .com.zhichenhaixin.proto.RouteNode node_list = 1;
      case 1: {
        if (tag == 10) {
         parse_node_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_node_list()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_node_list;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.zhichenhaixin.proto.RouteNodes)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.zhichenhaixin.proto.RouteNodes)
  return false;
#undef DO_
}

void RouteNodes::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.zhichenhaixin.proto.RouteNodes)
  // repeated .com.zhichenhaixin.proto.RouteNode node_list = 1;
  for (int i = 0; i < this->node_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->node_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.zhichenhaixin.proto.RouteNodes)
}

::google::protobuf::uint8* RouteNodes::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.zhichenhaixin.proto.RouteNodes)
  // repeated .com.zhichenhaixin.proto.RouteNode node_list = 1;
  for (int i = 0; i < this->node_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->node_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.zhichenhaixin.proto.RouteNodes)
  return target;
}

int RouteNodes::ByteSize() const {
  int total_size = 0;

  // repeated .com.zhichenhaixin.proto.RouteNode node_list = 1;
  total_size += 1 * this->node_list_size();
  for (int i = 0; i < this->node_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->node_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RouteNodes::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RouteNodes* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RouteNodes*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RouteNodes::MergeFrom(const RouteNodes& from) {
  GOOGLE_CHECK_NE(&from, this);
  node_list_.MergeFrom(from.node_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RouteNodes::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RouteNodes::CopyFrom(const RouteNodes& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RouteNodes::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->node_list())) return false;
  return true;
}

void RouteNodes::Swap(RouteNodes* other) {
  if (other != this) {
    node_list_.Swap(&other->node_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RouteNodes::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RouteNodes_descriptor_;
  metadata.reflection = RouteNodes_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RadarRect::kCurrentRectFieldNumber;
const int RadarRect::kHistoryRectListFieldNumber;
const int RadarRect::kDirConfirmedFieldNumber;
const int RadarRect::kCurEstCountFieldNumber;
const int RadarRect::kNodeNumFieldNumber;
#endif  // !_MSC_VER

RadarRect::RadarRect()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.zhichenhaixin.proto.RadarRect)
}

void RadarRect::InitAsDefaultInstance() {
  current_rect_ = const_cast< ::com::zhichenhaixin::proto::RadarRectDef*>(&::com::zhichenhaixin::proto::RadarRectDef::default_instance());
}

RadarRect::RadarRect(const RadarRect& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:com.zhichenhaixin.proto.RadarRect)
}

void RadarRect::SharedCtor() {
  _cached_size_ = 0;
  current_rect_ = NULL;
  dir_confirmed_ = false;
  cur_est_count_ = 0u;
  node_num_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RadarRect::~RadarRect() {
  // @@protoc_insertion_point(destructor:com.zhichenhaixin.proto.RadarRect)
  SharedDtor();
}

void RadarRect::SharedDtor() {
  if (this != default_instance_) {
    delete current_rect_;
  }
}

void RadarRect::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RadarRect::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RadarRect_descriptor_;
}

const RadarRect& RadarRect::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ZCHXRadarDataDef_2eproto();
  return *default_instance_;
}

RadarRect* RadarRect::default_instance_ = NULL;

RadarRect* RadarRect::New() const {
  return new RadarRect;
}

void RadarRect::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<RadarRect*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 29) {
    ZR_(dir_confirmed_, node_num_);
    if (has_current_rect()) {
      if (current_rect_ != NULL) current_rect_->::com::zhichenhaixin::proto::RadarRectDef::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  history_rect_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RadarRect::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.zhichenhaixin.proto.RadarRect)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .com.zhichenhaixin.proto.RadarRectDef current_rect = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_current_rect()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_history_rect_list;
        break;
      }

      // repeated .com.zhichenhaixin.proto.RadarRectDef history_rect_list = 2;
      case 2: {
        if (tag == 18) {
         parse_history_rect_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_history_rect_list()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_history_rect_list;
        if (input->ExpectTag(24)) goto parse_dir_confirmed;
        break;
      }

      // required bool dir_confirmed = 3;
      case 3: {
        if (tag == 24) {
         parse_dir_confirmed:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &dir_confirmed_)));
          set_has_dir_confirmed();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_cur_est_count;
        break;
      }

      // required uint32 cur_est_count = 4;
      case 4: {
        if (tag == 32) {
         parse_cur_est_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cur_est_count_)));
          set_has_cur_est_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_node_num;
        break;
      }

      // required int32 node_num = 5;
      case 5: {
        if (tag == 40) {
         parse_node_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &node_num_)));
          set_has_node_num();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.zhichenhaixin.proto.RadarRect)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.zhichenhaixin.proto.RadarRect)
  return false;
#undef DO_
}

void RadarRect::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.zhichenhaixin.proto.RadarRect)
  // required .com.zhichenhaixin.proto.RadarRectDef current_rect = 1;
  if (has_current_rect()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->current_rect(), output);
  }

  // repeated .com.zhichenhaixin.proto.RadarRectDef history_rect_list = 2;
  for (int i = 0; i < this->history_rect_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->history_rect_list(i), output);
  }

  // required bool dir_confirmed = 3;
  if (has_dir_confirmed()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->dir_confirmed(), output);
  }

  // required uint32 cur_est_count = 4;
  if (has_cur_est_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->cur_est_count(), output);
  }

  // required int32 node_num = 5;
  if (has_node_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->node_num(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.zhichenhaixin.proto.RadarRect)
}

::google::protobuf::uint8* RadarRect::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.zhichenhaixin.proto.RadarRect)
  // required .com.zhichenhaixin.proto.RadarRectDef current_rect = 1;
  if (has_current_rect()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->current_rect(), target);
  }

  // repeated .com.zhichenhaixin.proto.RadarRectDef history_rect_list = 2;
  for (int i = 0; i < this->history_rect_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->history_rect_list(i), target);
  }

  // required bool dir_confirmed = 3;
  if (has_dir_confirmed()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->dir_confirmed(), target);
  }

  // required uint32 cur_est_count = 4;
  if (has_cur_est_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->cur_est_count(), target);
  }

  // required int32 node_num = 5;
  if (has_node_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->node_num(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.zhichenhaixin.proto.RadarRect)
  return target;
}

int RadarRect::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .com.zhichenhaixin.proto.RadarRectDef current_rect = 1;
    if (has_current_rect()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->current_rect());
    }

    // required bool dir_confirmed = 3;
    if (has_dir_confirmed()) {
      total_size += 1 + 1;
    }

    // required uint32 cur_est_count = 4;
    if (has_cur_est_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cur_est_count());
    }

    // required int32 node_num = 5;
    if (has_node_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->node_num());
    }

  }
  // repeated .com.zhichenhaixin.proto.RadarRectDef history_rect_list = 2;
  total_size += 1 * this->history_rect_list_size();
  for (int i = 0; i < this->history_rect_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->history_rect_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RadarRect::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RadarRect* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RadarRect*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RadarRect::MergeFrom(const RadarRect& from) {
  GOOGLE_CHECK_NE(&from, this);
  history_rect_list_.MergeFrom(from.history_rect_list_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_current_rect()) {
      mutable_current_rect()->::com::zhichenhaixin::proto::RadarRectDef::MergeFrom(from.current_rect());
    }
    if (from.has_dir_confirmed()) {
      set_dir_confirmed(from.dir_confirmed());
    }
    if (from.has_cur_est_count()) {
      set_cur_est_count(from.cur_est_count());
    }
    if (from.has_node_num()) {
      set_node_num(from.node_num());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RadarRect::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RadarRect::CopyFrom(const RadarRect& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RadarRect::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001d) != 0x0000001d) return false;

  if (has_current_rect()) {
    if (!this->current_rect().IsInitialized()) return false;
  }
  if (!::google::protobuf::internal::AllAreInitialized(this->history_rect_list())) return false;
  return true;
}

void RadarRect::Swap(RadarRect* other) {
  if (other != this) {
    std::swap(current_rect_, other->current_rect_);
    history_rect_list_.Swap(&other->history_rect_list_);
    std::swap(dir_confirmed_, other->dir_confirmed_);
    std::swap(cur_est_count_, other->cur_est_count_);
    std::swap(node_num_, other->node_num_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RadarRect::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RadarRect_descriptor_;
  metadata.reflection = RadarRect_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RadarRects::kUTCFieldNumber;
const int RadarRects::kLengthFieldNumber;
const int RadarRects::kRectListFieldNumber;
#endif  // !_MSC_VER

RadarRects::RadarRects()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.zhichenhaixin.proto.RadarRects)
}

void RadarRects::InitAsDefaultInstance() {
}

RadarRects::RadarRects(const RadarRects& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:com.zhichenhaixin.proto.RadarRects)
}

void RadarRects::SharedCtor() {
  _cached_size_ = 0;
  utc_ = GOOGLE_ULONGLONG(0);
  length_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RadarRects::~RadarRects() {
  // @@protoc_insertion_point(destructor:com.zhichenhaixin.proto.RadarRects)
  SharedDtor();
}

void RadarRects::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RadarRects::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RadarRects::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RadarRects_descriptor_;
}

const RadarRects& RadarRects::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ZCHXRadarDataDef_2eproto();
  return *default_instance_;
}

RadarRects* RadarRects::default_instance_ = NULL;

RadarRects* RadarRects::New() const {
  return new RadarRects;
}

void RadarRects::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    utc_ = GOOGLE_ULONGLONG(0);
    length_ = 0;
  }
  rect_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RadarRects::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.zhichenhaixin.proto.RadarRects)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 UTC = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &utc_)));
          set_has_utc();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_length;
        break;
      }

      // required int32 length = 2;
      case 2: {
        if (tag == 16) {
         parse_length:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &length_)));
          set_has_length();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_rect_list;
        break;
      }

      // repeated .com.zhichenhaixin.proto.RadarRect rect_list = 3;
      case 3: {
        if (tag == 26) {
         parse_rect_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_rect_list()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_rect_list;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.zhichenhaixin.proto.RadarRects)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.zhichenhaixin.proto.RadarRects)
  return false;
#undef DO_
}

void RadarRects::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.zhichenhaixin.proto.RadarRects)
  // required uint64 UTC = 1;
  if (has_utc()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->utc(), output);
  }

  // required int32 length = 2;
  if (has_length()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->length(), output);
  }

  // repeated .com.zhichenhaixin.proto.RadarRect rect_list = 3;
  for (int i = 0; i < this->rect_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->rect_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.zhichenhaixin.proto.RadarRects)
}

::google::protobuf::uint8* RadarRects::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.zhichenhaixin.proto.RadarRects)
  // required uint64 UTC = 1;
  if (has_utc()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->utc(), target);
  }

  // required int32 length = 2;
  if (has_length()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->length(), target);
  }

  // repeated .com.zhichenhaixin.proto.RadarRect rect_list = 3;
  for (int i = 0; i < this->rect_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->rect_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.zhichenhaixin.proto.RadarRects)
  return target;
}

int RadarRects::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 UTC = 1;
    if (has_utc()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->utc());
    }

    // required int32 length = 2;
    if (has_length()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->length());
    }

  }
  // repeated .com.zhichenhaixin.proto.RadarRect rect_list = 3;
  total_size += 1 * this->rect_list_size();
  for (int i = 0; i < this->rect_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->rect_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RadarRects::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RadarRects* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RadarRects*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RadarRects::MergeFrom(const RadarRects& from) {
  GOOGLE_CHECK_NE(&from, this);
  rect_list_.MergeFrom(from.rect_list_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_utc()) {
      set_utc(from.utc());
    }
    if (from.has_length()) {
      set_length(from.length());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RadarRects::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RadarRects::CopyFrom(const RadarRects& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RadarRects::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->rect_list())) return false;
  return true;
}

void RadarRects::Swap(RadarRects* other) {
  if (other != this) {
    std::swap(utc_, other->utc_);
    std::swap(length_, other->length_);
    rect_list_.Swap(&other->rect_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RadarRects::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RadarRects_descriptor_;
  metadata.reflection = RadarRects_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TrackPoint::kRadarSiteIDFieldNumber;
const int TrackPoint::kTrackNumberFieldNumber;
const int TrackPoint::kCurrentFieldNumber;
const int TrackPoint::kTracksFieldNumber;
const int TrackPoint::kTrackConfirmedFieldNumber;
const int TrackPoint::kObjTypeFieldNumber;
const int TrackPoint::kObjNameFieldNumber;
#endif  // !_MSC_VER

TrackPoint::TrackPoint()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.zhichenhaixin.proto.TrackPoint)
}

void TrackPoint::InitAsDefaultInstance() {
  current_ = const_cast< ::com::zhichenhaixin::proto::RadarRectDef*>(&::com::zhichenhaixin::proto::RadarRectDef::default_instance());
}

TrackPoint::TrackPoint(const TrackPoint& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:com.zhichenhaixin.proto.TrackPoint)
}

void TrackPoint::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  radarsiteid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  tracknumber_ = 0u;
  current_ = NULL;
  trackconfirmed_ = false;
  objtype_ = 0;
  objname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TrackPoint::~TrackPoint() {
  // @@protoc_insertion_point(destructor:com.zhichenhaixin.proto.TrackPoint)
  SharedDtor();
}

void TrackPoint::SharedDtor() {
  if (radarsiteid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete radarsiteid_;
  }
  if (objname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete objname_;
  }
  if (this != default_instance_) {
    delete current_;
  }
}

void TrackPoint::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TrackPoint::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TrackPoint_descriptor_;
}

const TrackPoint& TrackPoint::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ZCHXRadarDataDef_2eproto();
  return *default_instance_;
}

TrackPoint* TrackPoint::default_instance_ = NULL;

TrackPoint* TrackPoint::New() const {
  return new TrackPoint;
}

void TrackPoint::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TrackPoint*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 119) {
    ZR_(tracknumber_, trackconfirmed_);
    if (has_radarsiteid()) {
      if (radarsiteid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        radarsiteid_->clear();
      }
    }
    if (has_current()) {
      if (current_ != NULL) current_->::com::zhichenhaixin::proto::RadarRectDef::Clear();
    }
    objtype_ = 0;
    if (has_objname()) {
      if (objname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        objname_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  tracks_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TrackPoint::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.zhichenhaixin.proto.TrackPoint)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string radarSiteID = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_radarsiteid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->radarsiteid().data(), this->radarsiteid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "radarsiteid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_trackNumber;
        break;
      }

      // required uint32 trackNumber = 2;
      case 2: {
        if (tag == 16) {
         parse_trackNumber:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &tracknumber_)));
          set_has_tracknumber();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_current;
        break;
      }

      // required .com.zhichenhaixin.proto.RadarRectDef current = 3;
      case 3: {
        if (tag == 26) {
         parse_current:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_current()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_tracks;
        break;
      }

      // repeated .com.zhichenhaixin.proto.RadarRectDef tracks = 4;
      case 4: {
        if (tag == 34) {
         parse_tracks:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_tracks()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_tracks;
        if (input->ExpectTag(40)) goto parse_trackConfirmed;
        break;
      }

      // optional bool trackConfirmed = 5;
      case 5: {
        if (tag == 40) {
         parse_trackConfirmed:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &trackconfirmed_)));
          set_has_trackconfirmed();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_objType;
        break;
      }

      // optional int32 objType = 6;
      case 6: {
        if (tag == 48) {
         parse_objType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &objtype_)));
          set_has_objtype();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_objName;
        break;
      }

      // optional string objName = 7;
      case 7: {
        if (tag == 58) {
         parse_objName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_objname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->objname().data(), this->objname().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "objname");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.zhichenhaixin.proto.TrackPoint)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.zhichenhaixin.proto.TrackPoint)
  return false;
#undef DO_
}

void TrackPoint::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.zhichenhaixin.proto.TrackPoint)
  // required string radarSiteID = 1;
  if (has_radarsiteid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->radarsiteid().data(), this->radarsiteid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "radarsiteid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->radarsiteid(), output);
  }

  // required uint32 trackNumber = 2;
  if (has_tracknumber()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->tracknumber(), output);
  }

  // required .com.zhichenhaixin.proto.RadarRectDef current = 3;
  if (has_current()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->current(), output);
  }

  // repeated .com.zhichenhaixin.proto.RadarRectDef tracks = 4;
  for (int i = 0; i < this->tracks_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->tracks(i), output);
  }

  // optional bool trackConfirmed = 5;
  if (has_trackconfirmed()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->trackconfirmed(), output);
  }

  // optional int32 objType = 6;
  if (has_objtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->objtype(), output);
  }

  // optional string objName = 7;
  if (has_objname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->objname().data(), this->objname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "objname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->objname(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.zhichenhaixin.proto.TrackPoint)
}

::google::protobuf::uint8* TrackPoint::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.zhichenhaixin.proto.TrackPoint)
  // required string radarSiteID = 1;
  if (has_radarsiteid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->radarsiteid().data(), this->radarsiteid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "radarsiteid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->radarsiteid(), target);
  }

  // required uint32 trackNumber = 2;
  if (has_tracknumber()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->tracknumber(), target);
  }

  // required .com.zhichenhaixin.proto.RadarRectDef current = 3;
  if (has_current()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->current(), target);
  }

  // repeated .com.zhichenhaixin.proto.RadarRectDef tracks = 4;
  for (int i = 0; i < this->tracks_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->tracks(i), target);
  }

  // optional bool trackConfirmed = 5;
  if (has_trackconfirmed()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->trackconfirmed(), target);
  }

  // optional int32 objType = 6;
  if (has_objtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->objtype(), target);
  }

  // optional string objName = 7;
  if (has_objname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->objname().data(), this->objname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "objname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->objname(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.zhichenhaixin.proto.TrackPoint)
  return target;
}

int TrackPoint::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string radarSiteID = 1;
    if (has_radarsiteid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->radarsiteid());
    }

    // required uint32 trackNumber = 2;
    if (has_tracknumber()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->tracknumber());
    }

    // required .com.zhichenhaixin.proto.RadarRectDef current = 3;
    if (has_current()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->current());
    }

    // optional bool trackConfirmed = 5;
    if (has_trackconfirmed()) {
      total_size += 1 + 1;
    }

    // optional int32 objType = 6;
    if (has_objtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->objtype());
    }

    // optional string objName = 7;
    if (has_objname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->objname());
    }

  }
  // repeated .com.zhichenhaixin.proto.RadarRectDef tracks = 4;
  total_size += 1 * this->tracks_size();
  for (int i = 0; i < this->tracks_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->tracks(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TrackPoint::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TrackPoint* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TrackPoint*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TrackPoint::MergeFrom(const TrackPoint& from) {
  GOOGLE_CHECK_NE(&from, this);
  tracks_.MergeFrom(from.tracks_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_radarsiteid()) {
      set_radarsiteid(from.radarsiteid());
    }
    if (from.has_tracknumber()) {
      set_tracknumber(from.tracknumber());
    }
    if (from.has_current()) {
      mutable_current()->::com::zhichenhaixin::proto::RadarRectDef::MergeFrom(from.current());
    }
    if (from.has_trackconfirmed()) {
      set_trackconfirmed(from.trackconfirmed());
    }
    if (from.has_objtype()) {
      set_objtype(from.objtype());
    }
    if (from.has_objname()) {
      set_objname(from.objname());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TrackPoint::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TrackPoint::CopyFrom(const TrackPoint& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TrackPoint::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  if (has_current()) {
    if (!this->current().IsInitialized()) return false;
  }
  if (!::google::protobuf::internal::AllAreInitialized(this->tracks())) return false;
  return true;
}

void TrackPoint::Swap(TrackPoint* other) {
  if (other != this) {
    std::swap(radarsiteid_, other->radarsiteid_);
    std::swap(tracknumber_, other->tracknumber_);
    std::swap(current_, other->current_);
    tracks_.Swap(&other->tracks_);
    std::swap(trackconfirmed_, other->trackconfirmed_);
    std::swap(objtype_, other->objtype_);
    std::swap(objname_, other->objname_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TrackPoint::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TrackPoint_descriptor_;
  metadata.reflection = TrackPoint_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RadarSurfaceTrack::kFlagFieldNumber;
const int RadarSurfaceTrack::kSourceIdFieldNumber;
const int RadarSurfaceTrack::kUTCFieldNumber;
const int RadarSurfaceTrack::kLengthFieldNumber;
const int RadarSurfaceTrack::kTrackPointsFieldNumber;
#endif  // !_MSC_VER

RadarSurfaceTrack::RadarSurfaceTrack()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.zhichenhaixin.proto.RadarSurfaceTrack)
}

void RadarSurfaceTrack::InitAsDefaultInstance() {
}

RadarSurfaceTrack::RadarSurfaceTrack(const RadarSurfaceTrack& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:com.zhichenhaixin.proto.RadarSurfaceTrack)
}

void RadarSurfaceTrack::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  flag_ = 0;
  sourceid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  utc_ = GOOGLE_ULONGLONG(0);
  length_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RadarSurfaceTrack::~RadarSurfaceTrack() {
  // @@protoc_insertion_point(destructor:com.zhichenhaixin.proto.RadarSurfaceTrack)
  SharedDtor();
}

void RadarSurfaceTrack::SharedDtor() {
  if (sourceid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete sourceid_;
  }
  if (this != default_instance_) {
  }
}

void RadarSurfaceTrack::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RadarSurfaceTrack::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RadarSurfaceTrack_descriptor_;
}

const RadarSurfaceTrack& RadarSurfaceTrack::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ZCHXRadarDataDef_2eproto();
  return *default_instance_;
}

RadarSurfaceTrack* RadarSurfaceTrack::default_instance_ = NULL;

RadarSurfaceTrack* RadarSurfaceTrack::New() const {
  return new RadarSurfaceTrack;
}

void RadarSurfaceTrack::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<RadarSurfaceTrack*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 15) {
    ZR_(flag_, utc_);
    if (has_sourceid()) {
      if (sourceid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        sourceid_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  trackpoints_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RadarSurfaceTrack::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.zhichenhaixin.proto.RadarSurfaceTrack)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 flag = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &flag_)));
          set_has_flag();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_sourceId;
        break;
      }

      // required string sourceId = 2;
      case 2: {
        if (tag == 18) {
         parse_sourceId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sourceid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->sourceid().data(), this->sourceid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "sourceid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_UTC;
        break;
      }

      // required uint64 UTC = 3;
      case 3: {
        if (tag == 24) {
         parse_UTC:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &utc_)));
          set_has_utc();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_length;
        break;
      }

      // required int32 length = 4;
      case 4: {
        if (tag == 32) {
         parse_length:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &length_)));
          set_has_length();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_trackPoints;
        break;
      }

      // repeated .com.zhichenhaixin.proto.TrackPoint trackPoints = 5;
      case 5: {
        if (tag == 42) {
         parse_trackPoints:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_trackpoints()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_trackPoints;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.zhichenhaixin.proto.RadarSurfaceTrack)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.zhichenhaixin.proto.RadarSurfaceTrack)
  return false;
#undef DO_
}

void RadarSurfaceTrack::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.zhichenhaixin.proto.RadarSurfaceTrack)
  // required int32 flag = 1;
  if (has_flag()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->flag(), output);
  }

  // required string sourceId = 2;
  if (has_sourceid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->sourceid().data(), this->sourceid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "sourceid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->sourceid(), output);
  }

  // required uint64 UTC = 3;
  if (has_utc()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->utc(), output);
  }

  // required int32 length = 4;
  if (has_length()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->length(), output);
  }

  // repeated .com.zhichenhaixin.proto.TrackPoint trackPoints = 5;
  for (int i = 0; i < this->trackpoints_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->trackpoints(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.zhichenhaixin.proto.RadarSurfaceTrack)
}

::google::protobuf::uint8* RadarSurfaceTrack::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.zhichenhaixin.proto.RadarSurfaceTrack)
  // required int32 flag = 1;
  if (has_flag()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->flag(), target);
  }

  // required string sourceId = 2;
  if (has_sourceid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->sourceid().data(), this->sourceid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "sourceid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->sourceid(), target);
  }

  // required uint64 UTC = 3;
  if (has_utc()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->utc(), target);
  }

  // required int32 length = 4;
  if (has_length()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->length(), target);
  }

  // repeated .com.zhichenhaixin.proto.TrackPoint trackPoints = 5;
  for (int i = 0; i < this->trackpoints_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->trackpoints(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.zhichenhaixin.proto.RadarSurfaceTrack)
  return target;
}

int RadarSurfaceTrack::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 flag = 1;
    if (has_flag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->flag());
    }

    // required string sourceId = 2;
    if (has_sourceid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->sourceid());
    }

    // required uint64 UTC = 3;
    if (has_utc()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->utc());
    }

    // required int32 length = 4;
    if (has_length()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->length());
    }

  }
  // repeated .com.zhichenhaixin.proto.TrackPoint trackPoints = 5;
  total_size += 1 * this->trackpoints_size();
  for (int i = 0; i < this->trackpoints_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->trackpoints(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RadarSurfaceTrack::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RadarSurfaceTrack* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RadarSurfaceTrack*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RadarSurfaceTrack::MergeFrom(const RadarSurfaceTrack& from) {
  GOOGLE_CHECK_NE(&from, this);
  trackpoints_.MergeFrom(from.trackpoints_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_flag()) {
      set_flag(from.flag());
    }
    if (from.has_sourceid()) {
      set_sourceid(from.sourceid());
    }
    if (from.has_utc()) {
      set_utc(from.utc());
    }
    if (from.has_length()) {
      set_length(from.length());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RadarSurfaceTrack::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RadarSurfaceTrack::CopyFrom(const RadarSurfaceTrack& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RadarSurfaceTrack::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->trackpoints())) return false;
  return true;
}

void RadarSurfaceTrack::Swap(RadarSurfaceTrack* other) {
  if (other != this) {
    std::swap(flag_, other->flag_);
    std::swap(sourceid_, other->sourceid_);
    std::swap(utc_, other->utc_);
    std::swap(length_, other->length_);
    trackpoints_.Swap(&other->trackpoints_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RadarSurfaceTrack::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RadarSurfaceTrack_descriptor_;
  metadata.reflection = RadarSurfaceTrack_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RadarVideoImage::kRadarIdFieldNumber;
const int RadarVideoImage::kRadarNameFieldNumber;
const int RadarVideoImage::kCenterFieldNumber;
const int RadarVideoImage::kUTCFieldNumber;
const int RadarVideoImage::kImageDataFieldNumber;
const int RadarVideoImage::kWidthFieldNumber;
const int RadarVideoImage::kHeightFieldNumber;
const int RadarVideoImage::kRadiusFieldNumber;
#endif  // !_MSC_VER

RadarVideoImage::RadarVideoImage()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.zhichenhaixin.proto.RadarVideoImage)
}

void RadarVideoImage::InitAsDefaultInstance() {
  center_ = const_cast< ::com::zhichenhaixin::proto::Latlon*>(&::com::zhichenhaixin::proto::Latlon::default_instance());
}

RadarVideoImage::RadarVideoImage(const RadarVideoImage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:com.zhichenhaixin.proto.RadarVideoImage)
}

void RadarVideoImage::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  radarid_ = GOOGLE_ULONGLONG(0);
  radarname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  center_ = NULL;
  utc_ = GOOGLE_ULONGLONG(0);
  imagedata_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  width_ = 0u;
  height_ = 0u;
  radius_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RadarVideoImage::~RadarVideoImage() {
  // @@protoc_insertion_point(destructor:com.zhichenhaixin.proto.RadarVideoImage)
  SharedDtor();
}

void RadarVideoImage::SharedDtor() {
  if (radarname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete radarname_;
  }
  if (imagedata_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete imagedata_;
  }
  if (this != default_instance_) {
    delete center_;
  }
}

void RadarVideoImage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RadarVideoImage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RadarVideoImage_descriptor_;
}

const RadarVideoImage& RadarVideoImage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ZCHXRadarDataDef_2eproto();
  return *default_instance_;
}

RadarVideoImage* RadarVideoImage::default_instance_ = NULL;

RadarVideoImage* RadarVideoImage::New() const {
  return new RadarVideoImage;
}

void RadarVideoImage::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<RadarVideoImage*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(width_, radius_);
    radarid_ = GOOGLE_ULONGLONG(0);
    if (has_radarname()) {
      if (radarname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        radarname_->clear();
      }
    }
    if (has_center()) {
      if (center_ != NULL) center_->::com::zhichenhaixin::proto::Latlon::Clear();
    }
    utc_ = GOOGLE_ULONGLONG(0);
    if (has_imagedata()) {
      if (imagedata_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        imagedata_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RadarVideoImage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.zhichenhaixin.proto.RadarVideoImage)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 radarId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &radarid_)));
          set_has_radarid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_radarName;
        break;
      }

      // required string radarName = 2;
      case 2: {
        if (tag == 18) {
         parse_radarName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_radarname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->radarname().data(), this->radarname().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "radarname");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_center;
        break;
      }

      // required .com.zhichenhaixin.proto.Latlon center = 3;
      case 3: {
        if (tag == 26) {
         parse_center:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_center()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_UTC;
        break;
      }

      // required uint64 UTC = 4;
      case 4: {
        if (tag == 32) {
         parse_UTC:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &utc_)));
          set_has_utc();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_imageData;
        break;
      }

      // required bytes imageData = 5;
      case 5: {
        if (tag == 42) {
         parse_imageData:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_imagedata()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_width;
        break;
      }

      // required uint32 width = 6;
      case 6: {
        if (tag == 48) {
         parse_width:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &width_)));
          set_has_width();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_height;
        break;
      }

      // required uint32 height = 7;
      case 7: {
        if (tag == 56) {
         parse_height:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &height_)));
          set_has_height();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(65)) goto parse_radius;
        break;
      }

      // required double radius = 8;
      case 8: {
        if (tag == 65) {
         parse_radius:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &radius_)));
          set_has_radius();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.zhichenhaixin.proto.RadarVideoImage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.zhichenhaixin.proto.RadarVideoImage)
  return false;
#undef DO_
}

void RadarVideoImage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.zhichenhaixin.proto.RadarVideoImage)
  // required uint64 radarId = 1;
  if (has_radarid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->radarid(), output);
  }

  // required string radarName = 2;
  if (has_radarname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->radarname().data(), this->radarname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "radarname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->radarname(), output);
  }

  // required .com.zhichenhaixin.proto.Latlon center = 3;
  if (has_center()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->center(), output);
  }

  // required uint64 UTC = 4;
  if (has_utc()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->utc(), output);
  }

  // required bytes imageData = 5;
  if (has_imagedata()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      5, this->imagedata(), output);
  }

  // required uint32 width = 6;
  if (has_width()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->width(), output);
  }

  // required uint32 height = 7;
  if (has_height()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->height(), output);
  }

  // required double radius = 8;
  if (has_radius()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(8, this->radius(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.zhichenhaixin.proto.RadarVideoImage)
}

::google::protobuf::uint8* RadarVideoImage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.zhichenhaixin.proto.RadarVideoImage)
  // required uint64 radarId = 1;
  if (has_radarid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->radarid(), target);
  }

  // required string radarName = 2;
  if (has_radarname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->radarname().data(), this->radarname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "radarname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->radarname(), target);
  }

  // required .com.zhichenhaixin.proto.Latlon center = 3;
  if (has_center()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->center(), target);
  }

  // required uint64 UTC = 4;
  if (has_utc()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->utc(), target);
  }

  // required bytes imageData = 5;
  if (has_imagedata()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        5, this->imagedata(), target);
  }

  // required uint32 width = 6;
  if (has_width()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->width(), target);
  }

  // required uint32 height = 7;
  if (has_height()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(7, this->height(), target);
  }

  // required double radius = 8;
  if (has_radius()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(8, this->radius(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.zhichenhaixin.proto.RadarVideoImage)
  return target;
}

int RadarVideoImage::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 radarId = 1;
    if (has_radarid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->radarid());
    }

    // required string radarName = 2;
    if (has_radarname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->radarname());
    }

    // required .com.zhichenhaixin.proto.Latlon center = 3;
    if (has_center()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->center());
    }

    // required uint64 UTC = 4;
    if (has_utc()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->utc());
    }

    // required bytes imageData = 5;
    if (has_imagedata()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->imagedata());
    }

    // required uint32 width = 6;
    if (has_width()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->width());
    }

    // required uint32 height = 7;
    if (has_height()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->height());
    }

    // required double radius = 8;
    if (has_radius()) {
      total_size += 1 + 8;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RadarVideoImage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RadarVideoImage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RadarVideoImage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RadarVideoImage::MergeFrom(const RadarVideoImage& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_radarid()) {
      set_radarid(from.radarid());
    }
    if (from.has_radarname()) {
      set_radarname(from.radarname());
    }
    if (from.has_center()) {
      mutable_center()->::com::zhichenhaixin::proto::Latlon::MergeFrom(from.center());
    }
    if (from.has_utc()) {
      set_utc(from.utc());
    }
    if (from.has_imagedata()) {
      set_imagedata(from.imagedata());
    }
    if (from.has_width()) {
      set_width(from.width());
    }
    if (from.has_height()) {
      set_height(from.height());
    }
    if (from.has_radius()) {
      set_radius(from.radius());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RadarVideoImage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RadarVideoImage::CopyFrom(const RadarVideoImage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RadarVideoImage::IsInitialized() const {
  if ((_has_bits_[0] & 0x000000ff) != 0x000000ff) return false;

  if (has_center()) {
    if (!this->center().IsInitialized()) return false;
  }
  return true;
}

void RadarVideoImage::Swap(RadarVideoImage* other) {
  if (other != this) {
    std::swap(radarid_, other->radarid_);
    std::swap(radarname_, other->radarname_);
    std::swap(center_, other->center_);
    std::swap(utc_, other->utc_);
    std::swap(imagedata_, other->imagedata_);
    std::swap(width_, other->width_);
    std::swap(height_, other->height_);
    std::swap(radius_, other->radius_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RadarVideoImage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RadarVideoImage_descriptor_;
  metadata.reflection = RadarVideoImage_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace zhichenhaixin
}  // namespace com

// @@protoc_insertion_point(global_scope)
