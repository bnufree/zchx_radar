// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ZCHXRadarDataDef.proto

#ifndef PROTOBUF_ZCHXRadarDataDef_2eproto__INCLUDED
#define PROTOBUF_ZCHXRadarDataDef_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace com {
namespace zhichenhaixin {
namespace proto {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_ZCHXRadarDataDef_2eproto();
void protobuf_AssignDesc_ZCHXRadarDataDef_2eproto();
void protobuf_ShutdownFile_ZCHXRadarDataDef_2eproto();

class Latlon;
class PixelPoint;
class VideoImage;
class PredictionArea;
class Segment;
class BoundRect;
class RadarRectDef;
class RoutePath;
class RouteNode;
class RouteNodes;
class RadarRect;
class RadarRects;
class TrackPoint;
class RadarSurfaceTrack;
class RadarVideoImage;

enum MSGTYP {
  MSGTYP_UNDEFINED = 0,
  TARGET_REPORT = 1,
  START_OF_UPDATE_CYCLE = 2,
  PERIODIC_STATUS = 3,
  EVENT_TRIGGERED_STATUS = 4
};
bool MSGTYP_IsValid(int value);
const MSGTYP MSGTYP_MIN = MSGTYP_UNDEFINED;
const MSGTYP MSGTYP_MAX = EVENT_TRIGGERED_STATUS;
const int MSGTYP_ARRAYSIZE = MSGTYP_MAX + 1;

const ::google::protobuf::EnumDescriptor* MSGTYP_descriptor();
inline const ::std::string& MSGTYP_Name(MSGTYP value) {
  return ::google::protobuf::internal::NameOfEnum(
    MSGTYP_descriptor(), value);
}
inline bool MSGTYP_Parse(
    const ::std::string& name, MSGTYP* value) {
  return ::google::protobuf::internal::ParseNamedEnum<MSGTYP>(
    MSGTYP_descriptor(), name, value);
}
enum CNF {
  CONFIRMED_TRACK = 0,
  TENTATIVE_TRACK = 1,
  UNKNOWN_TRACK = 2
};
bool CNF_IsValid(int value);
const CNF CNF_MIN = CONFIRMED_TRACK;
const CNF CNF_MAX = UNKNOWN_TRACK;
const int CNF_ARRAYSIZE = CNF_MAX + 1;

const ::google::protobuf::EnumDescriptor* CNF_descriptor();
inline const ::std::string& CNF_Name(CNF value) {
  return ::google::protobuf::internal::NameOfEnum(
    CNF_descriptor(), value);
}
inline bool CNF_Parse(
    const ::std::string& name, CNF* value) {
  return ::google::protobuf::internal::ParseNamedEnum<CNF>(
    CNF_descriptor(), name, value);
}
enum CST {
  CST_UNDEFINED = 0,
  PREDICTABLE_EXTRAPOLATION_DUE_PERIOD = 1,
  PREDICTABLE_EXTRAPOLATION_IN_AREA = 2,
  EXTRAPOLATION_DUE_UNPREDICTABLE_DETECTION = 3
};
bool CST_IsValid(int value);
const CST CST_MIN = CST_UNDEFINED;
const CST CST_MAX = EXTRAPOLATION_DUE_UNPREDICTABLE_DETECTION;
const int CST_ARRAYSIZE = CST_MAX + 1;

const ::google::protobuf::EnumDescriptor* CST_descriptor();
inline const ::std::string& CST_Name(CST value) {
  return ::google::protobuf::internal::NameOfEnum(
    CST_descriptor(), value);
}
inline bool CST_Parse(
    const ::std::string& name, CST* value) {
  return ::google::protobuf::internal::ParseNamedEnum<CST>(
    CST_descriptor(), name, value);
}
enum STH {
  MEASURED_POSITION = 0,
  SMOOTHED_POSITION = 1
};
bool STH_IsValid(int value);
const STH STH_MIN = MEASURED_POSITION;
const STH STH_MAX = SMOOTHED_POSITION;
const int STH_ARRAYSIZE = STH_MAX + 1;

const ::google::protobuf::EnumDescriptor* STH_descriptor();
inline const ::std::string& STH_Name(STH value) {
  return ::google::protobuf::internal::NameOfEnum(
    STH_descriptor(), value);
}
inline bool STH_Parse(
    const ::std::string& name, STH* value) {
  return ::google::protobuf::internal::ParseNamedEnum<STH>(
    STH_descriptor(), name, value);
}
enum RES {
  MONOBIT_RESOLUTION = 1,
  LOW_RESOLUTION = 2,
  MEDIUM_RESOLUTION = 3,
  HIGH_RESOLUTION = 4,
  VERY_HIGH_RESOLUTION = 5,
  ULTRA_HIGH_RESOLUTION = 6
};
bool RES_IsValid(int value);
const RES RES_MIN = MONOBIT_RESOLUTION;
const RES RES_MAX = ULTRA_HIGH_RESOLUTION;
const int RES_ARRAYSIZE = RES_MAX + 1;

const ::google::protobuf::EnumDescriptor* RES_descriptor();
inline const ::std::string& RES_Name(RES value) {
  return ::google::protobuf::internal::NameOfEnum(
    RES_descriptor(), value);
}
inline bool RES_Parse(
    const ::std::string& name, RES* value) {
  return ::google::protobuf::internal::ParseNamedEnum<RES>(
    RES_descriptor(), name, value);
}
// ===================================================================

class Latlon : public ::google::protobuf::Message {
 public:
  Latlon();
  virtual ~Latlon();

  Latlon(const Latlon& from);

  inline Latlon& operator=(const Latlon& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Latlon& default_instance();

  void Swap(Latlon* other);

  // implements Message ----------------------------------------------

  Latlon* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Latlon& from);
  void MergeFrom(const Latlon& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required double latitude = 1;
  inline bool has_latitude() const;
  inline void clear_latitude();
  static const int kLatitudeFieldNumber = 1;
  inline double latitude() const;
  inline void set_latitude(double value);

  // required double longitude = 2;
  inline bool has_longitude() const;
  inline void clear_longitude();
  static const int kLongitudeFieldNumber = 2;
  inline double longitude() const;
  inline void set_longitude(double value);

  // @@protoc_insertion_point(class_scope:com.zhichenhaixin.proto.Latlon)
 private:
  inline void set_has_latitude();
  inline void clear_has_latitude();
  inline void set_has_longitude();
  inline void clear_has_longitude();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  double latitude_;
  double longitude_;
  friend void  protobuf_AddDesc_ZCHXRadarDataDef_2eproto();
  friend void protobuf_AssignDesc_ZCHXRadarDataDef_2eproto();
  friend void protobuf_ShutdownFile_ZCHXRadarDataDef_2eproto();

  void InitAsDefaultInstance();
  static Latlon* default_instance_;
};
// -------------------------------------------------------------------

class PixelPoint : public ::google::protobuf::Message {
 public:
  PixelPoint();
  virtual ~PixelPoint();

  PixelPoint(const PixelPoint& from);

  inline PixelPoint& operator=(const PixelPoint& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PixelPoint& default_instance();

  void Swap(PixelPoint* other);

  // implements Message ----------------------------------------------

  PixelPoint* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PixelPoint& from);
  void MergeFrom(const PixelPoint& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 x = 1;
  inline bool has_x() const;
  inline void clear_x();
  static const int kXFieldNumber = 1;
  inline ::google::protobuf::uint32 x() const;
  inline void set_x(::google::protobuf::uint32 value);

  // required uint32 y = 2;
  inline bool has_y() const;
  inline void clear_y();
  static const int kYFieldNumber = 2;
  inline ::google::protobuf::uint32 y() const;
  inline void set_y(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:com.zhichenhaixin.proto.PixelPoint)
 private:
  inline void set_has_x();
  inline void clear_has_x();
  inline void set_has_y();
  inline void clear_has_y();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 x_;
  ::google::protobuf::uint32 y_;
  friend void  protobuf_AddDesc_ZCHXRadarDataDef_2eproto();
  friend void protobuf_AssignDesc_ZCHXRadarDataDef_2eproto();
  friend void protobuf_ShutdownFile_ZCHXRadarDataDef_2eproto();

  void InitAsDefaultInstance();
  static PixelPoint* default_instance_;
};
// -------------------------------------------------------------------

class VideoImage : public ::google::protobuf::Message {
 public:
  VideoImage();
  virtual ~VideoImage();

  VideoImage(const VideoImage& from);

  inline VideoImage& operator=(const VideoImage& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const VideoImage& default_instance();

  void Swap(VideoImage* other);

  // implements Message ----------------------------------------------

  VideoImage* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const VideoImage& from);
  void MergeFrom(const VideoImage& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 width = 1;
  inline bool has_width() const;
  inline void clear_width();
  static const int kWidthFieldNumber = 1;
  inline ::google::protobuf::uint32 width() const;
  inline void set_width(::google::protobuf::uint32 value);

  // required uint32 height = 2;
  inline bool has_height() const;
  inline void clear_height();
  static const int kHeightFieldNumber = 2;
  inline ::google::protobuf::uint32 height() const;
  inline void set_height(::google::protobuf::uint32 value);

  // repeated .com.zhichenhaixin.proto.PixelPoint points = 3;
  inline int points_size() const;
  inline void clear_points();
  static const int kPointsFieldNumber = 3;
  inline const ::com::zhichenhaixin::proto::PixelPoint& points(int index) const;
  inline ::com::zhichenhaixin::proto::PixelPoint* mutable_points(int index);
  inline ::com::zhichenhaixin::proto::PixelPoint* add_points();
  inline const ::google::protobuf::RepeatedPtrField< ::com::zhichenhaixin::proto::PixelPoint >&
      points() const;
  inline ::google::protobuf::RepeatedPtrField< ::com::zhichenhaixin::proto::PixelPoint >*
      mutable_points();

  // @@protoc_insertion_point(class_scope:com.zhichenhaixin.proto.VideoImage)
 private:
  inline void set_has_width();
  inline void clear_has_width();
  inline void set_has_height();
  inline void clear_has_height();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 width_;
  ::google::protobuf::uint32 height_;
  ::google::protobuf::RepeatedPtrField< ::com::zhichenhaixin::proto::PixelPoint > points_;
  friend void  protobuf_AddDesc_ZCHXRadarDataDef_2eproto();
  friend void protobuf_AssignDesc_ZCHXRadarDataDef_2eproto();
  friend void protobuf_ShutdownFile_ZCHXRadarDataDef_2eproto();

  void InitAsDefaultInstance();
  static VideoImage* default_instance_;
};
// -------------------------------------------------------------------

class PredictionArea : public ::google::protobuf::Message {
 public:
  PredictionArea();
  virtual ~PredictionArea();

  PredictionArea(const PredictionArea& from);

  inline PredictionArea& operator=(const PredictionArea& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PredictionArea& default_instance();

  void Swap(PredictionArea* other);

  // implements Message ----------------------------------------------

  PredictionArea* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PredictionArea& from);
  void MergeFrom(const PredictionArea& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .com.zhichenhaixin.proto.Latlon area = 1;
  inline int area_size() const;
  inline void clear_area();
  static const int kAreaFieldNumber = 1;
  inline const ::com::zhichenhaixin::proto::Latlon& area(int index) const;
  inline ::com::zhichenhaixin::proto::Latlon* mutable_area(int index);
  inline ::com::zhichenhaixin::proto::Latlon* add_area();
  inline const ::google::protobuf::RepeatedPtrField< ::com::zhichenhaixin::proto::Latlon >&
      area() const;
  inline ::google::protobuf::RepeatedPtrField< ::com::zhichenhaixin::proto::Latlon >*
      mutable_area();

  // @@protoc_insertion_point(class_scope:com.zhichenhaixin.proto.PredictionArea)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::com::zhichenhaixin::proto::Latlon > area_;
  friend void  protobuf_AddDesc_ZCHXRadarDataDef_2eproto();
  friend void protobuf_AssignDesc_ZCHXRadarDataDef_2eproto();
  friend void protobuf_ShutdownFile_ZCHXRadarDataDef_2eproto();

  void InitAsDefaultInstance();
  static PredictionArea* default_instance_;
};
// -------------------------------------------------------------------

class Segment : public ::google::protobuf::Message {
 public:
  Segment();
  virtual ~Segment();

  Segment(const Segment& from);

  inline Segment& operator=(const Segment& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Segment& default_instance();

  void Swap(Segment* other);

  // implements Message ----------------------------------------------

  Segment* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Segment& from);
  void MergeFrom(const Segment& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .com.zhichenhaixin.proto.Latlon start = 1;
  inline bool has_start() const;
  inline void clear_start();
  static const int kStartFieldNumber = 1;
  inline const ::com::zhichenhaixin::proto::Latlon& start() const;
  inline ::com::zhichenhaixin::proto::Latlon* mutable_start();
  inline ::com::zhichenhaixin::proto::Latlon* release_start();
  inline void set_allocated_start(::com::zhichenhaixin::proto::Latlon* start);

  // required .com.zhichenhaixin.proto.Latlon end = 2;
  inline bool has_end() const;
  inline void clear_end();
  static const int kEndFieldNumber = 2;
  inline const ::com::zhichenhaixin::proto::Latlon& end() const;
  inline ::com::zhichenhaixin::proto::Latlon* mutable_end();
  inline ::com::zhichenhaixin::proto::Latlon* release_end();
  inline void set_allocated_end(::com::zhichenhaixin::proto::Latlon* end);

  // optional double angle = 3;
  inline bool has_angle() const;
  inline void clear_angle();
  static const int kAngleFieldNumber = 3;
  inline double angle() const;
  inline void set_angle(double value);

  // @@protoc_insertion_point(class_scope:com.zhichenhaixin.proto.Segment)
 private:
  inline void set_has_start();
  inline void clear_has_start();
  inline void set_has_end();
  inline void clear_has_end();
  inline void set_has_angle();
  inline void clear_has_angle();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::com::zhichenhaixin::proto::Latlon* start_;
  ::com::zhichenhaixin::proto::Latlon* end_;
  double angle_;
  friend void  protobuf_AddDesc_ZCHXRadarDataDef_2eproto();
  friend void protobuf_AssignDesc_ZCHXRadarDataDef_2eproto();
  friend void protobuf_ShutdownFile_ZCHXRadarDataDef_2eproto();

  void InitAsDefaultInstance();
  static Segment* default_instance_;
};
// -------------------------------------------------------------------

class BoundRect : public ::google::protobuf::Message {
 public:
  BoundRect();
  virtual ~BoundRect();

  BoundRect(const BoundRect& from);

  inline BoundRect& operator=(const BoundRect& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BoundRect& default_instance();

  void Swap(BoundRect* other);

  // implements Message ----------------------------------------------

  BoundRect* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BoundRect& from);
  void MergeFrom(const BoundRect& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .com.zhichenhaixin.proto.Latlon topLeft = 1;
  inline bool has_topleft() const;
  inline void clear_topleft();
  static const int kTopLeftFieldNumber = 1;
  inline const ::com::zhichenhaixin::proto::Latlon& topleft() const;
  inline ::com::zhichenhaixin::proto::Latlon* mutable_topleft();
  inline ::com::zhichenhaixin::proto::Latlon* release_topleft();
  inline void set_allocated_topleft(::com::zhichenhaixin::proto::Latlon* topleft);

  // required .com.zhichenhaixin.proto.Latlon bottomRight = 2;
  inline bool has_bottomright() const;
  inline void clear_bottomright();
  static const int kBottomRightFieldNumber = 2;
  inline const ::com::zhichenhaixin::proto::Latlon& bottomright() const;
  inline ::com::zhichenhaixin::proto::Latlon* mutable_bottomright();
  inline ::com::zhichenhaixin::proto::Latlon* release_bottomright();
  inline void set_allocated_bottomright(::com::zhichenhaixin::proto::Latlon* bottomright);

  // optional int32 diameter = 3;
  inline bool has_diameter() const;
  inline void clear_diameter();
  static const int kDiameterFieldNumber = 3;
  inline ::google::protobuf::int32 diameter() const;
  inline void set_diameter(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:com.zhichenhaixin.proto.BoundRect)
 private:
  inline void set_has_topleft();
  inline void clear_has_topleft();
  inline void set_has_bottomright();
  inline void clear_has_bottomright();
  inline void set_has_diameter();
  inline void clear_has_diameter();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::com::zhichenhaixin::proto::Latlon* topleft_;
  ::com::zhichenhaixin::proto::Latlon* bottomright_;
  ::google::protobuf::int32 diameter_;
  friend void  protobuf_AddDesc_ZCHXRadarDataDef_2eproto();
  friend void protobuf_AssignDesc_ZCHXRadarDataDef_2eproto();
  friend void protobuf_ShutdownFile_ZCHXRadarDataDef_2eproto();

  void InitAsDefaultInstance();
  static BoundRect* default_instance_;
};
// -------------------------------------------------------------------

class RadarRectDef : public ::google::protobuf::Message {
 public:
  RadarRectDef();
  virtual ~RadarRectDef();

  RadarRectDef(const RadarRectDef& from);

  inline RadarRectDef& operator=(const RadarRectDef& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RadarRectDef& default_instance();

  void Swap(RadarRectDef* other);

  // implements Message ----------------------------------------------

  RadarRectDef* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RadarRectDef& from);
  void MergeFrom(const RadarRectDef& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 rectNumber = 1;
  inline bool has_rectnumber() const;
  inline void clear_rectnumber();
  static const int kRectNumberFieldNumber = 1;
  inline ::google::protobuf::uint32 rectnumber() const;
  inline void set_rectnumber(::google::protobuf::uint32 value);

  // required .com.zhichenhaixin.proto.Latlon center = 2;
  inline bool has_center() const;
  inline void clear_center();
  static const int kCenterFieldNumber = 2;
  inline const ::com::zhichenhaixin::proto::Latlon& center() const;
  inline ::com::zhichenhaixin::proto::Latlon* mutable_center();
  inline ::com::zhichenhaixin::proto::Latlon* release_center();
  inline void set_allocated_center(::com::zhichenhaixin::proto::Latlon* center);

  // required uint32 updateTime = 3;
  inline bool has_updatetime() const;
  inline void clear_updatetime();
  static const int kUpdateTimeFieldNumber = 3;
  inline ::google::protobuf::uint32 updatetime() const;
  inline void set_updatetime(::google::protobuf::uint32 value);

  // required bool realData = 4;
  inline bool has_realdata() const;
  inline void clear_realdata();
  static const int kRealDataFieldNumber = 4;
  inline bool realdata() const;
  inline void set_realdata(bool value);

  // required double sogKnot = 5;
  inline bool has_sogknot() const;
  inline void clear_sogknot();
  static const int kSogKnotFieldNumber = 5;
  inline double sogknot() const;
  inline void set_sogknot(double value);

  // required double sogMS = 6;
  inline bool has_sogms() const;
  inline void clear_sogms();
  static const int kSogMSFieldNumber = 6;
  inline double sogms() const;
  inline void set_sogms(double value);

  // required double cog = 7;
  inline bool has_cog() const;
  inline void clear_cog();
  static const int kCogFieldNumber = 7;
  inline double cog() const;
  inline void set_cog(double value);

  // repeated .com.zhichenhaixin.proto.Latlon outline = 8;
  inline int outline_size() const;
  inline void clear_outline();
  static const int kOutlineFieldNumber = 8;
  inline const ::com::zhichenhaixin::proto::Latlon& outline(int index) const;
  inline ::com::zhichenhaixin::proto::Latlon* mutable_outline(int index);
  inline ::com::zhichenhaixin::proto::Latlon* add_outline();
  inline const ::google::protobuf::RepeatedPtrField< ::com::zhichenhaixin::proto::Latlon >&
      outline() const;
  inline ::google::protobuf::RepeatedPtrField< ::com::zhichenhaixin::proto::Latlon >*
      mutable_outline();

  // optional .com.zhichenhaixin.proto.BoundRect boundRect = 9;
  inline bool has_boundrect() const;
  inline void clear_boundrect();
  static const int kBoundRectFieldNumber = 9;
  inline const ::com::zhichenhaixin::proto::BoundRect& boundrect() const;
  inline ::com::zhichenhaixin::proto::BoundRect* mutable_boundrect();
  inline ::com::zhichenhaixin::proto::BoundRect* release_boundrect();
  inline void set_allocated_boundrect(::com::zhichenhaixin::proto::BoundRect* boundrect);

  // optional .com.zhichenhaixin.proto.Segment seg = 10;
  inline bool has_seg() const;
  inline void clear_seg();
  static const int kSegFieldNumber = 10;
  inline const ::com::zhichenhaixin::proto::Segment& seg() const;
  inline ::com::zhichenhaixin::proto::Segment* mutable_seg();
  inline ::com::zhichenhaixin::proto::Segment* release_seg();
  inline void set_allocated_seg(::com::zhichenhaixin::proto::Segment* seg);

  // optional .com.zhichenhaixin.proto.VideoImage fixedImg = 11;
  inline bool has_fixedimg() const;
  inline void clear_fixedimg();
  static const int kFixedImgFieldNumber = 11;
  inline const ::com::zhichenhaixin::proto::VideoImage& fixedimg() const;
  inline ::com::zhichenhaixin::proto::VideoImage* mutable_fixedimg();
  inline ::com::zhichenhaixin::proto::VideoImage* release_fixedimg();
  inline void set_allocated_fixedimg(::com::zhichenhaixin::proto::VideoImage* fixedimg);

  // optional .com.zhichenhaixin.proto.PredictionArea prediction = 12;
  inline bool has_prediction() const;
  inline void clear_prediction();
  static const int kPredictionFieldNumber = 12;
  inline const ::com::zhichenhaixin::proto::PredictionArea& prediction() const;
  inline ::com::zhichenhaixin::proto::PredictionArea* mutable_prediction();
  inline ::com::zhichenhaixin::proto::PredictionArea* release_prediction();
  inline void set_allocated_prediction(::com::zhichenhaixin::proto::PredictionArea* prediction);

  // optional int32 videoCycleIndex = 13;
  inline bool has_videocycleindex() const;
  inline void clear_videocycleindex();
  static const int kVideoCycleIndexFieldNumber = 13;
  inline ::google::protobuf::int32 videocycleindex() const;
  inline void set_videocycleindex(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:com.zhichenhaixin.proto.RadarRectDef)
 private:
  inline void set_has_rectnumber();
  inline void clear_has_rectnumber();
  inline void set_has_center();
  inline void clear_has_center();
  inline void set_has_updatetime();
  inline void clear_has_updatetime();
  inline void set_has_realdata();
  inline void clear_has_realdata();
  inline void set_has_sogknot();
  inline void clear_has_sogknot();
  inline void set_has_sogms();
  inline void clear_has_sogms();
  inline void set_has_cog();
  inline void clear_has_cog();
  inline void set_has_boundrect();
  inline void clear_has_boundrect();
  inline void set_has_seg();
  inline void clear_has_seg();
  inline void set_has_fixedimg();
  inline void clear_has_fixedimg();
  inline void set_has_prediction();
  inline void clear_has_prediction();
  inline void set_has_videocycleindex();
  inline void clear_has_videocycleindex();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::com::zhichenhaixin::proto::Latlon* center_;
  ::google::protobuf::uint32 rectnumber_;
  ::google::protobuf::uint32 updatetime_;
  double sogknot_;
  double sogms_;
  double cog_;
  ::google::protobuf::RepeatedPtrField< ::com::zhichenhaixin::proto::Latlon > outline_;
  bool realdata_;
  ::google::protobuf::int32 videocycleindex_;
  ::com::zhichenhaixin::proto::BoundRect* boundrect_;
  ::com::zhichenhaixin::proto::Segment* seg_;
  ::com::zhichenhaixin::proto::VideoImage* fixedimg_;
  ::com::zhichenhaixin::proto::PredictionArea* prediction_;
  friend void  protobuf_AddDesc_ZCHXRadarDataDef_2eproto();
  friend void protobuf_AssignDesc_ZCHXRadarDataDef_2eproto();
  friend void protobuf_ShutdownFile_ZCHXRadarDataDef_2eproto();

  void InitAsDefaultInstance();
  static RadarRectDef* default_instance_;
};
// -------------------------------------------------------------------

class RoutePath : public ::google::protobuf::Message {
 public:
  RoutePath();
  virtual ~RoutePath();

  RoutePath(const RoutePath& from);

  inline RoutePath& operator=(const RoutePath& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RoutePath& default_instance();

  void Swap(RoutePath* other);

  // implements Message ----------------------------------------------

  RoutePath* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RoutePath& from);
  void MergeFrom(const RoutePath& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .com.zhichenhaixin.proto.RadarRectDef path = 1;
  inline int path_size() const;
  inline void clear_path();
  static const int kPathFieldNumber = 1;
  inline const ::com::zhichenhaixin::proto::RadarRectDef& path(int index) const;
  inline ::com::zhichenhaixin::proto::RadarRectDef* mutable_path(int index);
  inline ::com::zhichenhaixin::proto::RadarRectDef* add_path();
  inline const ::google::protobuf::RepeatedPtrField< ::com::zhichenhaixin::proto::RadarRectDef >&
      path() const;
  inline ::google::protobuf::RepeatedPtrField< ::com::zhichenhaixin::proto::RadarRectDef >*
      mutable_path();

  // @@protoc_insertion_point(class_scope:com.zhichenhaixin.proto.RoutePath)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::com::zhichenhaixin::proto::RadarRectDef > path_;
  friend void  protobuf_AddDesc_ZCHXRadarDataDef_2eproto();
  friend void protobuf_AssignDesc_ZCHXRadarDataDef_2eproto();
  friend void protobuf_ShutdownFile_ZCHXRadarDataDef_2eproto();

  void InitAsDefaultInstance();
  static RoutePath* default_instance_;
};
// -------------------------------------------------------------------

class RouteNode : public ::google::protobuf::Message {
 public:
  RouteNode();
  virtual ~RouteNode();

  RouteNode(const RouteNode& from);

  inline RouteNode& operator=(const RouteNode& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RouteNode& default_instance();

  void Swap(RouteNode* other);

  // implements Message ----------------------------------------------

  RouteNode* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RouteNode& from);
  void MergeFrom(const RouteNode& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 node_num = 1;
  inline bool has_node_num() const;
  inline void clear_node_num();
  static const int kNodeNumFieldNumber = 1;
  inline ::google::protobuf::int32 node_num() const;
  inline void set_node_num(::google::protobuf::int32 value);

  // required .com.zhichenhaixin.proto.RadarRectDef top_node = 2;
  inline bool has_top_node() const;
  inline void clear_top_node();
  static const int kTopNodeFieldNumber = 2;
  inline const ::com::zhichenhaixin::proto::RadarRectDef& top_node() const;
  inline ::com::zhichenhaixin::proto::RadarRectDef* mutable_top_node();
  inline ::com::zhichenhaixin::proto::RadarRectDef* release_top_node();
  inline void set_allocated_top_node(::com::zhichenhaixin::proto::RadarRectDef* top_node);

  // repeated .com.zhichenhaixin.proto.RoutePath path_list = 3;
  inline int path_list_size() const;
  inline void clear_path_list();
  static const int kPathListFieldNumber = 3;
  inline const ::com::zhichenhaixin::proto::RoutePath& path_list(int index) const;
  inline ::com::zhichenhaixin::proto::RoutePath* mutable_path_list(int index);
  inline ::com::zhichenhaixin::proto::RoutePath* add_path_list();
  inline const ::google::protobuf::RepeatedPtrField< ::com::zhichenhaixin::proto::RoutePath >&
      path_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::com::zhichenhaixin::proto::RoutePath >*
      mutable_path_list();

  // @@protoc_insertion_point(class_scope:com.zhichenhaixin.proto.RouteNode)
 private:
  inline void set_has_node_num();
  inline void clear_has_node_num();
  inline void set_has_top_node();
  inline void clear_has_top_node();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::com::zhichenhaixin::proto::RadarRectDef* top_node_;
  ::google::protobuf::RepeatedPtrField< ::com::zhichenhaixin::proto::RoutePath > path_list_;
  ::google::protobuf::int32 node_num_;
  friend void  protobuf_AddDesc_ZCHXRadarDataDef_2eproto();
  friend void protobuf_AssignDesc_ZCHXRadarDataDef_2eproto();
  friend void protobuf_ShutdownFile_ZCHXRadarDataDef_2eproto();

  void InitAsDefaultInstance();
  static RouteNode* default_instance_;
};
// -------------------------------------------------------------------

class RouteNodes : public ::google::protobuf::Message {
 public:
  RouteNodes();
  virtual ~RouteNodes();

  RouteNodes(const RouteNodes& from);

  inline RouteNodes& operator=(const RouteNodes& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RouteNodes& default_instance();

  void Swap(RouteNodes* other);

  // implements Message ----------------------------------------------

  RouteNodes* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RouteNodes& from);
  void MergeFrom(const RouteNodes& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .com.zhichenhaixin.proto.RouteNode node_list = 1;
  inline int node_list_size() const;
  inline void clear_node_list();
  static const int kNodeListFieldNumber = 1;
  inline const ::com::zhichenhaixin::proto::RouteNode& node_list(int index) const;
  inline ::com::zhichenhaixin::proto::RouteNode* mutable_node_list(int index);
  inline ::com::zhichenhaixin::proto::RouteNode* add_node_list();
  inline const ::google::protobuf::RepeatedPtrField< ::com::zhichenhaixin::proto::RouteNode >&
      node_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::com::zhichenhaixin::proto::RouteNode >*
      mutable_node_list();

  // @@protoc_insertion_point(class_scope:com.zhichenhaixin.proto.RouteNodes)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::com::zhichenhaixin::proto::RouteNode > node_list_;
  friend void  protobuf_AddDesc_ZCHXRadarDataDef_2eproto();
  friend void protobuf_AssignDesc_ZCHXRadarDataDef_2eproto();
  friend void protobuf_ShutdownFile_ZCHXRadarDataDef_2eproto();

  void InitAsDefaultInstance();
  static RouteNodes* default_instance_;
};
// -------------------------------------------------------------------

class RadarRect : public ::google::protobuf::Message {
 public:
  RadarRect();
  virtual ~RadarRect();

  RadarRect(const RadarRect& from);

  inline RadarRect& operator=(const RadarRect& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RadarRect& default_instance();

  void Swap(RadarRect* other);

  // implements Message ----------------------------------------------

  RadarRect* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RadarRect& from);
  void MergeFrom(const RadarRect& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .com.zhichenhaixin.proto.RadarRectDef current_rect = 1;
  inline bool has_current_rect() const;
  inline void clear_current_rect();
  static const int kCurrentRectFieldNumber = 1;
  inline const ::com::zhichenhaixin::proto::RadarRectDef& current_rect() const;
  inline ::com::zhichenhaixin::proto::RadarRectDef* mutable_current_rect();
  inline ::com::zhichenhaixin::proto::RadarRectDef* release_current_rect();
  inline void set_allocated_current_rect(::com::zhichenhaixin::proto::RadarRectDef* current_rect);

  // repeated .com.zhichenhaixin.proto.RadarRectDef history_rect_list = 2;
  inline int history_rect_list_size() const;
  inline void clear_history_rect_list();
  static const int kHistoryRectListFieldNumber = 2;
  inline const ::com::zhichenhaixin::proto::RadarRectDef& history_rect_list(int index) const;
  inline ::com::zhichenhaixin::proto::RadarRectDef* mutable_history_rect_list(int index);
  inline ::com::zhichenhaixin::proto::RadarRectDef* add_history_rect_list();
  inline const ::google::protobuf::RepeatedPtrField< ::com::zhichenhaixin::proto::RadarRectDef >&
      history_rect_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::com::zhichenhaixin::proto::RadarRectDef >*
      mutable_history_rect_list();

  // required bool dir_confirmed = 3;
  inline bool has_dir_confirmed() const;
  inline void clear_dir_confirmed();
  static const int kDirConfirmedFieldNumber = 3;
  inline bool dir_confirmed() const;
  inline void set_dir_confirmed(bool value);

  // required uint32 cur_est_count = 4;
  inline bool has_cur_est_count() const;
  inline void clear_cur_est_count();
  static const int kCurEstCountFieldNumber = 4;
  inline ::google::protobuf::uint32 cur_est_count() const;
  inline void set_cur_est_count(::google::protobuf::uint32 value);

  // required int32 node_num = 5;
  inline bool has_node_num() const;
  inline void clear_node_num();
  static const int kNodeNumFieldNumber = 5;
  inline ::google::protobuf::int32 node_num() const;
  inline void set_node_num(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:com.zhichenhaixin.proto.RadarRect)
 private:
  inline void set_has_current_rect();
  inline void clear_has_current_rect();
  inline void set_has_dir_confirmed();
  inline void clear_has_dir_confirmed();
  inline void set_has_cur_est_count();
  inline void clear_has_cur_est_count();
  inline void set_has_node_num();
  inline void clear_has_node_num();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::com::zhichenhaixin::proto::RadarRectDef* current_rect_;
  ::google::protobuf::RepeatedPtrField< ::com::zhichenhaixin::proto::RadarRectDef > history_rect_list_;
  bool dir_confirmed_;
  ::google::protobuf::uint32 cur_est_count_;
  ::google::protobuf::int32 node_num_;
  friend void  protobuf_AddDesc_ZCHXRadarDataDef_2eproto();
  friend void protobuf_AssignDesc_ZCHXRadarDataDef_2eproto();
  friend void protobuf_ShutdownFile_ZCHXRadarDataDef_2eproto();

  void InitAsDefaultInstance();
  static RadarRect* default_instance_;
};
// -------------------------------------------------------------------

class RadarRects : public ::google::protobuf::Message {
 public:
  RadarRects();
  virtual ~RadarRects();

  RadarRects(const RadarRects& from);

  inline RadarRects& operator=(const RadarRects& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RadarRects& default_instance();

  void Swap(RadarRects* other);

  // implements Message ----------------------------------------------

  RadarRects* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RadarRects& from);
  void MergeFrom(const RadarRects& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint64 UTC = 1;
  inline bool has_utc() const;
  inline void clear_utc();
  static const int kUTCFieldNumber = 1;
  inline ::google::protobuf::uint64 utc() const;
  inline void set_utc(::google::protobuf::uint64 value);

  // required int32 length = 2;
  inline bool has_length() const;
  inline void clear_length();
  static const int kLengthFieldNumber = 2;
  inline ::google::protobuf::int32 length() const;
  inline void set_length(::google::protobuf::int32 value);

  // repeated .com.zhichenhaixin.proto.RadarRect rect_list = 3;
  inline int rect_list_size() const;
  inline void clear_rect_list();
  static const int kRectListFieldNumber = 3;
  inline const ::com::zhichenhaixin::proto::RadarRect& rect_list(int index) const;
  inline ::com::zhichenhaixin::proto::RadarRect* mutable_rect_list(int index);
  inline ::com::zhichenhaixin::proto::RadarRect* add_rect_list();
  inline const ::google::protobuf::RepeatedPtrField< ::com::zhichenhaixin::proto::RadarRect >&
      rect_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::com::zhichenhaixin::proto::RadarRect >*
      mutable_rect_list();

  // @@protoc_insertion_point(class_scope:com.zhichenhaixin.proto.RadarRects)
 private:
  inline void set_has_utc();
  inline void clear_has_utc();
  inline void set_has_length();
  inline void clear_has_length();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 utc_;
  ::google::protobuf::RepeatedPtrField< ::com::zhichenhaixin::proto::RadarRect > rect_list_;
  ::google::protobuf::int32 length_;
  friend void  protobuf_AddDesc_ZCHXRadarDataDef_2eproto();
  friend void protobuf_AssignDesc_ZCHXRadarDataDef_2eproto();
  friend void protobuf_ShutdownFile_ZCHXRadarDataDef_2eproto();

  void InitAsDefaultInstance();
  static RadarRects* default_instance_;
};
// -------------------------------------------------------------------

class TrackPoint : public ::google::protobuf::Message {
 public:
  TrackPoint();
  virtual ~TrackPoint();

  TrackPoint(const TrackPoint& from);

  inline TrackPoint& operator=(const TrackPoint& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TrackPoint& default_instance();

  void Swap(TrackPoint* other);

  // implements Message ----------------------------------------------

  TrackPoint* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TrackPoint& from);
  void MergeFrom(const TrackPoint& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string radarSiteID = 1;
  inline bool has_radarsiteid() const;
  inline void clear_radarsiteid();
  static const int kRadarSiteIDFieldNumber = 1;
  inline const ::std::string& radarsiteid() const;
  inline void set_radarsiteid(const ::std::string& value);
  inline void set_radarsiteid(const char* value);
  inline void set_radarsiteid(const char* value, size_t size);
  inline ::std::string* mutable_radarsiteid();
  inline ::std::string* release_radarsiteid();
  inline void set_allocated_radarsiteid(::std::string* radarsiteid);

  // required uint32 trackNumber = 2;
  inline bool has_tracknumber() const;
  inline void clear_tracknumber();
  static const int kTrackNumberFieldNumber = 2;
  inline ::google::protobuf::uint32 tracknumber() const;
  inline void set_tracknumber(::google::protobuf::uint32 value);

  // required .com.zhichenhaixin.proto.RadarRectDef current = 3;
  inline bool has_current() const;
  inline void clear_current();
  static const int kCurrentFieldNumber = 3;
  inline const ::com::zhichenhaixin::proto::RadarRectDef& current() const;
  inline ::com::zhichenhaixin::proto::RadarRectDef* mutable_current();
  inline ::com::zhichenhaixin::proto::RadarRectDef* release_current();
  inline void set_allocated_current(::com::zhichenhaixin::proto::RadarRectDef* current);

  // repeated .com.zhichenhaixin.proto.RadarRectDef tracks = 4;
  inline int tracks_size() const;
  inline void clear_tracks();
  static const int kTracksFieldNumber = 4;
  inline const ::com::zhichenhaixin::proto::RadarRectDef& tracks(int index) const;
  inline ::com::zhichenhaixin::proto::RadarRectDef* mutable_tracks(int index);
  inline ::com::zhichenhaixin::proto::RadarRectDef* add_tracks();
  inline const ::google::protobuf::RepeatedPtrField< ::com::zhichenhaixin::proto::RadarRectDef >&
      tracks() const;
  inline ::google::protobuf::RepeatedPtrField< ::com::zhichenhaixin::proto::RadarRectDef >*
      mutable_tracks();

  // optional bool trackConfirmed = 5;
  inline bool has_trackconfirmed() const;
  inline void clear_trackconfirmed();
  static const int kTrackConfirmedFieldNumber = 5;
  inline bool trackconfirmed() const;
  inline void set_trackconfirmed(bool value);

  // optional int32 objType = 6;
  inline bool has_objtype() const;
  inline void clear_objtype();
  static const int kObjTypeFieldNumber = 6;
  inline ::google::protobuf::int32 objtype() const;
  inline void set_objtype(::google::protobuf::int32 value);

  // optional string objName = 7;
  inline bool has_objname() const;
  inline void clear_objname();
  static const int kObjNameFieldNumber = 7;
  inline const ::std::string& objname() const;
  inline void set_objname(const ::std::string& value);
  inline void set_objname(const char* value);
  inline void set_objname(const char* value, size_t size);
  inline ::std::string* mutable_objname();
  inline ::std::string* release_objname();
  inline void set_allocated_objname(::std::string* objname);

  // @@protoc_insertion_point(class_scope:com.zhichenhaixin.proto.TrackPoint)
 private:
  inline void set_has_radarsiteid();
  inline void clear_has_radarsiteid();
  inline void set_has_tracknumber();
  inline void clear_has_tracknumber();
  inline void set_has_current();
  inline void clear_has_current();
  inline void set_has_trackconfirmed();
  inline void clear_has_trackconfirmed();
  inline void set_has_objtype();
  inline void clear_has_objtype();
  inline void set_has_objname();
  inline void clear_has_objname();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* radarsiteid_;
  ::com::zhichenhaixin::proto::RadarRectDef* current_;
  ::google::protobuf::uint32 tracknumber_;
  bool trackconfirmed_;
  ::google::protobuf::RepeatedPtrField< ::com::zhichenhaixin::proto::RadarRectDef > tracks_;
  ::std::string* objname_;
  ::google::protobuf::int32 objtype_;
  friend void  protobuf_AddDesc_ZCHXRadarDataDef_2eproto();
  friend void protobuf_AssignDesc_ZCHXRadarDataDef_2eproto();
  friend void protobuf_ShutdownFile_ZCHXRadarDataDef_2eproto();

  void InitAsDefaultInstance();
  static TrackPoint* default_instance_;
};
// -------------------------------------------------------------------

class RadarSurfaceTrack : public ::google::protobuf::Message {
 public:
  RadarSurfaceTrack();
  virtual ~RadarSurfaceTrack();

  RadarSurfaceTrack(const RadarSurfaceTrack& from);

  inline RadarSurfaceTrack& operator=(const RadarSurfaceTrack& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RadarSurfaceTrack& default_instance();

  void Swap(RadarSurfaceTrack* other);

  // implements Message ----------------------------------------------

  RadarSurfaceTrack* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RadarSurfaceTrack& from);
  void MergeFrom(const RadarSurfaceTrack& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 flag = 1;
  inline bool has_flag() const;
  inline void clear_flag();
  static const int kFlagFieldNumber = 1;
  inline ::google::protobuf::int32 flag() const;
  inline void set_flag(::google::protobuf::int32 value);

  // required string sourceId = 2;
  inline bool has_sourceid() const;
  inline void clear_sourceid();
  static const int kSourceIdFieldNumber = 2;
  inline const ::std::string& sourceid() const;
  inline void set_sourceid(const ::std::string& value);
  inline void set_sourceid(const char* value);
  inline void set_sourceid(const char* value, size_t size);
  inline ::std::string* mutable_sourceid();
  inline ::std::string* release_sourceid();
  inline void set_allocated_sourceid(::std::string* sourceid);

  // required uint64 UTC = 3;
  inline bool has_utc() const;
  inline void clear_utc();
  static const int kUTCFieldNumber = 3;
  inline ::google::protobuf::uint64 utc() const;
  inline void set_utc(::google::protobuf::uint64 value);

  // required int32 length = 4;
  inline bool has_length() const;
  inline void clear_length();
  static const int kLengthFieldNumber = 4;
  inline ::google::protobuf::int32 length() const;
  inline void set_length(::google::protobuf::int32 value);

  // repeated .com.zhichenhaixin.proto.TrackPoint trackPoints = 5;
  inline int trackpoints_size() const;
  inline void clear_trackpoints();
  static const int kTrackPointsFieldNumber = 5;
  inline const ::com::zhichenhaixin::proto::TrackPoint& trackpoints(int index) const;
  inline ::com::zhichenhaixin::proto::TrackPoint* mutable_trackpoints(int index);
  inline ::com::zhichenhaixin::proto::TrackPoint* add_trackpoints();
  inline const ::google::protobuf::RepeatedPtrField< ::com::zhichenhaixin::proto::TrackPoint >&
      trackpoints() const;
  inline ::google::protobuf::RepeatedPtrField< ::com::zhichenhaixin::proto::TrackPoint >*
      mutable_trackpoints();

  // @@protoc_insertion_point(class_scope:com.zhichenhaixin.proto.RadarSurfaceTrack)
 private:
  inline void set_has_flag();
  inline void clear_has_flag();
  inline void set_has_sourceid();
  inline void clear_has_sourceid();
  inline void set_has_utc();
  inline void clear_has_utc();
  inline void set_has_length();
  inline void clear_has_length();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* sourceid_;
  ::google::protobuf::int32 flag_;
  ::google::protobuf::int32 length_;
  ::google::protobuf::uint64 utc_;
  ::google::protobuf::RepeatedPtrField< ::com::zhichenhaixin::proto::TrackPoint > trackpoints_;
  friend void  protobuf_AddDesc_ZCHXRadarDataDef_2eproto();
  friend void protobuf_AssignDesc_ZCHXRadarDataDef_2eproto();
  friend void protobuf_ShutdownFile_ZCHXRadarDataDef_2eproto();

  void InitAsDefaultInstance();
  static RadarSurfaceTrack* default_instance_;
};
// -------------------------------------------------------------------

class RadarVideoImage : public ::google::protobuf::Message {
 public:
  RadarVideoImage();
  virtual ~RadarVideoImage();

  RadarVideoImage(const RadarVideoImage& from);

  inline RadarVideoImage& operator=(const RadarVideoImage& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RadarVideoImage& default_instance();

  void Swap(RadarVideoImage* other);

  // implements Message ----------------------------------------------

  RadarVideoImage* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RadarVideoImage& from);
  void MergeFrom(const RadarVideoImage& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint64 radarId = 1;
  inline bool has_radarid() const;
  inline void clear_radarid();
  static const int kRadarIdFieldNumber = 1;
  inline ::google::protobuf::uint64 radarid() const;
  inline void set_radarid(::google::protobuf::uint64 value);

  // required string radarName = 2;
  inline bool has_radarname() const;
  inline void clear_radarname();
  static const int kRadarNameFieldNumber = 2;
  inline const ::std::string& radarname() const;
  inline void set_radarname(const ::std::string& value);
  inline void set_radarname(const char* value);
  inline void set_radarname(const char* value, size_t size);
  inline ::std::string* mutable_radarname();
  inline ::std::string* release_radarname();
  inline void set_allocated_radarname(::std::string* radarname);

  // required .com.zhichenhaixin.proto.Latlon center = 3;
  inline bool has_center() const;
  inline void clear_center();
  static const int kCenterFieldNumber = 3;
  inline const ::com::zhichenhaixin::proto::Latlon& center() const;
  inline ::com::zhichenhaixin::proto::Latlon* mutable_center();
  inline ::com::zhichenhaixin::proto::Latlon* release_center();
  inline void set_allocated_center(::com::zhichenhaixin::proto::Latlon* center);

  // required uint64 UTC = 4;
  inline bool has_utc() const;
  inline void clear_utc();
  static const int kUTCFieldNumber = 4;
  inline ::google::protobuf::uint64 utc() const;
  inline void set_utc(::google::protobuf::uint64 value);

  // required bytes imageData = 5;
  inline bool has_imagedata() const;
  inline void clear_imagedata();
  static const int kImageDataFieldNumber = 5;
  inline const ::std::string& imagedata() const;
  inline void set_imagedata(const ::std::string& value);
  inline void set_imagedata(const char* value);
  inline void set_imagedata(const void* value, size_t size);
  inline ::std::string* mutable_imagedata();
  inline ::std::string* release_imagedata();
  inline void set_allocated_imagedata(::std::string* imagedata);

  // required uint32 width = 6;
  inline bool has_width() const;
  inline void clear_width();
  static const int kWidthFieldNumber = 6;
  inline ::google::protobuf::uint32 width() const;
  inline void set_width(::google::protobuf::uint32 value);

  // required uint32 height = 7;
  inline bool has_height() const;
  inline void clear_height();
  static const int kHeightFieldNumber = 7;
  inline ::google::protobuf::uint32 height() const;
  inline void set_height(::google::protobuf::uint32 value);

  // required double radius = 8;
  inline bool has_radius() const;
  inline void clear_radius();
  static const int kRadiusFieldNumber = 8;
  inline double radius() const;
  inline void set_radius(double value);

  // @@protoc_insertion_point(class_scope:com.zhichenhaixin.proto.RadarVideoImage)
 private:
  inline void set_has_radarid();
  inline void clear_has_radarid();
  inline void set_has_radarname();
  inline void clear_has_radarname();
  inline void set_has_center();
  inline void clear_has_center();
  inline void set_has_utc();
  inline void clear_has_utc();
  inline void set_has_imagedata();
  inline void clear_has_imagedata();
  inline void set_has_width();
  inline void clear_has_width();
  inline void set_has_height();
  inline void clear_has_height();
  inline void set_has_radius();
  inline void clear_has_radius();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 radarid_;
  ::std::string* radarname_;
  ::com::zhichenhaixin::proto::Latlon* center_;
  ::google::protobuf::uint64 utc_;
  ::std::string* imagedata_;
  ::google::protobuf::uint32 width_;
  ::google::protobuf::uint32 height_;
  double radius_;
  friend void  protobuf_AddDesc_ZCHXRadarDataDef_2eproto();
  friend void protobuf_AssignDesc_ZCHXRadarDataDef_2eproto();
  friend void protobuf_ShutdownFile_ZCHXRadarDataDef_2eproto();

  void InitAsDefaultInstance();
  static RadarVideoImage* default_instance_;
};
// ===================================================================


// ===================================================================

// Latlon

// required double latitude = 1;
inline bool Latlon::has_latitude() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Latlon::set_has_latitude() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Latlon::clear_has_latitude() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Latlon::clear_latitude() {
  latitude_ = 0;
  clear_has_latitude();
}
inline double Latlon::latitude() const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.proto.Latlon.latitude)
  return latitude_;
}
inline void Latlon::set_latitude(double value) {
  set_has_latitude();
  latitude_ = value;
  // @@protoc_insertion_point(field_set:com.zhichenhaixin.proto.Latlon.latitude)
}

// required double longitude = 2;
inline bool Latlon::has_longitude() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Latlon::set_has_longitude() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Latlon::clear_has_longitude() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Latlon::clear_longitude() {
  longitude_ = 0;
  clear_has_longitude();
}
inline double Latlon::longitude() const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.proto.Latlon.longitude)
  return longitude_;
}
inline void Latlon::set_longitude(double value) {
  set_has_longitude();
  longitude_ = value;
  // @@protoc_insertion_point(field_set:com.zhichenhaixin.proto.Latlon.longitude)
}

// -------------------------------------------------------------------

// PixelPoint

// required uint32 x = 1;
inline bool PixelPoint::has_x() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PixelPoint::set_has_x() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PixelPoint::clear_has_x() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PixelPoint::clear_x() {
  x_ = 0u;
  clear_has_x();
}
inline ::google::protobuf::uint32 PixelPoint::x() const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.proto.PixelPoint.x)
  return x_;
}
inline void PixelPoint::set_x(::google::protobuf::uint32 value) {
  set_has_x();
  x_ = value;
  // @@protoc_insertion_point(field_set:com.zhichenhaixin.proto.PixelPoint.x)
}

// required uint32 y = 2;
inline bool PixelPoint::has_y() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PixelPoint::set_has_y() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PixelPoint::clear_has_y() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PixelPoint::clear_y() {
  y_ = 0u;
  clear_has_y();
}
inline ::google::protobuf::uint32 PixelPoint::y() const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.proto.PixelPoint.y)
  return y_;
}
inline void PixelPoint::set_y(::google::protobuf::uint32 value) {
  set_has_y();
  y_ = value;
  // @@protoc_insertion_point(field_set:com.zhichenhaixin.proto.PixelPoint.y)
}

// -------------------------------------------------------------------

// VideoImage

// required uint32 width = 1;
inline bool VideoImage::has_width() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void VideoImage::set_has_width() {
  _has_bits_[0] |= 0x00000001u;
}
inline void VideoImage::clear_has_width() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void VideoImage::clear_width() {
  width_ = 0u;
  clear_has_width();
}
inline ::google::protobuf::uint32 VideoImage::width() const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.proto.VideoImage.width)
  return width_;
}
inline void VideoImage::set_width(::google::protobuf::uint32 value) {
  set_has_width();
  width_ = value;
  // @@protoc_insertion_point(field_set:com.zhichenhaixin.proto.VideoImage.width)
}

// required uint32 height = 2;
inline bool VideoImage::has_height() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void VideoImage::set_has_height() {
  _has_bits_[0] |= 0x00000002u;
}
inline void VideoImage::clear_has_height() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void VideoImage::clear_height() {
  height_ = 0u;
  clear_has_height();
}
inline ::google::protobuf::uint32 VideoImage::height() const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.proto.VideoImage.height)
  return height_;
}
inline void VideoImage::set_height(::google::protobuf::uint32 value) {
  set_has_height();
  height_ = value;
  // @@protoc_insertion_point(field_set:com.zhichenhaixin.proto.VideoImage.height)
}

// repeated .com.zhichenhaixin.proto.PixelPoint points = 3;
inline int VideoImage::points_size() const {
  return points_.size();
}
inline void VideoImage::clear_points() {
  points_.Clear();
}
inline const ::com::zhichenhaixin::proto::PixelPoint& VideoImage::points(int index) const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.proto.VideoImage.points)
  return points_.Get(index);
}
inline ::com::zhichenhaixin::proto::PixelPoint* VideoImage::mutable_points(int index) {
  // @@protoc_insertion_point(field_mutable:com.zhichenhaixin.proto.VideoImage.points)
  return points_.Mutable(index);
}
inline ::com::zhichenhaixin::proto::PixelPoint* VideoImage::add_points() {
  // @@protoc_insertion_point(field_add:com.zhichenhaixin.proto.VideoImage.points)
  return points_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::com::zhichenhaixin::proto::PixelPoint >&
VideoImage::points() const {
  // @@protoc_insertion_point(field_list:com.zhichenhaixin.proto.VideoImage.points)
  return points_;
}
inline ::google::protobuf::RepeatedPtrField< ::com::zhichenhaixin::proto::PixelPoint >*
VideoImage::mutable_points() {
  // @@protoc_insertion_point(field_mutable_list:com.zhichenhaixin.proto.VideoImage.points)
  return &points_;
}

// -------------------------------------------------------------------

// PredictionArea

// repeated .com.zhichenhaixin.proto.Latlon area = 1;
inline int PredictionArea::area_size() const {
  return area_.size();
}
inline void PredictionArea::clear_area() {
  area_.Clear();
}
inline const ::com::zhichenhaixin::proto::Latlon& PredictionArea::area(int index) const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.proto.PredictionArea.area)
  return area_.Get(index);
}
inline ::com::zhichenhaixin::proto::Latlon* PredictionArea::mutable_area(int index) {
  // @@protoc_insertion_point(field_mutable:com.zhichenhaixin.proto.PredictionArea.area)
  return area_.Mutable(index);
}
inline ::com::zhichenhaixin::proto::Latlon* PredictionArea::add_area() {
  // @@protoc_insertion_point(field_add:com.zhichenhaixin.proto.PredictionArea.area)
  return area_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::com::zhichenhaixin::proto::Latlon >&
PredictionArea::area() const {
  // @@protoc_insertion_point(field_list:com.zhichenhaixin.proto.PredictionArea.area)
  return area_;
}
inline ::google::protobuf::RepeatedPtrField< ::com::zhichenhaixin::proto::Latlon >*
PredictionArea::mutable_area() {
  // @@protoc_insertion_point(field_mutable_list:com.zhichenhaixin.proto.PredictionArea.area)
  return &area_;
}

// -------------------------------------------------------------------

// Segment

// required .com.zhichenhaixin.proto.Latlon start = 1;
inline bool Segment::has_start() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Segment::set_has_start() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Segment::clear_has_start() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Segment::clear_start() {
  if (start_ != NULL) start_->::com::zhichenhaixin::proto::Latlon::Clear();
  clear_has_start();
}
inline const ::com::zhichenhaixin::proto::Latlon& Segment::start() const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.proto.Segment.start)
  return start_ != NULL ? *start_ : *default_instance_->start_;
}
inline ::com::zhichenhaixin::proto::Latlon* Segment::mutable_start() {
  set_has_start();
  if (start_ == NULL) start_ = new ::com::zhichenhaixin::proto::Latlon;
  // @@protoc_insertion_point(field_mutable:com.zhichenhaixin.proto.Segment.start)
  return start_;
}
inline ::com::zhichenhaixin::proto::Latlon* Segment::release_start() {
  clear_has_start();
  ::com::zhichenhaixin::proto::Latlon* temp = start_;
  start_ = NULL;
  return temp;
}
inline void Segment::set_allocated_start(::com::zhichenhaixin::proto::Latlon* start) {
  delete start_;
  start_ = start;
  if (start) {
    set_has_start();
  } else {
    clear_has_start();
  }
  // @@protoc_insertion_point(field_set_allocated:com.zhichenhaixin.proto.Segment.start)
}

// required .com.zhichenhaixin.proto.Latlon end = 2;
inline bool Segment::has_end() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Segment::set_has_end() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Segment::clear_has_end() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Segment::clear_end() {
  if (end_ != NULL) end_->::com::zhichenhaixin::proto::Latlon::Clear();
  clear_has_end();
}
inline const ::com::zhichenhaixin::proto::Latlon& Segment::end() const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.proto.Segment.end)
  return end_ != NULL ? *end_ : *default_instance_->end_;
}
inline ::com::zhichenhaixin::proto::Latlon* Segment::mutable_end() {
  set_has_end();
  if (end_ == NULL) end_ = new ::com::zhichenhaixin::proto::Latlon;
  // @@protoc_insertion_point(field_mutable:com.zhichenhaixin.proto.Segment.end)
  return end_;
}
inline ::com::zhichenhaixin::proto::Latlon* Segment::release_end() {
  clear_has_end();
  ::com::zhichenhaixin::proto::Latlon* temp = end_;
  end_ = NULL;
  return temp;
}
inline void Segment::set_allocated_end(::com::zhichenhaixin::proto::Latlon* end) {
  delete end_;
  end_ = end;
  if (end) {
    set_has_end();
  } else {
    clear_has_end();
  }
  // @@protoc_insertion_point(field_set_allocated:com.zhichenhaixin.proto.Segment.end)
}

// optional double angle = 3;
inline bool Segment::has_angle() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Segment::set_has_angle() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Segment::clear_has_angle() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Segment::clear_angle() {
  angle_ = 0;
  clear_has_angle();
}
inline double Segment::angle() const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.proto.Segment.angle)
  return angle_;
}
inline void Segment::set_angle(double value) {
  set_has_angle();
  angle_ = value;
  // @@protoc_insertion_point(field_set:com.zhichenhaixin.proto.Segment.angle)
}

// -------------------------------------------------------------------

// BoundRect

// required .com.zhichenhaixin.proto.Latlon topLeft = 1;
inline bool BoundRect::has_topleft() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BoundRect::set_has_topleft() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BoundRect::clear_has_topleft() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BoundRect::clear_topleft() {
  if (topleft_ != NULL) topleft_->::com::zhichenhaixin::proto::Latlon::Clear();
  clear_has_topleft();
}
inline const ::com::zhichenhaixin::proto::Latlon& BoundRect::topleft() const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.proto.BoundRect.topLeft)
  return topleft_ != NULL ? *topleft_ : *default_instance_->topleft_;
}
inline ::com::zhichenhaixin::proto::Latlon* BoundRect::mutable_topleft() {
  set_has_topleft();
  if (topleft_ == NULL) topleft_ = new ::com::zhichenhaixin::proto::Latlon;
  // @@protoc_insertion_point(field_mutable:com.zhichenhaixin.proto.BoundRect.topLeft)
  return topleft_;
}
inline ::com::zhichenhaixin::proto::Latlon* BoundRect::release_topleft() {
  clear_has_topleft();
  ::com::zhichenhaixin::proto::Latlon* temp = topleft_;
  topleft_ = NULL;
  return temp;
}
inline void BoundRect::set_allocated_topleft(::com::zhichenhaixin::proto::Latlon* topleft) {
  delete topleft_;
  topleft_ = topleft;
  if (topleft) {
    set_has_topleft();
  } else {
    clear_has_topleft();
  }
  // @@protoc_insertion_point(field_set_allocated:com.zhichenhaixin.proto.BoundRect.topLeft)
}

// required .com.zhichenhaixin.proto.Latlon bottomRight = 2;
inline bool BoundRect::has_bottomright() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BoundRect::set_has_bottomright() {
  _has_bits_[0] |= 0x00000002u;
}
inline void BoundRect::clear_has_bottomright() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void BoundRect::clear_bottomright() {
  if (bottomright_ != NULL) bottomright_->::com::zhichenhaixin::proto::Latlon::Clear();
  clear_has_bottomright();
}
inline const ::com::zhichenhaixin::proto::Latlon& BoundRect::bottomright() const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.proto.BoundRect.bottomRight)
  return bottomright_ != NULL ? *bottomright_ : *default_instance_->bottomright_;
}
inline ::com::zhichenhaixin::proto::Latlon* BoundRect::mutable_bottomright() {
  set_has_bottomright();
  if (bottomright_ == NULL) bottomright_ = new ::com::zhichenhaixin::proto::Latlon;
  // @@protoc_insertion_point(field_mutable:com.zhichenhaixin.proto.BoundRect.bottomRight)
  return bottomright_;
}
inline ::com::zhichenhaixin::proto::Latlon* BoundRect::release_bottomright() {
  clear_has_bottomright();
  ::com::zhichenhaixin::proto::Latlon* temp = bottomright_;
  bottomright_ = NULL;
  return temp;
}
inline void BoundRect::set_allocated_bottomright(::com::zhichenhaixin::proto::Latlon* bottomright) {
  delete bottomright_;
  bottomright_ = bottomright;
  if (bottomright) {
    set_has_bottomright();
  } else {
    clear_has_bottomright();
  }
  // @@protoc_insertion_point(field_set_allocated:com.zhichenhaixin.proto.BoundRect.bottomRight)
}

// optional int32 diameter = 3;
inline bool BoundRect::has_diameter() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void BoundRect::set_has_diameter() {
  _has_bits_[0] |= 0x00000004u;
}
inline void BoundRect::clear_has_diameter() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void BoundRect::clear_diameter() {
  diameter_ = 0;
  clear_has_diameter();
}
inline ::google::protobuf::int32 BoundRect::diameter() const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.proto.BoundRect.diameter)
  return diameter_;
}
inline void BoundRect::set_diameter(::google::protobuf::int32 value) {
  set_has_diameter();
  diameter_ = value;
  // @@protoc_insertion_point(field_set:com.zhichenhaixin.proto.BoundRect.diameter)
}

// -------------------------------------------------------------------

// RadarRectDef

// required uint32 rectNumber = 1;
inline bool RadarRectDef::has_rectnumber() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RadarRectDef::set_has_rectnumber() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RadarRectDef::clear_has_rectnumber() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RadarRectDef::clear_rectnumber() {
  rectnumber_ = 0u;
  clear_has_rectnumber();
}
inline ::google::protobuf::uint32 RadarRectDef::rectnumber() const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.proto.RadarRectDef.rectNumber)
  return rectnumber_;
}
inline void RadarRectDef::set_rectnumber(::google::protobuf::uint32 value) {
  set_has_rectnumber();
  rectnumber_ = value;
  // @@protoc_insertion_point(field_set:com.zhichenhaixin.proto.RadarRectDef.rectNumber)
}

// required .com.zhichenhaixin.proto.Latlon center = 2;
inline bool RadarRectDef::has_center() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RadarRectDef::set_has_center() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RadarRectDef::clear_has_center() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RadarRectDef::clear_center() {
  if (center_ != NULL) center_->::com::zhichenhaixin::proto::Latlon::Clear();
  clear_has_center();
}
inline const ::com::zhichenhaixin::proto::Latlon& RadarRectDef::center() const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.proto.RadarRectDef.center)
  return center_ != NULL ? *center_ : *default_instance_->center_;
}
inline ::com::zhichenhaixin::proto::Latlon* RadarRectDef::mutable_center() {
  set_has_center();
  if (center_ == NULL) center_ = new ::com::zhichenhaixin::proto::Latlon;
  // @@protoc_insertion_point(field_mutable:com.zhichenhaixin.proto.RadarRectDef.center)
  return center_;
}
inline ::com::zhichenhaixin::proto::Latlon* RadarRectDef::release_center() {
  clear_has_center();
  ::com::zhichenhaixin::proto::Latlon* temp = center_;
  center_ = NULL;
  return temp;
}
inline void RadarRectDef::set_allocated_center(::com::zhichenhaixin::proto::Latlon* center) {
  delete center_;
  center_ = center;
  if (center) {
    set_has_center();
  } else {
    clear_has_center();
  }
  // @@protoc_insertion_point(field_set_allocated:com.zhichenhaixin.proto.RadarRectDef.center)
}

// required uint32 updateTime = 3;
inline bool RadarRectDef::has_updatetime() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void RadarRectDef::set_has_updatetime() {
  _has_bits_[0] |= 0x00000004u;
}
inline void RadarRectDef::clear_has_updatetime() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void RadarRectDef::clear_updatetime() {
  updatetime_ = 0u;
  clear_has_updatetime();
}
inline ::google::protobuf::uint32 RadarRectDef::updatetime() const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.proto.RadarRectDef.updateTime)
  return updatetime_;
}
inline void RadarRectDef::set_updatetime(::google::protobuf::uint32 value) {
  set_has_updatetime();
  updatetime_ = value;
  // @@protoc_insertion_point(field_set:com.zhichenhaixin.proto.RadarRectDef.updateTime)
}

// required bool realData = 4;
inline bool RadarRectDef::has_realdata() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void RadarRectDef::set_has_realdata() {
  _has_bits_[0] |= 0x00000008u;
}
inline void RadarRectDef::clear_has_realdata() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void RadarRectDef::clear_realdata() {
  realdata_ = false;
  clear_has_realdata();
}
inline bool RadarRectDef::realdata() const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.proto.RadarRectDef.realData)
  return realdata_;
}
inline void RadarRectDef::set_realdata(bool value) {
  set_has_realdata();
  realdata_ = value;
  // @@protoc_insertion_point(field_set:com.zhichenhaixin.proto.RadarRectDef.realData)
}

// required double sogKnot = 5;
inline bool RadarRectDef::has_sogknot() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void RadarRectDef::set_has_sogknot() {
  _has_bits_[0] |= 0x00000010u;
}
inline void RadarRectDef::clear_has_sogknot() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void RadarRectDef::clear_sogknot() {
  sogknot_ = 0;
  clear_has_sogknot();
}
inline double RadarRectDef::sogknot() const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.proto.RadarRectDef.sogKnot)
  return sogknot_;
}
inline void RadarRectDef::set_sogknot(double value) {
  set_has_sogknot();
  sogknot_ = value;
  // @@protoc_insertion_point(field_set:com.zhichenhaixin.proto.RadarRectDef.sogKnot)
}

// required double sogMS = 6;
inline bool RadarRectDef::has_sogms() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void RadarRectDef::set_has_sogms() {
  _has_bits_[0] |= 0x00000020u;
}
inline void RadarRectDef::clear_has_sogms() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void RadarRectDef::clear_sogms() {
  sogms_ = 0;
  clear_has_sogms();
}
inline double RadarRectDef::sogms() const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.proto.RadarRectDef.sogMS)
  return sogms_;
}
inline void RadarRectDef::set_sogms(double value) {
  set_has_sogms();
  sogms_ = value;
  // @@protoc_insertion_point(field_set:com.zhichenhaixin.proto.RadarRectDef.sogMS)
}

// required double cog = 7;
inline bool RadarRectDef::has_cog() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void RadarRectDef::set_has_cog() {
  _has_bits_[0] |= 0x00000040u;
}
inline void RadarRectDef::clear_has_cog() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void RadarRectDef::clear_cog() {
  cog_ = 0;
  clear_has_cog();
}
inline double RadarRectDef::cog() const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.proto.RadarRectDef.cog)
  return cog_;
}
inline void RadarRectDef::set_cog(double value) {
  set_has_cog();
  cog_ = value;
  // @@protoc_insertion_point(field_set:com.zhichenhaixin.proto.RadarRectDef.cog)
}

// repeated .com.zhichenhaixin.proto.Latlon outline = 8;
inline int RadarRectDef::outline_size() const {
  return outline_.size();
}
inline void RadarRectDef::clear_outline() {
  outline_.Clear();
}
inline const ::com::zhichenhaixin::proto::Latlon& RadarRectDef::outline(int index) const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.proto.RadarRectDef.outline)
  return outline_.Get(index);
}
inline ::com::zhichenhaixin::proto::Latlon* RadarRectDef::mutable_outline(int index) {
  // @@protoc_insertion_point(field_mutable:com.zhichenhaixin.proto.RadarRectDef.outline)
  return outline_.Mutable(index);
}
inline ::com::zhichenhaixin::proto::Latlon* RadarRectDef::add_outline() {
  // @@protoc_insertion_point(field_add:com.zhichenhaixin.proto.RadarRectDef.outline)
  return outline_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::com::zhichenhaixin::proto::Latlon >&
RadarRectDef::outline() const {
  // @@protoc_insertion_point(field_list:com.zhichenhaixin.proto.RadarRectDef.outline)
  return outline_;
}
inline ::google::protobuf::RepeatedPtrField< ::com::zhichenhaixin::proto::Latlon >*
RadarRectDef::mutable_outline() {
  // @@protoc_insertion_point(field_mutable_list:com.zhichenhaixin.proto.RadarRectDef.outline)
  return &outline_;
}

// optional .com.zhichenhaixin.proto.BoundRect boundRect = 9;
inline bool RadarRectDef::has_boundrect() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void RadarRectDef::set_has_boundrect() {
  _has_bits_[0] |= 0x00000100u;
}
inline void RadarRectDef::clear_has_boundrect() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void RadarRectDef::clear_boundrect() {
  if (boundrect_ != NULL) boundrect_->::com::zhichenhaixin::proto::BoundRect::Clear();
  clear_has_boundrect();
}
inline const ::com::zhichenhaixin::proto::BoundRect& RadarRectDef::boundrect() const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.proto.RadarRectDef.boundRect)
  return boundrect_ != NULL ? *boundrect_ : *default_instance_->boundrect_;
}
inline ::com::zhichenhaixin::proto::BoundRect* RadarRectDef::mutable_boundrect() {
  set_has_boundrect();
  if (boundrect_ == NULL) boundrect_ = new ::com::zhichenhaixin::proto::BoundRect;
  // @@protoc_insertion_point(field_mutable:com.zhichenhaixin.proto.RadarRectDef.boundRect)
  return boundrect_;
}
inline ::com::zhichenhaixin::proto::BoundRect* RadarRectDef::release_boundrect() {
  clear_has_boundrect();
  ::com::zhichenhaixin::proto::BoundRect* temp = boundrect_;
  boundrect_ = NULL;
  return temp;
}
inline void RadarRectDef::set_allocated_boundrect(::com::zhichenhaixin::proto::BoundRect* boundrect) {
  delete boundrect_;
  boundrect_ = boundrect;
  if (boundrect) {
    set_has_boundrect();
  } else {
    clear_has_boundrect();
  }
  // @@protoc_insertion_point(field_set_allocated:com.zhichenhaixin.proto.RadarRectDef.boundRect)
}

// optional .com.zhichenhaixin.proto.Segment seg = 10;
inline bool RadarRectDef::has_seg() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void RadarRectDef::set_has_seg() {
  _has_bits_[0] |= 0x00000200u;
}
inline void RadarRectDef::clear_has_seg() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void RadarRectDef::clear_seg() {
  if (seg_ != NULL) seg_->::com::zhichenhaixin::proto::Segment::Clear();
  clear_has_seg();
}
inline const ::com::zhichenhaixin::proto::Segment& RadarRectDef::seg() const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.proto.RadarRectDef.seg)
  return seg_ != NULL ? *seg_ : *default_instance_->seg_;
}
inline ::com::zhichenhaixin::proto::Segment* RadarRectDef::mutable_seg() {
  set_has_seg();
  if (seg_ == NULL) seg_ = new ::com::zhichenhaixin::proto::Segment;
  // @@protoc_insertion_point(field_mutable:com.zhichenhaixin.proto.RadarRectDef.seg)
  return seg_;
}
inline ::com::zhichenhaixin::proto::Segment* RadarRectDef::release_seg() {
  clear_has_seg();
  ::com::zhichenhaixin::proto::Segment* temp = seg_;
  seg_ = NULL;
  return temp;
}
inline void RadarRectDef::set_allocated_seg(::com::zhichenhaixin::proto::Segment* seg) {
  delete seg_;
  seg_ = seg;
  if (seg) {
    set_has_seg();
  } else {
    clear_has_seg();
  }
  // @@protoc_insertion_point(field_set_allocated:com.zhichenhaixin.proto.RadarRectDef.seg)
}

// optional .com.zhichenhaixin.proto.VideoImage fixedImg = 11;
inline bool RadarRectDef::has_fixedimg() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void RadarRectDef::set_has_fixedimg() {
  _has_bits_[0] |= 0x00000400u;
}
inline void RadarRectDef::clear_has_fixedimg() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void RadarRectDef::clear_fixedimg() {
  if (fixedimg_ != NULL) fixedimg_->::com::zhichenhaixin::proto::VideoImage::Clear();
  clear_has_fixedimg();
}
inline const ::com::zhichenhaixin::proto::VideoImage& RadarRectDef::fixedimg() const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.proto.RadarRectDef.fixedImg)
  return fixedimg_ != NULL ? *fixedimg_ : *default_instance_->fixedimg_;
}
inline ::com::zhichenhaixin::proto::VideoImage* RadarRectDef::mutable_fixedimg() {
  set_has_fixedimg();
  if (fixedimg_ == NULL) fixedimg_ = new ::com::zhichenhaixin::proto::VideoImage;
  // @@protoc_insertion_point(field_mutable:com.zhichenhaixin.proto.RadarRectDef.fixedImg)
  return fixedimg_;
}
inline ::com::zhichenhaixin::proto::VideoImage* RadarRectDef::release_fixedimg() {
  clear_has_fixedimg();
  ::com::zhichenhaixin::proto::VideoImage* temp = fixedimg_;
  fixedimg_ = NULL;
  return temp;
}
inline void RadarRectDef::set_allocated_fixedimg(::com::zhichenhaixin::proto::VideoImage* fixedimg) {
  delete fixedimg_;
  fixedimg_ = fixedimg;
  if (fixedimg) {
    set_has_fixedimg();
  } else {
    clear_has_fixedimg();
  }
  // @@protoc_insertion_point(field_set_allocated:com.zhichenhaixin.proto.RadarRectDef.fixedImg)
}

// optional .com.zhichenhaixin.proto.PredictionArea prediction = 12;
inline bool RadarRectDef::has_prediction() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void RadarRectDef::set_has_prediction() {
  _has_bits_[0] |= 0x00000800u;
}
inline void RadarRectDef::clear_has_prediction() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void RadarRectDef::clear_prediction() {
  if (prediction_ != NULL) prediction_->::com::zhichenhaixin::proto::PredictionArea::Clear();
  clear_has_prediction();
}
inline const ::com::zhichenhaixin::proto::PredictionArea& RadarRectDef::prediction() const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.proto.RadarRectDef.prediction)
  return prediction_ != NULL ? *prediction_ : *default_instance_->prediction_;
}
inline ::com::zhichenhaixin::proto::PredictionArea* RadarRectDef::mutable_prediction() {
  set_has_prediction();
  if (prediction_ == NULL) prediction_ = new ::com::zhichenhaixin::proto::PredictionArea;
  // @@protoc_insertion_point(field_mutable:com.zhichenhaixin.proto.RadarRectDef.prediction)
  return prediction_;
}
inline ::com::zhichenhaixin::proto::PredictionArea* RadarRectDef::release_prediction() {
  clear_has_prediction();
  ::com::zhichenhaixin::proto::PredictionArea* temp = prediction_;
  prediction_ = NULL;
  return temp;
}
inline void RadarRectDef::set_allocated_prediction(::com::zhichenhaixin::proto::PredictionArea* prediction) {
  delete prediction_;
  prediction_ = prediction;
  if (prediction) {
    set_has_prediction();
  } else {
    clear_has_prediction();
  }
  // @@protoc_insertion_point(field_set_allocated:com.zhichenhaixin.proto.RadarRectDef.prediction)
}

// optional int32 videoCycleIndex = 13;
inline bool RadarRectDef::has_videocycleindex() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void RadarRectDef::set_has_videocycleindex() {
  _has_bits_[0] |= 0x00001000u;
}
inline void RadarRectDef::clear_has_videocycleindex() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void RadarRectDef::clear_videocycleindex() {
  videocycleindex_ = 0;
  clear_has_videocycleindex();
}
inline ::google::protobuf::int32 RadarRectDef::videocycleindex() const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.proto.RadarRectDef.videoCycleIndex)
  return videocycleindex_;
}
inline void RadarRectDef::set_videocycleindex(::google::protobuf::int32 value) {
  set_has_videocycleindex();
  videocycleindex_ = value;
  // @@protoc_insertion_point(field_set:com.zhichenhaixin.proto.RadarRectDef.videoCycleIndex)
}

// -------------------------------------------------------------------

// RoutePath

// repeated .com.zhichenhaixin.proto.RadarRectDef path = 1;
inline int RoutePath::path_size() const {
  return path_.size();
}
inline void RoutePath::clear_path() {
  path_.Clear();
}
inline const ::com::zhichenhaixin::proto::RadarRectDef& RoutePath::path(int index) const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.proto.RoutePath.path)
  return path_.Get(index);
}
inline ::com::zhichenhaixin::proto::RadarRectDef* RoutePath::mutable_path(int index) {
  // @@protoc_insertion_point(field_mutable:com.zhichenhaixin.proto.RoutePath.path)
  return path_.Mutable(index);
}
inline ::com::zhichenhaixin::proto::RadarRectDef* RoutePath::add_path() {
  // @@protoc_insertion_point(field_add:com.zhichenhaixin.proto.RoutePath.path)
  return path_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::com::zhichenhaixin::proto::RadarRectDef >&
RoutePath::path() const {
  // @@protoc_insertion_point(field_list:com.zhichenhaixin.proto.RoutePath.path)
  return path_;
}
inline ::google::protobuf::RepeatedPtrField< ::com::zhichenhaixin::proto::RadarRectDef >*
RoutePath::mutable_path() {
  // @@protoc_insertion_point(field_mutable_list:com.zhichenhaixin.proto.RoutePath.path)
  return &path_;
}

// -------------------------------------------------------------------

// RouteNode

// required int32 node_num = 1;
inline bool RouteNode::has_node_num() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RouteNode::set_has_node_num() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RouteNode::clear_has_node_num() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RouteNode::clear_node_num() {
  node_num_ = 0;
  clear_has_node_num();
}
inline ::google::protobuf::int32 RouteNode::node_num() const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.proto.RouteNode.node_num)
  return node_num_;
}
inline void RouteNode::set_node_num(::google::protobuf::int32 value) {
  set_has_node_num();
  node_num_ = value;
  // @@protoc_insertion_point(field_set:com.zhichenhaixin.proto.RouteNode.node_num)
}

// required .com.zhichenhaixin.proto.RadarRectDef top_node = 2;
inline bool RouteNode::has_top_node() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RouteNode::set_has_top_node() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RouteNode::clear_has_top_node() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RouteNode::clear_top_node() {
  if (top_node_ != NULL) top_node_->::com::zhichenhaixin::proto::RadarRectDef::Clear();
  clear_has_top_node();
}
inline const ::com::zhichenhaixin::proto::RadarRectDef& RouteNode::top_node() const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.proto.RouteNode.top_node)
  return top_node_ != NULL ? *top_node_ : *default_instance_->top_node_;
}
inline ::com::zhichenhaixin::proto::RadarRectDef* RouteNode::mutable_top_node() {
  set_has_top_node();
  if (top_node_ == NULL) top_node_ = new ::com::zhichenhaixin::proto::RadarRectDef;
  // @@protoc_insertion_point(field_mutable:com.zhichenhaixin.proto.RouteNode.top_node)
  return top_node_;
}
inline ::com::zhichenhaixin::proto::RadarRectDef* RouteNode::release_top_node() {
  clear_has_top_node();
  ::com::zhichenhaixin::proto::RadarRectDef* temp = top_node_;
  top_node_ = NULL;
  return temp;
}
inline void RouteNode::set_allocated_top_node(::com::zhichenhaixin::proto::RadarRectDef* top_node) {
  delete top_node_;
  top_node_ = top_node;
  if (top_node) {
    set_has_top_node();
  } else {
    clear_has_top_node();
  }
  // @@protoc_insertion_point(field_set_allocated:com.zhichenhaixin.proto.RouteNode.top_node)
}

// repeated .com.zhichenhaixin.proto.RoutePath path_list = 3;
inline int RouteNode::path_list_size() const {
  return path_list_.size();
}
inline void RouteNode::clear_path_list() {
  path_list_.Clear();
}
inline const ::com::zhichenhaixin::proto::RoutePath& RouteNode::path_list(int index) const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.proto.RouteNode.path_list)
  return path_list_.Get(index);
}
inline ::com::zhichenhaixin::proto::RoutePath* RouteNode::mutable_path_list(int index) {
  // @@protoc_insertion_point(field_mutable:com.zhichenhaixin.proto.RouteNode.path_list)
  return path_list_.Mutable(index);
}
inline ::com::zhichenhaixin::proto::RoutePath* RouteNode::add_path_list() {
  // @@protoc_insertion_point(field_add:com.zhichenhaixin.proto.RouteNode.path_list)
  return path_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::com::zhichenhaixin::proto::RoutePath >&
RouteNode::path_list() const {
  // @@protoc_insertion_point(field_list:com.zhichenhaixin.proto.RouteNode.path_list)
  return path_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::com::zhichenhaixin::proto::RoutePath >*
RouteNode::mutable_path_list() {
  // @@protoc_insertion_point(field_mutable_list:com.zhichenhaixin.proto.RouteNode.path_list)
  return &path_list_;
}

// -------------------------------------------------------------------

// RouteNodes

// repeated .com.zhichenhaixin.proto.RouteNode node_list = 1;
inline int RouteNodes::node_list_size() const {
  return node_list_.size();
}
inline void RouteNodes::clear_node_list() {
  node_list_.Clear();
}
inline const ::com::zhichenhaixin::proto::RouteNode& RouteNodes::node_list(int index) const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.proto.RouteNodes.node_list)
  return node_list_.Get(index);
}
inline ::com::zhichenhaixin::proto::RouteNode* RouteNodes::mutable_node_list(int index) {
  // @@protoc_insertion_point(field_mutable:com.zhichenhaixin.proto.RouteNodes.node_list)
  return node_list_.Mutable(index);
}
inline ::com::zhichenhaixin::proto::RouteNode* RouteNodes::add_node_list() {
  // @@protoc_insertion_point(field_add:com.zhichenhaixin.proto.RouteNodes.node_list)
  return node_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::com::zhichenhaixin::proto::RouteNode >&
RouteNodes::node_list() const {
  // @@protoc_insertion_point(field_list:com.zhichenhaixin.proto.RouteNodes.node_list)
  return node_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::com::zhichenhaixin::proto::RouteNode >*
RouteNodes::mutable_node_list() {
  // @@protoc_insertion_point(field_mutable_list:com.zhichenhaixin.proto.RouteNodes.node_list)
  return &node_list_;
}

// -------------------------------------------------------------------

// RadarRect

// required .com.zhichenhaixin.proto.RadarRectDef current_rect = 1;
inline bool RadarRect::has_current_rect() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RadarRect::set_has_current_rect() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RadarRect::clear_has_current_rect() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RadarRect::clear_current_rect() {
  if (current_rect_ != NULL) current_rect_->::com::zhichenhaixin::proto::RadarRectDef::Clear();
  clear_has_current_rect();
}
inline const ::com::zhichenhaixin::proto::RadarRectDef& RadarRect::current_rect() const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.proto.RadarRect.current_rect)
  return current_rect_ != NULL ? *current_rect_ : *default_instance_->current_rect_;
}
inline ::com::zhichenhaixin::proto::RadarRectDef* RadarRect::mutable_current_rect() {
  set_has_current_rect();
  if (current_rect_ == NULL) current_rect_ = new ::com::zhichenhaixin::proto::RadarRectDef;
  // @@protoc_insertion_point(field_mutable:com.zhichenhaixin.proto.RadarRect.current_rect)
  return current_rect_;
}
inline ::com::zhichenhaixin::proto::RadarRectDef* RadarRect::release_current_rect() {
  clear_has_current_rect();
  ::com::zhichenhaixin::proto::RadarRectDef* temp = current_rect_;
  current_rect_ = NULL;
  return temp;
}
inline void RadarRect::set_allocated_current_rect(::com::zhichenhaixin::proto::RadarRectDef* current_rect) {
  delete current_rect_;
  current_rect_ = current_rect;
  if (current_rect) {
    set_has_current_rect();
  } else {
    clear_has_current_rect();
  }
  // @@protoc_insertion_point(field_set_allocated:com.zhichenhaixin.proto.RadarRect.current_rect)
}

// repeated .com.zhichenhaixin.proto.RadarRectDef history_rect_list = 2;
inline int RadarRect::history_rect_list_size() const {
  return history_rect_list_.size();
}
inline void RadarRect::clear_history_rect_list() {
  history_rect_list_.Clear();
}
inline const ::com::zhichenhaixin::proto::RadarRectDef& RadarRect::history_rect_list(int index) const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.proto.RadarRect.history_rect_list)
  return history_rect_list_.Get(index);
}
inline ::com::zhichenhaixin::proto::RadarRectDef* RadarRect::mutable_history_rect_list(int index) {
  // @@protoc_insertion_point(field_mutable:com.zhichenhaixin.proto.RadarRect.history_rect_list)
  return history_rect_list_.Mutable(index);
}
inline ::com::zhichenhaixin::proto::RadarRectDef* RadarRect::add_history_rect_list() {
  // @@protoc_insertion_point(field_add:com.zhichenhaixin.proto.RadarRect.history_rect_list)
  return history_rect_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::com::zhichenhaixin::proto::RadarRectDef >&
RadarRect::history_rect_list() const {
  // @@protoc_insertion_point(field_list:com.zhichenhaixin.proto.RadarRect.history_rect_list)
  return history_rect_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::com::zhichenhaixin::proto::RadarRectDef >*
RadarRect::mutable_history_rect_list() {
  // @@protoc_insertion_point(field_mutable_list:com.zhichenhaixin.proto.RadarRect.history_rect_list)
  return &history_rect_list_;
}

// required bool dir_confirmed = 3;
inline bool RadarRect::has_dir_confirmed() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void RadarRect::set_has_dir_confirmed() {
  _has_bits_[0] |= 0x00000004u;
}
inline void RadarRect::clear_has_dir_confirmed() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void RadarRect::clear_dir_confirmed() {
  dir_confirmed_ = false;
  clear_has_dir_confirmed();
}
inline bool RadarRect::dir_confirmed() const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.proto.RadarRect.dir_confirmed)
  return dir_confirmed_;
}
inline void RadarRect::set_dir_confirmed(bool value) {
  set_has_dir_confirmed();
  dir_confirmed_ = value;
  // @@protoc_insertion_point(field_set:com.zhichenhaixin.proto.RadarRect.dir_confirmed)
}

// required uint32 cur_est_count = 4;
inline bool RadarRect::has_cur_est_count() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void RadarRect::set_has_cur_est_count() {
  _has_bits_[0] |= 0x00000008u;
}
inline void RadarRect::clear_has_cur_est_count() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void RadarRect::clear_cur_est_count() {
  cur_est_count_ = 0u;
  clear_has_cur_est_count();
}
inline ::google::protobuf::uint32 RadarRect::cur_est_count() const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.proto.RadarRect.cur_est_count)
  return cur_est_count_;
}
inline void RadarRect::set_cur_est_count(::google::protobuf::uint32 value) {
  set_has_cur_est_count();
  cur_est_count_ = value;
  // @@protoc_insertion_point(field_set:com.zhichenhaixin.proto.RadarRect.cur_est_count)
}

// required int32 node_num = 5;
inline bool RadarRect::has_node_num() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void RadarRect::set_has_node_num() {
  _has_bits_[0] |= 0x00000010u;
}
inline void RadarRect::clear_has_node_num() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void RadarRect::clear_node_num() {
  node_num_ = 0;
  clear_has_node_num();
}
inline ::google::protobuf::int32 RadarRect::node_num() const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.proto.RadarRect.node_num)
  return node_num_;
}
inline void RadarRect::set_node_num(::google::protobuf::int32 value) {
  set_has_node_num();
  node_num_ = value;
  // @@protoc_insertion_point(field_set:com.zhichenhaixin.proto.RadarRect.node_num)
}

// -------------------------------------------------------------------

// RadarRects

// required uint64 UTC = 1;
inline bool RadarRects::has_utc() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RadarRects::set_has_utc() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RadarRects::clear_has_utc() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RadarRects::clear_utc() {
  utc_ = GOOGLE_ULONGLONG(0);
  clear_has_utc();
}
inline ::google::protobuf::uint64 RadarRects::utc() const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.proto.RadarRects.UTC)
  return utc_;
}
inline void RadarRects::set_utc(::google::protobuf::uint64 value) {
  set_has_utc();
  utc_ = value;
  // @@protoc_insertion_point(field_set:com.zhichenhaixin.proto.RadarRects.UTC)
}

// required int32 length = 2;
inline bool RadarRects::has_length() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RadarRects::set_has_length() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RadarRects::clear_has_length() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RadarRects::clear_length() {
  length_ = 0;
  clear_has_length();
}
inline ::google::protobuf::int32 RadarRects::length() const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.proto.RadarRects.length)
  return length_;
}
inline void RadarRects::set_length(::google::protobuf::int32 value) {
  set_has_length();
  length_ = value;
  // @@protoc_insertion_point(field_set:com.zhichenhaixin.proto.RadarRects.length)
}

// repeated .com.zhichenhaixin.proto.RadarRect rect_list = 3;
inline int RadarRects::rect_list_size() const {
  return rect_list_.size();
}
inline void RadarRects::clear_rect_list() {
  rect_list_.Clear();
}
inline const ::com::zhichenhaixin::proto::RadarRect& RadarRects::rect_list(int index) const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.proto.RadarRects.rect_list)
  return rect_list_.Get(index);
}
inline ::com::zhichenhaixin::proto::RadarRect* RadarRects::mutable_rect_list(int index) {
  // @@protoc_insertion_point(field_mutable:com.zhichenhaixin.proto.RadarRects.rect_list)
  return rect_list_.Mutable(index);
}
inline ::com::zhichenhaixin::proto::RadarRect* RadarRects::add_rect_list() {
  // @@protoc_insertion_point(field_add:com.zhichenhaixin.proto.RadarRects.rect_list)
  return rect_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::com::zhichenhaixin::proto::RadarRect >&
RadarRects::rect_list() const {
  // @@protoc_insertion_point(field_list:com.zhichenhaixin.proto.RadarRects.rect_list)
  return rect_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::com::zhichenhaixin::proto::RadarRect >*
RadarRects::mutable_rect_list() {
  // @@protoc_insertion_point(field_mutable_list:com.zhichenhaixin.proto.RadarRects.rect_list)
  return &rect_list_;
}

// -------------------------------------------------------------------

// TrackPoint

// required string radarSiteID = 1;
inline bool TrackPoint::has_radarsiteid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TrackPoint::set_has_radarsiteid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TrackPoint::clear_has_radarsiteid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TrackPoint::clear_radarsiteid() {
  if (radarsiteid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    radarsiteid_->clear();
  }
  clear_has_radarsiteid();
}
inline const ::std::string& TrackPoint::radarsiteid() const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.proto.TrackPoint.radarSiteID)
  return *radarsiteid_;
}
inline void TrackPoint::set_radarsiteid(const ::std::string& value) {
  set_has_radarsiteid();
  if (radarsiteid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    radarsiteid_ = new ::std::string;
  }
  radarsiteid_->assign(value);
  // @@protoc_insertion_point(field_set:com.zhichenhaixin.proto.TrackPoint.radarSiteID)
}
inline void TrackPoint::set_radarsiteid(const char* value) {
  set_has_radarsiteid();
  if (radarsiteid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    radarsiteid_ = new ::std::string;
  }
  radarsiteid_->assign(value);
  // @@protoc_insertion_point(field_set_char:com.zhichenhaixin.proto.TrackPoint.radarSiteID)
}
inline void TrackPoint::set_radarsiteid(const char* value, size_t size) {
  set_has_radarsiteid();
  if (radarsiteid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    radarsiteid_ = new ::std::string;
  }
  radarsiteid_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:com.zhichenhaixin.proto.TrackPoint.radarSiteID)
}
inline ::std::string* TrackPoint::mutable_radarsiteid() {
  set_has_radarsiteid();
  if (radarsiteid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    radarsiteid_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:com.zhichenhaixin.proto.TrackPoint.radarSiteID)
  return radarsiteid_;
}
inline ::std::string* TrackPoint::release_radarsiteid() {
  clear_has_radarsiteid();
  if (radarsiteid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = radarsiteid_;
    radarsiteid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void TrackPoint::set_allocated_radarsiteid(::std::string* radarsiteid) {
  if (radarsiteid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete radarsiteid_;
  }
  if (radarsiteid) {
    set_has_radarsiteid();
    radarsiteid_ = radarsiteid;
  } else {
    clear_has_radarsiteid();
    radarsiteid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:com.zhichenhaixin.proto.TrackPoint.radarSiteID)
}

// required uint32 trackNumber = 2;
inline bool TrackPoint::has_tracknumber() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TrackPoint::set_has_tracknumber() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TrackPoint::clear_has_tracknumber() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TrackPoint::clear_tracknumber() {
  tracknumber_ = 0u;
  clear_has_tracknumber();
}
inline ::google::protobuf::uint32 TrackPoint::tracknumber() const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.proto.TrackPoint.trackNumber)
  return tracknumber_;
}
inline void TrackPoint::set_tracknumber(::google::protobuf::uint32 value) {
  set_has_tracknumber();
  tracknumber_ = value;
  // @@protoc_insertion_point(field_set:com.zhichenhaixin.proto.TrackPoint.trackNumber)
}

// required .com.zhichenhaixin.proto.RadarRectDef current = 3;
inline bool TrackPoint::has_current() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TrackPoint::set_has_current() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TrackPoint::clear_has_current() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TrackPoint::clear_current() {
  if (current_ != NULL) current_->::com::zhichenhaixin::proto::RadarRectDef::Clear();
  clear_has_current();
}
inline const ::com::zhichenhaixin::proto::RadarRectDef& TrackPoint::current() const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.proto.TrackPoint.current)
  return current_ != NULL ? *current_ : *default_instance_->current_;
}
inline ::com::zhichenhaixin::proto::RadarRectDef* TrackPoint::mutable_current() {
  set_has_current();
  if (current_ == NULL) current_ = new ::com::zhichenhaixin::proto::RadarRectDef;
  // @@protoc_insertion_point(field_mutable:com.zhichenhaixin.proto.TrackPoint.current)
  return current_;
}
inline ::com::zhichenhaixin::proto::RadarRectDef* TrackPoint::release_current() {
  clear_has_current();
  ::com::zhichenhaixin::proto::RadarRectDef* temp = current_;
  current_ = NULL;
  return temp;
}
inline void TrackPoint::set_allocated_current(::com::zhichenhaixin::proto::RadarRectDef* current) {
  delete current_;
  current_ = current;
  if (current) {
    set_has_current();
  } else {
    clear_has_current();
  }
  // @@protoc_insertion_point(field_set_allocated:com.zhichenhaixin.proto.TrackPoint.current)
}

// repeated .com.zhichenhaixin.proto.RadarRectDef tracks = 4;
inline int TrackPoint::tracks_size() const {
  return tracks_.size();
}
inline void TrackPoint::clear_tracks() {
  tracks_.Clear();
}
inline const ::com::zhichenhaixin::proto::RadarRectDef& TrackPoint::tracks(int index) const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.proto.TrackPoint.tracks)
  return tracks_.Get(index);
}
inline ::com::zhichenhaixin::proto::RadarRectDef* TrackPoint::mutable_tracks(int index) {
  // @@protoc_insertion_point(field_mutable:com.zhichenhaixin.proto.TrackPoint.tracks)
  return tracks_.Mutable(index);
}
inline ::com::zhichenhaixin::proto::RadarRectDef* TrackPoint::add_tracks() {
  // @@protoc_insertion_point(field_add:com.zhichenhaixin.proto.TrackPoint.tracks)
  return tracks_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::com::zhichenhaixin::proto::RadarRectDef >&
TrackPoint::tracks() const {
  // @@protoc_insertion_point(field_list:com.zhichenhaixin.proto.TrackPoint.tracks)
  return tracks_;
}
inline ::google::protobuf::RepeatedPtrField< ::com::zhichenhaixin::proto::RadarRectDef >*
TrackPoint::mutable_tracks() {
  // @@protoc_insertion_point(field_mutable_list:com.zhichenhaixin.proto.TrackPoint.tracks)
  return &tracks_;
}

// optional bool trackConfirmed = 5;
inline bool TrackPoint::has_trackconfirmed() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void TrackPoint::set_has_trackconfirmed() {
  _has_bits_[0] |= 0x00000010u;
}
inline void TrackPoint::clear_has_trackconfirmed() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void TrackPoint::clear_trackconfirmed() {
  trackconfirmed_ = false;
  clear_has_trackconfirmed();
}
inline bool TrackPoint::trackconfirmed() const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.proto.TrackPoint.trackConfirmed)
  return trackconfirmed_;
}
inline void TrackPoint::set_trackconfirmed(bool value) {
  set_has_trackconfirmed();
  trackconfirmed_ = value;
  // @@protoc_insertion_point(field_set:com.zhichenhaixin.proto.TrackPoint.trackConfirmed)
}

// optional int32 objType = 6;
inline bool TrackPoint::has_objtype() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void TrackPoint::set_has_objtype() {
  _has_bits_[0] |= 0x00000020u;
}
inline void TrackPoint::clear_has_objtype() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void TrackPoint::clear_objtype() {
  objtype_ = 0;
  clear_has_objtype();
}
inline ::google::protobuf::int32 TrackPoint::objtype() const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.proto.TrackPoint.objType)
  return objtype_;
}
inline void TrackPoint::set_objtype(::google::protobuf::int32 value) {
  set_has_objtype();
  objtype_ = value;
  // @@protoc_insertion_point(field_set:com.zhichenhaixin.proto.TrackPoint.objType)
}

// optional string objName = 7;
inline bool TrackPoint::has_objname() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void TrackPoint::set_has_objname() {
  _has_bits_[0] |= 0x00000040u;
}
inline void TrackPoint::clear_has_objname() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void TrackPoint::clear_objname() {
  if (objname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    objname_->clear();
  }
  clear_has_objname();
}
inline const ::std::string& TrackPoint::objname() const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.proto.TrackPoint.objName)
  return *objname_;
}
inline void TrackPoint::set_objname(const ::std::string& value) {
  set_has_objname();
  if (objname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    objname_ = new ::std::string;
  }
  objname_->assign(value);
  // @@protoc_insertion_point(field_set:com.zhichenhaixin.proto.TrackPoint.objName)
}
inline void TrackPoint::set_objname(const char* value) {
  set_has_objname();
  if (objname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    objname_ = new ::std::string;
  }
  objname_->assign(value);
  // @@protoc_insertion_point(field_set_char:com.zhichenhaixin.proto.TrackPoint.objName)
}
inline void TrackPoint::set_objname(const char* value, size_t size) {
  set_has_objname();
  if (objname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    objname_ = new ::std::string;
  }
  objname_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:com.zhichenhaixin.proto.TrackPoint.objName)
}
inline ::std::string* TrackPoint::mutable_objname() {
  set_has_objname();
  if (objname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    objname_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:com.zhichenhaixin.proto.TrackPoint.objName)
  return objname_;
}
inline ::std::string* TrackPoint::release_objname() {
  clear_has_objname();
  if (objname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = objname_;
    objname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void TrackPoint::set_allocated_objname(::std::string* objname) {
  if (objname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete objname_;
  }
  if (objname) {
    set_has_objname();
    objname_ = objname;
  } else {
    clear_has_objname();
    objname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:com.zhichenhaixin.proto.TrackPoint.objName)
}

// -------------------------------------------------------------------

// RadarSurfaceTrack

// required int32 flag = 1;
inline bool RadarSurfaceTrack::has_flag() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RadarSurfaceTrack::set_has_flag() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RadarSurfaceTrack::clear_has_flag() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RadarSurfaceTrack::clear_flag() {
  flag_ = 0;
  clear_has_flag();
}
inline ::google::protobuf::int32 RadarSurfaceTrack::flag() const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.proto.RadarSurfaceTrack.flag)
  return flag_;
}
inline void RadarSurfaceTrack::set_flag(::google::protobuf::int32 value) {
  set_has_flag();
  flag_ = value;
  // @@protoc_insertion_point(field_set:com.zhichenhaixin.proto.RadarSurfaceTrack.flag)
}

// required string sourceId = 2;
inline bool RadarSurfaceTrack::has_sourceid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RadarSurfaceTrack::set_has_sourceid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RadarSurfaceTrack::clear_has_sourceid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RadarSurfaceTrack::clear_sourceid() {
  if (sourceid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sourceid_->clear();
  }
  clear_has_sourceid();
}
inline const ::std::string& RadarSurfaceTrack::sourceid() const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.proto.RadarSurfaceTrack.sourceId)
  return *sourceid_;
}
inline void RadarSurfaceTrack::set_sourceid(const ::std::string& value) {
  set_has_sourceid();
  if (sourceid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sourceid_ = new ::std::string;
  }
  sourceid_->assign(value);
  // @@protoc_insertion_point(field_set:com.zhichenhaixin.proto.RadarSurfaceTrack.sourceId)
}
inline void RadarSurfaceTrack::set_sourceid(const char* value) {
  set_has_sourceid();
  if (sourceid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sourceid_ = new ::std::string;
  }
  sourceid_->assign(value);
  // @@protoc_insertion_point(field_set_char:com.zhichenhaixin.proto.RadarSurfaceTrack.sourceId)
}
inline void RadarSurfaceTrack::set_sourceid(const char* value, size_t size) {
  set_has_sourceid();
  if (sourceid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sourceid_ = new ::std::string;
  }
  sourceid_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:com.zhichenhaixin.proto.RadarSurfaceTrack.sourceId)
}
inline ::std::string* RadarSurfaceTrack::mutable_sourceid() {
  set_has_sourceid();
  if (sourceid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sourceid_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:com.zhichenhaixin.proto.RadarSurfaceTrack.sourceId)
  return sourceid_;
}
inline ::std::string* RadarSurfaceTrack::release_sourceid() {
  clear_has_sourceid();
  if (sourceid_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = sourceid_;
    sourceid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void RadarSurfaceTrack::set_allocated_sourceid(::std::string* sourceid) {
  if (sourceid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete sourceid_;
  }
  if (sourceid) {
    set_has_sourceid();
    sourceid_ = sourceid;
  } else {
    clear_has_sourceid();
    sourceid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:com.zhichenhaixin.proto.RadarSurfaceTrack.sourceId)
}

// required uint64 UTC = 3;
inline bool RadarSurfaceTrack::has_utc() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void RadarSurfaceTrack::set_has_utc() {
  _has_bits_[0] |= 0x00000004u;
}
inline void RadarSurfaceTrack::clear_has_utc() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void RadarSurfaceTrack::clear_utc() {
  utc_ = GOOGLE_ULONGLONG(0);
  clear_has_utc();
}
inline ::google::protobuf::uint64 RadarSurfaceTrack::utc() const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.proto.RadarSurfaceTrack.UTC)
  return utc_;
}
inline void RadarSurfaceTrack::set_utc(::google::protobuf::uint64 value) {
  set_has_utc();
  utc_ = value;
  // @@protoc_insertion_point(field_set:com.zhichenhaixin.proto.RadarSurfaceTrack.UTC)
}

// required int32 length = 4;
inline bool RadarSurfaceTrack::has_length() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void RadarSurfaceTrack::set_has_length() {
  _has_bits_[0] |= 0x00000008u;
}
inline void RadarSurfaceTrack::clear_has_length() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void RadarSurfaceTrack::clear_length() {
  length_ = 0;
  clear_has_length();
}
inline ::google::protobuf::int32 RadarSurfaceTrack::length() const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.proto.RadarSurfaceTrack.length)
  return length_;
}
inline void RadarSurfaceTrack::set_length(::google::protobuf::int32 value) {
  set_has_length();
  length_ = value;
  // @@protoc_insertion_point(field_set:com.zhichenhaixin.proto.RadarSurfaceTrack.length)
}

// repeated .com.zhichenhaixin.proto.TrackPoint trackPoints = 5;
inline int RadarSurfaceTrack::trackpoints_size() const {
  return trackpoints_.size();
}
inline void RadarSurfaceTrack::clear_trackpoints() {
  trackpoints_.Clear();
}
inline const ::com::zhichenhaixin::proto::TrackPoint& RadarSurfaceTrack::trackpoints(int index) const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.proto.RadarSurfaceTrack.trackPoints)
  return trackpoints_.Get(index);
}
inline ::com::zhichenhaixin::proto::TrackPoint* RadarSurfaceTrack::mutable_trackpoints(int index) {
  // @@protoc_insertion_point(field_mutable:com.zhichenhaixin.proto.RadarSurfaceTrack.trackPoints)
  return trackpoints_.Mutable(index);
}
inline ::com::zhichenhaixin::proto::TrackPoint* RadarSurfaceTrack::add_trackpoints() {
  // @@protoc_insertion_point(field_add:com.zhichenhaixin.proto.RadarSurfaceTrack.trackPoints)
  return trackpoints_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::com::zhichenhaixin::proto::TrackPoint >&
RadarSurfaceTrack::trackpoints() const {
  // @@protoc_insertion_point(field_list:com.zhichenhaixin.proto.RadarSurfaceTrack.trackPoints)
  return trackpoints_;
}
inline ::google::protobuf::RepeatedPtrField< ::com::zhichenhaixin::proto::TrackPoint >*
RadarSurfaceTrack::mutable_trackpoints() {
  // @@protoc_insertion_point(field_mutable_list:com.zhichenhaixin.proto.RadarSurfaceTrack.trackPoints)
  return &trackpoints_;
}

// -------------------------------------------------------------------

// RadarVideoImage

// required uint64 radarId = 1;
inline bool RadarVideoImage::has_radarid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RadarVideoImage::set_has_radarid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RadarVideoImage::clear_has_radarid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RadarVideoImage::clear_radarid() {
  radarid_ = GOOGLE_ULONGLONG(0);
  clear_has_radarid();
}
inline ::google::protobuf::uint64 RadarVideoImage::radarid() const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.proto.RadarVideoImage.radarId)
  return radarid_;
}
inline void RadarVideoImage::set_radarid(::google::protobuf::uint64 value) {
  set_has_radarid();
  radarid_ = value;
  // @@protoc_insertion_point(field_set:com.zhichenhaixin.proto.RadarVideoImage.radarId)
}

// required string radarName = 2;
inline bool RadarVideoImage::has_radarname() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RadarVideoImage::set_has_radarname() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RadarVideoImage::clear_has_radarname() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RadarVideoImage::clear_radarname() {
  if (radarname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    radarname_->clear();
  }
  clear_has_radarname();
}
inline const ::std::string& RadarVideoImage::radarname() const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.proto.RadarVideoImage.radarName)
  return *radarname_;
}
inline void RadarVideoImage::set_radarname(const ::std::string& value) {
  set_has_radarname();
  if (radarname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    radarname_ = new ::std::string;
  }
  radarname_->assign(value);
  // @@protoc_insertion_point(field_set:com.zhichenhaixin.proto.RadarVideoImage.radarName)
}
inline void RadarVideoImage::set_radarname(const char* value) {
  set_has_radarname();
  if (radarname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    radarname_ = new ::std::string;
  }
  radarname_->assign(value);
  // @@protoc_insertion_point(field_set_char:com.zhichenhaixin.proto.RadarVideoImage.radarName)
}
inline void RadarVideoImage::set_radarname(const char* value, size_t size) {
  set_has_radarname();
  if (radarname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    radarname_ = new ::std::string;
  }
  radarname_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:com.zhichenhaixin.proto.RadarVideoImage.radarName)
}
inline ::std::string* RadarVideoImage::mutable_radarname() {
  set_has_radarname();
  if (radarname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    radarname_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:com.zhichenhaixin.proto.RadarVideoImage.radarName)
  return radarname_;
}
inline ::std::string* RadarVideoImage::release_radarname() {
  clear_has_radarname();
  if (radarname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = radarname_;
    radarname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void RadarVideoImage::set_allocated_radarname(::std::string* radarname) {
  if (radarname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete radarname_;
  }
  if (radarname) {
    set_has_radarname();
    radarname_ = radarname;
  } else {
    clear_has_radarname();
    radarname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:com.zhichenhaixin.proto.RadarVideoImage.radarName)
}

// required .com.zhichenhaixin.proto.Latlon center = 3;
inline bool RadarVideoImage::has_center() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void RadarVideoImage::set_has_center() {
  _has_bits_[0] |= 0x00000004u;
}
inline void RadarVideoImage::clear_has_center() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void RadarVideoImage::clear_center() {
  if (center_ != NULL) center_->::com::zhichenhaixin::proto::Latlon::Clear();
  clear_has_center();
}
inline const ::com::zhichenhaixin::proto::Latlon& RadarVideoImage::center() const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.proto.RadarVideoImage.center)
  return center_ != NULL ? *center_ : *default_instance_->center_;
}
inline ::com::zhichenhaixin::proto::Latlon* RadarVideoImage::mutable_center() {
  set_has_center();
  if (center_ == NULL) center_ = new ::com::zhichenhaixin::proto::Latlon;
  // @@protoc_insertion_point(field_mutable:com.zhichenhaixin.proto.RadarVideoImage.center)
  return center_;
}
inline ::com::zhichenhaixin::proto::Latlon* RadarVideoImage::release_center() {
  clear_has_center();
  ::com::zhichenhaixin::proto::Latlon* temp = center_;
  center_ = NULL;
  return temp;
}
inline void RadarVideoImage::set_allocated_center(::com::zhichenhaixin::proto::Latlon* center) {
  delete center_;
  center_ = center;
  if (center) {
    set_has_center();
  } else {
    clear_has_center();
  }
  // @@protoc_insertion_point(field_set_allocated:com.zhichenhaixin.proto.RadarVideoImage.center)
}

// required uint64 UTC = 4;
inline bool RadarVideoImage::has_utc() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void RadarVideoImage::set_has_utc() {
  _has_bits_[0] |= 0x00000008u;
}
inline void RadarVideoImage::clear_has_utc() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void RadarVideoImage::clear_utc() {
  utc_ = GOOGLE_ULONGLONG(0);
  clear_has_utc();
}
inline ::google::protobuf::uint64 RadarVideoImage::utc() const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.proto.RadarVideoImage.UTC)
  return utc_;
}
inline void RadarVideoImage::set_utc(::google::protobuf::uint64 value) {
  set_has_utc();
  utc_ = value;
  // @@protoc_insertion_point(field_set:com.zhichenhaixin.proto.RadarVideoImage.UTC)
}

// required bytes imageData = 5;
inline bool RadarVideoImage::has_imagedata() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void RadarVideoImage::set_has_imagedata() {
  _has_bits_[0] |= 0x00000010u;
}
inline void RadarVideoImage::clear_has_imagedata() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void RadarVideoImage::clear_imagedata() {
  if (imagedata_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    imagedata_->clear();
  }
  clear_has_imagedata();
}
inline const ::std::string& RadarVideoImage::imagedata() const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.proto.RadarVideoImage.imageData)
  return *imagedata_;
}
inline void RadarVideoImage::set_imagedata(const ::std::string& value) {
  set_has_imagedata();
  if (imagedata_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    imagedata_ = new ::std::string;
  }
  imagedata_->assign(value);
  // @@protoc_insertion_point(field_set:com.zhichenhaixin.proto.RadarVideoImage.imageData)
}
inline void RadarVideoImage::set_imagedata(const char* value) {
  set_has_imagedata();
  if (imagedata_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    imagedata_ = new ::std::string;
  }
  imagedata_->assign(value);
  // @@protoc_insertion_point(field_set_char:com.zhichenhaixin.proto.RadarVideoImage.imageData)
}
inline void RadarVideoImage::set_imagedata(const void* value, size_t size) {
  set_has_imagedata();
  if (imagedata_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    imagedata_ = new ::std::string;
  }
  imagedata_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:com.zhichenhaixin.proto.RadarVideoImage.imageData)
}
inline ::std::string* RadarVideoImage::mutable_imagedata() {
  set_has_imagedata();
  if (imagedata_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    imagedata_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:com.zhichenhaixin.proto.RadarVideoImage.imageData)
  return imagedata_;
}
inline ::std::string* RadarVideoImage::release_imagedata() {
  clear_has_imagedata();
  if (imagedata_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = imagedata_;
    imagedata_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void RadarVideoImage::set_allocated_imagedata(::std::string* imagedata) {
  if (imagedata_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete imagedata_;
  }
  if (imagedata) {
    set_has_imagedata();
    imagedata_ = imagedata;
  } else {
    clear_has_imagedata();
    imagedata_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:com.zhichenhaixin.proto.RadarVideoImage.imageData)
}

// required uint32 width = 6;
inline bool RadarVideoImage::has_width() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void RadarVideoImage::set_has_width() {
  _has_bits_[0] |= 0x00000020u;
}
inline void RadarVideoImage::clear_has_width() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void RadarVideoImage::clear_width() {
  width_ = 0u;
  clear_has_width();
}
inline ::google::protobuf::uint32 RadarVideoImage::width() const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.proto.RadarVideoImage.width)
  return width_;
}
inline void RadarVideoImage::set_width(::google::protobuf::uint32 value) {
  set_has_width();
  width_ = value;
  // @@protoc_insertion_point(field_set:com.zhichenhaixin.proto.RadarVideoImage.width)
}

// required uint32 height = 7;
inline bool RadarVideoImage::has_height() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void RadarVideoImage::set_has_height() {
  _has_bits_[0] |= 0x00000040u;
}
inline void RadarVideoImage::clear_has_height() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void RadarVideoImage::clear_height() {
  height_ = 0u;
  clear_has_height();
}
inline ::google::protobuf::uint32 RadarVideoImage::height() const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.proto.RadarVideoImage.height)
  return height_;
}
inline void RadarVideoImage::set_height(::google::protobuf::uint32 value) {
  set_has_height();
  height_ = value;
  // @@protoc_insertion_point(field_set:com.zhichenhaixin.proto.RadarVideoImage.height)
}

// required double radius = 8;
inline bool RadarVideoImage::has_radius() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void RadarVideoImage::set_has_radius() {
  _has_bits_[0] |= 0x00000080u;
}
inline void RadarVideoImage::clear_has_radius() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void RadarVideoImage::clear_radius() {
  radius_ = 0;
  clear_has_radius();
}
inline double RadarVideoImage::radius() const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.proto.RadarVideoImage.radius)
  return radius_;
}
inline void RadarVideoImage::set_radius(double value) {
  set_has_radius();
  radius_ = value;
  // @@protoc_insertion_point(field_set:com.zhichenhaixin.proto.RadarVideoImage.radius)
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace zhichenhaixin
}  // namespace com

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::com::zhichenhaixin::proto::MSGTYP> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::com::zhichenhaixin::proto::MSGTYP>() {
  return ::com::zhichenhaixin::proto::MSGTYP_descriptor();
}
template <> struct is_proto_enum< ::com::zhichenhaixin::proto::CNF> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::com::zhichenhaixin::proto::CNF>() {
  return ::com::zhichenhaixin::proto::CNF_descriptor();
}
template <> struct is_proto_enum< ::com::zhichenhaixin::proto::CST> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::com::zhichenhaixin::proto::CST>() {
  return ::com::zhichenhaixin::proto::CST_descriptor();
}
template <> struct is_proto_enum< ::com::zhichenhaixin::proto::STH> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::com::zhichenhaixin::proto::STH>() {
  return ::com::zhichenhaixin::proto::STH_descriptor();
}
template <> struct is_proto_enum< ::com::zhichenhaixin::proto::RES> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::com::zhichenhaixin::proto::RES>() {
  return ::com::zhichenhaixin::proto::RES_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_ZCHXRadarDataDef_2eproto__INCLUDED
