// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ZCHXRadarVideo.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "ZCHXRadarVideo.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace com {
namespace zhichenhaixin {
namespace proto {

namespace {

const ::google::protobuf::Descriptor* singleVideoBlock_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  singleVideoBlock_reflection_ = NULL;
const ::google::protobuf::Descriptor* pixelPoint_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  pixelPoint_reflection_ = NULL;
const ::google::protobuf::Descriptor* fixRectPixelImg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  fixRectPixelImg_reflection_ = NULL;
const ::google::protobuf::Descriptor* predictionArea_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  predictionArea_reflection_ = NULL;
const ::google::protobuf::Descriptor* RadarRectDef_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RadarRectDef_reflection_ = NULL;
const ::google::protobuf::Descriptor* RoutePath_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RoutePath_reflection_ = NULL;
const ::google::protobuf::Descriptor* RouteNode_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RouteNode_reflection_ = NULL;
const ::google::protobuf::Descriptor* RouteNodes_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RouteNodes_reflection_ = NULL;
const ::google::protobuf::Descriptor* RadarRect_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RadarRect_reflection_ = NULL;
const ::google::protobuf::Descriptor* RadarRects_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RadarRects_reflection_ = NULL;
const ::google::protobuf::Descriptor* RadarVideo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RadarVideo_reflection_ = NULL;
const ::google::protobuf::Descriptor* RadarVideoPoint_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RadarVideoPoint_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_ZCHXRadarVideo_2eproto() {
  protobuf_AddDesc_ZCHXRadarVideo_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "ZCHXRadarVideo.proto");
  GOOGLE_CHECK(file != NULL);
  singleVideoBlock_descriptor_ = file->message_type(0);
  static const int singleVideoBlock_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(singleVideoBlock, latitude_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(singleVideoBlock, longitude_),
  };
  singleVideoBlock_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      singleVideoBlock_descriptor_,
      singleVideoBlock::default_instance_,
      singleVideoBlock_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(singleVideoBlock, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(singleVideoBlock, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(singleVideoBlock));
  pixelPoint_descriptor_ = file->message_type(1);
  static const int pixelPoint_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pixelPoint, x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pixelPoint, y_),
  };
  pixelPoint_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      pixelPoint_descriptor_,
      pixelPoint::default_instance_,
      pixelPoint_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pixelPoint, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pixelPoint, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(pixelPoint));
  fixRectPixelImg_descriptor_ = file->message_type(2);
  static const int fixRectPixelImg_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fixRectPixelImg, width_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fixRectPixelImg, height_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fixRectPixelImg, points_),
  };
  fixRectPixelImg_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      fixRectPixelImg_descriptor_,
      fixRectPixelImg::default_instance_,
      fixRectPixelImg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fixRectPixelImg, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(fixRectPixelImg, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(fixRectPixelImg));
  predictionArea_descriptor_ = file->message_type(3);
  static const int predictionArea_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(predictionArea, area_),
  };
  predictionArea_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      predictionArea_descriptor_,
      predictionArea::default_instance_,
      predictionArea_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(predictionArea, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(predictionArea, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(predictionArea));
  RadarRectDef_descriptor_ = file->message_type(4);
  static const int RadarRectDef_offsets_[21] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RadarRectDef, rectnumber_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RadarRectDef, topleftlatitude_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RadarRectDef, topleftlongitude_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RadarRectDef, bottomrightlatitude_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RadarRectDef, bottomrightlongitude_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RadarRectDef, centerlatitude_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RadarRectDef, centerlongitude_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RadarRectDef, updatetime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RadarRectDef, diameter_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RadarRectDef, blocks_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RadarRectDef, startlatitude_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RadarRectDef, startlongitude_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RadarRectDef, endlatitude_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RadarRectDef, endlongitude_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RadarRectDef, angle_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RadarRectDef, sog_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RadarRectDef, cog_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RadarRectDef, pixelpnts_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RadarRectDef, realdata_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RadarRectDef, predictionareas_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RadarRectDef, videocycleindex_),
  };
  RadarRectDef_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RadarRectDef_descriptor_,
      RadarRectDef::default_instance_,
      RadarRectDef_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RadarRectDef, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RadarRectDef, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RadarRectDef));
  RoutePath_descriptor_ = file->message_type(5);
  static const int RoutePath_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoutePath, path_),
  };
  RoutePath_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RoutePath_descriptor_,
      RoutePath::default_instance_,
      RoutePath_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoutePath, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RoutePath, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RoutePath));
  RouteNode_descriptor_ = file->message_type(6);
  static const int RouteNode_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RouteNode, node_num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RouteNode, top_node_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RouteNode, path_list_),
  };
  RouteNode_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RouteNode_descriptor_,
      RouteNode::default_instance_,
      RouteNode_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RouteNode, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RouteNode, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RouteNode));
  RouteNodes_descriptor_ = file->message_type(7);
  static const int RouteNodes_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RouteNodes, node_list_),
  };
  RouteNodes_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RouteNodes_descriptor_,
      RouteNodes::default_instance_,
      RouteNodes_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RouteNodes, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RouteNodes, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RouteNodes));
  RadarRect_descriptor_ = file->message_type(8);
  static const int RadarRect_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RadarRect, current_rect_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RadarRect, history_rect_list_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RadarRect, dir_confirmed_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RadarRect, cur_est_count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RadarRect, node_num_),
  };
  RadarRect_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RadarRect_descriptor_,
      RadarRect::default_instance_,
      RadarRect_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RadarRect, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RadarRect, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RadarRect));
  RadarRects_descriptor_ = file->message_type(9);
  static const int RadarRects_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RadarRects, utc_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RadarRects, length_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RadarRects, rect_list_),
  };
  RadarRects_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RadarRects_descriptor_,
      RadarRects::default_instance_,
      RadarRects_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RadarRects, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RadarRects, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RadarRects));
  RadarVideo_descriptor_ = file->message_type(10);
  static const int RadarVideo_offsets_[13] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RadarVideo, radarid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RadarVideo, radarname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RadarVideo, latitude_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RadarVideo, longitude_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RadarVideo, utc_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RadarVideo, imagedata_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RadarVideo, curimagedata_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RadarVideo, preimagedata_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RadarVideo, width_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RadarVideo, height_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RadarVideo, radius_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RadarVideo, curindex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RadarVideo, loopnum_),
  };
  RadarVideo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RadarVideo_descriptor_,
      RadarVideo::default_instance_,
      RadarVideo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RadarVideo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RadarVideo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RadarVideo));
  RadarVideoPoint_descriptor_ = file->message_type(11);
  static const int RadarVideoPoint_offsets_[11] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RadarVideoPoint, radarname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RadarVideoPoint, latitude_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RadarVideoPoint, longitude_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RadarVideoPoint, utc_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RadarVideoPoint, imagedata_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RadarVideoPoint, preimagedata_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RadarVideoPoint, width_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RadarVideoPoint, height_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RadarVideoPoint, radius_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RadarVideoPoint, curindex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RadarVideoPoint, loopnum_),
  };
  RadarVideoPoint_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RadarVideoPoint_descriptor_,
      RadarVideoPoint::default_instance_,
      RadarVideoPoint_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RadarVideoPoint, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RadarVideoPoint, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RadarVideoPoint));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_ZCHXRadarVideo_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    singleVideoBlock_descriptor_, &singleVideoBlock::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    pixelPoint_descriptor_, &pixelPoint::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    fixRectPixelImg_descriptor_, &fixRectPixelImg::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    predictionArea_descriptor_, &predictionArea::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RadarRectDef_descriptor_, &RadarRectDef::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RoutePath_descriptor_, &RoutePath::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RouteNode_descriptor_, &RouteNode::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RouteNodes_descriptor_, &RouteNodes::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RadarRect_descriptor_, &RadarRect::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RadarRects_descriptor_, &RadarRects::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RadarVideo_descriptor_, &RadarVideo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RadarVideoPoint_descriptor_, &RadarVideoPoint::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_ZCHXRadarVideo_2eproto() {
  delete singleVideoBlock::default_instance_;
  delete singleVideoBlock_reflection_;
  delete pixelPoint::default_instance_;
  delete pixelPoint_reflection_;
  delete fixRectPixelImg::default_instance_;
  delete fixRectPixelImg_reflection_;
  delete predictionArea::default_instance_;
  delete predictionArea_reflection_;
  delete RadarRectDef::default_instance_;
  delete RadarRectDef_reflection_;
  delete RoutePath::default_instance_;
  delete RoutePath_reflection_;
  delete RouteNode::default_instance_;
  delete RouteNode_reflection_;
  delete RouteNodes::default_instance_;
  delete RouteNodes_reflection_;
  delete RadarRect::default_instance_;
  delete RadarRect_reflection_;
  delete RadarRects::default_instance_;
  delete RadarRects_reflection_;
  delete RadarVideo::default_instance_;
  delete RadarVideo_reflection_;
  delete RadarVideoPoint::default_instance_;
  delete RadarVideoPoint_reflection_;
}

void protobuf_AddDesc_ZCHXRadarVideo_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\024ZCHXRadarVideo.proto\022\027com.zhichenhaixi"
    "n.proto\"7\n\020singleVideoBlock\022\020\n\010latitude\030"
    "\001 \002(\001\022\021\n\tlongitude\030\002 \002(\001\"\"\n\npixelPoint\022\t"
    "\n\001x\030\001 \002(\r\022\t\n\001y\030\002 \002(\r\"e\n\017fixRectPixelImg\022"
    "\r\n\005width\030\001 \002(\r\022\016\n\006height\030\002 \002(\r\0223\n\006points"
    "\030\003 \003(\0132#.com.zhichenhaixin.proto.pixelPo"
    "int\"I\n\016predictionArea\0227\n\004area\030\001 \003(\0132).co"
    "m.zhichenhaixin.proto.singleVideoBlock\"\312"
    "\004\n\014RadarRectDef\022\022\n\nrectNumber\030\001 \002(\r\022\027\n\017t"
    "opLeftlatitude\030\002 \002(\001\022\030\n\020topLeftlongitude"
    "\030\003 \002(\001\022\033\n\023bottomRightlatitude\030\004 \002(\001\022\034\n\024b"
    "ottomRightlongitude\030\005 \002(\001\022\026\n\016centerlatit"
    "ude\030\006 \002(\001\022\027\n\017centerlongitude\030\007 \002(\001\022\022\n\nup"
    "dateTime\030\010 \002(\r\022\020\n\010diameter\030\t \001(\005\0229\n\006Bloc"
    "ks\030\n \003(\0132).com.zhichenhaixin.proto.singl"
    "eVideoBlock\022\025\n\rstartlatitude\030\013 \001(\001\022\026\n\016st"
    "artlongitude\030\014 \001(\001\022\023\n\013endlatitude\030\r \001(\001\022"
    "\024\n\014endlongitude\030\016 \001(\001\022\r\n\005angle\030\017 \001(\001\022\013\n\003"
    "sog\030\020 \002(\001\022\013\n\003cog\030\021 \002(\001\0226\n\tpixelPnts\030\022 \003("
    "\0132#.com.zhichenhaixin.proto.pixelPoint\022\020"
    "\n\010realData\030\023 \002(\010\022@\n\017predictionAreas\030\024 \001("
    "\0132\'.com.zhichenhaixin.proto.predictionAr"
    "ea\022\027\n\017videoCycleIndex\030\025 \001(\005\"@\n\tRoutePath"
    "\0223\n\004path\030\001 \003(\0132%.com.zhichenhaixin.proto"
    ".RadarRectDef\"\215\001\n\tRouteNode\022\020\n\010node_num\030"
    "\001 \002(\005\0227\n\010top_node\030\002 \002(\0132%.com.zhichenhai"
    "xin.proto.RadarRectDef\0225\n\tpath_list\030\003 \003("
    "\0132\".com.zhichenhaixin.proto.RoutePath\"C\n"
    "\nRouteNodes\0225\n\tnode_list\030\001 \003(\0132\".com.zhi"
    "chenhaixin.proto.RouteNode\"\312\001\n\tRadarRect"
    "\022;\n\014current_rect\030\001 \002(\0132%.com.zhichenhaix"
    "in.proto.RadarRectDef\022@\n\021history_rect_li"
    "st\030\002 \003(\0132%.com.zhichenhaixin.proto.Radar"
    "RectDef\022\025\n\rdir_confirmed\030\003 \002(\010\022\025\n\rcur_es"
    "t_count\030\004 \002(\r\022\020\n\010node_num\030\005 \002(\005\"`\n\nRadar"
    "Rects\022\013\n\003UTC\030\001 \002(\004\022\016\n\006length\030\002 \002(\005\0225\n\tre"
    "ct_list\030\003 \003(\0132\".com.zhichenhaixin.proto."
    "RadarRect\"\363\001\n\nRadarVideo\022\017\n\007radarId\030\001 \002("
    "\004\022\021\n\tradarName\030\002 \002(\t\022\020\n\010latitude\030\003 \002(\001\022\021"
    "\n\tlongitude\030\004 \002(\001\022\013\n\003UTC\030\005 \002(\004\022\021\n\timageD"
    "ata\030\006 \002(\014\022\024\n\014curImageData\030\007 \002(\014\022\024\n\014preIm"
    "ageData\030\010 \002(\014\022\r\n\005width\030\t \002(\r\022\016\n\006height\030\n"
    " \002(\r\022\016\n\006radius\030\013 \002(\001\022\020\n\010curIndex\030\014 \002(\r\022\017"
    "\n\007loopNum\030\r \002(\r\"\321\001\n\017RadarVideoPoint\022\021\n\tr"
    "adarName\030\002 \002(\t\022\020\n\010latitude\030\003 \002(\001\022\021\n\tlong"
    "itude\030\004 \002(\001\022\013\n\003UTC\030\005 \002(\004\022\021\n\timageData\030\006 "
    "\002(\014\022\024\n\014preImageData\030\007 \002(\014\022\r\n\005width\030\010 \002(\r"
    "\022\016\n\006height\030\t \002(\r\022\016\n\006radius\030\n \002(\001\022\020\n\010curI"
    "ndex\030\013 \002(\r\022\017\n\007loopNum\030\014 \002(\r", 1947);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "ZCHXRadarVideo.proto", &protobuf_RegisterTypes);
  singleVideoBlock::default_instance_ = new singleVideoBlock();
  pixelPoint::default_instance_ = new pixelPoint();
  fixRectPixelImg::default_instance_ = new fixRectPixelImg();
  predictionArea::default_instance_ = new predictionArea();
  RadarRectDef::default_instance_ = new RadarRectDef();
  RoutePath::default_instance_ = new RoutePath();
  RouteNode::default_instance_ = new RouteNode();
  RouteNodes::default_instance_ = new RouteNodes();
  RadarRect::default_instance_ = new RadarRect();
  RadarRects::default_instance_ = new RadarRects();
  RadarVideo::default_instance_ = new RadarVideo();
  RadarVideoPoint::default_instance_ = new RadarVideoPoint();
  singleVideoBlock::default_instance_->InitAsDefaultInstance();
  pixelPoint::default_instance_->InitAsDefaultInstance();
  fixRectPixelImg::default_instance_->InitAsDefaultInstance();
  predictionArea::default_instance_->InitAsDefaultInstance();
  RadarRectDef::default_instance_->InitAsDefaultInstance();
  RoutePath::default_instance_->InitAsDefaultInstance();
  RouteNode::default_instance_->InitAsDefaultInstance();
  RouteNodes::default_instance_->InitAsDefaultInstance();
  RadarRect::default_instance_->InitAsDefaultInstance();
  RadarRects::default_instance_->InitAsDefaultInstance();
  RadarVideo::default_instance_->InitAsDefaultInstance();
  RadarVideoPoint::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_ZCHXRadarVideo_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_ZCHXRadarVideo_2eproto {
  StaticDescriptorInitializer_ZCHXRadarVideo_2eproto() {
    protobuf_AddDesc_ZCHXRadarVideo_2eproto();
  }
} static_descriptor_initializer_ZCHXRadarVideo_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int singleVideoBlock::kLatitudeFieldNumber;
const int singleVideoBlock::kLongitudeFieldNumber;
#endif  // !_MSC_VER

singleVideoBlock::singleVideoBlock()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.zhichenhaixin.proto.singleVideoBlock)
}

void singleVideoBlock::InitAsDefaultInstance() {
}

singleVideoBlock::singleVideoBlock(const singleVideoBlock& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:com.zhichenhaixin.proto.singleVideoBlock)
}

void singleVideoBlock::SharedCtor() {
  _cached_size_ = 0;
  latitude_ = 0;
  longitude_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

singleVideoBlock::~singleVideoBlock() {
  // @@protoc_insertion_point(destructor:com.zhichenhaixin.proto.singleVideoBlock)
  SharedDtor();
}

void singleVideoBlock::SharedDtor() {
  if (this != default_instance_) {
  }
}

void singleVideoBlock::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* singleVideoBlock::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return singleVideoBlock_descriptor_;
}

const singleVideoBlock& singleVideoBlock::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ZCHXRadarVideo_2eproto();
  return *default_instance_;
}

singleVideoBlock* singleVideoBlock::default_instance_ = NULL;

singleVideoBlock* singleVideoBlock::New() const {
  return new singleVideoBlock;
}

void singleVideoBlock::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<singleVideoBlock*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(latitude_, longitude_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool singleVideoBlock::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.zhichenhaixin.proto.singleVideoBlock)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required double latitude = 1;
      case 1: {
        if (tag == 9) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &latitude_)));
          set_has_latitude();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(17)) goto parse_longitude;
        break;
      }

      // required double longitude = 2;
      case 2: {
        if (tag == 17) {
         parse_longitude:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &longitude_)));
          set_has_longitude();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.zhichenhaixin.proto.singleVideoBlock)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.zhichenhaixin.proto.singleVideoBlock)
  return false;
#undef DO_
}

void singleVideoBlock::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.zhichenhaixin.proto.singleVideoBlock)
  // required double latitude = 1;
  if (has_latitude()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->latitude(), output);
  }

  // required double longitude = 2;
  if (has_longitude()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->longitude(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.zhichenhaixin.proto.singleVideoBlock)
}

::google::protobuf::uint8* singleVideoBlock::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.zhichenhaixin.proto.singleVideoBlock)
  // required double latitude = 1;
  if (has_latitude()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->latitude(), target);
  }

  // required double longitude = 2;
  if (has_longitude()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->longitude(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.zhichenhaixin.proto.singleVideoBlock)
  return target;
}

int singleVideoBlock::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required double latitude = 1;
    if (has_latitude()) {
      total_size += 1 + 8;
    }

    // required double longitude = 2;
    if (has_longitude()) {
      total_size += 1 + 8;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void singleVideoBlock::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const singleVideoBlock* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const singleVideoBlock*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void singleVideoBlock::MergeFrom(const singleVideoBlock& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_latitude()) {
      set_latitude(from.latitude());
    }
    if (from.has_longitude()) {
      set_longitude(from.longitude());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void singleVideoBlock::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void singleVideoBlock::CopyFrom(const singleVideoBlock& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool singleVideoBlock::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void singleVideoBlock::Swap(singleVideoBlock* other) {
  if (other != this) {
    std::swap(latitude_, other->latitude_);
    std::swap(longitude_, other->longitude_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata singleVideoBlock::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = singleVideoBlock_descriptor_;
  metadata.reflection = singleVideoBlock_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int pixelPoint::kXFieldNumber;
const int pixelPoint::kYFieldNumber;
#endif  // !_MSC_VER

pixelPoint::pixelPoint()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.zhichenhaixin.proto.pixelPoint)
}

void pixelPoint::InitAsDefaultInstance() {
}

pixelPoint::pixelPoint(const pixelPoint& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:com.zhichenhaixin.proto.pixelPoint)
}

void pixelPoint::SharedCtor() {
  _cached_size_ = 0;
  x_ = 0u;
  y_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

pixelPoint::~pixelPoint() {
  // @@protoc_insertion_point(destructor:com.zhichenhaixin.proto.pixelPoint)
  SharedDtor();
}

void pixelPoint::SharedDtor() {
  if (this != default_instance_) {
  }
}

void pixelPoint::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* pixelPoint::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return pixelPoint_descriptor_;
}

const pixelPoint& pixelPoint::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ZCHXRadarVideo_2eproto();
  return *default_instance_;
}

pixelPoint* pixelPoint::default_instance_ = NULL;

pixelPoint* pixelPoint::New() const {
  return new pixelPoint;
}

void pixelPoint::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<pixelPoint*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(x_, y_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool pixelPoint::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.zhichenhaixin.proto.pixelPoint)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 x = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &x_)));
          set_has_x();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_y;
        break;
      }

      // required uint32 y = 2;
      case 2: {
        if (tag == 16) {
         parse_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &y_)));
          set_has_y();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.zhichenhaixin.proto.pixelPoint)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.zhichenhaixin.proto.pixelPoint)
  return false;
#undef DO_
}

void pixelPoint::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.zhichenhaixin.proto.pixelPoint)
  // required uint32 x = 1;
  if (has_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->x(), output);
  }

  // required uint32 y = 2;
  if (has_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->y(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.zhichenhaixin.proto.pixelPoint)
}

::google::protobuf::uint8* pixelPoint::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.zhichenhaixin.proto.pixelPoint)
  // required uint32 x = 1;
  if (has_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->x(), target);
  }

  // required uint32 y = 2;
  if (has_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->y(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.zhichenhaixin.proto.pixelPoint)
  return target;
}

int pixelPoint::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 x = 1;
    if (has_x()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->x());
    }

    // required uint32 y = 2;
    if (has_y()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->y());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void pixelPoint::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const pixelPoint* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const pixelPoint*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void pixelPoint::MergeFrom(const pixelPoint& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_x()) {
      set_x(from.x());
    }
    if (from.has_y()) {
      set_y(from.y());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void pixelPoint::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void pixelPoint::CopyFrom(const pixelPoint& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool pixelPoint::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void pixelPoint::Swap(pixelPoint* other) {
  if (other != this) {
    std::swap(x_, other->x_);
    std::swap(y_, other->y_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata pixelPoint::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = pixelPoint_descriptor_;
  metadata.reflection = pixelPoint_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int fixRectPixelImg::kWidthFieldNumber;
const int fixRectPixelImg::kHeightFieldNumber;
const int fixRectPixelImg::kPointsFieldNumber;
#endif  // !_MSC_VER

fixRectPixelImg::fixRectPixelImg()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.zhichenhaixin.proto.fixRectPixelImg)
}

void fixRectPixelImg::InitAsDefaultInstance() {
}

fixRectPixelImg::fixRectPixelImg(const fixRectPixelImg& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:com.zhichenhaixin.proto.fixRectPixelImg)
}

void fixRectPixelImg::SharedCtor() {
  _cached_size_ = 0;
  width_ = 0u;
  height_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

fixRectPixelImg::~fixRectPixelImg() {
  // @@protoc_insertion_point(destructor:com.zhichenhaixin.proto.fixRectPixelImg)
  SharedDtor();
}

void fixRectPixelImg::SharedDtor() {
  if (this != default_instance_) {
  }
}

void fixRectPixelImg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* fixRectPixelImg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return fixRectPixelImg_descriptor_;
}

const fixRectPixelImg& fixRectPixelImg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ZCHXRadarVideo_2eproto();
  return *default_instance_;
}

fixRectPixelImg* fixRectPixelImg::default_instance_ = NULL;

fixRectPixelImg* fixRectPixelImg::New() const {
  return new fixRectPixelImg;
}

void fixRectPixelImg::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<fixRectPixelImg*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(width_, height_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  points_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool fixRectPixelImg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.zhichenhaixin.proto.fixRectPixelImg)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 width = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &width_)));
          set_has_width();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_height;
        break;
      }

      // required uint32 height = 2;
      case 2: {
        if (tag == 16) {
         parse_height:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &height_)));
          set_has_height();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_points;
        break;
      }

      // repeated .com.zhichenhaixin.proto.pixelPoint points = 3;
      case 3: {
        if (tag == 26) {
         parse_points:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_points()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_points;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.zhichenhaixin.proto.fixRectPixelImg)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.zhichenhaixin.proto.fixRectPixelImg)
  return false;
#undef DO_
}

void fixRectPixelImg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.zhichenhaixin.proto.fixRectPixelImg)
  // required uint32 width = 1;
  if (has_width()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->width(), output);
  }

  // required uint32 height = 2;
  if (has_height()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->height(), output);
  }

  // repeated .com.zhichenhaixin.proto.pixelPoint points = 3;
  for (int i = 0; i < this->points_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->points(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.zhichenhaixin.proto.fixRectPixelImg)
}

::google::protobuf::uint8* fixRectPixelImg::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.zhichenhaixin.proto.fixRectPixelImg)
  // required uint32 width = 1;
  if (has_width()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->width(), target);
  }

  // required uint32 height = 2;
  if (has_height()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->height(), target);
  }

  // repeated .com.zhichenhaixin.proto.pixelPoint points = 3;
  for (int i = 0; i < this->points_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->points(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.zhichenhaixin.proto.fixRectPixelImg)
  return target;
}

int fixRectPixelImg::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 width = 1;
    if (has_width()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->width());
    }

    // required uint32 height = 2;
    if (has_height()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->height());
    }

  }
  // repeated .com.zhichenhaixin.proto.pixelPoint points = 3;
  total_size += 1 * this->points_size();
  for (int i = 0; i < this->points_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->points(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void fixRectPixelImg::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const fixRectPixelImg* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const fixRectPixelImg*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void fixRectPixelImg::MergeFrom(const fixRectPixelImg& from) {
  GOOGLE_CHECK_NE(&from, this);
  points_.MergeFrom(from.points_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_width()) {
      set_width(from.width());
    }
    if (from.has_height()) {
      set_height(from.height());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void fixRectPixelImg::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void fixRectPixelImg::CopyFrom(const fixRectPixelImg& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool fixRectPixelImg::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->points())) return false;
  return true;
}

void fixRectPixelImg::Swap(fixRectPixelImg* other) {
  if (other != this) {
    std::swap(width_, other->width_);
    std::swap(height_, other->height_);
    points_.Swap(&other->points_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata fixRectPixelImg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = fixRectPixelImg_descriptor_;
  metadata.reflection = fixRectPixelImg_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int predictionArea::kAreaFieldNumber;
#endif  // !_MSC_VER

predictionArea::predictionArea()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.zhichenhaixin.proto.predictionArea)
}

void predictionArea::InitAsDefaultInstance() {
}

predictionArea::predictionArea(const predictionArea& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:com.zhichenhaixin.proto.predictionArea)
}

void predictionArea::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

predictionArea::~predictionArea() {
  // @@protoc_insertion_point(destructor:com.zhichenhaixin.proto.predictionArea)
  SharedDtor();
}

void predictionArea::SharedDtor() {
  if (this != default_instance_) {
  }
}

void predictionArea::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* predictionArea::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return predictionArea_descriptor_;
}

const predictionArea& predictionArea::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ZCHXRadarVideo_2eproto();
  return *default_instance_;
}

predictionArea* predictionArea::default_instance_ = NULL;

predictionArea* predictionArea::New() const {
  return new predictionArea;
}

void predictionArea::Clear() {
  area_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool predictionArea::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.zhichenhaixin.proto.predictionArea)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .com.zhichenhaixin.proto.singleVideoBlock area = 1;
      case 1: {
        if (tag == 10) {
         parse_area:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_area()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_area;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.zhichenhaixin.proto.predictionArea)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.zhichenhaixin.proto.predictionArea)
  return false;
#undef DO_
}

void predictionArea::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.zhichenhaixin.proto.predictionArea)
  // repeated .com.zhichenhaixin.proto.singleVideoBlock area = 1;
  for (int i = 0; i < this->area_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->area(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.zhichenhaixin.proto.predictionArea)
}

::google::protobuf::uint8* predictionArea::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.zhichenhaixin.proto.predictionArea)
  // repeated .com.zhichenhaixin.proto.singleVideoBlock area = 1;
  for (int i = 0; i < this->area_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->area(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.zhichenhaixin.proto.predictionArea)
  return target;
}

int predictionArea::ByteSize() const {
  int total_size = 0;

  // repeated .com.zhichenhaixin.proto.singleVideoBlock area = 1;
  total_size += 1 * this->area_size();
  for (int i = 0; i < this->area_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->area(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void predictionArea::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const predictionArea* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const predictionArea*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void predictionArea::MergeFrom(const predictionArea& from) {
  GOOGLE_CHECK_NE(&from, this);
  area_.MergeFrom(from.area_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void predictionArea::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void predictionArea::CopyFrom(const predictionArea& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool predictionArea::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->area())) return false;
  return true;
}

void predictionArea::Swap(predictionArea* other) {
  if (other != this) {
    area_.Swap(&other->area_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata predictionArea::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = predictionArea_descriptor_;
  metadata.reflection = predictionArea_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RadarRectDef::kRectNumberFieldNumber;
const int RadarRectDef::kTopLeftlatitudeFieldNumber;
const int RadarRectDef::kTopLeftlongitudeFieldNumber;
const int RadarRectDef::kBottomRightlatitudeFieldNumber;
const int RadarRectDef::kBottomRightlongitudeFieldNumber;
const int RadarRectDef::kCenterlatitudeFieldNumber;
const int RadarRectDef::kCenterlongitudeFieldNumber;
const int RadarRectDef::kUpdateTimeFieldNumber;
const int RadarRectDef::kDiameterFieldNumber;
const int RadarRectDef::kBlocksFieldNumber;
const int RadarRectDef::kStartlatitudeFieldNumber;
const int RadarRectDef::kStartlongitudeFieldNumber;
const int RadarRectDef::kEndlatitudeFieldNumber;
const int RadarRectDef::kEndlongitudeFieldNumber;
const int RadarRectDef::kAngleFieldNumber;
const int RadarRectDef::kSogFieldNumber;
const int RadarRectDef::kCogFieldNumber;
const int RadarRectDef::kPixelPntsFieldNumber;
const int RadarRectDef::kRealDataFieldNumber;
const int RadarRectDef::kPredictionAreasFieldNumber;
const int RadarRectDef::kVideoCycleIndexFieldNumber;
#endif  // !_MSC_VER

RadarRectDef::RadarRectDef()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.zhichenhaixin.proto.RadarRectDef)
}

void RadarRectDef::InitAsDefaultInstance() {
  predictionareas_ = const_cast< ::com::zhichenhaixin::proto::predictionArea*>(&::com::zhichenhaixin::proto::predictionArea::default_instance());
}

RadarRectDef::RadarRectDef(const RadarRectDef& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:com.zhichenhaixin.proto.RadarRectDef)
}

void RadarRectDef::SharedCtor() {
  _cached_size_ = 0;
  rectnumber_ = 0u;
  topleftlatitude_ = 0;
  topleftlongitude_ = 0;
  bottomrightlatitude_ = 0;
  bottomrightlongitude_ = 0;
  centerlatitude_ = 0;
  centerlongitude_ = 0;
  updatetime_ = 0u;
  diameter_ = 0;
  startlatitude_ = 0;
  startlongitude_ = 0;
  endlatitude_ = 0;
  endlongitude_ = 0;
  angle_ = 0;
  sog_ = 0;
  cog_ = 0;
  realdata_ = false;
  predictionareas_ = NULL;
  videocycleindex_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RadarRectDef::~RadarRectDef() {
  // @@protoc_insertion_point(destructor:com.zhichenhaixin.proto.RadarRectDef)
  SharedDtor();
}

void RadarRectDef::SharedDtor() {
  if (this != default_instance_) {
    delete predictionareas_;
  }
}

void RadarRectDef::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RadarRectDef::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RadarRectDef_descriptor_;
}

const RadarRectDef& RadarRectDef::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ZCHXRadarVideo_2eproto();
  return *default_instance_;
}

RadarRectDef* RadarRectDef::default_instance_ = NULL;

RadarRectDef* RadarRectDef::New() const {
  return new RadarRectDef;
}

void RadarRectDef::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<RadarRectDef*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(topleftlatitude_, centerlongitude_);
  }
  if (_has_bits_[8 / 32] & 64768) {
    ZR_(startlatitude_, diameter_);
    ZR_(angle_, sog_);
  }
  if (_has_bits_[16 / 32] & 1900544) {
    cog_ = 0;
    realdata_ = false;
    if (has_predictionareas()) {
      if (predictionareas_ != NULL) predictionareas_->::com::zhichenhaixin::proto::predictionArea::Clear();
    }
    videocycleindex_ = 0;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  blocks_.Clear();
  pixelpnts_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RadarRectDef::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.zhichenhaixin.proto.RadarRectDef)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 rectNumber = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &rectnumber_)));
          set_has_rectnumber();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(17)) goto parse_topLeftlatitude;
        break;
      }

      // required double topLeftlatitude = 2;
      case 2: {
        if (tag == 17) {
         parse_topLeftlatitude:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &topleftlatitude_)));
          set_has_topleftlatitude();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(25)) goto parse_topLeftlongitude;
        break;
      }

      // required double topLeftlongitude = 3;
      case 3: {
        if (tag == 25) {
         parse_topLeftlongitude:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &topleftlongitude_)));
          set_has_topleftlongitude();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(33)) goto parse_bottomRightlatitude;
        break;
      }

      // required double bottomRightlatitude = 4;
      case 4: {
        if (tag == 33) {
         parse_bottomRightlatitude:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &bottomrightlatitude_)));
          set_has_bottomrightlatitude();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(41)) goto parse_bottomRightlongitude;
        break;
      }

      // required double bottomRightlongitude = 5;
      case 5: {
        if (tag == 41) {
         parse_bottomRightlongitude:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &bottomrightlongitude_)));
          set_has_bottomrightlongitude();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(49)) goto parse_centerlatitude;
        break;
      }

      // required double centerlatitude = 6;
      case 6: {
        if (tag == 49) {
         parse_centerlatitude:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &centerlatitude_)));
          set_has_centerlatitude();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(57)) goto parse_centerlongitude;
        break;
      }

      // required double centerlongitude = 7;
      case 7: {
        if (tag == 57) {
         parse_centerlongitude:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &centerlongitude_)));
          set_has_centerlongitude();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_updateTime;
        break;
      }

      // required uint32 updateTime = 8;
      case 8: {
        if (tag == 64) {
         parse_updateTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &updatetime_)));
          set_has_updatetime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_diameter;
        break;
      }

      // optional int32 diameter = 9;
      case 9: {
        if (tag == 72) {
         parse_diameter:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &diameter_)));
          set_has_diameter();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_Blocks;
        break;
      }

      // repeated .com.zhichenhaixin.proto.singleVideoBlock Blocks = 10;
      case 10: {
        if (tag == 82) {
         parse_Blocks:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_blocks()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_Blocks;
        if (input->ExpectTag(89)) goto parse_startlatitude;
        break;
      }

      // optional double startlatitude = 11;
      case 11: {
        if (tag == 89) {
         parse_startlatitude:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &startlatitude_)));
          set_has_startlatitude();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(97)) goto parse_startlongitude;
        break;
      }

      // optional double startlongitude = 12;
      case 12: {
        if (tag == 97) {
         parse_startlongitude:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &startlongitude_)));
          set_has_startlongitude();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(105)) goto parse_endlatitude;
        break;
      }

      // optional double endlatitude = 13;
      case 13: {
        if (tag == 105) {
         parse_endlatitude:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &endlatitude_)));
          set_has_endlatitude();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(113)) goto parse_endlongitude;
        break;
      }

      // optional double endlongitude = 14;
      case 14: {
        if (tag == 113) {
         parse_endlongitude:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &endlongitude_)));
          set_has_endlongitude();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(121)) goto parse_angle;
        break;
      }

      // optional double angle = 15;
      case 15: {
        if (tag == 121) {
         parse_angle:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &angle_)));
          set_has_angle();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(129)) goto parse_sog;
        break;
      }

      // required double sog = 16;
      case 16: {
        if (tag == 129) {
         parse_sog:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &sog_)));
          set_has_sog();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(137)) goto parse_cog;
        break;
      }

      // required double cog = 17;
      case 17: {
        if (tag == 137) {
         parse_cog:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &cog_)));
          set_has_cog();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(146)) goto parse_pixelPnts;
        break;
      }

      // repeated .com.zhichenhaixin.proto.pixelPoint pixelPnts = 18;
      case 18: {
        if (tag == 146) {
         parse_pixelPnts:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_pixelpnts()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(146)) goto parse_pixelPnts;
        if (input->ExpectTag(152)) goto parse_realData;
        break;
      }

      // required bool realData = 19;
      case 19: {
        if (tag == 152) {
         parse_realData:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &realdata_)));
          set_has_realdata();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(162)) goto parse_predictionAreas;
        break;
      }

      // optional .com.zhichenhaixin.proto.predictionArea predictionAreas = 20;
      case 20: {
        if (tag == 162) {
         parse_predictionAreas:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_predictionareas()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(168)) goto parse_videoCycleIndex;
        break;
      }

      // optional int32 videoCycleIndex = 21;
      case 21: {
        if (tag == 168) {
         parse_videoCycleIndex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &videocycleindex_)));
          set_has_videocycleindex();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.zhichenhaixin.proto.RadarRectDef)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.zhichenhaixin.proto.RadarRectDef)
  return false;
#undef DO_
}

void RadarRectDef::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.zhichenhaixin.proto.RadarRectDef)
  // required uint32 rectNumber = 1;
  if (has_rectnumber()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->rectnumber(), output);
  }

  // required double topLeftlatitude = 2;
  if (has_topleftlatitude()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->topleftlatitude(), output);
  }

  // required double topLeftlongitude = 3;
  if (has_topleftlongitude()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->topleftlongitude(), output);
  }

  // required double bottomRightlatitude = 4;
  if (has_bottomrightlatitude()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->bottomrightlatitude(), output);
  }

  // required double bottomRightlongitude = 5;
  if (has_bottomrightlongitude()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->bottomrightlongitude(), output);
  }

  // required double centerlatitude = 6;
  if (has_centerlatitude()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->centerlatitude(), output);
  }

  // required double centerlongitude = 7;
  if (has_centerlongitude()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(7, this->centerlongitude(), output);
  }

  // required uint32 updateTime = 8;
  if (has_updatetime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->updatetime(), output);
  }

  // optional int32 diameter = 9;
  if (has_diameter()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->diameter(), output);
  }

  // repeated .com.zhichenhaixin.proto.singleVideoBlock Blocks = 10;
  for (int i = 0; i < this->blocks_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->blocks(i), output);
  }

  // optional double startlatitude = 11;
  if (has_startlatitude()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(11, this->startlatitude(), output);
  }

  // optional double startlongitude = 12;
  if (has_startlongitude()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(12, this->startlongitude(), output);
  }

  // optional double endlatitude = 13;
  if (has_endlatitude()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(13, this->endlatitude(), output);
  }

  // optional double endlongitude = 14;
  if (has_endlongitude()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(14, this->endlongitude(), output);
  }

  // optional double angle = 15;
  if (has_angle()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(15, this->angle(), output);
  }

  // required double sog = 16;
  if (has_sog()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(16, this->sog(), output);
  }

  // required double cog = 17;
  if (has_cog()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(17, this->cog(), output);
  }

  // repeated .com.zhichenhaixin.proto.pixelPoint pixelPnts = 18;
  for (int i = 0; i < this->pixelpnts_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      18, this->pixelpnts(i), output);
  }

  // required bool realData = 19;
  if (has_realdata()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(19, this->realdata(), output);
  }

  // optional .com.zhichenhaixin.proto.predictionArea predictionAreas = 20;
  if (has_predictionareas()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      20, this->predictionareas(), output);
  }

  // optional int32 videoCycleIndex = 21;
  if (has_videocycleindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(21, this->videocycleindex(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.zhichenhaixin.proto.RadarRectDef)
}

::google::protobuf::uint8* RadarRectDef::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.zhichenhaixin.proto.RadarRectDef)
  // required uint32 rectNumber = 1;
  if (has_rectnumber()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->rectnumber(), target);
  }

  // required double topLeftlatitude = 2;
  if (has_topleftlatitude()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->topleftlatitude(), target);
  }

  // required double topLeftlongitude = 3;
  if (has_topleftlongitude()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->topleftlongitude(), target);
  }

  // required double bottomRightlatitude = 4;
  if (has_bottomrightlatitude()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->bottomrightlatitude(), target);
  }

  // required double bottomRightlongitude = 5;
  if (has_bottomrightlongitude()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->bottomrightlongitude(), target);
  }

  // required double centerlatitude = 6;
  if (has_centerlatitude()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->centerlatitude(), target);
  }

  // required double centerlongitude = 7;
  if (has_centerlongitude()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(7, this->centerlongitude(), target);
  }

  // required uint32 updateTime = 8;
  if (has_updatetime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->updatetime(), target);
  }

  // optional int32 diameter = 9;
  if (has_diameter()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->diameter(), target);
  }

  // repeated .com.zhichenhaixin.proto.singleVideoBlock Blocks = 10;
  for (int i = 0; i < this->blocks_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, this->blocks(i), target);
  }

  // optional double startlatitude = 11;
  if (has_startlatitude()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(11, this->startlatitude(), target);
  }

  // optional double startlongitude = 12;
  if (has_startlongitude()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(12, this->startlongitude(), target);
  }

  // optional double endlatitude = 13;
  if (has_endlatitude()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(13, this->endlatitude(), target);
  }

  // optional double endlongitude = 14;
  if (has_endlongitude()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(14, this->endlongitude(), target);
  }

  // optional double angle = 15;
  if (has_angle()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(15, this->angle(), target);
  }

  // required double sog = 16;
  if (has_sog()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(16, this->sog(), target);
  }

  // required double cog = 17;
  if (has_cog()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(17, this->cog(), target);
  }

  // repeated .com.zhichenhaixin.proto.pixelPoint pixelPnts = 18;
  for (int i = 0; i < this->pixelpnts_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        18, this->pixelpnts(i), target);
  }

  // required bool realData = 19;
  if (has_realdata()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(19, this->realdata(), target);
  }

  // optional .com.zhichenhaixin.proto.predictionArea predictionAreas = 20;
  if (has_predictionareas()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        20, this->predictionareas(), target);
  }

  // optional int32 videoCycleIndex = 21;
  if (has_videocycleindex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(21, this->videocycleindex(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.zhichenhaixin.proto.RadarRectDef)
  return target;
}

int RadarRectDef::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 rectNumber = 1;
    if (has_rectnumber()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->rectnumber());
    }

    // required double topLeftlatitude = 2;
    if (has_topleftlatitude()) {
      total_size += 1 + 8;
    }

    // required double topLeftlongitude = 3;
    if (has_topleftlongitude()) {
      total_size += 1 + 8;
    }

    // required double bottomRightlatitude = 4;
    if (has_bottomrightlatitude()) {
      total_size += 1 + 8;
    }

    // required double bottomRightlongitude = 5;
    if (has_bottomrightlongitude()) {
      total_size += 1 + 8;
    }

    // required double centerlatitude = 6;
    if (has_centerlatitude()) {
      total_size += 1 + 8;
    }

    // required double centerlongitude = 7;
    if (has_centerlongitude()) {
      total_size += 1 + 8;
    }

    // required uint32 updateTime = 8;
    if (has_updatetime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->updatetime());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 diameter = 9;
    if (has_diameter()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->diameter());
    }

    // optional double startlatitude = 11;
    if (has_startlatitude()) {
      total_size += 1 + 8;
    }

    // optional double startlongitude = 12;
    if (has_startlongitude()) {
      total_size += 1 + 8;
    }

    // optional double endlatitude = 13;
    if (has_endlatitude()) {
      total_size += 1 + 8;
    }

    // optional double endlongitude = 14;
    if (has_endlongitude()) {
      total_size += 1 + 8;
    }

    // optional double angle = 15;
    if (has_angle()) {
      total_size += 1 + 8;
    }

    // required double sog = 16;
    if (has_sog()) {
      total_size += 2 + 8;
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // required double cog = 17;
    if (has_cog()) {
      total_size += 2 + 8;
    }

    // required bool realData = 19;
    if (has_realdata()) {
      total_size += 2 + 1;
    }

    // optional .com.zhichenhaixin.proto.predictionArea predictionAreas = 20;
    if (has_predictionareas()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->predictionareas());
    }

    // optional int32 videoCycleIndex = 21;
    if (has_videocycleindex()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->videocycleindex());
    }

  }
  // repeated .com.zhichenhaixin.proto.singleVideoBlock Blocks = 10;
  total_size += 1 * this->blocks_size();
  for (int i = 0; i < this->blocks_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->blocks(i));
  }

  // repeated .com.zhichenhaixin.proto.pixelPoint pixelPnts = 18;
  total_size += 2 * this->pixelpnts_size();
  for (int i = 0; i < this->pixelpnts_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->pixelpnts(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RadarRectDef::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RadarRectDef* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RadarRectDef*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RadarRectDef::MergeFrom(const RadarRectDef& from) {
  GOOGLE_CHECK_NE(&from, this);
  blocks_.MergeFrom(from.blocks_);
  pixelpnts_.MergeFrom(from.pixelpnts_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_rectnumber()) {
      set_rectnumber(from.rectnumber());
    }
    if (from.has_topleftlatitude()) {
      set_topleftlatitude(from.topleftlatitude());
    }
    if (from.has_topleftlongitude()) {
      set_topleftlongitude(from.topleftlongitude());
    }
    if (from.has_bottomrightlatitude()) {
      set_bottomrightlatitude(from.bottomrightlatitude());
    }
    if (from.has_bottomrightlongitude()) {
      set_bottomrightlongitude(from.bottomrightlongitude());
    }
    if (from.has_centerlatitude()) {
      set_centerlatitude(from.centerlatitude());
    }
    if (from.has_centerlongitude()) {
      set_centerlongitude(from.centerlongitude());
    }
    if (from.has_updatetime()) {
      set_updatetime(from.updatetime());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_diameter()) {
      set_diameter(from.diameter());
    }
    if (from.has_startlatitude()) {
      set_startlatitude(from.startlatitude());
    }
    if (from.has_startlongitude()) {
      set_startlongitude(from.startlongitude());
    }
    if (from.has_endlatitude()) {
      set_endlatitude(from.endlatitude());
    }
    if (from.has_endlongitude()) {
      set_endlongitude(from.endlongitude());
    }
    if (from.has_angle()) {
      set_angle(from.angle());
    }
    if (from.has_sog()) {
      set_sog(from.sog());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_cog()) {
      set_cog(from.cog());
    }
    if (from.has_realdata()) {
      set_realdata(from.realdata());
    }
    if (from.has_predictionareas()) {
      mutable_predictionareas()->::com::zhichenhaixin::proto::predictionArea::MergeFrom(from.predictionareas());
    }
    if (from.has_videocycleindex()) {
      set_videocycleindex(from.videocycleindex());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RadarRectDef::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RadarRectDef::CopyFrom(const RadarRectDef& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RadarRectDef::IsInitialized() const {
  if ((_has_bits_[0] & 0x000580ff) != 0x000580ff) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->blocks())) return false;
  if (!::google::protobuf::internal::AllAreInitialized(this->pixelpnts())) return false;
  if (has_predictionareas()) {
    if (!this->predictionareas().IsInitialized()) return false;
  }
  return true;
}

void RadarRectDef::Swap(RadarRectDef* other) {
  if (other != this) {
    std::swap(rectnumber_, other->rectnumber_);
    std::swap(topleftlatitude_, other->topleftlatitude_);
    std::swap(topleftlongitude_, other->topleftlongitude_);
    std::swap(bottomrightlatitude_, other->bottomrightlatitude_);
    std::swap(bottomrightlongitude_, other->bottomrightlongitude_);
    std::swap(centerlatitude_, other->centerlatitude_);
    std::swap(centerlongitude_, other->centerlongitude_);
    std::swap(updatetime_, other->updatetime_);
    std::swap(diameter_, other->diameter_);
    blocks_.Swap(&other->blocks_);
    std::swap(startlatitude_, other->startlatitude_);
    std::swap(startlongitude_, other->startlongitude_);
    std::swap(endlatitude_, other->endlatitude_);
    std::swap(endlongitude_, other->endlongitude_);
    std::swap(angle_, other->angle_);
    std::swap(sog_, other->sog_);
    std::swap(cog_, other->cog_);
    pixelpnts_.Swap(&other->pixelpnts_);
    std::swap(realdata_, other->realdata_);
    std::swap(predictionareas_, other->predictionareas_);
    std::swap(videocycleindex_, other->videocycleindex_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RadarRectDef::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RadarRectDef_descriptor_;
  metadata.reflection = RadarRectDef_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RoutePath::kPathFieldNumber;
#endif  // !_MSC_VER

RoutePath::RoutePath()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.zhichenhaixin.proto.RoutePath)
}

void RoutePath::InitAsDefaultInstance() {
}

RoutePath::RoutePath(const RoutePath& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:com.zhichenhaixin.proto.RoutePath)
}

void RoutePath::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RoutePath::~RoutePath() {
  // @@protoc_insertion_point(destructor:com.zhichenhaixin.proto.RoutePath)
  SharedDtor();
}

void RoutePath::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RoutePath::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RoutePath::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RoutePath_descriptor_;
}

const RoutePath& RoutePath::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ZCHXRadarVideo_2eproto();
  return *default_instance_;
}

RoutePath* RoutePath::default_instance_ = NULL;

RoutePath* RoutePath::New() const {
  return new RoutePath;
}

void RoutePath::Clear() {
  path_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RoutePath::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.zhichenhaixin.proto.RoutePath)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .com.zhichenhaixin.proto.RadarRectDef path = 1;
      case 1: {
        if (tag == 10) {
         parse_path:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_path()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_path;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.zhichenhaixin.proto.RoutePath)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.zhichenhaixin.proto.RoutePath)
  return false;
#undef DO_
}

void RoutePath::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.zhichenhaixin.proto.RoutePath)
  // repeated .com.zhichenhaixin.proto.RadarRectDef path = 1;
  for (int i = 0; i < this->path_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->path(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.zhichenhaixin.proto.RoutePath)
}

::google::protobuf::uint8* RoutePath::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.zhichenhaixin.proto.RoutePath)
  // repeated .com.zhichenhaixin.proto.RadarRectDef path = 1;
  for (int i = 0; i < this->path_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->path(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.zhichenhaixin.proto.RoutePath)
  return target;
}

int RoutePath::ByteSize() const {
  int total_size = 0;

  // repeated .com.zhichenhaixin.proto.RadarRectDef path = 1;
  total_size += 1 * this->path_size();
  for (int i = 0; i < this->path_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->path(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RoutePath::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RoutePath* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RoutePath*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RoutePath::MergeFrom(const RoutePath& from) {
  GOOGLE_CHECK_NE(&from, this);
  path_.MergeFrom(from.path_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RoutePath::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RoutePath::CopyFrom(const RoutePath& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RoutePath::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->path())) return false;
  return true;
}

void RoutePath::Swap(RoutePath* other) {
  if (other != this) {
    path_.Swap(&other->path_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RoutePath::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RoutePath_descriptor_;
  metadata.reflection = RoutePath_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RouteNode::kNodeNumFieldNumber;
const int RouteNode::kTopNodeFieldNumber;
const int RouteNode::kPathListFieldNumber;
#endif  // !_MSC_VER

RouteNode::RouteNode()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.zhichenhaixin.proto.RouteNode)
}

void RouteNode::InitAsDefaultInstance() {
  top_node_ = const_cast< ::com::zhichenhaixin::proto::RadarRectDef*>(&::com::zhichenhaixin::proto::RadarRectDef::default_instance());
}

RouteNode::RouteNode(const RouteNode& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:com.zhichenhaixin.proto.RouteNode)
}

void RouteNode::SharedCtor() {
  _cached_size_ = 0;
  node_num_ = 0;
  top_node_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RouteNode::~RouteNode() {
  // @@protoc_insertion_point(destructor:com.zhichenhaixin.proto.RouteNode)
  SharedDtor();
}

void RouteNode::SharedDtor() {
  if (this != default_instance_) {
    delete top_node_;
  }
}

void RouteNode::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RouteNode::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RouteNode_descriptor_;
}

const RouteNode& RouteNode::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ZCHXRadarVideo_2eproto();
  return *default_instance_;
}

RouteNode* RouteNode::default_instance_ = NULL;

RouteNode* RouteNode::New() const {
  return new RouteNode;
}

void RouteNode::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    node_num_ = 0;
    if (has_top_node()) {
      if (top_node_ != NULL) top_node_->::com::zhichenhaixin::proto::RadarRectDef::Clear();
    }
  }
  path_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RouteNode::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.zhichenhaixin.proto.RouteNode)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 node_num = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &node_num_)));
          set_has_node_num();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_top_node;
        break;
      }

      // required .com.zhichenhaixin.proto.RadarRectDef top_node = 2;
      case 2: {
        if (tag == 18) {
         parse_top_node:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_top_node()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_path_list;
        break;
      }

      // repeated .com.zhichenhaixin.proto.RoutePath path_list = 3;
      case 3: {
        if (tag == 26) {
         parse_path_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_path_list()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_path_list;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.zhichenhaixin.proto.RouteNode)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.zhichenhaixin.proto.RouteNode)
  return false;
#undef DO_
}

void RouteNode::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.zhichenhaixin.proto.RouteNode)
  // required int32 node_num = 1;
  if (has_node_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->node_num(), output);
  }

  // required .com.zhichenhaixin.proto.RadarRectDef top_node = 2;
  if (has_top_node()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->top_node(), output);
  }

  // repeated .com.zhichenhaixin.proto.RoutePath path_list = 3;
  for (int i = 0; i < this->path_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->path_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.zhichenhaixin.proto.RouteNode)
}

::google::protobuf::uint8* RouteNode::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.zhichenhaixin.proto.RouteNode)
  // required int32 node_num = 1;
  if (has_node_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->node_num(), target);
  }

  // required .com.zhichenhaixin.proto.RadarRectDef top_node = 2;
  if (has_top_node()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->top_node(), target);
  }

  // repeated .com.zhichenhaixin.proto.RoutePath path_list = 3;
  for (int i = 0; i < this->path_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->path_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.zhichenhaixin.proto.RouteNode)
  return target;
}

int RouteNode::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 node_num = 1;
    if (has_node_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->node_num());
    }

    // required .com.zhichenhaixin.proto.RadarRectDef top_node = 2;
    if (has_top_node()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->top_node());
    }

  }
  // repeated .com.zhichenhaixin.proto.RoutePath path_list = 3;
  total_size += 1 * this->path_list_size();
  for (int i = 0; i < this->path_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->path_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RouteNode::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RouteNode* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RouteNode*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RouteNode::MergeFrom(const RouteNode& from) {
  GOOGLE_CHECK_NE(&from, this);
  path_list_.MergeFrom(from.path_list_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_node_num()) {
      set_node_num(from.node_num());
    }
    if (from.has_top_node()) {
      mutable_top_node()->::com::zhichenhaixin::proto::RadarRectDef::MergeFrom(from.top_node());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RouteNode::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RouteNode::CopyFrom(const RouteNode& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RouteNode::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_top_node()) {
    if (!this->top_node().IsInitialized()) return false;
  }
  if (!::google::protobuf::internal::AllAreInitialized(this->path_list())) return false;
  return true;
}

void RouteNode::Swap(RouteNode* other) {
  if (other != this) {
    std::swap(node_num_, other->node_num_);
    std::swap(top_node_, other->top_node_);
    path_list_.Swap(&other->path_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RouteNode::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RouteNode_descriptor_;
  metadata.reflection = RouteNode_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RouteNodes::kNodeListFieldNumber;
#endif  // !_MSC_VER

RouteNodes::RouteNodes()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.zhichenhaixin.proto.RouteNodes)
}

void RouteNodes::InitAsDefaultInstance() {
}

RouteNodes::RouteNodes(const RouteNodes& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:com.zhichenhaixin.proto.RouteNodes)
}

void RouteNodes::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RouteNodes::~RouteNodes() {
  // @@protoc_insertion_point(destructor:com.zhichenhaixin.proto.RouteNodes)
  SharedDtor();
}

void RouteNodes::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RouteNodes::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RouteNodes::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RouteNodes_descriptor_;
}

const RouteNodes& RouteNodes::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ZCHXRadarVideo_2eproto();
  return *default_instance_;
}

RouteNodes* RouteNodes::default_instance_ = NULL;

RouteNodes* RouteNodes::New() const {
  return new RouteNodes;
}

void RouteNodes::Clear() {
  node_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RouteNodes::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.zhichenhaixin.proto.RouteNodes)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .com.zhichenhaixin.proto.RouteNode node_list = 1;
      case 1: {
        if (tag == 10) {
         parse_node_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_node_list()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_node_list;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.zhichenhaixin.proto.RouteNodes)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.zhichenhaixin.proto.RouteNodes)
  return false;
#undef DO_
}

void RouteNodes::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.zhichenhaixin.proto.RouteNodes)
  // repeated .com.zhichenhaixin.proto.RouteNode node_list = 1;
  for (int i = 0; i < this->node_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->node_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.zhichenhaixin.proto.RouteNodes)
}

::google::protobuf::uint8* RouteNodes::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.zhichenhaixin.proto.RouteNodes)
  // repeated .com.zhichenhaixin.proto.RouteNode node_list = 1;
  for (int i = 0; i < this->node_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->node_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.zhichenhaixin.proto.RouteNodes)
  return target;
}

int RouteNodes::ByteSize() const {
  int total_size = 0;

  // repeated .com.zhichenhaixin.proto.RouteNode node_list = 1;
  total_size += 1 * this->node_list_size();
  for (int i = 0; i < this->node_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->node_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RouteNodes::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RouteNodes* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RouteNodes*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RouteNodes::MergeFrom(const RouteNodes& from) {
  GOOGLE_CHECK_NE(&from, this);
  node_list_.MergeFrom(from.node_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RouteNodes::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RouteNodes::CopyFrom(const RouteNodes& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RouteNodes::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->node_list())) return false;
  return true;
}

void RouteNodes::Swap(RouteNodes* other) {
  if (other != this) {
    node_list_.Swap(&other->node_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RouteNodes::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RouteNodes_descriptor_;
  metadata.reflection = RouteNodes_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RadarRect::kCurrentRectFieldNumber;
const int RadarRect::kHistoryRectListFieldNumber;
const int RadarRect::kDirConfirmedFieldNumber;
const int RadarRect::kCurEstCountFieldNumber;
const int RadarRect::kNodeNumFieldNumber;
#endif  // !_MSC_VER

RadarRect::RadarRect()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.zhichenhaixin.proto.RadarRect)
}

void RadarRect::InitAsDefaultInstance() {
  current_rect_ = const_cast< ::com::zhichenhaixin::proto::RadarRectDef*>(&::com::zhichenhaixin::proto::RadarRectDef::default_instance());
}

RadarRect::RadarRect(const RadarRect& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:com.zhichenhaixin.proto.RadarRect)
}

void RadarRect::SharedCtor() {
  _cached_size_ = 0;
  current_rect_ = NULL;
  dir_confirmed_ = false;
  cur_est_count_ = 0u;
  node_num_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RadarRect::~RadarRect() {
  // @@protoc_insertion_point(destructor:com.zhichenhaixin.proto.RadarRect)
  SharedDtor();
}

void RadarRect::SharedDtor() {
  if (this != default_instance_) {
    delete current_rect_;
  }
}

void RadarRect::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RadarRect::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RadarRect_descriptor_;
}

const RadarRect& RadarRect::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ZCHXRadarVideo_2eproto();
  return *default_instance_;
}

RadarRect* RadarRect::default_instance_ = NULL;

RadarRect* RadarRect::New() const {
  return new RadarRect;
}

void RadarRect::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<RadarRect*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 29) {
    ZR_(dir_confirmed_, node_num_);
    if (has_current_rect()) {
      if (current_rect_ != NULL) current_rect_->::com::zhichenhaixin::proto::RadarRectDef::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  history_rect_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RadarRect::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.zhichenhaixin.proto.RadarRect)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .com.zhichenhaixin.proto.RadarRectDef current_rect = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_current_rect()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_history_rect_list;
        break;
      }

      // repeated .com.zhichenhaixin.proto.RadarRectDef history_rect_list = 2;
      case 2: {
        if (tag == 18) {
         parse_history_rect_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_history_rect_list()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_history_rect_list;
        if (input->ExpectTag(24)) goto parse_dir_confirmed;
        break;
      }

      // required bool dir_confirmed = 3;
      case 3: {
        if (tag == 24) {
         parse_dir_confirmed:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &dir_confirmed_)));
          set_has_dir_confirmed();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_cur_est_count;
        break;
      }

      // required uint32 cur_est_count = 4;
      case 4: {
        if (tag == 32) {
         parse_cur_est_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cur_est_count_)));
          set_has_cur_est_count();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_node_num;
        break;
      }

      // required int32 node_num = 5;
      case 5: {
        if (tag == 40) {
         parse_node_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &node_num_)));
          set_has_node_num();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.zhichenhaixin.proto.RadarRect)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.zhichenhaixin.proto.RadarRect)
  return false;
#undef DO_
}

void RadarRect::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.zhichenhaixin.proto.RadarRect)
  // required .com.zhichenhaixin.proto.RadarRectDef current_rect = 1;
  if (has_current_rect()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->current_rect(), output);
  }

  // repeated .com.zhichenhaixin.proto.RadarRectDef history_rect_list = 2;
  for (int i = 0; i < this->history_rect_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->history_rect_list(i), output);
  }

  // required bool dir_confirmed = 3;
  if (has_dir_confirmed()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->dir_confirmed(), output);
  }

  // required uint32 cur_est_count = 4;
  if (has_cur_est_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->cur_est_count(), output);
  }

  // required int32 node_num = 5;
  if (has_node_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->node_num(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.zhichenhaixin.proto.RadarRect)
}

::google::protobuf::uint8* RadarRect::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.zhichenhaixin.proto.RadarRect)
  // required .com.zhichenhaixin.proto.RadarRectDef current_rect = 1;
  if (has_current_rect()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->current_rect(), target);
  }

  // repeated .com.zhichenhaixin.proto.RadarRectDef history_rect_list = 2;
  for (int i = 0; i < this->history_rect_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->history_rect_list(i), target);
  }

  // required bool dir_confirmed = 3;
  if (has_dir_confirmed()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->dir_confirmed(), target);
  }

  // required uint32 cur_est_count = 4;
  if (has_cur_est_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->cur_est_count(), target);
  }

  // required int32 node_num = 5;
  if (has_node_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->node_num(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.zhichenhaixin.proto.RadarRect)
  return target;
}

int RadarRect::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .com.zhichenhaixin.proto.RadarRectDef current_rect = 1;
    if (has_current_rect()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->current_rect());
    }

    // required bool dir_confirmed = 3;
    if (has_dir_confirmed()) {
      total_size += 1 + 1;
    }

    // required uint32 cur_est_count = 4;
    if (has_cur_est_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->cur_est_count());
    }

    // required int32 node_num = 5;
    if (has_node_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->node_num());
    }

  }
  // repeated .com.zhichenhaixin.proto.RadarRectDef history_rect_list = 2;
  total_size += 1 * this->history_rect_list_size();
  for (int i = 0; i < this->history_rect_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->history_rect_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RadarRect::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RadarRect* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RadarRect*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RadarRect::MergeFrom(const RadarRect& from) {
  GOOGLE_CHECK_NE(&from, this);
  history_rect_list_.MergeFrom(from.history_rect_list_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_current_rect()) {
      mutable_current_rect()->::com::zhichenhaixin::proto::RadarRectDef::MergeFrom(from.current_rect());
    }
    if (from.has_dir_confirmed()) {
      set_dir_confirmed(from.dir_confirmed());
    }
    if (from.has_cur_est_count()) {
      set_cur_est_count(from.cur_est_count());
    }
    if (from.has_node_num()) {
      set_node_num(from.node_num());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RadarRect::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RadarRect::CopyFrom(const RadarRect& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RadarRect::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001d) != 0x0000001d) return false;

  if (has_current_rect()) {
    if (!this->current_rect().IsInitialized()) return false;
  }
  if (!::google::protobuf::internal::AllAreInitialized(this->history_rect_list())) return false;
  return true;
}

void RadarRect::Swap(RadarRect* other) {
  if (other != this) {
    std::swap(current_rect_, other->current_rect_);
    history_rect_list_.Swap(&other->history_rect_list_);
    std::swap(dir_confirmed_, other->dir_confirmed_);
    std::swap(cur_est_count_, other->cur_est_count_);
    std::swap(node_num_, other->node_num_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RadarRect::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RadarRect_descriptor_;
  metadata.reflection = RadarRect_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RadarRects::kUTCFieldNumber;
const int RadarRects::kLengthFieldNumber;
const int RadarRects::kRectListFieldNumber;
#endif  // !_MSC_VER

RadarRects::RadarRects()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.zhichenhaixin.proto.RadarRects)
}

void RadarRects::InitAsDefaultInstance() {
}

RadarRects::RadarRects(const RadarRects& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:com.zhichenhaixin.proto.RadarRects)
}

void RadarRects::SharedCtor() {
  _cached_size_ = 0;
  utc_ = GOOGLE_ULONGLONG(0);
  length_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RadarRects::~RadarRects() {
  // @@protoc_insertion_point(destructor:com.zhichenhaixin.proto.RadarRects)
  SharedDtor();
}

void RadarRects::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RadarRects::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RadarRects::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RadarRects_descriptor_;
}

const RadarRects& RadarRects::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ZCHXRadarVideo_2eproto();
  return *default_instance_;
}

RadarRects* RadarRects::default_instance_ = NULL;

RadarRects* RadarRects::New() const {
  return new RadarRects;
}

void RadarRects::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    utc_ = GOOGLE_ULONGLONG(0);
    length_ = 0;
  }
  rect_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RadarRects::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.zhichenhaixin.proto.RadarRects)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 UTC = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &utc_)));
          set_has_utc();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_length;
        break;
      }

      // required int32 length = 2;
      case 2: {
        if (tag == 16) {
         parse_length:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &length_)));
          set_has_length();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_rect_list;
        break;
      }

      // repeated .com.zhichenhaixin.proto.RadarRect rect_list = 3;
      case 3: {
        if (tag == 26) {
         parse_rect_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_rect_list()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_rect_list;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.zhichenhaixin.proto.RadarRects)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.zhichenhaixin.proto.RadarRects)
  return false;
#undef DO_
}

void RadarRects::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.zhichenhaixin.proto.RadarRects)
  // required uint64 UTC = 1;
  if (has_utc()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->utc(), output);
  }

  // required int32 length = 2;
  if (has_length()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->length(), output);
  }

  // repeated .com.zhichenhaixin.proto.RadarRect rect_list = 3;
  for (int i = 0; i < this->rect_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->rect_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.zhichenhaixin.proto.RadarRects)
}

::google::protobuf::uint8* RadarRects::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.zhichenhaixin.proto.RadarRects)
  // required uint64 UTC = 1;
  if (has_utc()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->utc(), target);
  }

  // required int32 length = 2;
  if (has_length()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->length(), target);
  }

  // repeated .com.zhichenhaixin.proto.RadarRect rect_list = 3;
  for (int i = 0; i < this->rect_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->rect_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.zhichenhaixin.proto.RadarRects)
  return target;
}

int RadarRects::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 UTC = 1;
    if (has_utc()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->utc());
    }

    // required int32 length = 2;
    if (has_length()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->length());
    }

  }
  // repeated .com.zhichenhaixin.proto.RadarRect rect_list = 3;
  total_size += 1 * this->rect_list_size();
  for (int i = 0; i < this->rect_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->rect_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RadarRects::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RadarRects* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RadarRects*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RadarRects::MergeFrom(const RadarRects& from) {
  GOOGLE_CHECK_NE(&from, this);
  rect_list_.MergeFrom(from.rect_list_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_utc()) {
      set_utc(from.utc());
    }
    if (from.has_length()) {
      set_length(from.length());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RadarRects::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RadarRects::CopyFrom(const RadarRects& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RadarRects::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->rect_list())) return false;
  return true;
}

void RadarRects::Swap(RadarRects* other) {
  if (other != this) {
    std::swap(utc_, other->utc_);
    std::swap(length_, other->length_);
    rect_list_.Swap(&other->rect_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RadarRects::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RadarRects_descriptor_;
  metadata.reflection = RadarRects_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RadarVideo::kRadarIdFieldNumber;
const int RadarVideo::kRadarNameFieldNumber;
const int RadarVideo::kLatitudeFieldNumber;
const int RadarVideo::kLongitudeFieldNumber;
const int RadarVideo::kUTCFieldNumber;
const int RadarVideo::kImageDataFieldNumber;
const int RadarVideo::kCurImageDataFieldNumber;
const int RadarVideo::kPreImageDataFieldNumber;
const int RadarVideo::kWidthFieldNumber;
const int RadarVideo::kHeightFieldNumber;
const int RadarVideo::kRadiusFieldNumber;
const int RadarVideo::kCurIndexFieldNumber;
const int RadarVideo::kLoopNumFieldNumber;
#endif  // !_MSC_VER

RadarVideo::RadarVideo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.zhichenhaixin.proto.RadarVideo)
}

void RadarVideo::InitAsDefaultInstance() {
}

RadarVideo::RadarVideo(const RadarVideo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:com.zhichenhaixin.proto.RadarVideo)
}

void RadarVideo::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  radarid_ = GOOGLE_ULONGLONG(0);
  radarname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  latitude_ = 0;
  longitude_ = 0;
  utc_ = GOOGLE_ULONGLONG(0);
  imagedata_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  curimagedata_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  preimagedata_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  width_ = 0u;
  height_ = 0u;
  radius_ = 0;
  curindex_ = 0u;
  loopnum_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RadarVideo::~RadarVideo() {
  // @@protoc_insertion_point(destructor:com.zhichenhaixin.proto.RadarVideo)
  SharedDtor();
}

void RadarVideo::SharedDtor() {
  if (radarname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete radarname_;
  }
  if (imagedata_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete imagedata_;
  }
  if (curimagedata_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete curimagedata_;
  }
  if (preimagedata_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete preimagedata_;
  }
  if (this != default_instance_) {
  }
}

void RadarVideo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RadarVideo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RadarVideo_descriptor_;
}

const RadarVideo& RadarVideo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ZCHXRadarVideo_2eproto();
  return *default_instance_;
}

RadarVideo* RadarVideo::default_instance_ = NULL;

RadarVideo* RadarVideo::New() const {
  return new RadarVideo;
}

void RadarVideo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<RadarVideo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(latitude_, utc_);
    radarid_ = GOOGLE_ULONGLONG(0);
    if (has_radarname()) {
      if (radarname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        radarname_->clear();
      }
    }
    if (has_imagedata()) {
      if (imagedata_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        imagedata_->clear();
      }
    }
    if (has_curimagedata()) {
      if (curimagedata_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        curimagedata_->clear();
      }
    }
    if (has_preimagedata()) {
      if (preimagedata_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        preimagedata_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & 7936) {
    ZR_(width_, loopnum_);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RadarVideo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.zhichenhaixin.proto.RadarVideo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 radarId = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &radarid_)));
          set_has_radarid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_radarName;
        break;
      }

      // required string radarName = 2;
      case 2: {
        if (tag == 18) {
         parse_radarName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_radarname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->radarname().data(), this->radarname().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "radarname");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(25)) goto parse_latitude;
        break;
      }

      // required double latitude = 3;
      case 3: {
        if (tag == 25) {
         parse_latitude:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &latitude_)));
          set_has_latitude();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(33)) goto parse_longitude;
        break;
      }

      // required double longitude = 4;
      case 4: {
        if (tag == 33) {
         parse_longitude:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &longitude_)));
          set_has_longitude();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_UTC;
        break;
      }

      // required uint64 UTC = 5;
      case 5: {
        if (tag == 40) {
         parse_UTC:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &utc_)));
          set_has_utc();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_imageData;
        break;
      }

      // required bytes imageData = 6;
      case 6: {
        if (tag == 50) {
         parse_imageData:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_imagedata()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_curImageData;
        break;
      }

      // required bytes curImageData = 7;
      case 7: {
        if (tag == 58) {
         parse_curImageData:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_curimagedata()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_preImageData;
        break;
      }

      // required bytes preImageData = 8;
      case 8: {
        if (tag == 66) {
         parse_preImageData:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_preimagedata()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_width;
        break;
      }

      // required uint32 width = 9;
      case 9: {
        if (tag == 72) {
         parse_width:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &width_)));
          set_has_width();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_height;
        break;
      }

      // required uint32 height = 10;
      case 10: {
        if (tag == 80) {
         parse_height:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &height_)));
          set_has_height();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(89)) goto parse_radius;
        break;
      }

      // required double radius = 11;
      case 11: {
        if (tag == 89) {
         parse_radius:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &radius_)));
          set_has_radius();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(96)) goto parse_curIndex;
        break;
      }

      // required uint32 curIndex = 12;
      case 12: {
        if (tag == 96) {
         parse_curIndex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &curindex_)));
          set_has_curindex();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(104)) goto parse_loopNum;
        break;
      }

      // required uint32 loopNum = 13;
      case 13: {
        if (tag == 104) {
         parse_loopNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &loopnum_)));
          set_has_loopnum();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.zhichenhaixin.proto.RadarVideo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.zhichenhaixin.proto.RadarVideo)
  return false;
#undef DO_
}

void RadarVideo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.zhichenhaixin.proto.RadarVideo)
  // required uint64 radarId = 1;
  if (has_radarid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->radarid(), output);
  }

  // required string radarName = 2;
  if (has_radarname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->radarname().data(), this->radarname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "radarname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->radarname(), output);
  }

  // required double latitude = 3;
  if (has_latitude()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->latitude(), output);
  }

  // required double longitude = 4;
  if (has_longitude()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->longitude(), output);
  }

  // required uint64 UTC = 5;
  if (has_utc()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->utc(), output);
  }

  // required bytes imageData = 6;
  if (has_imagedata()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      6, this->imagedata(), output);
  }

  // required bytes curImageData = 7;
  if (has_curimagedata()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      7, this->curimagedata(), output);
  }

  // required bytes preImageData = 8;
  if (has_preimagedata()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      8, this->preimagedata(), output);
  }

  // required uint32 width = 9;
  if (has_width()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->width(), output);
  }

  // required uint32 height = 10;
  if (has_height()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(10, this->height(), output);
  }

  // required double radius = 11;
  if (has_radius()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(11, this->radius(), output);
  }

  // required uint32 curIndex = 12;
  if (has_curindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->curindex(), output);
  }

  // required uint32 loopNum = 13;
  if (has_loopnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(13, this->loopnum(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.zhichenhaixin.proto.RadarVideo)
}

::google::protobuf::uint8* RadarVideo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.zhichenhaixin.proto.RadarVideo)
  // required uint64 radarId = 1;
  if (has_radarid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->radarid(), target);
  }

  // required string radarName = 2;
  if (has_radarname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->radarname().data(), this->radarname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "radarname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->radarname(), target);
  }

  // required double latitude = 3;
  if (has_latitude()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->latitude(), target);
  }

  // required double longitude = 4;
  if (has_longitude()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->longitude(), target);
  }

  // required uint64 UTC = 5;
  if (has_utc()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->utc(), target);
  }

  // required bytes imageData = 6;
  if (has_imagedata()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        6, this->imagedata(), target);
  }

  // required bytes curImageData = 7;
  if (has_curimagedata()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        7, this->curimagedata(), target);
  }

  // required bytes preImageData = 8;
  if (has_preimagedata()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        8, this->preimagedata(), target);
  }

  // required uint32 width = 9;
  if (has_width()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->width(), target);
  }

  // required uint32 height = 10;
  if (has_height()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(10, this->height(), target);
  }

  // required double radius = 11;
  if (has_radius()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(11, this->radius(), target);
  }

  // required uint32 curIndex = 12;
  if (has_curindex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(12, this->curindex(), target);
  }

  // required uint32 loopNum = 13;
  if (has_loopnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(13, this->loopnum(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.zhichenhaixin.proto.RadarVideo)
  return target;
}

int RadarVideo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 radarId = 1;
    if (has_radarid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->radarid());
    }

    // required string radarName = 2;
    if (has_radarname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->radarname());
    }

    // required double latitude = 3;
    if (has_latitude()) {
      total_size += 1 + 8;
    }

    // required double longitude = 4;
    if (has_longitude()) {
      total_size += 1 + 8;
    }

    // required uint64 UTC = 5;
    if (has_utc()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->utc());
    }

    // required bytes imageData = 6;
    if (has_imagedata()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->imagedata());
    }

    // required bytes curImageData = 7;
    if (has_curimagedata()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->curimagedata());
    }

    // required bytes preImageData = 8;
    if (has_preimagedata()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->preimagedata());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required uint32 width = 9;
    if (has_width()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->width());
    }

    // required uint32 height = 10;
    if (has_height()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->height());
    }

    // required double radius = 11;
    if (has_radius()) {
      total_size += 1 + 8;
    }

    // required uint32 curIndex = 12;
    if (has_curindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->curindex());
    }

    // required uint32 loopNum = 13;
    if (has_loopnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->loopnum());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RadarVideo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RadarVideo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RadarVideo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RadarVideo::MergeFrom(const RadarVideo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_radarid()) {
      set_radarid(from.radarid());
    }
    if (from.has_radarname()) {
      set_radarname(from.radarname());
    }
    if (from.has_latitude()) {
      set_latitude(from.latitude());
    }
    if (from.has_longitude()) {
      set_longitude(from.longitude());
    }
    if (from.has_utc()) {
      set_utc(from.utc());
    }
    if (from.has_imagedata()) {
      set_imagedata(from.imagedata());
    }
    if (from.has_curimagedata()) {
      set_curimagedata(from.curimagedata());
    }
    if (from.has_preimagedata()) {
      set_preimagedata(from.preimagedata());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_width()) {
      set_width(from.width());
    }
    if (from.has_height()) {
      set_height(from.height());
    }
    if (from.has_radius()) {
      set_radius(from.radius());
    }
    if (from.has_curindex()) {
      set_curindex(from.curindex());
    }
    if (from.has_loopnum()) {
      set_loopnum(from.loopnum());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RadarVideo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RadarVideo::CopyFrom(const RadarVideo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RadarVideo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00001fff) != 0x00001fff) return false;

  return true;
}

void RadarVideo::Swap(RadarVideo* other) {
  if (other != this) {
    std::swap(radarid_, other->radarid_);
    std::swap(radarname_, other->radarname_);
    std::swap(latitude_, other->latitude_);
    std::swap(longitude_, other->longitude_);
    std::swap(utc_, other->utc_);
    std::swap(imagedata_, other->imagedata_);
    std::swap(curimagedata_, other->curimagedata_);
    std::swap(preimagedata_, other->preimagedata_);
    std::swap(width_, other->width_);
    std::swap(height_, other->height_);
    std::swap(radius_, other->radius_);
    std::swap(curindex_, other->curindex_);
    std::swap(loopnum_, other->loopnum_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RadarVideo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RadarVideo_descriptor_;
  metadata.reflection = RadarVideo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RadarVideoPoint::kRadarNameFieldNumber;
const int RadarVideoPoint::kLatitudeFieldNumber;
const int RadarVideoPoint::kLongitudeFieldNumber;
const int RadarVideoPoint::kUTCFieldNumber;
const int RadarVideoPoint::kImageDataFieldNumber;
const int RadarVideoPoint::kPreImageDataFieldNumber;
const int RadarVideoPoint::kWidthFieldNumber;
const int RadarVideoPoint::kHeightFieldNumber;
const int RadarVideoPoint::kRadiusFieldNumber;
const int RadarVideoPoint::kCurIndexFieldNumber;
const int RadarVideoPoint::kLoopNumFieldNumber;
#endif  // !_MSC_VER

RadarVideoPoint::RadarVideoPoint()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.zhichenhaixin.proto.RadarVideoPoint)
}

void RadarVideoPoint::InitAsDefaultInstance() {
}

RadarVideoPoint::RadarVideoPoint(const RadarVideoPoint& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:com.zhichenhaixin.proto.RadarVideoPoint)
}

void RadarVideoPoint::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  radarname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  latitude_ = 0;
  longitude_ = 0;
  utc_ = GOOGLE_ULONGLONG(0);
  imagedata_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  preimagedata_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  width_ = 0u;
  height_ = 0u;
  radius_ = 0;
  curindex_ = 0u;
  loopnum_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RadarVideoPoint::~RadarVideoPoint() {
  // @@protoc_insertion_point(destructor:com.zhichenhaixin.proto.RadarVideoPoint)
  SharedDtor();
}

void RadarVideoPoint::SharedDtor() {
  if (radarname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete radarname_;
  }
  if (imagedata_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete imagedata_;
  }
  if (preimagedata_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete preimagedata_;
  }
  if (this != default_instance_) {
  }
}

void RadarVideoPoint::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RadarVideoPoint::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RadarVideoPoint_descriptor_;
}

const RadarVideoPoint& RadarVideoPoint::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ZCHXRadarVideo_2eproto();
  return *default_instance_;
}

RadarVideoPoint* RadarVideoPoint::default_instance_ = NULL;

RadarVideoPoint* RadarVideoPoint::New() const {
  return new RadarVideoPoint;
}

void RadarVideoPoint::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<RadarVideoPoint*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(latitude_, utc_);
    ZR_(width_, height_);
    if (has_radarname()) {
      if (radarname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        radarname_->clear();
      }
    }
    if (has_imagedata()) {
      if (imagedata_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        imagedata_->clear();
      }
    }
    if (has_preimagedata()) {
      if (preimagedata_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        preimagedata_->clear();
      }
    }
  }
  ZR_(radius_, loopnum_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RadarVideoPoint::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.zhichenhaixin.proto.RadarVideoPoint)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string radarName = 2;
      case 2: {
        if (tag == 18) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_radarname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->radarname().data(), this->radarname().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "radarname");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(25)) goto parse_latitude;
        break;
      }

      // required double latitude = 3;
      case 3: {
        if (tag == 25) {
         parse_latitude:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &latitude_)));
          set_has_latitude();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(33)) goto parse_longitude;
        break;
      }

      // required double longitude = 4;
      case 4: {
        if (tag == 33) {
         parse_longitude:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &longitude_)));
          set_has_longitude();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_UTC;
        break;
      }

      // required uint64 UTC = 5;
      case 5: {
        if (tag == 40) {
         parse_UTC:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &utc_)));
          set_has_utc();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_imageData;
        break;
      }

      // required bytes imageData = 6;
      case 6: {
        if (tag == 50) {
         parse_imageData:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_imagedata()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_preImageData;
        break;
      }

      // required bytes preImageData = 7;
      case 7: {
        if (tag == 58) {
         parse_preImageData:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_preimagedata()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_width;
        break;
      }

      // required uint32 width = 8;
      case 8: {
        if (tag == 64) {
         parse_width:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &width_)));
          set_has_width();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_height;
        break;
      }

      // required uint32 height = 9;
      case 9: {
        if (tag == 72) {
         parse_height:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &height_)));
          set_has_height();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(81)) goto parse_radius;
        break;
      }

      // required double radius = 10;
      case 10: {
        if (tag == 81) {
         parse_radius:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &radius_)));
          set_has_radius();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_curIndex;
        break;
      }

      // required uint32 curIndex = 11;
      case 11: {
        if (tag == 88) {
         parse_curIndex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &curindex_)));
          set_has_curindex();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(96)) goto parse_loopNum;
        break;
      }

      // required uint32 loopNum = 12;
      case 12: {
        if (tag == 96) {
         parse_loopNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &loopnum_)));
          set_has_loopnum();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.zhichenhaixin.proto.RadarVideoPoint)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.zhichenhaixin.proto.RadarVideoPoint)
  return false;
#undef DO_
}

void RadarVideoPoint::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.zhichenhaixin.proto.RadarVideoPoint)
  // required string radarName = 2;
  if (has_radarname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->radarname().data(), this->radarname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "radarname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->radarname(), output);
  }

  // required double latitude = 3;
  if (has_latitude()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->latitude(), output);
  }

  // required double longitude = 4;
  if (has_longitude()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->longitude(), output);
  }

  // required uint64 UTC = 5;
  if (has_utc()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->utc(), output);
  }

  // required bytes imageData = 6;
  if (has_imagedata()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      6, this->imagedata(), output);
  }

  // required bytes preImageData = 7;
  if (has_preimagedata()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      7, this->preimagedata(), output);
  }

  // required uint32 width = 8;
  if (has_width()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->width(), output);
  }

  // required uint32 height = 9;
  if (has_height()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(9, this->height(), output);
  }

  // required double radius = 10;
  if (has_radius()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(10, this->radius(), output);
  }

  // required uint32 curIndex = 11;
  if (has_curindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->curindex(), output);
  }

  // required uint32 loopNum = 12;
  if (has_loopnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(12, this->loopnum(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.zhichenhaixin.proto.RadarVideoPoint)
}

::google::protobuf::uint8* RadarVideoPoint::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.zhichenhaixin.proto.RadarVideoPoint)
  // required string radarName = 2;
  if (has_radarname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->radarname().data(), this->radarname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "radarname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->radarname(), target);
  }

  // required double latitude = 3;
  if (has_latitude()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->latitude(), target);
  }

  // required double longitude = 4;
  if (has_longitude()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->longitude(), target);
  }

  // required uint64 UTC = 5;
  if (has_utc()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->utc(), target);
  }

  // required bytes imageData = 6;
  if (has_imagedata()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        6, this->imagedata(), target);
  }

  // required bytes preImageData = 7;
  if (has_preimagedata()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        7, this->preimagedata(), target);
  }

  // required uint32 width = 8;
  if (has_width()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(8, this->width(), target);
  }

  // required uint32 height = 9;
  if (has_height()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(9, this->height(), target);
  }

  // required double radius = 10;
  if (has_radius()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(10, this->radius(), target);
  }

  // required uint32 curIndex = 11;
  if (has_curindex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->curindex(), target);
  }

  // required uint32 loopNum = 12;
  if (has_loopnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(12, this->loopnum(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.zhichenhaixin.proto.RadarVideoPoint)
  return target;
}

int RadarVideoPoint::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string radarName = 2;
    if (has_radarname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->radarname());
    }

    // required double latitude = 3;
    if (has_latitude()) {
      total_size += 1 + 8;
    }

    // required double longitude = 4;
    if (has_longitude()) {
      total_size += 1 + 8;
    }

    // required uint64 UTC = 5;
    if (has_utc()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->utc());
    }

    // required bytes imageData = 6;
    if (has_imagedata()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->imagedata());
    }

    // required bytes preImageData = 7;
    if (has_preimagedata()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->preimagedata());
    }

    // required uint32 width = 8;
    if (has_width()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->width());
    }

    // required uint32 height = 9;
    if (has_height()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->height());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required double radius = 10;
    if (has_radius()) {
      total_size += 1 + 8;
    }

    // required uint32 curIndex = 11;
    if (has_curindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->curindex());
    }

    // required uint32 loopNum = 12;
    if (has_loopnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->loopnum());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RadarVideoPoint::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RadarVideoPoint* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RadarVideoPoint*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RadarVideoPoint::MergeFrom(const RadarVideoPoint& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_radarname()) {
      set_radarname(from.radarname());
    }
    if (from.has_latitude()) {
      set_latitude(from.latitude());
    }
    if (from.has_longitude()) {
      set_longitude(from.longitude());
    }
    if (from.has_utc()) {
      set_utc(from.utc());
    }
    if (from.has_imagedata()) {
      set_imagedata(from.imagedata());
    }
    if (from.has_preimagedata()) {
      set_preimagedata(from.preimagedata());
    }
    if (from.has_width()) {
      set_width(from.width());
    }
    if (from.has_height()) {
      set_height(from.height());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_radius()) {
      set_radius(from.radius());
    }
    if (from.has_curindex()) {
      set_curindex(from.curindex());
    }
    if (from.has_loopnum()) {
      set_loopnum(from.loopnum());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RadarVideoPoint::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RadarVideoPoint::CopyFrom(const RadarVideoPoint& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RadarVideoPoint::IsInitialized() const {
  if ((_has_bits_[0] & 0x000007ff) != 0x000007ff) return false;

  return true;
}

void RadarVideoPoint::Swap(RadarVideoPoint* other) {
  if (other != this) {
    std::swap(radarname_, other->radarname_);
    std::swap(latitude_, other->latitude_);
    std::swap(longitude_, other->longitude_);
    std::swap(utc_, other->utc_);
    std::swap(imagedata_, other->imagedata_);
    std::swap(preimagedata_, other->preimagedata_);
    std::swap(width_, other->width_);
    std::swap(height_, other->height_);
    std::swap(radius_, other->radius_);
    std::swap(curindex_, other->curindex_);
    std::swap(loopnum_, other->loopnum_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RadarVideoPoint::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RadarVideoPoint_descriptor_;
  metadata.reflection = RadarVideoPoint_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace zhichenhaixin
}  // namespace com

// @@protoc_insertion_point(global_scope)
