// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ZCHXRadarVideo.proto

#ifndef PROTOBUF_ZCHXRadarVideo_2eproto__INCLUDED
#define PROTOBUF_ZCHXRadarVideo_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace com {
namespace zhichenhaixin {
namespace proto {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_ZCHXRadarVideo_2eproto();
void protobuf_AssignDesc_ZCHXRadarVideo_2eproto();
void protobuf_ShutdownFile_ZCHXRadarVideo_2eproto();

class singleVideoBlock;
class pixelPoint;
class fixRectPixelImg;
class predictionArea;
class RadarRectDef;
class RoutePath;
class RouteNode;
class RouteNodes;
class RadarRect;
class RadarRects;
class RadarVideo;
class RadarVideoPoint;

// ===================================================================

class singleVideoBlock : public ::google::protobuf::Message {
 public:
  singleVideoBlock();
  virtual ~singleVideoBlock();

  singleVideoBlock(const singleVideoBlock& from);

  inline singleVideoBlock& operator=(const singleVideoBlock& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const singleVideoBlock& default_instance();

  void Swap(singleVideoBlock* other);

  // implements Message ----------------------------------------------

  singleVideoBlock* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const singleVideoBlock& from);
  void MergeFrom(const singleVideoBlock& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required double latitude = 1;
  inline bool has_latitude() const;
  inline void clear_latitude();
  static const int kLatitudeFieldNumber = 1;
  inline double latitude() const;
  inline void set_latitude(double value);

  // required double longitude = 2;
  inline bool has_longitude() const;
  inline void clear_longitude();
  static const int kLongitudeFieldNumber = 2;
  inline double longitude() const;
  inline void set_longitude(double value);

  // @@protoc_insertion_point(class_scope:com.zhichenhaixin.proto.singleVideoBlock)
 private:
  inline void set_has_latitude();
  inline void clear_has_latitude();
  inline void set_has_longitude();
  inline void clear_has_longitude();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  double latitude_;
  double longitude_;
  friend void  protobuf_AddDesc_ZCHXRadarVideo_2eproto();
  friend void protobuf_AssignDesc_ZCHXRadarVideo_2eproto();
  friend void protobuf_ShutdownFile_ZCHXRadarVideo_2eproto();

  void InitAsDefaultInstance();
  static singleVideoBlock* default_instance_;
};
// -------------------------------------------------------------------

class pixelPoint : public ::google::protobuf::Message {
 public:
  pixelPoint();
  virtual ~pixelPoint();

  pixelPoint(const pixelPoint& from);

  inline pixelPoint& operator=(const pixelPoint& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const pixelPoint& default_instance();

  void Swap(pixelPoint* other);

  // implements Message ----------------------------------------------

  pixelPoint* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const pixelPoint& from);
  void MergeFrom(const pixelPoint& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 x = 1;
  inline bool has_x() const;
  inline void clear_x();
  static const int kXFieldNumber = 1;
  inline ::google::protobuf::uint32 x() const;
  inline void set_x(::google::protobuf::uint32 value);

  // required uint32 y = 2;
  inline bool has_y() const;
  inline void clear_y();
  static const int kYFieldNumber = 2;
  inline ::google::protobuf::uint32 y() const;
  inline void set_y(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:com.zhichenhaixin.proto.pixelPoint)
 private:
  inline void set_has_x();
  inline void clear_has_x();
  inline void set_has_y();
  inline void clear_has_y();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 x_;
  ::google::protobuf::uint32 y_;
  friend void  protobuf_AddDesc_ZCHXRadarVideo_2eproto();
  friend void protobuf_AssignDesc_ZCHXRadarVideo_2eproto();
  friend void protobuf_ShutdownFile_ZCHXRadarVideo_2eproto();

  void InitAsDefaultInstance();
  static pixelPoint* default_instance_;
};
// -------------------------------------------------------------------

class fixRectPixelImg : public ::google::protobuf::Message {
 public:
  fixRectPixelImg();
  virtual ~fixRectPixelImg();

  fixRectPixelImg(const fixRectPixelImg& from);

  inline fixRectPixelImg& operator=(const fixRectPixelImg& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const fixRectPixelImg& default_instance();

  void Swap(fixRectPixelImg* other);

  // implements Message ----------------------------------------------

  fixRectPixelImg* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const fixRectPixelImg& from);
  void MergeFrom(const fixRectPixelImg& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 width = 1;
  inline bool has_width() const;
  inline void clear_width();
  static const int kWidthFieldNumber = 1;
  inline ::google::protobuf::uint32 width() const;
  inline void set_width(::google::protobuf::uint32 value);

  // required uint32 height = 2;
  inline bool has_height() const;
  inline void clear_height();
  static const int kHeightFieldNumber = 2;
  inline ::google::protobuf::uint32 height() const;
  inline void set_height(::google::protobuf::uint32 value);

  // repeated .com.zhichenhaixin.proto.pixelPoint points = 3;
  inline int points_size() const;
  inline void clear_points();
  static const int kPointsFieldNumber = 3;
  inline const ::com::zhichenhaixin::proto::pixelPoint& points(int index) const;
  inline ::com::zhichenhaixin::proto::pixelPoint* mutable_points(int index);
  inline ::com::zhichenhaixin::proto::pixelPoint* add_points();
  inline const ::google::protobuf::RepeatedPtrField< ::com::zhichenhaixin::proto::pixelPoint >&
      points() const;
  inline ::google::protobuf::RepeatedPtrField< ::com::zhichenhaixin::proto::pixelPoint >*
      mutable_points();

  // @@protoc_insertion_point(class_scope:com.zhichenhaixin.proto.fixRectPixelImg)
 private:
  inline void set_has_width();
  inline void clear_has_width();
  inline void set_has_height();
  inline void clear_has_height();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint32 width_;
  ::google::protobuf::uint32 height_;
  ::google::protobuf::RepeatedPtrField< ::com::zhichenhaixin::proto::pixelPoint > points_;
  friend void  protobuf_AddDesc_ZCHXRadarVideo_2eproto();
  friend void protobuf_AssignDesc_ZCHXRadarVideo_2eproto();
  friend void protobuf_ShutdownFile_ZCHXRadarVideo_2eproto();

  void InitAsDefaultInstance();
  static fixRectPixelImg* default_instance_;
};
// -------------------------------------------------------------------

class predictionArea : public ::google::protobuf::Message {
 public:
  predictionArea();
  virtual ~predictionArea();

  predictionArea(const predictionArea& from);

  inline predictionArea& operator=(const predictionArea& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const predictionArea& default_instance();

  void Swap(predictionArea* other);

  // implements Message ----------------------------------------------

  predictionArea* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const predictionArea& from);
  void MergeFrom(const predictionArea& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .com.zhichenhaixin.proto.singleVideoBlock area = 1;
  inline int area_size() const;
  inline void clear_area();
  static const int kAreaFieldNumber = 1;
  inline const ::com::zhichenhaixin::proto::singleVideoBlock& area(int index) const;
  inline ::com::zhichenhaixin::proto::singleVideoBlock* mutable_area(int index);
  inline ::com::zhichenhaixin::proto::singleVideoBlock* add_area();
  inline const ::google::protobuf::RepeatedPtrField< ::com::zhichenhaixin::proto::singleVideoBlock >&
      area() const;
  inline ::google::protobuf::RepeatedPtrField< ::com::zhichenhaixin::proto::singleVideoBlock >*
      mutable_area();

  // @@protoc_insertion_point(class_scope:com.zhichenhaixin.proto.predictionArea)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::com::zhichenhaixin::proto::singleVideoBlock > area_;
  friend void  protobuf_AddDesc_ZCHXRadarVideo_2eproto();
  friend void protobuf_AssignDesc_ZCHXRadarVideo_2eproto();
  friend void protobuf_ShutdownFile_ZCHXRadarVideo_2eproto();

  void InitAsDefaultInstance();
  static predictionArea* default_instance_;
};
// -------------------------------------------------------------------

class RadarRectDef : public ::google::protobuf::Message {
 public:
  RadarRectDef();
  virtual ~RadarRectDef();

  RadarRectDef(const RadarRectDef& from);

  inline RadarRectDef& operator=(const RadarRectDef& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RadarRectDef& default_instance();

  void Swap(RadarRectDef* other);

  // implements Message ----------------------------------------------

  RadarRectDef* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RadarRectDef& from);
  void MergeFrom(const RadarRectDef& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 rectNumber = 1;
  inline bool has_rectnumber() const;
  inline void clear_rectnumber();
  static const int kRectNumberFieldNumber = 1;
  inline ::google::protobuf::uint32 rectnumber() const;
  inline void set_rectnumber(::google::protobuf::uint32 value);

  // required double topLeftlatitude = 2;
  inline bool has_topleftlatitude() const;
  inline void clear_topleftlatitude();
  static const int kTopLeftlatitudeFieldNumber = 2;
  inline double topleftlatitude() const;
  inline void set_topleftlatitude(double value);

  // required double topLeftlongitude = 3;
  inline bool has_topleftlongitude() const;
  inline void clear_topleftlongitude();
  static const int kTopLeftlongitudeFieldNumber = 3;
  inline double topleftlongitude() const;
  inline void set_topleftlongitude(double value);

  // required double bottomRightlatitude = 4;
  inline bool has_bottomrightlatitude() const;
  inline void clear_bottomrightlatitude();
  static const int kBottomRightlatitudeFieldNumber = 4;
  inline double bottomrightlatitude() const;
  inline void set_bottomrightlatitude(double value);

  // required double bottomRightlongitude = 5;
  inline bool has_bottomrightlongitude() const;
  inline void clear_bottomrightlongitude();
  static const int kBottomRightlongitudeFieldNumber = 5;
  inline double bottomrightlongitude() const;
  inline void set_bottomrightlongitude(double value);

  // required double centerlatitude = 6;
  inline bool has_centerlatitude() const;
  inline void clear_centerlatitude();
  static const int kCenterlatitudeFieldNumber = 6;
  inline double centerlatitude() const;
  inline void set_centerlatitude(double value);

  // required double centerlongitude = 7;
  inline bool has_centerlongitude() const;
  inline void clear_centerlongitude();
  static const int kCenterlongitudeFieldNumber = 7;
  inline double centerlongitude() const;
  inline void set_centerlongitude(double value);

  // required uint32 updateTime = 8;
  inline bool has_updatetime() const;
  inline void clear_updatetime();
  static const int kUpdateTimeFieldNumber = 8;
  inline ::google::protobuf::uint32 updatetime() const;
  inline void set_updatetime(::google::protobuf::uint32 value);

  // optional int32 diameter = 9;
  inline bool has_diameter() const;
  inline void clear_diameter();
  static const int kDiameterFieldNumber = 9;
  inline ::google::protobuf::int32 diameter() const;
  inline void set_diameter(::google::protobuf::int32 value);

  // repeated .com.zhichenhaixin.proto.singleVideoBlock Blocks = 10;
  inline int blocks_size() const;
  inline void clear_blocks();
  static const int kBlocksFieldNumber = 10;
  inline const ::com::zhichenhaixin::proto::singleVideoBlock& blocks(int index) const;
  inline ::com::zhichenhaixin::proto::singleVideoBlock* mutable_blocks(int index);
  inline ::com::zhichenhaixin::proto::singleVideoBlock* add_blocks();
  inline const ::google::protobuf::RepeatedPtrField< ::com::zhichenhaixin::proto::singleVideoBlock >&
      blocks() const;
  inline ::google::protobuf::RepeatedPtrField< ::com::zhichenhaixin::proto::singleVideoBlock >*
      mutable_blocks();

  // optional double startlatitude = 11;
  inline bool has_startlatitude() const;
  inline void clear_startlatitude();
  static const int kStartlatitudeFieldNumber = 11;
  inline double startlatitude() const;
  inline void set_startlatitude(double value);

  // optional double startlongitude = 12;
  inline bool has_startlongitude() const;
  inline void clear_startlongitude();
  static const int kStartlongitudeFieldNumber = 12;
  inline double startlongitude() const;
  inline void set_startlongitude(double value);

  // optional double endlatitude = 13;
  inline bool has_endlatitude() const;
  inline void clear_endlatitude();
  static const int kEndlatitudeFieldNumber = 13;
  inline double endlatitude() const;
  inline void set_endlatitude(double value);

  // optional double endlongitude = 14;
  inline bool has_endlongitude() const;
  inline void clear_endlongitude();
  static const int kEndlongitudeFieldNumber = 14;
  inline double endlongitude() const;
  inline void set_endlongitude(double value);

  // optional double angle = 15;
  inline bool has_angle() const;
  inline void clear_angle();
  static const int kAngleFieldNumber = 15;
  inline double angle() const;
  inline void set_angle(double value);

  // required double sog = 16;
  inline bool has_sog() const;
  inline void clear_sog();
  static const int kSogFieldNumber = 16;
  inline double sog() const;
  inline void set_sog(double value);

  // required double cog = 17;
  inline bool has_cog() const;
  inline void clear_cog();
  static const int kCogFieldNumber = 17;
  inline double cog() const;
  inline void set_cog(double value);

  // repeated .com.zhichenhaixin.proto.pixelPoint pixelPnts = 18;
  inline int pixelpnts_size() const;
  inline void clear_pixelpnts();
  static const int kPixelPntsFieldNumber = 18;
  inline const ::com::zhichenhaixin::proto::pixelPoint& pixelpnts(int index) const;
  inline ::com::zhichenhaixin::proto::pixelPoint* mutable_pixelpnts(int index);
  inline ::com::zhichenhaixin::proto::pixelPoint* add_pixelpnts();
  inline const ::google::protobuf::RepeatedPtrField< ::com::zhichenhaixin::proto::pixelPoint >&
      pixelpnts() const;
  inline ::google::protobuf::RepeatedPtrField< ::com::zhichenhaixin::proto::pixelPoint >*
      mutable_pixelpnts();

  // required bool realData = 19;
  inline bool has_realdata() const;
  inline void clear_realdata();
  static const int kRealDataFieldNumber = 19;
  inline bool realdata() const;
  inline void set_realdata(bool value);

  // optional .com.zhichenhaixin.proto.predictionArea predictionAreas = 20;
  inline bool has_predictionareas() const;
  inline void clear_predictionareas();
  static const int kPredictionAreasFieldNumber = 20;
  inline const ::com::zhichenhaixin::proto::predictionArea& predictionareas() const;
  inline ::com::zhichenhaixin::proto::predictionArea* mutable_predictionareas();
  inline ::com::zhichenhaixin::proto::predictionArea* release_predictionareas();
  inline void set_allocated_predictionareas(::com::zhichenhaixin::proto::predictionArea* predictionareas);

  // optional int32 videoCycleIndex = 21;
  inline bool has_videocycleindex() const;
  inline void clear_videocycleindex();
  static const int kVideoCycleIndexFieldNumber = 21;
  inline ::google::protobuf::int32 videocycleindex() const;
  inline void set_videocycleindex(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:com.zhichenhaixin.proto.RadarRectDef)
 private:
  inline void set_has_rectnumber();
  inline void clear_has_rectnumber();
  inline void set_has_topleftlatitude();
  inline void clear_has_topleftlatitude();
  inline void set_has_topleftlongitude();
  inline void clear_has_topleftlongitude();
  inline void set_has_bottomrightlatitude();
  inline void clear_has_bottomrightlatitude();
  inline void set_has_bottomrightlongitude();
  inline void clear_has_bottomrightlongitude();
  inline void set_has_centerlatitude();
  inline void clear_has_centerlatitude();
  inline void set_has_centerlongitude();
  inline void clear_has_centerlongitude();
  inline void set_has_updatetime();
  inline void clear_has_updatetime();
  inline void set_has_diameter();
  inline void clear_has_diameter();
  inline void set_has_startlatitude();
  inline void clear_has_startlatitude();
  inline void set_has_startlongitude();
  inline void clear_has_startlongitude();
  inline void set_has_endlatitude();
  inline void clear_has_endlatitude();
  inline void set_has_endlongitude();
  inline void clear_has_endlongitude();
  inline void set_has_angle();
  inline void clear_has_angle();
  inline void set_has_sog();
  inline void clear_has_sog();
  inline void set_has_cog();
  inline void clear_has_cog();
  inline void set_has_realdata();
  inline void clear_has_realdata();
  inline void set_has_predictionareas();
  inline void clear_has_predictionareas();
  inline void set_has_videocycleindex();
  inline void clear_has_videocycleindex();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  double topleftlatitude_;
  double topleftlongitude_;
  double bottomrightlatitude_;
  ::google::protobuf::uint32 rectnumber_;
  ::google::protobuf::uint32 updatetime_;
  double bottomrightlongitude_;
  double centerlatitude_;
  double centerlongitude_;
  ::google::protobuf::RepeatedPtrField< ::com::zhichenhaixin::proto::singleVideoBlock > blocks_;
  double startlatitude_;
  double startlongitude_;
  double endlatitude_;
  double endlongitude_;
  ::google::protobuf::int32 diameter_;
  bool realdata_;
  double angle_;
  double sog_;
  double cog_;
  ::google::protobuf::RepeatedPtrField< ::com::zhichenhaixin::proto::pixelPoint > pixelpnts_;
  ::com::zhichenhaixin::proto::predictionArea* predictionareas_;
  ::google::protobuf::int32 videocycleindex_;
  friend void  protobuf_AddDesc_ZCHXRadarVideo_2eproto();
  friend void protobuf_AssignDesc_ZCHXRadarVideo_2eproto();
  friend void protobuf_ShutdownFile_ZCHXRadarVideo_2eproto();

  void InitAsDefaultInstance();
  static RadarRectDef* default_instance_;
};
// -------------------------------------------------------------------

class RoutePath : public ::google::protobuf::Message {
 public:
  RoutePath();
  virtual ~RoutePath();

  RoutePath(const RoutePath& from);

  inline RoutePath& operator=(const RoutePath& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RoutePath& default_instance();

  void Swap(RoutePath* other);

  // implements Message ----------------------------------------------

  RoutePath* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RoutePath& from);
  void MergeFrom(const RoutePath& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .com.zhichenhaixin.proto.RadarRectDef path = 1;
  inline int path_size() const;
  inline void clear_path();
  static const int kPathFieldNumber = 1;
  inline const ::com::zhichenhaixin::proto::RadarRectDef& path(int index) const;
  inline ::com::zhichenhaixin::proto::RadarRectDef* mutable_path(int index);
  inline ::com::zhichenhaixin::proto::RadarRectDef* add_path();
  inline const ::google::protobuf::RepeatedPtrField< ::com::zhichenhaixin::proto::RadarRectDef >&
      path() const;
  inline ::google::protobuf::RepeatedPtrField< ::com::zhichenhaixin::proto::RadarRectDef >*
      mutable_path();

  // @@protoc_insertion_point(class_scope:com.zhichenhaixin.proto.RoutePath)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::com::zhichenhaixin::proto::RadarRectDef > path_;
  friend void  protobuf_AddDesc_ZCHXRadarVideo_2eproto();
  friend void protobuf_AssignDesc_ZCHXRadarVideo_2eproto();
  friend void protobuf_ShutdownFile_ZCHXRadarVideo_2eproto();

  void InitAsDefaultInstance();
  static RoutePath* default_instance_;
};
// -------------------------------------------------------------------

class RouteNode : public ::google::protobuf::Message {
 public:
  RouteNode();
  virtual ~RouteNode();

  RouteNode(const RouteNode& from);

  inline RouteNode& operator=(const RouteNode& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RouteNode& default_instance();

  void Swap(RouteNode* other);

  // implements Message ----------------------------------------------

  RouteNode* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RouteNode& from);
  void MergeFrom(const RouteNode& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 node_num = 1;
  inline bool has_node_num() const;
  inline void clear_node_num();
  static const int kNodeNumFieldNumber = 1;
  inline ::google::protobuf::int32 node_num() const;
  inline void set_node_num(::google::protobuf::int32 value);

  // required .com.zhichenhaixin.proto.RadarRectDef top_node = 2;
  inline bool has_top_node() const;
  inline void clear_top_node();
  static const int kTopNodeFieldNumber = 2;
  inline const ::com::zhichenhaixin::proto::RadarRectDef& top_node() const;
  inline ::com::zhichenhaixin::proto::RadarRectDef* mutable_top_node();
  inline ::com::zhichenhaixin::proto::RadarRectDef* release_top_node();
  inline void set_allocated_top_node(::com::zhichenhaixin::proto::RadarRectDef* top_node);

  // repeated .com.zhichenhaixin.proto.RoutePath path_list = 3;
  inline int path_list_size() const;
  inline void clear_path_list();
  static const int kPathListFieldNumber = 3;
  inline const ::com::zhichenhaixin::proto::RoutePath& path_list(int index) const;
  inline ::com::zhichenhaixin::proto::RoutePath* mutable_path_list(int index);
  inline ::com::zhichenhaixin::proto::RoutePath* add_path_list();
  inline const ::google::protobuf::RepeatedPtrField< ::com::zhichenhaixin::proto::RoutePath >&
      path_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::com::zhichenhaixin::proto::RoutePath >*
      mutable_path_list();

  // @@protoc_insertion_point(class_scope:com.zhichenhaixin.proto.RouteNode)
 private:
  inline void set_has_node_num();
  inline void clear_has_node_num();
  inline void set_has_top_node();
  inline void clear_has_top_node();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::com::zhichenhaixin::proto::RadarRectDef* top_node_;
  ::google::protobuf::RepeatedPtrField< ::com::zhichenhaixin::proto::RoutePath > path_list_;
  ::google::protobuf::int32 node_num_;
  friend void  protobuf_AddDesc_ZCHXRadarVideo_2eproto();
  friend void protobuf_AssignDesc_ZCHXRadarVideo_2eproto();
  friend void protobuf_ShutdownFile_ZCHXRadarVideo_2eproto();

  void InitAsDefaultInstance();
  static RouteNode* default_instance_;
};
// -------------------------------------------------------------------

class RouteNodes : public ::google::protobuf::Message {
 public:
  RouteNodes();
  virtual ~RouteNodes();

  RouteNodes(const RouteNodes& from);

  inline RouteNodes& operator=(const RouteNodes& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RouteNodes& default_instance();

  void Swap(RouteNodes* other);

  // implements Message ----------------------------------------------

  RouteNodes* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RouteNodes& from);
  void MergeFrom(const RouteNodes& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .com.zhichenhaixin.proto.RouteNode node_list = 1;
  inline int node_list_size() const;
  inline void clear_node_list();
  static const int kNodeListFieldNumber = 1;
  inline const ::com::zhichenhaixin::proto::RouteNode& node_list(int index) const;
  inline ::com::zhichenhaixin::proto::RouteNode* mutable_node_list(int index);
  inline ::com::zhichenhaixin::proto::RouteNode* add_node_list();
  inline const ::google::protobuf::RepeatedPtrField< ::com::zhichenhaixin::proto::RouteNode >&
      node_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::com::zhichenhaixin::proto::RouteNode >*
      mutable_node_list();

  // @@protoc_insertion_point(class_scope:com.zhichenhaixin.proto.RouteNodes)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::com::zhichenhaixin::proto::RouteNode > node_list_;
  friend void  protobuf_AddDesc_ZCHXRadarVideo_2eproto();
  friend void protobuf_AssignDesc_ZCHXRadarVideo_2eproto();
  friend void protobuf_ShutdownFile_ZCHXRadarVideo_2eproto();

  void InitAsDefaultInstance();
  static RouteNodes* default_instance_;
};
// -------------------------------------------------------------------

class RadarRect : public ::google::protobuf::Message {
 public:
  RadarRect();
  virtual ~RadarRect();

  RadarRect(const RadarRect& from);

  inline RadarRect& operator=(const RadarRect& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RadarRect& default_instance();

  void Swap(RadarRect* other);

  // implements Message ----------------------------------------------

  RadarRect* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RadarRect& from);
  void MergeFrom(const RadarRect& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .com.zhichenhaixin.proto.RadarRectDef current_rect = 1;
  inline bool has_current_rect() const;
  inline void clear_current_rect();
  static const int kCurrentRectFieldNumber = 1;
  inline const ::com::zhichenhaixin::proto::RadarRectDef& current_rect() const;
  inline ::com::zhichenhaixin::proto::RadarRectDef* mutable_current_rect();
  inline ::com::zhichenhaixin::proto::RadarRectDef* release_current_rect();
  inline void set_allocated_current_rect(::com::zhichenhaixin::proto::RadarRectDef* current_rect);

  // repeated .com.zhichenhaixin.proto.RadarRectDef history_rect_list = 2;
  inline int history_rect_list_size() const;
  inline void clear_history_rect_list();
  static const int kHistoryRectListFieldNumber = 2;
  inline const ::com::zhichenhaixin::proto::RadarRectDef& history_rect_list(int index) const;
  inline ::com::zhichenhaixin::proto::RadarRectDef* mutable_history_rect_list(int index);
  inline ::com::zhichenhaixin::proto::RadarRectDef* add_history_rect_list();
  inline const ::google::protobuf::RepeatedPtrField< ::com::zhichenhaixin::proto::RadarRectDef >&
      history_rect_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::com::zhichenhaixin::proto::RadarRectDef >*
      mutable_history_rect_list();

  // required bool dir_confirmed = 3;
  inline bool has_dir_confirmed() const;
  inline void clear_dir_confirmed();
  static const int kDirConfirmedFieldNumber = 3;
  inline bool dir_confirmed() const;
  inline void set_dir_confirmed(bool value);

  // required uint32 cur_est_count = 4;
  inline bool has_cur_est_count() const;
  inline void clear_cur_est_count();
  static const int kCurEstCountFieldNumber = 4;
  inline ::google::protobuf::uint32 cur_est_count() const;
  inline void set_cur_est_count(::google::protobuf::uint32 value);

  // required int32 node_num = 5;
  inline bool has_node_num() const;
  inline void clear_node_num();
  static const int kNodeNumFieldNumber = 5;
  inline ::google::protobuf::int32 node_num() const;
  inline void set_node_num(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:com.zhichenhaixin.proto.RadarRect)
 private:
  inline void set_has_current_rect();
  inline void clear_has_current_rect();
  inline void set_has_dir_confirmed();
  inline void clear_has_dir_confirmed();
  inline void set_has_cur_est_count();
  inline void clear_has_cur_est_count();
  inline void set_has_node_num();
  inline void clear_has_node_num();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::com::zhichenhaixin::proto::RadarRectDef* current_rect_;
  ::google::protobuf::RepeatedPtrField< ::com::zhichenhaixin::proto::RadarRectDef > history_rect_list_;
  bool dir_confirmed_;
  ::google::protobuf::uint32 cur_est_count_;
  ::google::protobuf::int32 node_num_;
  friend void  protobuf_AddDesc_ZCHXRadarVideo_2eproto();
  friend void protobuf_AssignDesc_ZCHXRadarVideo_2eproto();
  friend void protobuf_ShutdownFile_ZCHXRadarVideo_2eproto();

  void InitAsDefaultInstance();
  static RadarRect* default_instance_;
};
// -------------------------------------------------------------------

class RadarRects : public ::google::protobuf::Message {
 public:
  RadarRects();
  virtual ~RadarRects();

  RadarRects(const RadarRects& from);

  inline RadarRects& operator=(const RadarRects& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RadarRects& default_instance();

  void Swap(RadarRects* other);

  // implements Message ----------------------------------------------

  RadarRects* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RadarRects& from);
  void MergeFrom(const RadarRects& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint64 UTC = 1;
  inline bool has_utc() const;
  inline void clear_utc();
  static const int kUTCFieldNumber = 1;
  inline ::google::protobuf::uint64 utc() const;
  inline void set_utc(::google::protobuf::uint64 value);

  // required int32 length = 2;
  inline bool has_length() const;
  inline void clear_length();
  static const int kLengthFieldNumber = 2;
  inline ::google::protobuf::int32 length() const;
  inline void set_length(::google::protobuf::int32 value);

  // repeated .com.zhichenhaixin.proto.RadarRect rect_list = 3;
  inline int rect_list_size() const;
  inline void clear_rect_list();
  static const int kRectListFieldNumber = 3;
  inline const ::com::zhichenhaixin::proto::RadarRect& rect_list(int index) const;
  inline ::com::zhichenhaixin::proto::RadarRect* mutable_rect_list(int index);
  inline ::com::zhichenhaixin::proto::RadarRect* add_rect_list();
  inline const ::google::protobuf::RepeatedPtrField< ::com::zhichenhaixin::proto::RadarRect >&
      rect_list() const;
  inline ::google::protobuf::RepeatedPtrField< ::com::zhichenhaixin::proto::RadarRect >*
      mutable_rect_list();

  // @@protoc_insertion_point(class_scope:com.zhichenhaixin.proto.RadarRects)
 private:
  inline void set_has_utc();
  inline void clear_has_utc();
  inline void set_has_length();
  inline void clear_has_length();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 utc_;
  ::google::protobuf::RepeatedPtrField< ::com::zhichenhaixin::proto::RadarRect > rect_list_;
  ::google::protobuf::int32 length_;
  friend void  protobuf_AddDesc_ZCHXRadarVideo_2eproto();
  friend void protobuf_AssignDesc_ZCHXRadarVideo_2eproto();
  friend void protobuf_ShutdownFile_ZCHXRadarVideo_2eproto();

  void InitAsDefaultInstance();
  static RadarRects* default_instance_;
};
// -------------------------------------------------------------------

class RadarVideo : public ::google::protobuf::Message {
 public:
  RadarVideo();
  virtual ~RadarVideo();

  RadarVideo(const RadarVideo& from);

  inline RadarVideo& operator=(const RadarVideo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RadarVideo& default_instance();

  void Swap(RadarVideo* other);

  // implements Message ----------------------------------------------

  RadarVideo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RadarVideo& from);
  void MergeFrom(const RadarVideo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint64 radarId = 1;
  inline bool has_radarid() const;
  inline void clear_radarid();
  static const int kRadarIdFieldNumber = 1;
  inline ::google::protobuf::uint64 radarid() const;
  inline void set_radarid(::google::protobuf::uint64 value);

  // required string radarName = 2;
  inline bool has_radarname() const;
  inline void clear_radarname();
  static const int kRadarNameFieldNumber = 2;
  inline const ::std::string& radarname() const;
  inline void set_radarname(const ::std::string& value);
  inline void set_radarname(const char* value);
  inline void set_radarname(const char* value, size_t size);
  inline ::std::string* mutable_radarname();
  inline ::std::string* release_radarname();
  inline void set_allocated_radarname(::std::string* radarname);

  // required double latitude = 3;
  inline bool has_latitude() const;
  inline void clear_latitude();
  static const int kLatitudeFieldNumber = 3;
  inline double latitude() const;
  inline void set_latitude(double value);

  // required double longitude = 4;
  inline bool has_longitude() const;
  inline void clear_longitude();
  static const int kLongitudeFieldNumber = 4;
  inline double longitude() const;
  inline void set_longitude(double value);

  // required uint64 UTC = 5;
  inline bool has_utc() const;
  inline void clear_utc();
  static const int kUTCFieldNumber = 5;
  inline ::google::protobuf::uint64 utc() const;
  inline void set_utc(::google::protobuf::uint64 value);

  // required bytes imageData = 6;
  inline bool has_imagedata() const;
  inline void clear_imagedata();
  static const int kImageDataFieldNumber = 6;
  inline const ::std::string& imagedata() const;
  inline void set_imagedata(const ::std::string& value);
  inline void set_imagedata(const char* value);
  inline void set_imagedata(const void* value, size_t size);
  inline ::std::string* mutable_imagedata();
  inline ::std::string* release_imagedata();
  inline void set_allocated_imagedata(::std::string* imagedata);

  // required bytes curImageData = 7;
  inline bool has_curimagedata() const;
  inline void clear_curimagedata();
  static const int kCurImageDataFieldNumber = 7;
  inline const ::std::string& curimagedata() const;
  inline void set_curimagedata(const ::std::string& value);
  inline void set_curimagedata(const char* value);
  inline void set_curimagedata(const void* value, size_t size);
  inline ::std::string* mutable_curimagedata();
  inline ::std::string* release_curimagedata();
  inline void set_allocated_curimagedata(::std::string* curimagedata);

  // required bytes preImageData = 8;
  inline bool has_preimagedata() const;
  inline void clear_preimagedata();
  static const int kPreImageDataFieldNumber = 8;
  inline const ::std::string& preimagedata() const;
  inline void set_preimagedata(const ::std::string& value);
  inline void set_preimagedata(const char* value);
  inline void set_preimagedata(const void* value, size_t size);
  inline ::std::string* mutable_preimagedata();
  inline ::std::string* release_preimagedata();
  inline void set_allocated_preimagedata(::std::string* preimagedata);

  // required uint32 width = 9;
  inline bool has_width() const;
  inline void clear_width();
  static const int kWidthFieldNumber = 9;
  inline ::google::protobuf::uint32 width() const;
  inline void set_width(::google::protobuf::uint32 value);

  // required uint32 height = 10;
  inline bool has_height() const;
  inline void clear_height();
  static const int kHeightFieldNumber = 10;
  inline ::google::protobuf::uint32 height() const;
  inline void set_height(::google::protobuf::uint32 value);

  // required double radius = 11;
  inline bool has_radius() const;
  inline void clear_radius();
  static const int kRadiusFieldNumber = 11;
  inline double radius() const;
  inline void set_radius(double value);

  // required uint32 curIndex = 12;
  inline bool has_curindex() const;
  inline void clear_curindex();
  static const int kCurIndexFieldNumber = 12;
  inline ::google::protobuf::uint32 curindex() const;
  inline void set_curindex(::google::protobuf::uint32 value);

  // required uint32 loopNum = 13;
  inline bool has_loopnum() const;
  inline void clear_loopnum();
  static const int kLoopNumFieldNumber = 13;
  inline ::google::protobuf::uint32 loopnum() const;
  inline void set_loopnum(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:com.zhichenhaixin.proto.RadarVideo)
 private:
  inline void set_has_radarid();
  inline void clear_has_radarid();
  inline void set_has_radarname();
  inline void clear_has_radarname();
  inline void set_has_latitude();
  inline void clear_has_latitude();
  inline void set_has_longitude();
  inline void clear_has_longitude();
  inline void set_has_utc();
  inline void clear_has_utc();
  inline void set_has_imagedata();
  inline void clear_has_imagedata();
  inline void set_has_curimagedata();
  inline void clear_has_curimagedata();
  inline void set_has_preimagedata();
  inline void clear_has_preimagedata();
  inline void set_has_width();
  inline void clear_has_width();
  inline void set_has_height();
  inline void clear_has_height();
  inline void set_has_radius();
  inline void clear_has_radius();
  inline void set_has_curindex();
  inline void clear_has_curindex();
  inline void set_has_loopnum();
  inline void clear_has_loopnum();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 radarid_;
  ::std::string* radarname_;
  double latitude_;
  double longitude_;
  ::google::protobuf::uint64 utc_;
  ::std::string* imagedata_;
  ::std::string* curimagedata_;
  ::std::string* preimagedata_;
  ::google::protobuf::uint32 width_;
  ::google::protobuf::uint32 height_;
  double radius_;
  ::google::protobuf::uint32 curindex_;
  ::google::protobuf::uint32 loopnum_;
  friend void  protobuf_AddDesc_ZCHXRadarVideo_2eproto();
  friend void protobuf_AssignDesc_ZCHXRadarVideo_2eproto();
  friend void protobuf_ShutdownFile_ZCHXRadarVideo_2eproto();

  void InitAsDefaultInstance();
  static RadarVideo* default_instance_;
};
// -------------------------------------------------------------------

class RadarVideoPoint : public ::google::protobuf::Message {
 public:
  RadarVideoPoint();
  virtual ~RadarVideoPoint();

  RadarVideoPoint(const RadarVideoPoint& from);

  inline RadarVideoPoint& operator=(const RadarVideoPoint& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RadarVideoPoint& default_instance();

  void Swap(RadarVideoPoint* other);

  // implements Message ----------------------------------------------

  RadarVideoPoint* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RadarVideoPoint& from);
  void MergeFrom(const RadarVideoPoint& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string radarName = 2;
  inline bool has_radarname() const;
  inline void clear_radarname();
  static const int kRadarNameFieldNumber = 2;
  inline const ::std::string& radarname() const;
  inline void set_radarname(const ::std::string& value);
  inline void set_radarname(const char* value);
  inline void set_radarname(const char* value, size_t size);
  inline ::std::string* mutable_radarname();
  inline ::std::string* release_radarname();
  inline void set_allocated_radarname(::std::string* radarname);

  // required double latitude = 3;
  inline bool has_latitude() const;
  inline void clear_latitude();
  static const int kLatitudeFieldNumber = 3;
  inline double latitude() const;
  inline void set_latitude(double value);

  // required double longitude = 4;
  inline bool has_longitude() const;
  inline void clear_longitude();
  static const int kLongitudeFieldNumber = 4;
  inline double longitude() const;
  inline void set_longitude(double value);

  // required uint64 UTC = 5;
  inline bool has_utc() const;
  inline void clear_utc();
  static const int kUTCFieldNumber = 5;
  inline ::google::protobuf::uint64 utc() const;
  inline void set_utc(::google::protobuf::uint64 value);

  // required bytes imageData = 6;
  inline bool has_imagedata() const;
  inline void clear_imagedata();
  static const int kImageDataFieldNumber = 6;
  inline const ::std::string& imagedata() const;
  inline void set_imagedata(const ::std::string& value);
  inline void set_imagedata(const char* value);
  inline void set_imagedata(const void* value, size_t size);
  inline ::std::string* mutable_imagedata();
  inline ::std::string* release_imagedata();
  inline void set_allocated_imagedata(::std::string* imagedata);

  // required bytes preImageData = 7;
  inline bool has_preimagedata() const;
  inline void clear_preimagedata();
  static const int kPreImageDataFieldNumber = 7;
  inline const ::std::string& preimagedata() const;
  inline void set_preimagedata(const ::std::string& value);
  inline void set_preimagedata(const char* value);
  inline void set_preimagedata(const void* value, size_t size);
  inline ::std::string* mutable_preimagedata();
  inline ::std::string* release_preimagedata();
  inline void set_allocated_preimagedata(::std::string* preimagedata);

  // required uint32 width = 8;
  inline bool has_width() const;
  inline void clear_width();
  static const int kWidthFieldNumber = 8;
  inline ::google::protobuf::uint32 width() const;
  inline void set_width(::google::protobuf::uint32 value);

  // required uint32 height = 9;
  inline bool has_height() const;
  inline void clear_height();
  static const int kHeightFieldNumber = 9;
  inline ::google::protobuf::uint32 height() const;
  inline void set_height(::google::protobuf::uint32 value);

  // required double radius = 10;
  inline bool has_radius() const;
  inline void clear_radius();
  static const int kRadiusFieldNumber = 10;
  inline double radius() const;
  inline void set_radius(double value);

  // required uint32 curIndex = 11;
  inline bool has_curindex() const;
  inline void clear_curindex();
  static const int kCurIndexFieldNumber = 11;
  inline ::google::protobuf::uint32 curindex() const;
  inline void set_curindex(::google::protobuf::uint32 value);

  // required uint32 loopNum = 12;
  inline bool has_loopnum() const;
  inline void clear_loopnum();
  static const int kLoopNumFieldNumber = 12;
  inline ::google::protobuf::uint32 loopnum() const;
  inline void set_loopnum(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:com.zhichenhaixin.proto.RadarVideoPoint)
 private:
  inline void set_has_radarname();
  inline void clear_has_radarname();
  inline void set_has_latitude();
  inline void clear_has_latitude();
  inline void set_has_longitude();
  inline void clear_has_longitude();
  inline void set_has_utc();
  inline void clear_has_utc();
  inline void set_has_imagedata();
  inline void clear_has_imagedata();
  inline void set_has_preimagedata();
  inline void clear_has_preimagedata();
  inline void set_has_width();
  inline void clear_has_width();
  inline void set_has_height();
  inline void clear_has_height();
  inline void set_has_radius();
  inline void clear_has_radius();
  inline void set_has_curindex();
  inline void clear_has_curindex();
  inline void set_has_loopnum();
  inline void clear_has_loopnum();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* radarname_;
  double latitude_;
  double longitude_;
  ::google::protobuf::uint64 utc_;
  ::std::string* imagedata_;
  ::std::string* preimagedata_;
  ::google::protobuf::uint32 width_;
  ::google::protobuf::uint32 height_;
  double radius_;
  ::google::protobuf::uint32 curindex_;
  ::google::protobuf::uint32 loopnum_;
  friend void  protobuf_AddDesc_ZCHXRadarVideo_2eproto();
  friend void protobuf_AssignDesc_ZCHXRadarVideo_2eproto();
  friend void protobuf_ShutdownFile_ZCHXRadarVideo_2eproto();

  void InitAsDefaultInstance();
  static RadarVideoPoint* default_instance_;
};
// ===================================================================


// ===================================================================

// singleVideoBlock

// required double latitude = 1;
inline bool singleVideoBlock::has_latitude() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void singleVideoBlock::set_has_latitude() {
  _has_bits_[0] |= 0x00000001u;
}
inline void singleVideoBlock::clear_has_latitude() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void singleVideoBlock::clear_latitude() {
  latitude_ = 0;
  clear_has_latitude();
}
inline double singleVideoBlock::latitude() const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.proto.singleVideoBlock.latitude)
  return latitude_;
}
inline void singleVideoBlock::set_latitude(double value) {
  set_has_latitude();
  latitude_ = value;
  // @@protoc_insertion_point(field_set:com.zhichenhaixin.proto.singleVideoBlock.latitude)
}

// required double longitude = 2;
inline bool singleVideoBlock::has_longitude() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void singleVideoBlock::set_has_longitude() {
  _has_bits_[0] |= 0x00000002u;
}
inline void singleVideoBlock::clear_has_longitude() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void singleVideoBlock::clear_longitude() {
  longitude_ = 0;
  clear_has_longitude();
}
inline double singleVideoBlock::longitude() const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.proto.singleVideoBlock.longitude)
  return longitude_;
}
inline void singleVideoBlock::set_longitude(double value) {
  set_has_longitude();
  longitude_ = value;
  // @@protoc_insertion_point(field_set:com.zhichenhaixin.proto.singleVideoBlock.longitude)
}

// -------------------------------------------------------------------

// pixelPoint

// required uint32 x = 1;
inline bool pixelPoint::has_x() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void pixelPoint::set_has_x() {
  _has_bits_[0] |= 0x00000001u;
}
inline void pixelPoint::clear_has_x() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void pixelPoint::clear_x() {
  x_ = 0u;
  clear_has_x();
}
inline ::google::protobuf::uint32 pixelPoint::x() const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.proto.pixelPoint.x)
  return x_;
}
inline void pixelPoint::set_x(::google::protobuf::uint32 value) {
  set_has_x();
  x_ = value;
  // @@protoc_insertion_point(field_set:com.zhichenhaixin.proto.pixelPoint.x)
}

// required uint32 y = 2;
inline bool pixelPoint::has_y() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void pixelPoint::set_has_y() {
  _has_bits_[0] |= 0x00000002u;
}
inline void pixelPoint::clear_has_y() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void pixelPoint::clear_y() {
  y_ = 0u;
  clear_has_y();
}
inline ::google::protobuf::uint32 pixelPoint::y() const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.proto.pixelPoint.y)
  return y_;
}
inline void pixelPoint::set_y(::google::protobuf::uint32 value) {
  set_has_y();
  y_ = value;
  // @@protoc_insertion_point(field_set:com.zhichenhaixin.proto.pixelPoint.y)
}

// -------------------------------------------------------------------

// fixRectPixelImg

// required uint32 width = 1;
inline bool fixRectPixelImg::has_width() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void fixRectPixelImg::set_has_width() {
  _has_bits_[0] |= 0x00000001u;
}
inline void fixRectPixelImg::clear_has_width() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void fixRectPixelImg::clear_width() {
  width_ = 0u;
  clear_has_width();
}
inline ::google::protobuf::uint32 fixRectPixelImg::width() const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.proto.fixRectPixelImg.width)
  return width_;
}
inline void fixRectPixelImg::set_width(::google::protobuf::uint32 value) {
  set_has_width();
  width_ = value;
  // @@protoc_insertion_point(field_set:com.zhichenhaixin.proto.fixRectPixelImg.width)
}

// required uint32 height = 2;
inline bool fixRectPixelImg::has_height() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void fixRectPixelImg::set_has_height() {
  _has_bits_[0] |= 0x00000002u;
}
inline void fixRectPixelImg::clear_has_height() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void fixRectPixelImg::clear_height() {
  height_ = 0u;
  clear_has_height();
}
inline ::google::protobuf::uint32 fixRectPixelImg::height() const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.proto.fixRectPixelImg.height)
  return height_;
}
inline void fixRectPixelImg::set_height(::google::protobuf::uint32 value) {
  set_has_height();
  height_ = value;
  // @@protoc_insertion_point(field_set:com.zhichenhaixin.proto.fixRectPixelImg.height)
}

// repeated .com.zhichenhaixin.proto.pixelPoint points = 3;
inline int fixRectPixelImg::points_size() const {
  return points_.size();
}
inline void fixRectPixelImg::clear_points() {
  points_.Clear();
}
inline const ::com::zhichenhaixin::proto::pixelPoint& fixRectPixelImg::points(int index) const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.proto.fixRectPixelImg.points)
  return points_.Get(index);
}
inline ::com::zhichenhaixin::proto::pixelPoint* fixRectPixelImg::mutable_points(int index) {
  // @@protoc_insertion_point(field_mutable:com.zhichenhaixin.proto.fixRectPixelImg.points)
  return points_.Mutable(index);
}
inline ::com::zhichenhaixin::proto::pixelPoint* fixRectPixelImg::add_points() {
  // @@protoc_insertion_point(field_add:com.zhichenhaixin.proto.fixRectPixelImg.points)
  return points_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::com::zhichenhaixin::proto::pixelPoint >&
fixRectPixelImg::points() const {
  // @@protoc_insertion_point(field_list:com.zhichenhaixin.proto.fixRectPixelImg.points)
  return points_;
}
inline ::google::protobuf::RepeatedPtrField< ::com::zhichenhaixin::proto::pixelPoint >*
fixRectPixelImg::mutable_points() {
  // @@protoc_insertion_point(field_mutable_list:com.zhichenhaixin.proto.fixRectPixelImg.points)
  return &points_;
}

// -------------------------------------------------------------------

// predictionArea

// repeated .com.zhichenhaixin.proto.singleVideoBlock area = 1;
inline int predictionArea::area_size() const {
  return area_.size();
}
inline void predictionArea::clear_area() {
  area_.Clear();
}
inline const ::com::zhichenhaixin::proto::singleVideoBlock& predictionArea::area(int index) const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.proto.predictionArea.area)
  return area_.Get(index);
}
inline ::com::zhichenhaixin::proto::singleVideoBlock* predictionArea::mutable_area(int index) {
  // @@protoc_insertion_point(field_mutable:com.zhichenhaixin.proto.predictionArea.area)
  return area_.Mutable(index);
}
inline ::com::zhichenhaixin::proto::singleVideoBlock* predictionArea::add_area() {
  // @@protoc_insertion_point(field_add:com.zhichenhaixin.proto.predictionArea.area)
  return area_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::com::zhichenhaixin::proto::singleVideoBlock >&
predictionArea::area() const {
  // @@protoc_insertion_point(field_list:com.zhichenhaixin.proto.predictionArea.area)
  return area_;
}
inline ::google::protobuf::RepeatedPtrField< ::com::zhichenhaixin::proto::singleVideoBlock >*
predictionArea::mutable_area() {
  // @@protoc_insertion_point(field_mutable_list:com.zhichenhaixin.proto.predictionArea.area)
  return &area_;
}

// -------------------------------------------------------------------

// RadarRectDef

// required uint32 rectNumber = 1;
inline bool RadarRectDef::has_rectnumber() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RadarRectDef::set_has_rectnumber() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RadarRectDef::clear_has_rectnumber() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RadarRectDef::clear_rectnumber() {
  rectnumber_ = 0u;
  clear_has_rectnumber();
}
inline ::google::protobuf::uint32 RadarRectDef::rectnumber() const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.proto.RadarRectDef.rectNumber)
  return rectnumber_;
}
inline void RadarRectDef::set_rectnumber(::google::protobuf::uint32 value) {
  set_has_rectnumber();
  rectnumber_ = value;
  // @@protoc_insertion_point(field_set:com.zhichenhaixin.proto.RadarRectDef.rectNumber)
}

// required double topLeftlatitude = 2;
inline bool RadarRectDef::has_topleftlatitude() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RadarRectDef::set_has_topleftlatitude() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RadarRectDef::clear_has_topleftlatitude() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RadarRectDef::clear_topleftlatitude() {
  topleftlatitude_ = 0;
  clear_has_topleftlatitude();
}
inline double RadarRectDef::topleftlatitude() const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.proto.RadarRectDef.topLeftlatitude)
  return topleftlatitude_;
}
inline void RadarRectDef::set_topleftlatitude(double value) {
  set_has_topleftlatitude();
  topleftlatitude_ = value;
  // @@protoc_insertion_point(field_set:com.zhichenhaixin.proto.RadarRectDef.topLeftlatitude)
}

// required double topLeftlongitude = 3;
inline bool RadarRectDef::has_topleftlongitude() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void RadarRectDef::set_has_topleftlongitude() {
  _has_bits_[0] |= 0x00000004u;
}
inline void RadarRectDef::clear_has_topleftlongitude() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void RadarRectDef::clear_topleftlongitude() {
  topleftlongitude_ = 0;
  clear_has_topleftlongitude();
}
inline double RadarRectDef::topleftlongitude() const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.proto.RadarRectDef.topLeftlongitude)
  return topleftlongitude_;
}
inline void RadarRectDef::set_topleftlongitude(double value) {
  set_has_topleftlongitude();
  topleftlongitude_ = value;
  // @@protoc_insertion_point(field_set:com.zhichenhaixin.proto.RadarRectDef.topLeftlongitude)
}

// required double bottomRightlatitude = 4;
inline bool RadarRectDef::has_bottomrightlatitude() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void RadarRectDef::set_has_bottomrightlatitude() {
  _has_bits_[0] |= 0x00000008u;
}
inline void RadarRectDef::clear_has_bottomrightlatitude() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void RadarRectDef::clear_bottomrightlatitude() {
  bottomrightlatitude_ = 0;
  clear_has_bottomrightlatitude();
}
inline double RadarRectDef::bottomrightlatitude() const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.proto.RadarRectDef.bottomRightlatitude)
  return bottomrightlatitude_;
}
inline void RadarRectDef::set_bottomrightlatitude(double value) {
  set_has_bottomrightlatitude();
  bottomrightlatitude_ = value;
  // @@protoc_insertion_point(field_set:com.zhichenhaixin.proto.RadarRectDef.bottomRightlatitude)
}

// required double bottomRightlongitude = 5;
inline bool RadarRectDef::has_bottomrightlongitude() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void RadarRectDef::set_has_bottomrightlongitude() {
  _has_bits_[0] |= 0x00000010u;
}
inline void RadarRectDef::clear_has_bottomrightlongitude() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void RadarRectDef::clear_bottomrightlongitude() {
  bottomrightlongitude_ = 0;
  clear_has_bottomrightlongitude();
}
inline double RadarRectDef::bottomrightlongitude() const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.proto.RadarRectDef.bottomRightlongitude)
  return bottomrightlongitude_;
}
inline void RadarRectDef::set_bottomrightlongitude(double value) {
  set_has_bottomrightlongitude();
  bottomrightlongitude_ = value;
  // @@protoc_insertion_point(field_set:com.zhichenhaixin.proto.RadarRectDef.bottomRightlongitude)
}

// required double centerlatitude = 6;
inline bool RadarRectDef::has_centerlatitude() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void RadarRectDef::set_has_centerlatitude() {
  _has_bits_[0] |= 0x00000020u;
}
inline void RadarRectDef::clear_has_centerlatitude() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void RadarRectDef::clear_centerlatitude() {
  centerlatitude_ = 0;
  clear_has_centerlatitude();
}
inline double RadarRectDef::centerlatitude() const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.proto.RadarRectDef.centerlatitude)
  return centerlatitude_;
}
inline void RadarRectDef::set_centerlatitude(double value) {
  set_has_centerlatitude();
  centerlatitude_ = value;
  // @@protoc_insertion_point(field_set:com.zhichenhaixin.proto.RadarRectDef.centerlatitude)
}

// required double centerlongitude = 7;
inline bool RadarRectDef::has_centerlongitude() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void RadarRectDef::set_has_centerlongitude() {
  _has_bits_[0] |= 0x00000040u;
}
inline void RadarRectDef::clear_has_centerlongitude() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void RadarRectDef::clear_centerlongitude() {
  centerlongitude_ = 0;
  clear_has_centerlongitude();
}
inline double RadarRectDef::centerlongitude() const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.proto.RadarRectDef.centerlongitude)
  return centerlongitude_;
}
inline void RadarRectDef::set_centerlongitude(double value) {
  set_has_centerlongitude();
  centerlongitude_ = value;
  // @@protoc_insertion_point(field_set:com.zhichenhaixin.proto.RadarRectDef.centerlongitude)
}

// required uint32 updateTime = 8;
inline bool RadarRectDef::has_updatetime() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void RadarRectDef::set_has_updatetime() {
  _has_bits_[0] |= 0x00000080u;
}
inline void RadarRectDef::clear_has_updatetime() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void RadarRectDef::clear_updatetime() {
  updatetime_ = 0u;
  clear_has_updatetime();
}
inline ::google::protobuf::uint32 RadarRectDef::updatetime() const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.proto.RadarRectDef.updateTime)
  return updatetime_;
}
inline void RadarRectDef::set_updatetime(::google::protobuf::uint32 value) {
  set_has_updatetime();
  updatetime_ = value;
  // @@protoc_insertion_point(field_set:com.zhichenhaixin.proto.RadarRectDef.updateTime)
}

// optional int32 diameter = 9;
inline bool RadarRectDef::has_diameter() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void RadarRectDef::set_has_diameter() {
  _has_bits_[0] |= 0x00000100u;
}
inline void RadarRectDef::clear_has_diameter() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void RadarRectDef::clear_diameter() {
  diameter_ = 0;
  clear_has_diameter();
}
inline ::google::protobuf::int32 RadarRectDef::diameter() const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.proto.RadarRectDef.diameter)
  return diameter_;
}
inline void RadarRectDef::set_diameter(::google::protobuf::int32 value) {
  set_has_diameter();
  diameter_ = value;
  // @@protoc_insertion_point(field_set:com.zhichenhaixin.proto.RadarRectDef.diameter)
}

// repeated .com.zhichenhaixin.proto.singleVideoBlock Blocks = 10;
inline int RadarRectDef::blocks_size() const {
  return blocks_.size();
}
inline void RadarRectDef::clear_blocks() {
  blocks_.Clear();
}
inline const ::com::zhichenhaixin::proto::singleVideoBlock& RadarRectDef::blocks(int index) const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.proto.RadarRectDef.Blocks)
  return blocks_.Get(index);
}
inline ::com::zhichenhaixin::proto::singleVideoBlock* RadarRectDef::mutable_blocks(int index) {
  // @@protoc_insertion_point(field_mutable:com.zhichenhaixin.proto.RadarRectDef.Blocks)
  return blocks_.Mutable(index);
}
inline ::com::zhichenhaixin::proto::singleVideoBlock* RadarRectDef::add_blocks() {
  // @@protoc_insertion_point(field_add:com.zhichenhaixin.proto.RadarRectDef.Blocks)
  return blocks_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::com::zhichenhaixin::proto::singleVideoBlock >&
RadarRectDef::blocks() const {
  // @@protoc_insertion_point(field_list:com.zhichenhaixin.proto.RadarRectDef.Blocks)
  return blocks_;
}
inline ::google::protobuf::RepeatedPtrField< ::com::zhichenhaixin::proto::singleVideoBlock >*
RadarRectDef::mutable_blocks() {
  // @@protoc_insertion_point(field_mutable_list:com.zhichenhaixin.proto.RadarRectDef.Blocks)
  return &blocks_;
}

// optional double startlatitude = 11;
inline bool RadarRectDef::has_startlatitude() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void RadarRectDef::set_has_startlatitude() {
  _has_bits_[0] |= 0x00000400u;
}
inline void RadarRectDef::clear_has_startlatitude() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void RadarRectDef::clear_startlatitude() {
  startlatitude_ = 0;
  clear_has_startlatitude();
}
inline double RadarRectDef::startlatitude() const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.proto.RadarRectDef.startlatitude)
  return startlatitude_;
}
inline void RadarRectDef::set_startlatitude(double value) {
  set_has_startlatitude();
  startlatitude_ = value;
  // @@protoc_insertion_point(field_set:com.zhichenhaixin.proto.RadarRectDef.startlatitude)
}

// optional double startlongitude = 12;
inline bool RadarRectDef::has_startlongitude() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void RadarRectDef::set_has_startlongitude() {
  _has_bits_[0] |= 0x00000800u;
}
inline void RadarRectDef::clear_has_startlongitude() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void RadarRectDef::clear_startlongitude() {
  startlongitude_ = 0;
  clear_has_startlongitude();
}
inline double RadarRectDef::startlongitude() const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.proto.RadarRectDef.startlongitude)
  return startlongitude_;
}
inline void RadarRectDef::set_startlongitude(double value) {
  set_has_startlongitude();
  startlongitude_ = value;
  // @@protoc_insertion_point(field_set:com.zhichenhaixin.proto.RadarRectDef.startlongitude)
}

// optional double endlatitude = 13;
inline bool RadarRectDef::has_endlatitude() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void RadarRectDef::set_has_endlatitude() {
  _has_bits_[0] |= 0x00001000u;
}
inline void RadarRectDef::clear_has_endlatitude() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void RadarRectDef::clear_endlatitude() {
  endlatitude_ = 0;
  clear_has_endlatitude();
}
inline double RadarRectDef::endlatitude() const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.proto.RadarRectDef.endlatitude)
  return endlatitude_;
}
inline void RadarRectDef::set_endlatitude(double value) {
  set_has_endlatitude();
  endlatitude_ = value;
  // @@protoc_insertion_point(field_set:com.zhichenhaixin.proto.RadarRectDef.endlatitude)
}

// optional double endlongitude = 14;
inline bool RadarRectDef::has_endlongitude() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void RadarRectDef::set_has_endlongitude() {
  _has_bits_[0] |= 0x00002000u;
}
inline void RadarRectDef::clear_has_endlongitude() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void RadarRectDef::clear_endlongitude() {
  endlongitude_ = 0;
  clear_has_endlongitude();
}
inline double RadarRectDef::endlongitude() const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.proto.RadarRectDef.endlongitude)
  return endlongitude_;
}
inline void RadarRectDef::set_endlongitude(double value) {
  set_has_endlongitude();
  endlongitude_ = value;
  // @@protoc_insertion_point(field_set:com.zhichenhaixin.proto.RadarRectDef.endlongitude)
}

// optional double angle = 15;
inline bool RadarRectDef::has_angle() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void RadarRectDef::set_has_angle() {
  _has_bits_[0] |= 0x00004000u;
}
inline void RadarRectDef::clear_has_angle() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void RadarRectDef::clear_angle() {
  angle_ = 0;
  clear_has_angle();
}
inline double RadarRectDef::angle() const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.proto.RadarRectDef.angle)
  return angle_;
}
inline void RadarRectDef::set_angle(double value) {
  set_has_angle();
  angle_ = value;
  // @@protoc_insertion_point(field_set:com.zhichenhaixin.proto.RadarRectDef.angle)
}

// required double sog = 16;
inline bool RadarRectDef::has_sog() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void RadarRectDef::set_has_sog() {
  _has_bits_[0] |= 0x00008000u;
}
inline void RadarRectDef::clear_has_sog() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void RadarRectDef::clear_sog() {
  sog_ = 0;
  clear_has_sog();
}
inline double RadarRectDef::sog() const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.proto.RadarRectDef.sog)
  return sog_;
}
inline void RadarRectDef::set_sog(double value) {
  set_has_sog();
  sog_ = value;
  // @@protoc_insertion_point(field_set:com.zhichenhaixin.proto.RadarRectDef.sog)
}

// required double cog = 17;
inline bool RadarRectDef::has_cog() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void RadarRectDef::set_has_cog() {
  _has_bits_[0] |= 0x00010000u;
}
inline void RadarRectDef::clear_has_cog() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void RadarRectDef::clear_cog() {
  cog_ = 0;
  clear_has_cog();
}
inline double RadarRectDef::cog() const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.proto.RadarRectDef.cog)
  return cog_;
}
inline void RadarRectDef::set_cog(double value) {
  set_has_cog();
  cog_ = value;
  // @@protoc_insertion_point(field_set:com.zhichenhaixin.proto.RadarRectDef.cog)
}

// repeated .com.zhichenhaixin.proto.pixelPoint pixelPnts = 18;
inline int RadarRectDef::pixelpnts_size() const {
  return pixelpnts_.size();
}
inline void RadarRectDef::clear_pixelpnts() {
  pixelpnts_.Clear();
}
inline const ::com::zhichenhaixin::proto::pixelPoint& RadarRectDef::pixelpnts(int index) const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.proto.RadarRectDef.pixelPnts)
  return pixelpnts_.Get(index);
}
inline ::com::zhichenhaixin::proto::pixelPoint* RadarRectDef::mutable_pixelpnts(int index) {
  // @@protoc_insertion_point(field_mutable:com.zhichenhaixin.proto.RadarRectDef.pixelPnts)
  return pixelpnts_.Mutable(index);
}
inline ::com::zhichenhaixin::proto::pixelPoint* RadarRectDef::add_pixelpnts() {
  // @@protoc_insertion_point(field_add:com.zhichenhaixin.proto.RadarRectDef.pixelPnts)
  return pixelpnts_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::com::zhichenhaixin::proto::pixelPoint >&
RadarRectDef::pixelpnts() const {
  // @@protoc_insertion_point(field_list:com.zhichenhaixin.proto.RadarRectDef.pixelPnts)
  return pixelpnts_;
}
inline ::google::protobuf::RepeatedPtrField< ::com::zhichenhaixin::proto::pixelPoint >*
RadarRectDef::mutable_pixelpnts() {
  // @@protoc_insertion_point(field_mutable_list:com.zhichenhaixin.proto.RadarRectDef.pixelPnts)
  return &pixelpnts_;
}

// required bool realData = 19;
inline bool RadarRectDef::has_realdata() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void RadarRectDef::set_has_realdata() {
  _has_bits_[0] |= 0x00040000u;
}
inline void RadarRectDef::clear_has_realdata() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void RadarRectDef::clear_realdata() {
  realdata_ = false;
  clear_has_realdata();
}
inline bool RadarRectDef::realdata() const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.proto.RadarRectDef.realData)
  return realdata_;
}
inline void RadarRectDef::set_realdata(bool value) {
  set_has_realdata();
  realdata_ = value;
  // @@protoc_insertion_point(field_set:com.zhichenhaixin.proto.RadarRectDef.realData)
}

// optional .com.zhichenhaixin.proto.predictionArea predictionAreas = 20;
inline bool RadarRectDef::has_predictionareas() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void RadarRectDef::set_has_predictionareas() {
  _has_bits_[0] |= 0x00080000u;
}
inline void RadarRectDef::clear_has_predictionareas() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void RadarRectDef::clear_predictionareas() {
  if (predictionareas_ != NULL) predictionareas_->::com::zhichenhaixin::proto::predictionArea::Clear();
  clear_has_predictionareas();
}
inline const ::com::zhichenhaixin::proto::predictionArea& RadarRectDef::predictionareas() const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.proto.RadarRectDef.predictionAreas)
  return predictionareas_ != NULL ? *predictionareas_ : *default_instance_->predictionareas_;
}
inline ::com::zhichenhaixin::proto::predictionArea* RadarRectDef::mutable_predictionareas() {
  set_has_predictionareas();
  if (predictionareas_ == NULL) predictionareas_ = new ::com::zhichenhaixin::proto::predictionArea;
  // @@protoc_insertion_point(field_mutable:com.zhichenhaixin.proto.RadarRectDef.predictionAreas)
  return predictionareas_;
}
inline ::com::zhichenhaixin::proto::predictionArea* RadarRectDef::release_predictionareas() {
  clear_has_predictionareas();
  ::com::zhichenhaixin::proto::predictionArea* temp = predictionareas_;
  predictionareas_ = NULL;
  return temp;
}
inline void RadarRectDef::set_allocated_predictionareas(::com::zhichenhaixin::proto::predictionArea* predictionareas) {
  delete predictionareas_;
  predictionareas_ = predictionareas;
  if (predictionareas) {
    set_has_predictionareas();
  } else {
    clear_has_predictionareas();
  }
  // @@protoc_insertion_point(field_set_allocated:com.zhichenhaixin.proto.RadarRectDef.predictionAreas)
}

// optional int32 videoCycleIndex = 21;
inline bool RadarRectDef::has_videocycleindex() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void RadarRectDef::set_has_videocycleindex() {
  _has_bits_[0] |= 0x00100000u;
}
inline void RadarRectDef::clear_has_videocycleindex() {
  _has_bits_[0] &= ~0x00100000u;
}
inline void RadarRectDef::clear_videocycleindex() {
  videocycleindex_ = 0;
  clear_has_videocycleindex();
}
inline ::google::protobuf::int32 RadarRectDef::videocycleindex() const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.proto.RadarRectDef.videoCycleIndex)
  return videocycleindex_;
}
inline void RadarRectDef::set_videocycleindex(::google::protobuf::int32 value) {
  set_has_videocycleindex();
  videocycleindex_ = value;
  // @@protoc_insertion_point(field_set:com.zhichenhaixin.proto.RadarRectDef.videoCycleIndex)
}

// -------------------------------------------------------------------

// RoutePath

// repeated .com.zhichenhaixin.proto.RadarRectDef path = 1;
inline int RoutePath::path_size() const {
  return path_.size();
}
inline void RoutePath::clear_path() {
  path_.Clear();
}
inline const ::com::zhichenhaixin::proto::RadarRectDef& RoutePath::path(int index) const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.proto.RoutePath.path)
  return path_.Get(index);
}
inline ::com::zhichenhaixin::proto::RadarRectDef* RoutePath::mutable_path(int index) {
  // @@protoc_insertion_point(field_mutable:com.zhichenhaixin.proto.RoutePath.path)
  return path_.Mutable(index);
}
inline ::com::zhichenhaixin::proto::RadarRectDef* RoutePath::add_path() {
  // @@protoc_insertion_point(field_add:com.zhichenhaixin.proto.RoutePath.path)
  return path_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::com::zhichenhaixin::proto::RadarRectDef >&
RoutePath::path() const {
  // @@protoc_insertion_point(field_list:com.zhichenhaixin.proto.RoutePath.path)
  return path_;
}
inline ::google::protobuf::RepeatedPtrField< ::com::zhichenhaixin::proto::RadarRectDef >*
RoutePath::mutable_path() {
  // @@protoc_insertion_point(field_mutable_list:com.zhichenhaixin.proto.RoutePath.path)
  return &path_;
}

// -------------------------------------------------------------------

// RouteNode

// required int32 node_num = 1;
inline bool RouteNode::has_node_num() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RouteNode::set_has_node_num() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RouteNode::clear_has_node_num() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RouteNode::clear_node_num() {
  node_num_ = 0;
  clear_has_node_num();
}
inline ::google::protobuf::int32 RouteNode::node_num() const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.proto.RouteNode.node_num)
  return node_num_;
}
inline void RouteNode::set_node_num(::google::protobuf::int32 value) {
  set_has_node_num();
  node_num_ = value;
  // @@protoc_insertion_point(field_set:com.zhichenhaixin.proto.RouteNode.node_num)
}

// required .com.zhichenhaixin.proto.RadarRectDef top_node = 2;
inline bool RouteNode::has_top_node() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RouteNode::set_has_top_node() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RouteNode::clear_has_top_node() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RouteNode::clear_top_node() {
  if (top_node_ != NULL) top_node_->::com::zhichenhaixin::proto::RadarRectDef::Clear();
  clear_has_top_node();
}
inline const ::com::zhichenhaixin::proto::RadarRectDef& RouteNode::top_node() const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.proto.RouteNode.top_node)
  return top_node_ != NULL ? *top_node_ : *default_instance_->top_node_;
}
inline ::com::zhichenhaixin::proto::RadarRectDef* RouteNode::mutable_top_node() {
  set_has_top_node();
  if (top_node_ == NULL) top_node_ = new ::com::zhichenhaixin::proto::RadarRectDef;
  // @@protoc_insertion_point(field_mutable:com.zhichenhaixin.proto.RouteNode.top_node)
  return top_node_;
}
inline ::com::zhichenhaixin::proto::RadarRectDef* RouteNode::release_top_node() {
  clear_has_top_node();
  ::com::zhichenhaixin::proto::RadarRectDef* temp = top_node_;
  top_node_ = NULL;
  return temp;
}
inline void RouteNode::set_allocated_top_node(::com::zhichenhaixin::proto::RadarRectDef* top_node) {
  delete top_node_;
  top_node_ = top_node;
  if (top_node) {
    set_has_top_node();
  } else {
    clear_has_top_node();
  }
  // @@protoc_insertion_point(field_set_allocated:com.zhichenhaixin.proto.RouteNode.top_node)
}

// repeated .com.zhichenhaixin.proto.RoutePath path_list = 3;
inline int RouteNode::path_list_size() const {
  return path_list_.size();
}
inline void RouteNode::clear_path_list() {
  path_list_.Clear();
}
inline const ::com::zhichenhaixin::proto::RoutePath& RouteNode::path_list(int index) const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.proto.RouteNode.path_list)
  return path_list_.Get(index);
}
inline ::com::zhichenhaixin::proto::RoutePath* RouteNode::mutable_path_list(int index) {
  // @@protoc_insertion_point(field_mutable:com.zhichenhaixin.proto.RouteNode.path_list)
  return path_list_.Mutable(index);
}
inline ::com::zhichenhaixin::proto::RoutePath* RouteNode::add_path_list() {
  // @@protoc_insertion_point(field_add:com.zhichenhaixin.proto.RouteNode.path_list)
  return path_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::com::zhichenhaixin::proto::RoutePath >&
RouteNode::path_list() const {
  // @@protoc_insertion_point(field_list:com.zhichenhaixin.proto.RouteNode.path_list)
  return path_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::com::zhichenhaixin::proto::RoutePath >*
RouteNode::mutable_path_list() {
  // @@protoc_insertion_point(field_mutable_list:com.zhichenhaixin.proto.RouteNode.path_list)
  return &path_list_;
}

// -------------------------------------------------------------------

// RouteNodes

// repeated .com.zhichenhaixin.proto.RouteNode node_list = 1;
inline int RouteNodes::node_list_size() const {
  return node_list_.size();
}
inline void RouteNodes::clear_node_list() {
  node_list_.Clear();
}
inline const ::com::zhichenhaixin::proto::RouteNode& RouteNodes::node_list(int index) const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.proto.RouteNodes.node_list)
  return node_list_.Get(index);
}
inline ::com::zhichenhaixin::proto::RouteNode* RouteNodes::mutable_node_list(int index) {
  // @@protoc_insertion_point(field_mutable:com.zhichenhaixin.proto.RouteNodes.node_list)
  return node_list_.Mutable(index);
}
inline ::com::zhichenhaixin::proto::RouteNode* RouteNodes::add_node_list() {
  // @@protoc_insertion_point(field_add:com.zhichenhaixin.proto.RouteNodes.node_list)
  return node_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::com::zhichenhaixin::proto::RouteNode >&
RouteNodes::node_list() const {
  // @@protoc_insertion_point(field_list:com.zhichenhaixin.proto.RouteNodes.node_list)
  return node_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::com::zhichenhaixin::proto::RouteNode >*
RouteNodes::mutable_node_list() {
  // @@protoc_insertion_point(field_mutable_list:com.zhichenhaixin.proto.RouteNodes.node_list)
  return &node_list_;
}

// -------------------------------------------------------------------

// RadarRect

// required .com.zhichenhaixin.proto.RadarRectDef current_rect = 1;
inline bool RadarRect::has_current_rect() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RadarRect::set_has_current_rect() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RadarRect::clear_has_current_rect() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RadarRect::clear_current_rect() {
  if (current_rect_ != NULL) current_rect_->::com::zhichenhaixin::proto::RadarRectDef::Clear();
  clear_has_current_rect();
}
inline const ::com::zhichenhaixin::proto::RadarRectDef& RadarRect::current_rect() const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.proto.RadarRect.current_rect)
  return current_rect_ != NULL ? *current_rect_ : *default_instance_->current_rect_;
}
inline ::com::zhichenhaixin::proto::RadarRectDef* RadarRect::mutable_current_rect() {
  set_has_current_rect();
  if (current_rect_ == NULL) current_rect_ = new ::com::zhichenhaixin::proto::RadarRectDef;
  // @@protoc_insertion_point(field_mutable:com.zhichenhaixin.proto.RadarRect.current_rect)
  return current_rect_;
}
inline ::com::zhichenhaixin::proto::RadarRectDef* RadarRect::release_current_rect() {
  clear_has_current_rect();
  ::com::zhichenhaixin::proto::RadarRectDef* temp = current_rect_;
  current_rect_ = NULL;
  return temp;
}
inline void RadarRect::set_allocated_current_rect(::com::zhichenhaixin::proto::RadarRectDef* current_rect) {
  delete current_rect_;
  current_rect_ = current_rect;
  if (current_rect) {
    set_has_current_rect();
  } else {
    clear_has_current_rect();
  }
  // @@protoc_insertion_point(field_set_allocated:com.zhichenhaixin.proto.RadarRect.current_rect)
}

// repeated .com.zhichenhaixin.proto.RadarRectDef history_rect_list = 2;
inline int RadarRect::history_rect_list_size() const {
  return history_rect_list_.size();
}
inline void RadarRect::clear_history_rect_list() {
  history_rect_list_.Clear();
}
inline const ::com::zhichenhaixin::proto::RadarRectDef& RadarRect::history_rect_list(int index) const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.proto.RadarRect.history_rect_list)
  return history_rect_list_.Get(index);
}
inline ::com::zhichenhaixin::proto::RadarRectDef* RadarRect::mutable_history_rect_list(int index) {
  // @@protoc_insertion_point(field_mutable:com.zhichenhaixin.proto.RadarRect.history_rect_list)
  return history_rect_list_.Mutable(index);
}
inline ::com::zhichenhaixin::proto::RadarRectDef* RadarRect::add_history_rect_list() {
  // @@protoc_insertion_point(field_add:com.zhichenhaixin.proto.RadarRect.history_rect_list)
  return history_rect_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::com::zhichenhaixin::proto::RadarRectDef >&
RadarRect::history_rect_list() const {
  // @@protoc_insertion_point(field_list:com.zhichenhaixin.proto.RadarRect.history_rect_list)
  return history_rect_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::com::zhichenhaixin::proto::RadarRectDef >*
RadarRect::mutable_history_rect_list() {
  // @@protoc_insertion_point(field_mutable_list:com.zhichenhaixin.proto.RadarRect.history_rect_list)
  return &history_rect_list_;
}

// required bool dir_confirmed = 3;
inline bool RadarRect::has_dir_confirmed() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void RadarRect::set_has_dir_confirmed() {
  _has_bits_[0] |= 0x00000004u;
}
inline void RadarRect::clear_has_dir_confirmed() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void RadarRect::clear_dir_confirmed() {
  dir_confirmed_ = false;
  clear_has_dir_confirmed();
}
inline bool RadarRect::dir_confirmed() const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.proto.RadarRect.dir_confirmed)
  return dir_confirmed_;
}
inline void RadarRect::set_dir_confirmed(bool value) {
  set_has_dir_confirmed();
  dir_confirmed_ = value;
  // @@protoc_insertion_point(field_set:com.zhichenhaixin.proto.RadarRect.dir_confirmed)
}

// required uint32 cur_est_count = 4;
inline bool RadarRect::has_cur_est_count() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void RadarRect::set_has_cur_est_count() {
  _has_bits_[0] |= 0x00000008u;
}
inline void RadarRect::clear_has_cur_est_count() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void RadarRect::clear_cur_est_count() {
  cur_est_count_ = 0u;
  clear_has_cur_est_count();
}
inline ::google::protobuf::uint32 RadarRect::cur_est_count() const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.proto.RadarRect.cur_est_count)
  return cur_est_count_;
}
inline void RadarRect::set_cur_est_count(::google::protobuf::uint32 value) {
  set_has_cur_est_count();
  cur_est_count_ = value;
  // @@protoc_insertion_point(field_set:com.zhichenhaixin.proto.RadarRect.cur_est_count)
}

// required int32 node_num = 5;
inline bool RadarRect::has_node_num() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void RadarRect::set_has_node_num() {
  _has_bits_[0] |= 0x00000010u;
}
inline void RadarRect::clear_has_node_num() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void RadarRect::clear_node_num() {
  node_num_ = 0;
  clear_has_node_num();
}
inline ::google::protobuf::int32 RadarRect::node_num() const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.proto.RadarRect.node_num)
  return node_num_;
}
inline void RadarRect::set_node_num(::google::protobuf::int32 value) {
  set_has_node_num();
  node_num_ = value;
  // @@protoc_insertion_point(field_set:com.zhichenhaixin.proto.RadarRect.node_num)
}

// -------------------------------------------------------------------

// RadarRects

// required uint64 UTC = 1;
inline bool RadarRects::has_utc() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RadarRects::set_has_utc() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RadarRects::clear_has_utc() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RadarRects::clear_utc() {
  utc_ = GOOGLE_ULONGLONG(0);
  clear_has_utc();
}
inline ::google::protobuf::uint64 RadarRects::utc() const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.proto.RadarRects.UTC)
  return utc_;
}
inline void RadarRects::set_utc(::google::protobuf::uint64 value) {
  set_has_utc();
  utc_ = value;
  // @@protoc_insertion_point(field_set:com.zhichenhaixin.proto.RadarRects.UTC)
}

// required int32 length = 2;
inline bool RadarRects::has_length() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RadarRects::set_has_length() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RadarRects::clear_has_length() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RadarRects::clear_length() {
  length_ = 0;
  clear_has_length();
}
inline ::google::protobuf::int32 RadarRects::length() const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.proto.RadarRects.length)
  return length_;
}
inline void RadarRects::set_length(::google::protobuf::int32 value) {
  set_has_length();
  length_ = value;
  // @@protoc_insertion_point(field_set:com.zhichenhaixin.proto.RadarRects.length)
}

// repeated .com.zhichenhaixin.proto.RadarRect rect_list = 3;
inline int RadarRects::rect_list_size() const {
  return rect_list_.size();
}
inline void RadarRects::clear_rect_list() {
  rect_list_.Clear();
}
inline const ::com::zhichenhaixin::proto::RadarRect& RadarRects::rect_list(int index) const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.proto.RadarRects.rect_list)
  return rect_list_.Get(index);
}
inline ::com::zhichenhaixin::proto::RadarRect* RadarRects::mutable_rect_list(int index) {
  // @@protoc_insertion_point(field_mutable:com.zhichenhaixin.proto.RadarRects.rect_list)
  return rect_list_.Mutable(index);
}
inline ::com::zhichenhaixin::proto::RadarRect* RadarRects::add_rect_list() {
  // @@protoc_insertion_point(field_add:com.zhichenhaixin.proto.RadarRects.rect_list)
  return rect_list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::com::zhichenhaixin::proto::RadarRect >&
RadarRects::rect_list() const {
  // @@protoc_insertion_point(field_list:com.zhichenhaixin.proto.RadarRects.rect_list)
  return rect_list_;
}
inline ::google::protobuf::RepeatedPtrField< ::com::zhichenhaixin::proto::RadarRect >*
RadarRects::mutable_rect_list() {
  // @@protoc_insertion_point(field_mutable_list:com.zhichenhaixin.proto.RadarRects.rect_list)
  return &rect_list_;
}

// -------------------------------------------------------------------

// RadarVideo

// required uint64 radarId = 1;
inline bool RadarVideo::has_radarid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RadarVideo::set_has_radarid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RadarVideo::clear_has_radarid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RadarVideo::clear_radarid() {
  radarid_ = GOOGLE_ULONGLONG(0);
  clear_has_radarid();
}
inline ::google::protobuf::uint64 RadarVideo::radarid() const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.proto.RadarVideo.radarId)
  return radarid_;
}
inline void RadarVideo::set_radarid(::google::protobuf::uint64 value) {
  set_has_radarid();
  radarid_ = value;
  // @@protoc_insertion_point(field_set:com.zhichenhaixin.proto.RadarVideo.radarId)
}

// required string radarName = 2;
inline bool RadarVideo::has_radarname() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RadarVideo::set_has_radarname() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RadarVideo::clear_has_radarname() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RadarVideo::clear_radarname() {
  if (radarname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    radarname_->clear();
  }
  clear_has_radarname();
}
inline const ::std::string& RadarVideo::radarname() const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.proto.RadarVideo.radarName)
  return *radarname_;
}
inline void RadarVideo::set_radarname(const ::std::string& value) {
  set_has_radarname();
  if (radarname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    radarname_ = new ::std::string;
  }
  radarname_->assign(value);
  // @@protoc_insertion_point(field_set:com.zhichenhaixin.proto.RadarVideo.radarName)
}
inline void RadarVideo::set_radarname(const char* value) {
  set_has_radarname();
  if (radarname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    radarname_ = new ::std::string;
  }
  radarname_->assign(value);
  // @@protoc_insertion_point(field_set_char:com.zhichenhaixin.proto.RadarVideo.radarName)
}
inline void RadarVideo::set_radarname(const char* value, size_t size) {
  set_has_radarname();
  if (radarname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    radarname_ = new ::std::string;
  }
  radarname_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:com.zhichenhaixin.proto.RadarVideo.radarName)
}
inline ::std::string* RadarVideo::mutable_radarname() {
  set_has_radarname();
  if (radarname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    radarname_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:com.zhichenhaixin.proto.RadarVideo.radarName)
  return radarname_;
}
inline ::std::string* RadarVideo::release_radarname() {
  clear_has_radarname();
  if (radarname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = radarname_;
    radarname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void RadarVideo::set_allocated_radarname(::std::string* radarname) {
  if (radarname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete radarname_;
  }
  if (radarname) {
    set_has_radarname();
    radarname_ = radarname;
  } else {
    clear_has_radarname();
    radarname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:com.zhichenhaixin.proto.RadarVideo.radarName)
}

// required double latitude = 3;
inline bool RadarVideo::has_latitude() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void RadarVideo::set_has_latitude() {
  _has_bits_[0] |= 0x00000004u;
}
inline void RadarVideo::clear_has_latitude() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void RadarVideo::clear_latitude() {
  latitude_ = 0;
  clear_has_latitude();
}
inline double RadarVideo::latitude() const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.proto.RadarVideo.latitude)
  return latitude_;
}
inline void RadarVideo::set_latitude(double value) {
  set_has_latitude();
  latitude_ = value;
  // @@protoc_insertion_point(field_set:com.zhichenhaixin.proto.RadarVideo.latitude)
}

// required double longitude = 4;
inline bool RadarVideo::has_longitude() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void RadarVideo::set_has_longitude() {
  _has_bits_[0] |= 0x00000008u;
}
inline void RadarVideo::clear_has_longitude() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void RadarVideo::clear_longitude() {
  longitude_ = 0;
  clear_has_longitude();
}
inline double RadarVideo::longitude() const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.proto.RadarVideo.longitude)
  return longitude_;
}
inline void RadarVideo::set_longitude(double value) {
  set_has_longitude();
  longitude_ = value;
  // @@protoc_insertion_point(field_set:com.zhichenhaixin.proto.RadarVideo.longitude)
}

// required uint64 UTC = 5;
inline bool RadarVideo::has_utc() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void RadarVideo::set_has_utc() {
  _has_bits_[0] |= 0x00000010u;
}
inline void RadarVideo::clear_has_utc() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void RadarVideo::clear_utc() {
  utc_ = GOOGLE_ULONGLONG(0);
  clear_has_utc();
}
inline ::google::protobuf::uint64 RadarVideo::utc() const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.proto.RadarVideo.UTC)
  return utc_;
}
inline void RadarVideo::set_utc(::google::protobuf::uint64 value) {
  set_has_utc();
  utc_ = value;
  // @@protoc_insertion_point(field_set:com.zhichenhaixin.proto.RadarVideo.UTC)
}

// required bytes imageData = 6;
inline bool RadarVideo::has_imagedata() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void RadarVideo::set_has_imagedata() {
  _has_bits_[0] |= 0x00000020u;
}
inline void RadarVideo::clear_has_imagedata() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void RadarVideo::clear_imagedata() {
  if (imagedata_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    imagedata_->clear();
  }
  clear_has_imagedata();
}
inline const ::std::string& RadarVideo::imagedata() const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.proto.RadarVideo.imageData)
  return *imagedata_;
}
inline void RadarVideo::set_imagedata(const ::std::string& value) {
  set_has_imagedata();
  if (imagedata_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    imagedata_ = new ::std::string;
  }
  imagedata_->assign(value);
  // @@protoc_insertion_point(field_set:com.zhichenhaixin.proto.RadarVideo.imageData)
}
inline void RadarVideo::set_imagedata(const char* value) {
  set_has_imagedata();
  if (imagedata_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    imagedata_ = new ::std::string;
  }
  imagedata_->assign(value);
  // @@protoc_insertion_point(field_set_char:com.zhichenhaixin.proto.RadarVideo.imageData)
}
inline void RadarVideo::set_imagedata(const void* value, size_t size) {
  set_has_imagedata();
  if (imagedata_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    imagedata_ = new ::std::string;
  }
  imagedata_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:com.zhichenhaixin.proto.RadarVideo.imageData)
}
inline ::std::string* RadarVideo::mutable_imagedata() {
  set_has_imagedata();
  if (imagedata_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    imagedata_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:com.zhichenhaixin.proto.RadarVideo.imageData)
  return imagedata_;
}
inline ::std::string* RadarVideo::release_imagedata() {
  clear_has_imagedata();
  if (imagedata_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = imagedata_;
    imagedata_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void RadarVideo::set_allocated_imagedata(::std::string* imagedata) {
  if (imagedata_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete imagedata_;
  }
  if (imagedata) {
    set_has_imagedata();
    imagedata_ = imagedata;
  } else {
    clear_has_imagedata();
    imagedata_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:com.zhichenhaixin.proto.RadarVideo.imageData)
}

// required bytes curImageData = 7;
inline bool RadarVideo::has_curimagedata() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void RadarVideo::set_has_curimagedata() {
  _has_bits_[0] |= 0x00000040u;
}
inline void RadarVideo::clear_has_curimagedata() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void RadarVideo::clear_curimagedata() {
  if (curimagedata_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    curimagedata_->clear();
  }
  clear_has_curimagedata();
}
inline const ::std::string& RadarVideo::curimagedata() const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.proto.RadarVideo.curImageData)
  return *curimagedata_;
}
inline void RadarVideo::set_curimagedata(const ::std::string& value) {
  set_has_curimagedata();
  if (curimagedata_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    curimagedata_ = new ::std::string;
  }
  curimagedata_->assign(value);
  // @@protoc_insertion_point(field_set:com.zhichenhaixin.proto.RadarVideo.curImageData)
}
inline void RadarVideo::set_curimagedata(const char* value) {
  set_has_curimagedata();
  if (curimagedata_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    curimagedata_ = new ::std::string;
  }
  curimagedata_->assign(value);
  // @@protoc_insertion_point(field_set_char:com.zhichenhaixin.proto.RadarVideo.curImageData)
}
inline void RadarVideo::set_curimagedata(const void* value, size_t size) {
  set_has_curimagedata();
  if (curimagedata_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    curimagedata_ = new ::std::string;
  }
  curimagedata_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:com.zhichenhaixin.proto.RadarVideo.curImageData)
}
inline ::std::string* RadarVideo::mutable_curimagedata() {
  set_has_curimagedata();
  if (curimagedata_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    curimagedata_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:com.zhichenhaixin.proto.RadarVideo.curImageData)
  return curimagedata_;
}
inline ::std::string* RadarVideo::release_curimagedata() {
  clear_has_curimagedata();
  if (curimagedata_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = curimagedata_;
    curimagedata_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void RadarVideo::set_allocated_curimagedata(::std::string* curimagedata) {
  if (curimagedata_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete curimagedata_;
  }
  if (curimagedata) {
    set_has_curimagedata();
    curimagedata_ = curimagedata;
  } else {
    clear_has_curimagedata();
    curimagedata_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:com.zhichenhaixin.proto.RadarVideo.curImageData)
}

// required bytes preImageData = 8;
inline bool RadarVideo::has_preimagedata() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void RadarVideo::set_has_preimagedata() {
  _has_bits_[0] |= 0x00000080u;
}
inline void RadarVideo::clear_has_preimagedata() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void RadarVideo::clear_preimagedata() {
  if (preimagedata_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    preimagedata_->clear();
  }
  clear_has_preimagedata();
}
inline const ::std::string& RadarVideo::preimagedata() const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.proto.RadarVideo.preImageData)
  return *preimagedata_;
}
inline void RadarVideo::set_preimagedata(const ::std::string& value) {
  set_has_preimagedata();
  if (preimagedata_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    preimagedata_ = new ::std::string;
  }
  preimagedata_->assign(value);
  // @@protoc_insertion_point(field_set:com.zhichenhaixin.proto.RadarVideo.preImageData)
}
inline void RadarVideo::set_preimagedata(const char* value) {
  set_has_preimagedata();
  if (preimagedata_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    preimagedata_ = new ::std::string;
  }
  preimagedata_->assign(value);
  // @@protoc_insertion_point(field_set_char:com.zhichenhaixin.proto.RadarVideo.preImageData)
}
inline void RadarVideo::set_preimagedata(const void* value, size_t size) {
  set_has_preimagedata();
  if (preimagedata_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    preimagedata_ = new ::std::string;
  }
  preimagedata_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:com.zhichenhaixin.proto.RadarVideo.preImageData)
}
inline ::std::string* RadarVideo::mutable_preimagedata() {
  set_has_preimagedata();
  if (preimagedata_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    preimagedata_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:com.zhichenhaixin.proto.RadarVideo.preImageData)
  return preimagedata_;
}
inline ::std::string* RadarVideo::release_preimagedata() {
  clear_has_preimagedata();
  if (preimagedata_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = preimagedata_;
    preimagedata_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void RadarVideo::set_allocated_preimagedata(::std::string* preimagedata) {
  if (preimagedata_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete preimagedata_;
  }
  if (preimagedata) {
    set_has_preimagedata();
    preimagedata_ = preimagedata;
  } else {
    clear_has_preimagedata();
    preimagedata_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:com.zhichenhaixin.proto.RadarVideo.preImageData)
}

// required uint32 width = 9;
inline bool RadarVideo::has_width() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void RadarVideo::set_has_width() {
  _has_bits_[0] |= 0x00000100u;
}
inline void RadarVideo::clear_has_width() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void RadarVideo::clear_width() {
  width_ = 0u;
  clear_has_width();
}
inline ::google::protobuf::uint32 RadarVideo::width() const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.proto.RadarVideo.width)
  return width_;
}
inline void RadarVideo::set_width(::google::protobuf::uint32 value) {
  set_has_width();
  width_ = value;
  // @@protoc_insertion_point(field_set:com.zhichenhaixin.proto.RadarVideo.width)
}

// required uint32 height = 10;
inline bool RadarVideo::has_height() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void RadarVideo::set_has_height() {
  _has_bits_[0] |= 0x00000200u;
}
inline void RadarVideo::clear_has_height() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void RadarVideo::clear_height() {
  height_ = 0u;
  clear_has_height();
}
inline ::google::protobuf::uint32 RadarVideo::height() const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.proto.RadarVideo.height)
  return height_;
}
inline void RadarVideo::set_height(::google::protobuf::uint32 value) {
  set_has_height();
  height_ = value;
  // @@protoc_insertion_point(field_set:com.zhichenhaixin.proto.RadarVideo.height)
}

// required double radius = 11;
inline bool RadarVideo::has_radius() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void RadarVideo::set_has_radius() {
  _has_bits_[0] |= 0x00000400u;
}
inline void RadarVideo::clear_has_radius() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void RadarVideo::clear_radius() {
  radius_ = 0;
  clear_has_radius();
}
inline double RadarVideo::radius() const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.proto.RadarVideo.radius)
  return radius_;
}
inline void RadarVideo::set_radius(double value) {
  set_has_radius();
  radius_ = value;
  // @@protoc_insertion_point(field_set:com.zhichenhaixin.proto.RadarVideo.radius)
}

// required uint32 curIndex = 12;
inline bool RadarVideo::has_curindex() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void RadarVideo::set_has_curindex() {
  _has_bits_[0] |= 0x00000800u;
}
inline void RadarVideo::clear_has_curindex() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void RadarVideo::clear_curindex() {
  curindex_ = 0u;
  clear_has_curindex();
}
inline ::google::protobuf::uint32 RadarVideo::curindex() const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.proto.RadarVideo.curIndex)
  return curindex_;
}
inline void RadarVideo::set_curindex(::google::protobuf::uint32 value) {
  set_has_curindex();
  curindex_ = value;
  // @@protoc_insertion_point(field_set:com.zhichenhaixin.proto.RadarVideo.curIndex)
}

// required uint32 loopNum = 13;
inline bool RadarVideo::has_loopnum() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void RadarVideo::set_has_loopnum() {
  _has_bits_[0] |= 0x00001000u;
}
inline void RadarVideo::clear_has_loopnum() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void RadarVideo::clear_loopnum() {
  loopnum_ = 0u;
  clear_has_loopnum();
}
inline ::google::protobuf::uint32 RadarVideo::loopnum() const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.proto.RadarVideo.loopNum)
  return loopnum_;
}
inline void RadarVideo::set_loopnum(::google::protobuf::uint32 value) {
  set_has_loopnum();
  loopnum_ = value;
  // @@protoc_insertion_point(field_set:com.zhichenhaixin.proto.RadarVideo.loopNum)
}

// -------------------------------------------------------------------

// RadarVideoPoint

// required string radarName = 2;
inline bool RadarVideoPoint::has_radarname() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RadarVideoPoint::set_has_radarname() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RadarVideoPoint::clear_has_radarname() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RadarVideoPoint::clear_radarname() {
  if (radarname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    radarname_->clear();
  }
  clear_has_radarname();
}
inline const ::std::string& RadarVideoPoint::radarname() const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.proto.RadarVideoPoint.radarName)
  return *radarname_;
}
inline void RadarVideoPoint::set_radarname(const ::std::string& value) {
  set_has_radarname();
  if (radarname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    radarname_ = new ::std::string;
  }
  radarname_->assign(value);
  // @@protoc_insertion_point(field_set:com.zhichenhaixin.proto.RadarVideoPoint.radarName)
}
inline void RadarVideoPoint::set_radarname(const char* value) {
  set_has_radarname();
  if (radarname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    radarname_ = new ::std::string;
  }
  radarname_->assign(value);
  // @@protoc_insertion_point(field_set_char:com.zhichenhaixin.proto.RadarVideoPoint.radarName)
}
inline void RadarVideoPoint::set_radarname(const char* value, size_t size) {
  set_has_radarname();
  if (radarname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    radarname_ = new ::std::string;
  }
  radarname_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:com.zhichenhaixin.proto.RadarVideoPoint.radarName)
}
inline ::std::string* RadarVideoPoint::mutable_radarname() {
  set_has_radarname();
  if (radarname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    radarname_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:com.zhichenhaixin.proto.RadarVideoPoint.radarName)
  return radarname_;
}
inline ::std::string* RadarVideoPoint::release_radarname() {
  clear_has_radarname();
  if (radarname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = radarname_;
    radarname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void RadarVideoPoint::set_allocated_radarname(::std::string* radarname) {
  if (radarname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete radarname_;
  }
  if (radarname) {
    set_has_radarname();
    radarname_ = radarname;
  } else {
    clear_has_radarname();
    radarname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:com.zhichenhaixin.proto.RadarVideoPoint.radarName)
}

// required double latitude = 3;
inline bool RadarVideoPoint::has_latitude() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RadarVideoPoint::set_has_latitude() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RadarVideoPoint::clear_has_latitude() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RadarVideoPoint::clear_latitude() {
  latitude_ = 0;
  clear_has_latitude();
}
inline double RadarVideoPoint::latitude() const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.proto.RadarVideoPoint.latitude)
  return latitude_;
}
inline void RadarVideoPoint::set_latitude(double value) {
  set_has_latitude();
  latitude_ = value;
  // @@protoc_insertion_point(field_set:com.zhichenhaixin.proto.RadarVideoPoint.latitude)
}

// required double longitude = 4;
inline bool RadarVideoPoint::has_longitude() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void RadarVideoPoint::set_has_longitude() {
  _has_bits_[0] |= 0x00000004u;
}
inline void RadarVideoPoint::clear_has_longitude() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void RadarVideoPoint::clear_longitude() {
  longitude_ = 0;
  clear_has_longitude();
}
inline double RadarVideoPoint::longitude() const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.proto.RadarVideoPoint.longitude)
  return longitude_;
}
inline void RadarVideoPoint::set_longitude(double value) {
  set_has_longitude();
  longitude_ = value;
  // @@protoc_insertion_point(field_set:com.zhichenhaixin.proto.RadarVideoPoint.longitude)
}

// required uint64 UTC = 5;
inline bool RadarVideoPoint::has_utc() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void RadarVideoPoint::set_has_utc() {
  _has_bits_[0] |= 0x00000008u;
}
inline void RadarVideoPoint::clear_has_utc() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void RadarVideoPoint::clear_utc() {
  utc_ = GOOGLE_ULONGLONG(0);
  clear_has_utc();
}
inline ::google::protobuf::uint64 RadarVideoPoint::utc() const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.proto.RadarVideoPoint.UTC)
  return utc_;
}
inline void RadarVideoPoint::set_utc(::google::protobuf::uint64 value) {
  set_has_utc();
  utc_ = value;
  // @@protoc_insertion_point(field_set:com.zhichenhaixin.proto.RadarVideoPoint.UTC)
}

// required bytes imageData = 6;
inline bool RadarVideoPoint::has_imagedata() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void RadarVideoPoint::set_has_imagedata() {
  _has_bits_[0] |= 0x00000010u;
}
inline void RadarVideoPoint::clear_has_imagedata() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void RadarVideoPoint::clear_imagedata() {
  if (imagedata_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    imagedata_->clear();
  }
  clear_has_imagedata();
}
inline const ::std::string& RadarVideoPoint::imagedata() const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.proto.RadarVideoPoint.imageData)
  return *imagedata_;
}
inline void RadarVideoPoint::set_imagedata(const ::std::string& value) {
  set_has_imagedata();
  if (imagedata_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    imagedata_ = new ::std::string;
  }
  imagedata_->assign(value);
  // @@protoc_insertion_point(field_set:com.zhichenhaixin.proto.RadarVideoPoint.imageData)
}
inline void RadarVideoPoint::set_imagedata(const char* value) {
  set_has_imagedata();
  if (imagedata_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    imagedata_ = new ::std::string;
  }
  imagedata_->assign(value);
  // @@protoc_insertion_point(field_set_char:com.zhichenhaixin.proto.RadarVideoPoint.imageData)
}
inline void RadarVideoPoint::set_imagedata(const void* value, size_t size) {
  set_has_imagedata();
  if (imagedata_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    imagedata_ = new ::std::string;
  }
  imagedata_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:com.zhichenhaixin.proto.RadarVideoPoint.imageData)
}
inline ::std::string* RadarVideoPoint::mutable_imagedata() {
  set_has_imagedata();
  if (imagedata_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    imagedata_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:com.zhichenhaixin.proto.RadarVideoPoint.imageData)
  return imagedata_;
}
inline ::std::string* RadarVideoPoint::release_imagedata() {
  clear_has_imagedata();
  if (imagedata_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = imagedata_;
    imagedata_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void RadarVideoPoint::set_allocated_imagedata(::std::string* imagedata) {
  if (imagedata_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete imagedata_;
  }
  if (imagedata) {
    set_has_imagedata();
    imagedata_ = imagedata;
  } else {
    clear_has_imagedata();
    imagedata_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:com.zhichenhaixin.proto.RadarVideoPoint.imageData)
}

// required bytes preImageData = 7;
inline bool RadarVideoPoint::has_preimagedata() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void RadarVideoPoint::set_has_preimagedata() {
  _has_bits_[0] |= 0x00000020u;
}
inline void RadarVideoPoint::clear_has_preimagedata() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void RadarVideoPoint::clear_preimagedata() {
  if (preimagedata_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    preimagedata_->clear();
  }
  clear_has_preimagedata();
}
inline const ::std::string& RadarVideoPoint::preimagedata() const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.proto.RadarVideoPoint.preImageData)
  return *preimagedata_;
}
inline void RadarVideoPoint::set_preimagedata(const ::std::string& value) {
  set_has_preimagedata();
  if (preimagedata_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    preimagedata_ = new ::std::string;
  }
  preimagedata_->assign(value);
  // @@protoc_insertion_point(field_set:com.zhichenhaixin.proto.RadarVideoPoint.preImageData)
}
inline void RadarVideoPoint::set_preimagedata(const char* value) {
  set_has_preimagedata();
  if (preimagedata_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    preimagedata_ = new ::std::string;
  }
  preimagedata_->assign(value);
  // @@protoc_insertion_point(field_set_char:com.zhichenhaixin.proto.RadarVideoPoint.preImageData)
}
inline void RadarVideoPoint::set_preimagedata(const void* value, size_t size) {
  set_has_preimagedata();
  if (preimagedata_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    preimagedata_ = new ::std::string;
  }
  preimagedata_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:com.zhichenhaixin.proto.RadarVideoPoint.preImageData)
}
inline ::std::string* RadarVideoPoint::mutable_preimagedata() {
  set_has_preimagedata();
  if (preimagedata_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    preimagedata_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:com.zhichenhaixin.proto.RadarVideoPoint.preImageData)
  return preimagedata_;
}
inline ::std::string* RadarVideoPoint::release_preimagedata() {
  clear_has_preimagedata();
  if (preimagedata_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = preimagedata_;
    preimagedata_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void RadarVideoPoint::set_allocated_preimagedata(::std::string* preimagedata) {
  if (preimagedata_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete preimagedata_;
  }
  if (preimagedata) {
    set_has_preimagedata();
    preimagedata_ = preimagedata;
  } else {
    clear_has_preimagedata();
    preimagedata_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:com.zhichenhaixin.proto.RadarVideoPoint.preImageData)
}

// required uint32 width = 8;
inline bool RadarVideoPoint::has_width() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void RadarVideoPoint::set_has_width() {
  _has_bits_[0] |= 0x00000040u;
}
inline void RadarVideoPoint::clear_has_width() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void RadarVideoPoint::clear_width() {
  width_ = 0u;
  clear_has_width();
}
inline ::google::protobuf::uint32 RadarVideoPoint::width() const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.proto.RadarVideoPoint.width)
  return width_;
}
inline void RadarVideoPoint::set_width(::google::protobuf::uint32 value) {
  set_has_width();
  width_ = value;
  // @@protoc_insertion_point(field_set:com.zhichenhaixin.proto.RadarVideoPoint.width)
}

// required uint32 height = 9;
inline bool RadarVideoPoint::has_height() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void RadarVideoPoint::set_has_height() {
  _has_bits_[0] |= 0x00000080u;
}
inline void RadarVideoPoint::clear_has_height() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void RadarVideoPoint::clear_height() {
  height_ = 0u;
  clear_has_height();
}
inline ::google::protobuf::uint32 RadarVideoPoint::height() const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.proto.RadarVideoPoint.height)
  return height_;
}
inline void RadarVideoPoint::set_height(::google::protobuf::uint32 value) {
  set_has_height();
  height_ = value;
  // @@protoc_insertion_point(field_set:com.zhichenhaixin.proto.RadarVideoPoint.height)
}

// required double radius = 10;
inline bool RadarVideoPoint::has_radius() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void RadarVideoPoint::set_has_radius() {
  _has_bits_[0] |= 0x00000100u;
}
inline void RadarVideoPoint::clear_has_radius() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void RadarVideoPoint::clear_radius() {
  radius_ = 0;
  clear_has_radius();
}
inline double RadarVideoPoint::radius() const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.proto.RadarVideoPoint.radius)
  return radius_;
}
inline void RadarVideoPoint::set_radius(double value) {
  set_has_radius();
  radius_ = value;
  // @@protoc_insertion_point(field_set:com.zhichenhaixin.proto.RadarVideoPoint.radius)
}

// required uint32 curIndex = 11;
inline bool RadarVideoPoint::has_curindex() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void RadarVideoPoint::set_has_curindex() {
  _has_bits_[0] |= 0x00000200u;
}
inline void RadarVideoPoint::clear_has_curindex() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void RadarVideoPoint::clear_curindex() {
  curindex_ = 0u;
  clear_has_curindex();
}
inline ::google::protobuf::uint32 RadarVideoPoint::curindex() const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.proto.RadarVideoPoint.curIndex)
  return curindex_;
}
inline void RadarVideoPoint::set_curindex(::google::protobuf::uint32 value) {
  set_has_curindex();
  curindex_ = value;
  // @@protoc_insertion_point(field_set:com.zhichenhaixin.proto.RadarVideoPoint.curIndex)
}

// required uint32 loopNum = 12;
inline bool RadarVideoPoint::has_loopnum() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void RadarVideoPoint::set_has_loopnum() {
  _has_bits_[0] |= 0x00000400u;
}
inline void RadarVideoPoint::clear_has_loopnum() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void RadarVideoPoint::clear_loopnum() {
  loopnum_ = 0u;
  clear_has_loopnum();
}
inline ::google::protobuf::uint32 RadarVideoPoint::loopnum() const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.proto.RadarVideoPoint.loopNum)
  return loopnum_;
}
inline void RadarVideoPoint::set_loopnum(::google::protobuf::uint32 value) {
  set_has_loopnum();
  loopnum_ = value;
  // @@protoc_insertion_point(field_set:com.zhichenhaixin.proto.RadarVideoPoint.loopNum)
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace zhichenhaixin
}  // namespace com

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_ZCHXRadarVideo_2eproto__INCLUDED
