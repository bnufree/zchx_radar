// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: SCCMMSComData.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "SCCMMSComData.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace com {
namespace zhichenhaixin {
namespace proto {

namespace {

const ::google::protobuf::Descriptor* ShipInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ShipInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* PlowInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PlowInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* LayInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LayInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* Surface4017Data_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Surface4017Data_reflection_ = NULL;
const ::google::protobuf::Descriptor* UnderWater4017Data_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UnderWater4017Data_reflection_ = NULL;
const ::google::protobuf::Descriptor* ConstructionInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ConstructionInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* DevInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DevInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* PMASNS_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PMASNS_reflection_ = NULL;
const ::google::protobuf::Descriptor* PMAGGA_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PMAGGA_reflection_ = NULL;
const ::google::protobuf::Descriptor* PMAVTG_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PMAVTG_reflection_ = NULL;
const ::google::protobuf::Descriptor* PMATHA_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PMATHA_reflection_ = NULL;
const ::google::protobuf::Descriptor* PMATHF_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PMATHF_reflection_ = NULL;
const ::google::protobuf::Descriptor* PMAINF_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PMAINF_reflection_ = NULL;
const ::google::protobuf::Descriptor* PMAALA_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PMAALA_reflection_ = NULL;
const ::google::protobuf::Descriptor* PMAVDR_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PMAVDR_reflection_ = NULL;
const ::google::protobuf::Descriptor* DPPMAData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DPPMAData_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_SCCMMSComData_2eproto() {
  protobuf_AddDesc_SCCMMSComData_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "SCCMMSComData.proto");
  GOOGLE_CHECK(file != NULL);
  ShipInfo_descriptor_ = file->message_type(0);
  static const int ShipInfo_offsets_[17] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShipInfo, ship_update_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShipInfo, ship_lat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShipInfo, ship_lon_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShipInfo, ship_speed_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShipInfo, ship_speed_ground_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShipInfo, ship_head_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShipInfo, ship_pitch_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShipInfo, ship_roll_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShipInfo, ship_course_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShipInfo, heave_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShipInfo, wind_dir_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShipInfo, wind_speed_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShipInfo, surge_demand_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShipInfo, surge_feedback_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShipInfo, sway_demand_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShipInfo, sway_feedback_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShipInfo, ship_mode_),
  };
  ShipInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ShipInfo_descriptor_,
      ShipInfo::default_instance_,
      ShipInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShipInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShipInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ShipInfo));
  PlowInfo_descriptor_ = file->message_type(1);
  static const int PlowInfo_offsets_[19] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlowInfo, plow_update_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlowInfo, plow_lat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlowInfo, plow_lon_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlowInfo, plow_pos_mode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlowInfo, plow_flag_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlowInfo, plow_head_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlowInfo, plow_roll_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlowInfo, plow_pitch_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlowInfo, plow_water_depth_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlowInfo, plow_buried_depth_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlowInfo, plow_left_pump_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlowInfo, plow_right_pump_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlowInfo, plow_speed_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlowInfo, plow_boots_angle_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlowInfo, plow_boots_length_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlowInfo, plow_tow_length_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlowInfo, plow_tow_tension_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlowInfo, plow_pos_update_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlowInfo, plow_kp_dis_),
  };
  PlowInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PlowInfo_descriptor_,
      PlowInfo::default_instance_,
      PlowInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlowInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlowInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PlowInfo));
  LayInfo_descriptor_ = file->message_type(2);
  static const int LayInfo_offsets_[19] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayInfo, cable_update_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayInfo, cable_payout_speed_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayInfo, meter_counter_coeff_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayInfo, meter_counter_initlen_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayInfo, meter_counter_length_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayInfo, cable_length_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayInfo, glj_cb_tension_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayInfo, glj_cb_speed_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayInfo, glj_cb_length_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayInfo, ltj_cb_tension_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayInfo, ltj_cb_speed_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayInfo, ltj_cb_length_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayInfo, tl_tension_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayInfo, tl_length_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayInfo, qd_tension_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayInfo, qd_length_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayInfo, light_status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayInfo, meter_counter_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayInfo, meter_source_),
  };
  LayInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LayInfo_descriptor_,
      LayInfo::default_instance_,
      LayInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LayInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LayInfo));
  Surface4017Data_descriptor_ = file->message_type(3);
  static const int Surface4017Data_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Surface4017Data, surface_4017_pull1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Surface4017Data, surface_4017_pull2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Surface4017Data, surface_4017_pull3_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Surface4017Data, surface_4017_lpump_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Surface4017Data, surface_4017_rpump_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Surface4017Data, surface_4017_time_),
  };
  Surface4017Data_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Surface4017Data_descriptor_,
      Surface4017Data::default_instance_,
      Surface4017Data_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Surface4017Data, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Surface4017Data, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Surface4017Data));
  UnderWater4017Data_descriptor_ = file->message_type(4);
  static const int UnderWater4017Data_offsets_[14] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnderWater4017Data, under_4017_pull1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnderWater4017Data, under_4017_pull2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnderWater4017Data, under_4017_pull3_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnderWater4017Data, under_4017_lpump_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnderWater4017Data, under_4017_rpump_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnderWater4017Data, under_4017_water_depth_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnderWater4017Data, under_4017_boots_angle_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnderWater4017Data, under_4017_boots_length_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnderWater4017Data, under_4017_buried_depth_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnderWater4017Data, under_4017_touch_down_p1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnderWater4017Data, under_4017_touch_down_p2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnderWater4017Data, under_4017_touch_down_p3_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnderWater4017Data, under_4017_touch_down_p4_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnderWater4017Data, under_4017_time_),
  };
  UnderWater4017Data_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UnderWater4017Data_descriptor_,
      UnderWater4017Data::default_instance_,
      UnderWater4017Data_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnderWater4017Data, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnderWater4017Data, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UnderWater4017Data));
  ConstructionInfo_descriptor_ = file->message_type(5);
  static const int ConstructionInfo_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConstructionInfo, iscontructed_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConstructionInfo, host_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConstructionInfo, project_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConstructionInfo, route_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConstructionInfo, plan_id_),
  };
  ConstructionInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ConstructionInfo_descriptor_,
      ConstructionInfo::default_instance_,
      ConstructionInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConstructionInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ConstructionInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ConstructionInfo));
  DevInfo_descriptor_ = file->message_type(6);
  static const int DevInfo_offsets_[16] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DevInfo, ship_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DevInfo, plow_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DevInfo, lay_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DevInfo, surface_4017_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DevInfo, under_4017_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DevInfo, surface_hmr3000_checked_flg_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DevInfo, under_hmr3000_checked_flg_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DevInfo, gsp_checked_flg_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DevInfo, usbl_checked_flg_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DevInfo, surface_4017_checked_flg_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DevInfo, under_4017_checked_flg_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DevInfo, metercounter_checked_flg_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DevInfo, navi_device_checked_flg_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DevInfo, cable_integrated_checked_flg_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DevInfo, dp_checked_flg_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DevInfo, construct_info_),
  };
  DevInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DevInfo_descriptor_,
      DevInfo::default_instance_,
      DevInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DevInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DevInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DevInfo));
  PMASNS_descriptor_ = file->message_type(7);
  static const int PMASNS_offsets_[22] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PMASNS, date_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PMASNS, time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PMASNS, gyro1_sts_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PMASNS, heading1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PMASNS, gyro2_sts_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PMASNS, heading2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PMASNS, gyro3_sts_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PMASNS, heading3_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PMASNS, mru1_sts_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PMASNS, pitch1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PMASNS, roll1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PMASNS, heave1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PMASNS, mru2_sts_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PMASNS, pitch2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PMASNS, roll2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PMASNS, heave2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PMASNS, wind1_sts_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PMASNS, speed1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PMASNS, speed_dir1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PMASNS, wind2_sts_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PMASNS, speed2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PMASNS, speed_dir2_),
  };
  PMASNS_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PMASNS_descriptor_,
      PMASNS::default_instance_,
      PMASNS_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PMASNS, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PMASNS, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PMASNS));
  PMAGGA_descriptor_ = file->message_type(8);
  static const int PMAGGA_offsets_[15] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PMAGGA, gps_identifier_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PMAGGA, time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PMAGGA, lat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PMAGGA, lat_dir_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PMAGGA, lon_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PMAGGA, lon_dir_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PMAGGA, gps_qualifier_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PMAGGA, satellites_number_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PMAGGA, hdop_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PMAGGA, reserve1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PMAGGA, reserve2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PMAGGA, reserve3_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PMAGGA, geo_unit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PMAGGA, reserve4_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PMAGGA, reserve5_),
  };
  PMAGGA_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PMAGGA_descriptor_,
      PMAGGA::default_instance_,
      PMAGGA_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PMAGGA, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PMAGGA, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PMAGGA));
  PMAVTG_descriptor_ = file->message_type(9);
  static const int PMAVTG_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PMAVTG, gps_identifier_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PMAVTG, true_course_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PMAVTG, magn_course_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PMAVTG, speed_knots_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PMAVTG, speed_kmph_),
  };
  PMAVTG_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PMAVTG_descriptor_,
      PMAVTG::default_instance_,
      PMAVTG_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PMAVTG, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PMAVTG, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PMAVTG));
  PMATHA_descriptor_ = file->message_type(10);
  static const int PMATHA_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PMATHA, surge_demand_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PMATHA, surge_feedback_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PMATHA, sway_demand_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PMATHA, sway_feedback_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PMATHA, yaw_demand_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PMATHA, yaw_feedback_),
  };
  PMATHA_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PMATHA_descriptor_,
      PMATHA::default_instance_,
      PMATHA_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PMATHA, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PMATHA, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PMATHA));
  PMATHF_descriptor_ = file->message_type(11);
  static const int PMATHF_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PMATHF, thruster_number_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PMATHF, thruster_status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PMATHF, rpm_pitch_demand_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PMATHF, rpm_pitch_feedback_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PMATHF, thrust_demand_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PMATHF, thrust_feedback_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PMATHF, azimuth_demand_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PMATHF, azimuth_feedback_),
  };
  PMATHF_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PMATHF_descriptor_,
      PMATHF::default_instance_,
      PMATHF_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PMATHF, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PMATHF, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PMATHF));
  PMAINF_descriptor_ = file->message_type(12);
  static const int PMAINF_offsets_[15] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PMAINF, refsys_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PMAINF, gyro_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PMAINF, mru_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PMAINF, wind_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PMAINF, estimate_lat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PMAINF, estimate_lat_dir_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PMAINF, estimate_lon_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PMAINF, estimate_lon_dir_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PMAINF, demand_lat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PMAINF, demand_lat_dir_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PMAINF, demand_lon_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PMAINF, demand_lon_dir_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PMAINF, estimate_heading_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PMAINF, demand_heading_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PMAINF, controller_gain_),
  };
  PMAINF_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PMAINF_descriptor_,
      PMAINF::default_instance_,
      PMAINF_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PMAINF, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PMAINF, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PMAINF));
  PMAALA_descriptor_ = file->message_type(13);
  static const int PMAALA_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PMAALA, alarm_status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PMAALA, yaw_alarm_limit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PMAALA, yaw_alarm_onoff_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PMAALA, surge_alarm_limit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PMAALA, surge_alarm_onoff_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PMAALA, sway_alarm_limit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PMAALA, sway_alarm_onoff_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PMAALA, xtrack_alarm_limit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PMAALA, xtrack_alarm_onoff_),
  };
  PMAALA_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PMAALA_descriptor_,
      PMAALA::default_instance_,
      PMAALA_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PMAALA, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PMAALA, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PMAALA));
  PMAVDR_descriptor_ = file->message_type(14);
  static const int PMAVDR_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PMAVDR, active_mode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PMAVDR, azimuth_steering_limit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PMAVDR, axis_active_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PMAVDR, turn_rate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PMAVDR, steering_mode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PMAVDR, steering_gain_),
  };
  PMAVDR_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PMAVDR_descriptor_,
      PMAVDR::default_instance_,
      PMAVDR_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PMAVDR, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PMAVDR, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PMAVDR));
  DPPMAData_descriptor_ = file->message_type(15);
  static const int DPPMAData_offsets_[21] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DPPMAData, gyro_sts_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DPPMAData, mru_sts_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DPPMAData, wind_sts_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DPPMAData, heading_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DPPMAData, course_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DPPMAData, sos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DPPMAData, sog_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DPPMAData, pitch_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DPPMAData, roll_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DPPMAData, heave_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DPPMAData, water_depth_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DPPMAData, wind_dir_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DPPMAData, wind_speed_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DPPMAData, surge_demand_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DPPMAData, surge_feedback_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DPPMAData, sway_demand_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DPPMAData, sway_feedback_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DPPMAData, lon_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DPPMAData, lon_dir_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DPPMAData, lat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DPPMAData, lat_dir_),
  };
  DPPMAData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DPPMAData_descriptor_,
      DPPMAData::default_instance_,
      DPPMAData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DPPMAData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DPPMAData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DPPMAData));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_SCCMMSComData_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ShipInfo_descriptor_, &ShipInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PlowInfo_descriptor_, &PlowInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LayInfo_descriptor_, &LayInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Surface4017Data_descriptor_, &Surface4017Data::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UnderWater4017Data_descriptor_, &UnderWater4017Data::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ConstructionInfo_descriptor_, &ConstructionInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DevInfo_descriptor_, &DevInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PMASNS_descriptor_, &PMASNS::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PMAGGA_descriptor_, &PMAGGA::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PMAVTG_descriptor_, &PMAVTG::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PMATHA_descriptor_, &PMATHA::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PMATHF_descriptor_, &PMATHF::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PMAINF_descriptor_, &PMAINF::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PMAALA_descriptor_, &PMAALA::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PMAVDR_descriptor_, &PMAVDR::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DPPMAData_descriptor_, &DPPMAData::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_SCCMMSComData_2eproto() {
  delete ShipInfo::default_instance_;
  delete ShipInfo_reflection_;
  delete PlowInfo::default_instance_;
  delete PlowInfo_reflection_;
  delete LayInfo::default_instance_;
  delete LayInfo_reflection_;
  delete Surface4017Data::default_instance_;
  delete Surface4017Data_reflection_;
  delete UnderWater4017Data::default_instance_;
  delete UnderWater4017Data_reflection_;
  delete ConstructionInfo::default_instance_;
  delete ConstructionInfo_reflection_;
  delete DevInfo::default_instance_;
  delete DevInfo_reflection_;
  delete PMASNS::default_instance_;
  delete PMASNS_reflection_;
  delete PMAGGA::default_instance_;
  delete PMAGGA_reflection_;
  delete PMAVTG::default_instance_;
  delete PMAVTG_reflection_;
  delete PMATHA::default_instance_;
  delete PMATHA_reflection_;
  delete PMATHF::default_instance_;
  delete PMATHF_reflection_;
  delete PMAINF::default_instance_;
  delete PMAINF_reflection_;
  delete PMAALA::default_instance_;
  delete PMAALA_reflection_;
  delete PMAVDR::default_instance_;
  delete PMAVDR_reflection_;
  delete DPPMAData::default_instance_;
  delete DPPMAData_reflection_;
}

void protobuf_AddDesc_SCCMMSComData_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\023SCCMMSComData.proto\022\027com.zhichenhaixin"
    ".proto\"\350\002\n\010ShipInfo\022\030\n\020ship_update_time\030"
    "\001 \002(\003\022\020\n\010ship_lat\030\002 \002(\001\022\020\n\010ship_lon\030\003 \002("
    "\001\022\022\n\nship_speed\030\004 \002(\001\022\031\n\021ship_speed_grou"
    "nd\030\005 \002(\001\022\021\n\tship_head\030\006 \002(\001\022\022\n\nship_pitc"
    "h\030\007 \002(\001\022\021\n\tship_roll\030\010 \002(\001\022\023\n\013ship_cours"
    "e\030\t \002(\001\022\r\n\005heave\030\n \002(\001\022\020\n\010wind_dir\030\013 \002(\001"
    "\022\022\n\nwind_speed\030\014 \002(\001\022\024\n\014surge_demand\030\r \002"
    "(\001\022\026\n\016surge_feedback\030\016 \002(\001\022\023\n\013sway_deman"
    "d\030\017 \002(\001\022\025\n\rsway_feedback\030\020 \002(\001\022\021\n\tship_m"
    "ode\030\021 \002(\005\"\301\003\n\010PlowInfo\022\030\n\020plow_update_ti"
    "me\030\001 \002(\003\022\020\n\010plow_lat\030\002 \002(\001\022\020\n\010plow_lon\030\003"
    " \002(\001\022\025\n\rplow_pos_mode\030\004 \002(\005\022\021\n\tplow_flag"
    "\030\005 \002(\010\022\021\n\tplow_head\030\006 \002(\001\022\021\n\tplow_roll\030\007"
    " \002(\001\022\022\n\nplow_pitch\030\010 \002(\001\022\030\n\020plow_water_d"
    "epth\030\t \002(\001\022\031\n\021plow_buried_depth\030\n \002(\001\022\026\n"
    "\016plow_left_pump\030\013 \002(\001\022\027\n\017plow_right_pump"
    "\030\014 \002(\001\022\022\n\nplow_speed\030\r \002(\001\022\030\n\020plow_boots"
    "_angle\030\016 \002(\001\022\031\n\021plow_boots_length\030\017 \002(\001\022"
    "\027\n\017plow_tow_length\030\020 \002(\001\022\030\n\020plow_tow_ten"
    "sion\030\021 \002(\001\022\034\n\024plow_pos_update_time\030\022 \002(\003"
    "\022\023\n\013plow_kp_dis\030\023 \002(\001\"\320\003\n\007LayInfo\022\031\n\021cab"
    "le_update_time\030\001 \002(\003\022\032\n\022cable_payout_spe"
    "ed\030\002 \002(\001\022\033\n\023meter_counter_coeff\030\003 \002(\001\022\035\n"
    "\025meter_counter_initlen\030\004 \002(\001\022\034\n\024meter_co"
    "unter_length\030\005 \002(\001\022\024\n\014cable_length\030\006 \002(\001"
    "\022\026\n\016glj_cb_tension\030\007 \002(\001\022\024\n\014glj_cb_speed"
    "\030\010 \002(\001\022\025\n\rglj_cb_length\030\t \002(\001\022\026\n\016ltj_cb_"
    "tension\030\n \002(\001\022\024\n\014ltj_cb_speed\030\013 \002(\001\022\025\n\rl"
    "tj_cb_length\030\014 \002(\001\022\022\n\ntl_tension\030\r \002(\001\022\021"
    "\n\ttl_length\030\016 \002(\001\022\022\n\nqd_tension\030\017 \002(\001\022\021\n"
    "\tqd_length\030\020 \002(\001\022\024\n\014light_status\030\021 \002(\005\022\032"
    "\n\022meter_counter_time\030\022 \002(\003\022\024\n\014meter_sour"
    "ce\030\023 \002(\005\"\270\001\n\017Surface4017Data\022\032\n\022surface_"
    "4017_pull1\030\001 \002(\001\022\032\n\022surface_4017_pull2\030\002"
    " \002(\001\022\032\n\022surface_4017_pull3\030\003 \002(\001\022\032\n\022surf"
    "ace_4017_lpump\030\004 \002(\001\022\032\n\022surface_4017_rpu"
    "mp\030\005 \002(\001\022\031\n\021surface_4017_time\030\006 \002(\003\"\271\003\n\022"
    "UnderWater4017Data\022\030\n\020under_4017_pull1\030\001"
    " \002(\001\022\030\n\020under_4017_pull2\030\002 \002(\001\022\030\n\020under_"
    "4017_pull3\030\003 \002(\001\022\030\n\020under_4017_lpump\030\004 \002"
    "(\001\022\030\n\020under_4017_rpump\030\005 \002(\001\022\036\n\026under_40"
    "17_water_depth\030\006 \002(\001\022\036\n\026under_4017_boots"
    "_angle\030\007 \002(\001\022\037\n\027under_4017_boots_length\030"
    "\010 \002(\001\022\037\n\027under_4017_buried_depth\030\t \002(\001\022 "
    "\n\030under_4017_touch_down_p1\030\n \002(\001\022 \n\030unde"
    "r_4017_touch_down_p2\030\013 \002(\001\022 \n\030under_4017"
    "_touch_down_p3\030\014 \002(\001\022 \n\030under_4017_touch"
    "_down_p4\030\r \002(\001\022\027\n\017under_4017_time\030\016 \002(\003\""
    "r\n\020ConstructionInfo\022\024\n\014isContructed\030\001 \002("
    "\010\022\021\n\thost_name\030\002 \002(\t\022\022\n\nproject_id\030\003 \002(\005"
    "\022\020\n\010route_id\030\004 \002(\005\022\017\n\007plan_id\030\005 \002(\005\"\253\005\n\007"
    "DevInfo\0224\n\tship_info\030\001 \002(\0132!.com.zhichen"
    "haixin.proto.ShipInfo\0224\n\tplow_info\030\002 \002(\013"
    "2!.com.zhichenhaixin.proto.PlowInfo\0222\n\010l"
    "ay_info\030\003 \002(\0132 .com.zhichenhaixin.proto."
    "LayInfo\022>\n\014surface_4017\030\004 \002(\0132(.com.zhic"
    "henhaixin.proto.Surface4017Data\022\?\n\nunder"
    "_4017\030\005 \002(\0132+.com.zhichenhaixin.proto.Un"
    "derWater4017Data\022#\n\033surface_hmr3000_chec"
    "ked_flg\030\006 \002(\010\022!\n\031under_hmr3000_checked_f"
    "lg\030\007 \002(\010\022\027\n\017gsp_checked_flg\030\010 \002(\010\022\030\n\020usb"
    "l_checked_flg\030\t \002(\010\022 \n\030surface_4017_chec"
    "ked_flg\030\n \002(\010\022\036\n\026under_4017_checked_flg\030"
    "\013 \002(\010\022 \n\030metercounter_checked_flg\030\014 \002(\010\022"
    "\037\n\027navi_device_checked_flg\030\r \002(\010\022$\n\034cabl"
    "e_integrated_checked_flg\030\016 \002(\010\022\026\n\016dp_che"
    "cked_flg\030\017 \002(\010\022A\n\016construct_info\030\020 \002(\0132)"
    ".com.zhichenhaixin.proto.ConstructionInf"
    "o\"\203\003\n\006PMASNS\022\014\n\004date\030\001 \002(\t\022\014\n\004time\030\002 \002(\t"
    "\022\021\n\tgyro1_sts\030\003 \002(\005\022\020\n\010heading1\030\004 \002(\001\022\021\n"
    "\tgyro2_sts\030\005 \002(\005\022\020\n\010heading2\030\006 \002(\001\022\021\n\tgy"
    "ro3_sts\030\007 \002(\005\022\020\n\010heading3\030\010 \002(\001\022\020\n\010mru1_"
    "sts\030\t \002(\005\022\016\n\006pitch1\030\n \002(\001\022\r\n\005roll1\030\013 \002(\005"
    "\022\016\n\006heave1\030\014 \002(\001\022\020\n\010mru2_sts\030\r \002(\005\022\016\n\006pi"
    "tch2\030\016 \002(\001\022\r\n\005roll2\030\017 \002(\005\022\016\n\006heave2\030\020 \002("
    "\001\022\021\n\twind1_sts\030\021 \002(\005\022\016\n\006speed1\030\022 \002(\001\022\022\n\n"
    "speed_dir1\030\023 \002(\005\022\021\n\twind2_sts\030\024 \002(\001\022\016\n\006s"
    "peed2\030\025 \002(\005\022\022\n\nspeed_dir2\030\026 \002(\001\"\226\002\n\006PMAG"
    "GA\022\026\n\016gps_identifier\030\001 \002(\005\022\014\n\004time\030\002 \002(\t"
    "\022\013\n\003lat\030\003 \002(\001\022\017\n\007lat_dir\030\004 \002(\t\022\013\n\003lon\030\005 "
    "\002(\001\022\017\n\007lon_dir\030\006 \002(\t\022\025\n\rgps_qualifier\030\007 "
    "\002(\005\022\031\n\021satellites_number\030\010 \002(\005\022\014\n\004hdop\030\t"
    " \002(\001\022\020\n\010reserve1\030\n \002(\t\022\020\n\010reserve2\030\013 \002(\t"
    "\022\020\n\010reserve3\030\014 \002(\t\022\020\n\010geo_unit\030\r \002(\t\022\020\n\010"
    "reserve4\030\016 \002(\t\022\020\n\010reserve5\030\017 \002(\t\"s\n\006PMAV"
    "TG\022\026\n\016gps_identifier\030\001 \002(\005\022\023\n\013true_cours"
    "e\030\002 \002(\001\022\023\n\013magn_course\030\003 \002(\001\022\023\n\013speed_kn"
    "ots\030\004 \002(\001\022\022\n\nspeed_kmph\030\005 \002(\001\"\214\001\n\006PMATHA"
    "\022\024\n\014surge_demand\030\001 \002(\001\022\026\n\016surge_feedback"
    "\030\002 \002(\001\022\023\n\013sway_demand\030\003 \002(\001\022\025\n\rsway_feed"
    "back\030\004 \002(\001\022\022\n\nyaw_demand\030\005 \002(\001\022\024\n\014yaw_fe"
    "edback\030\006 \002(\001\"\322\001\n\006PMATHF\022\027\n\017thruster_numb"
    "er\030\001 \002(\005\022\027\n\017thruster_Status\030\002 \002(\t\022\030\n\020rpm"
    "_pitch_demand\030\003 \002(\001\022\032\n\022rpm_pitch_feedbac"
    "k\030\004 \002(\001\022\025\n\rthrust_demand\030\005 \002(\001\022\027\n\017thrust"
    "_feedback\030\006 \002(\001\022\026\n\016azimuth_demand\030\007 \002(\001\022"
    "\030\n\020azimuth_feedback\030\010 \002(\001\"\304\002\n\006PMAINF\022\016\n\006"
    "refsys\030\001 \002(\005\022\014\n\004gyro\030\002 \002(\005\022\013\n\003mru\030\003 \002(\005\022"
    "\014\n\004wind\030\004 \002(\005\022\024\n\014estimate_lat\030\005 \002(\001\022\030\n\020e"
    "stimate_lat_dir\030\006 \002(\t\022\024\n\014estimate_lon\030\007 "
    "\002(\001\022\030\n\020estimate_lon_dir\030\010 \002(\t\022\022\n\ndemand_"
    "lat\030\t \002(\001\022\026\n\016demand_lat_dir\030\n \002(\t\022\022\n\ndem"
    "and_lon\030\013 \002(\001\022\026\n\016demand_lon_dir\030\014 \002(\t\022\030\n"
    "\020estimate_heading\030\r \002(\001\022\026\n\016demand_headin"
    "g\030\016 \002(\001\022\027\n\017controller_gain\030\017 \002(\005\"\362\001\n\006PMA"
    "ALA\022\024\n\014alarm_status\030\001 \002(\005\022\027\n\017yaw_alarm_l"
    "imit\030\002 \002(\001\022\027\n\017yaw_alarm_onoff\030\003 \002(\010\022\031\n\021s"
    "urge_alarm_limit\030\004 \002(\001\022\031\n\021surge_alarm_on"
    "off\030\005 \002(\010\022\030\n\020sway_alarm_limit\030\006 \002(\001\022\030\n\020s"
    "way_alarm_onoff\030\007 \002(\010\022\032\n\022xtrack_alarm_li"
    "mit\030\010 \002(\001\022\032\n\022xtrack_alarm_onoff\030\t \002(\010\"\223\001"
    "\n\006PMAVDR\022\023\n\013active_mode\030\001 \002(\005\022\036\n\026azimuth"
    "_steering_limit\030\002 \002(\001\022\023\n\013axis_active\030\003 \002"
    "(\005\022\021\n\tturn_rate\030\004 \002(\001\022\025\n\rsteering_mode\030\005"
    " \002(\005\022\025\n\rsteering_gain\030\006 \002(\005\"\370\002\n\tDPPMADat"
    "a\022\020\n\010gyro_sts\030\001 \002(\010\022\017\n\007mru_sts\030\002 \002(\010\022\020\n\010"
    "wind_sts\030\003 \002(\010\022\017\n\007heading\030\004 \002(\001\022\016\n\006cours"
    "e\030\005 \002(\001\022\013\n\003sos\030\006 \002(\001\022\013\n\003sog\030\007 \002(\001\022\r\n\005pit"
    "ch\030\010 \002(\001\022\014\n\004roll\030\t \002(\001\022\r\n\005heave\030\n \002(\001\022\023\n"
    "\013water_depth\030\013 \002(\001\022\020\n\010wind_dir\030\014 \002(\001\022\022\n\n"
    "wind_speed\030\r \002(\001\022\024\n\014surge_demand\030\016 \002(\001\022\026"
    "\n\016surge_feedback\030\017 \002(\001\022\023\n\013sway_demand\030\020 "
    "\002(\001\022\025\n\rsway_feedback\030\021 \002(\001\022\013\n\003lon\030\022 \002(\001\022"
    "\017\n\007lon_dir\030\023 \002(\t\022\013\n\003lat\030\024 \002(\001\022\017\n\007lat_dir"
    "\030\025 \002(\t", 5006);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "SCCMMSComData.proto", &protobuf_RegisterTypes);
  ShipInfo::default_instance_ = new ShipInfo();
  PlowInfo::default_instance_ = new PlowInfo();
  LayInfo::default_instance_ = new LayInfo();
  Surface4017Data::default_instance_ = new Surface4017Data();
  UnderWater4017Data::default_instance_ = new UnderWater4017Data();
  ConstructionInfo::default_instance_ = new ConstructionInfo();
  DevInfo::default_instance_ = new DevInfo();
  PMASNS::default_instance_ = new PMASNS();
  PMAGGA::default_instance_ = new PMAGGA();
  PMAVTG::default_instance_ = new PMAVTG();
  PMATHA::default_instance_ = new PMATHA();
  PMATHF::default_instance_ = new PMATHF();
  PMAINF::default_instance_ = new PMAINF();
  PMAALA::default_instance_ = new PMAALA();
  PMAVDR::default_instance_ = new PMAVDR();
  DPPMAData::default_instance_ = new DPPMAData();
  ShipInfo::default_instance_->InitAsDefaultInstance();
  PlowInfo::default_instance_->InitAsDefaultInstance();
  LayInfo::default_instance_->InitAsDefaultInstance();
  Surface4017Data::default_instance_->InitAsDefaultInstance();
  UnderWater4017Data::default_instance_->InitAsDefaultInstance();
  ConstructionInfo::default_instance_->InitAsDefaultInstance();
  DevInfo::default_instance_->InitAsDefaultInstance();
  PMASNS::default_instance_->InitAsDefaultInstance();
  PMAGGA::default_instance_->InitAsDefaultInstance();
  PMAVTG::default_instance_->InitAsDefaultInstance();
  PMATHA::default_instance_->InitAsDefaultInstance();
  PMATHF::default_instance_->InitAsDefaultInstance();
  PMAINF::default_instance_->InitAsDefaultInstance();
  PMAALA::default_instance_->InitAsDefaultInstance();
  PMAVDR::default_instance_->InitAsDefaultInstance();
  DPPMAData::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_SCCMMSComData_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_SCCMMSComData_2eproto {
  StaticDescriptorInitializer_SCCMMSComData_2eproto() {
    protobuf_AddDesc_SCCMMSComData_2eproto();
  }
} static_descriptor_initializer_SCCMMSComData_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int ShipInfo::kShipUpdateTimeFieldNumber;
const int ShipInfo::kShipLatFieldNumber;
const int ShipInfo::kShipLonFieldNumber;
const int ShipInfo::kShipSpeedFieldNumber;
const int ShipInfo::kShipSpeedGroundFieldNumber;
const int ShipInfo::kShipHeadFieldNumber;
const int ShipInfo::kShipPitchFieldNumber;
const int ShipInfo::kShipRollFieldNumber;
const int ShipInfo::kShipCourseFieldNumber;
const int ShipInfo::kHeaveFieldNumber;
const int ShipInfo::kWindDirFieldNumber;
const int ShipInfo::kWindSpeedFieldNumber;
const int ShipInfo::kSurgeDemandFieldNumber;
const int ShipInfo::kSurgeFeedbackFieldNumber;
const int ShipInfo::kSwayDemandFieldNumber;
const int ShipInfo::kSwayFeedbackFieldNumber;
const int ShipInfo::kShipModeFieldNumber;
#endif  // !_MSC_VER

ShipInfo::ShipInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.zhichenhaixin.proto.ShipInfo)
}

void ShipInfo::InitAsDefaultInstance() {
}

ShipInfo::ShipInfo(const ShipInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:com.zhichenhaixin.proto.ShipInfo)
}

void ShipInfo::SharedCtor() {
  _cached_size_ = 0;
  ship_update_time_ = GOOGLE_LONGLONG(0);
  ship_lat_ = 0;
  ship_lon_ = 0;
  ship_speed_ = 0;
  ship_speed_ground_ = 0;
  ship_head_ = 0;
  ship_pitch_ = 0;
  ship_roll_ = 0;
  ship_course_ = 0;
  heave_ = 0;
  wind_dir_ = 0;
  wind_speed_ = 0;
  surge_demand_ = 0;
  surge_feedback_ = 0;
  sway_demand_ = 0;
  sway_feedback_ = 0;
  ship_mode_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ShipInfo::~ShipInfo() {
  // @@protoc_insertion_point(destructor:com.zhichenhaixin.proto.ShipInfo)
  SharedDtor();
}

void ShipInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ShipInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ShipInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ShipInfo_descriptor_;
}

const ShipInfo& ShipInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SCCMMSComData_2eproto();
  return *default_instance_;
}

ShipInfo* ShipInfo::default_instance_ = NULL;

ShipInfo* ShipInfo::New() const {
  return new ShipInfo;
}

void ShipInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<ShipInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(ship_update_time_, ship_roll_);
  }
  if (_has_bits_[8 / 32] & 65280) {
    ZR_(ship_course_, sway_feedback_);
  }
  ship_mode_ = 0;

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ShipInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.zhichenhaixin.proto.ShipInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 ship_update_time = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &ship_update_time_)));
          set_has_ship_update_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(17)) goto parse_ship_lat;
        break;
      }

      // required double ship_lat = 2;
      case 2: {
        if (tag == 17) {
         parse_ship_lat:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &ship_lat_)));
          set_has_ship_lat();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(25)) goto parse_ship_lon;
        break;
      }

      // required double ship_lon = 3;
      case 3: {
        if (tag == 25) {
         parse_ship_lon:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &ship_lon_)));
          set_has_ship_lon();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(33)) goto parse_ship_speed;
        break;
      }

      // required double ship_speed = 4;
      case 4: {
        if (tag == 33) {
         parse_ship_speed:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &ship_speed_)));
          set_has_ship_speed();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(41)) goto parse_ship_speed_ground;
        break;
      }

      // required double ship_speed_ground = 5;
      case 5: {
        if (tag == 41) {
         parse_ship_speed_ground:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &ship_speed_ground_)));
          set_has_ship_speed_ground();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(49)) goto parse_ship_head;
        break;
      }

      // required double ship_head = 6;
      case 6: {
        if (tag == 49) {
         parse_ship_head:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &ship_head_)));
          set_has_ship_head();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(57)) goto parse_ship_pitch;
        break;
      }

      // required double ship_pitch = 7;
      case 7: {
        if (tag == 57) {
         parse_ship_pitch:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &ship_pitch_)));
          set_has_ship_pitch();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(65)) goto parse_ship_roll;
        break;
      }

      // required double ship_roll = 8;
      case 8: {
        if (tag == 65) {
         parse_ship_roll:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &ship_roll_)));
          set_has_ship_roll();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(73)) goto parse_ship_course;
        break;
      }

      // required double ship_course = 9;
      case 9: {
        if (tag == 73) {
         parse_ship_course:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &ship_course_)));
          set_has_ship_course();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(81)) goto parse_heave;
        break;
      }

      // required double heave = 10;
      case 10: {
        if (tag == 81) {
         parse_heave:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &heave_)));
          set_has_heave();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(89)) goto parse_wind_dir;
        break;
      }

      // required double wind_dir = 11;
      case 11: {
        if (tag == 89) {
         parse_wind_dir:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &wind_dir_)));
          set_has_wind_dir();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(97)) goto parse_wind_speed;
        break;
      }

      // required double wind_speed = 12;
      case 12: {
        if (tag == 97) {
         parse_wind_speed:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &wind_speed_)));
          set_has_wind_speed();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(105)) goto parse_surge_demand;
        break;
      }

      // required double surge_demand = 13;
      case 13: {
        if (tag == 105) {
         parse_surge_demand:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &surge_demand_)));
          set_has_surge_demand();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(113)) goto parse_surge_feedback;
        break;
      }

      // required double surge_feedback = 14;
      case 14: {
        if (tag == 113) {
         parse_surge_feedback:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &surge_feedback_)));
          set_has_surge_feedback();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(121)) goto parse_sway_demand;
        break;
      }

      // required double sway_demand = 15;
      case 15: {
        if (tag == 121) {
         parse_sway_demand:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &sway_demand_)));
          set_has_sway_demand();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(129)) goto parse_sway_feedback;
        break;
      }

      // required double sway_feedback = 16;
      case 16: {
        if (tag == 129) {
         parse_sway_feedback:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &sway_feedback_)));
          set_has_sway_feedback();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(136)) goto parse_ship_mode;
        break;
      }

      // required int32 ship_mode = 17;
      case 17: {
        if (tag == 136) {
         parse_ship_mode:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ship_mode_)));
          set_has_ship_mode();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.zhichenhaixin.proto.ShipInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.zhichenhaixin.proto.ShipInfo)
  return false;
#undef DO_
}

void ShipInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.zhichenhaixin.proto.ShipInfo)
  // required int64 ship_update_time = 1;
  if (has_ship_update_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->ship_update_time(), output);
  }

  // required double ship_lat = 2;
  if (has_ship_lat()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->ship_lat(), output);
  }

  // required double ship_lon = 3;
  if (has_ship_lon()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->ship_lon(), output);
  }

  // required double ship_speed = 4;
  if (has_ship_speed()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->ship_speed(), output);
  }

  // required double ship_speed_ground = 5;
  if (has_ship_speed_ground()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->ship_speed_ground(), output);
  }

  // required double ship_head = 6;
  if (has_ship_head()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->ship_head(), output);
  }

  // required double ship_pitch = 7;
  if (has_ship_pitch()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(7, this->ship_pitch(), output);
  }

  // required double ship_roll = 8;
  if (has_ship_roll()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(8, this->ship_roll(), output);
  }

  // required double ship_course = 9;
  if (has_ship_course()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(9, this->ship_course(), output);
  }

  // required double heave = 10;
  if (has_heave()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(10, this->heave(), output);
  }

  // required double wind_dir = 11;
  if (has_wind_dir()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(11, this->wind_dir(), output);
  }

  // required double wind_speed = 12;
  if (has_wind_speed()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(12, this->wind_speed(), output);
  }

  // required double surge_demand = 13;
  if (has_surge_demand()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(13, this->surge_demand(), output);
  }

  // required double surge_feedback = 14;
  if (has_surge_feedback()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(14, this->surge_feedback(), output);
  }

  // required double sway_demand = 15;
  if (has_sway_demand()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(15, this->sway_demand(), output);
  }

  // required double sway_feedback = 16;
  if (has_sway_feedback()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(16, this->sway_feedback(), output);
  }

  // required int32 ship_mode = 17;
  if (has_ship_mode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(17, this->ship_mode(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.zhichenhaixin.proto.ShipInfo)
}

::google::protobuf::uint8* ShipInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.zhichenhaixin.proto.ShipInfo)
  // required int64 ship_update_time = 1;
  if (has_ship_update_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->ship_update_time(), target);
  }

  // required double ship_lat = 2;
  if (has_ship_lat()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->ship_lat(), target);
  }

  // required double ship_lon = 3;
  if (has_ship_lon()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->ship_lon(), target);
  }

  // required double ship_speed = 4;
  if (has_ship_speed()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->ship_speed(), target);
  }

  // required double ship_speed_ground = 5;
  if (has_ship_speed_ground()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->ship_speed_ground(), target);
  }

  // required double ship_head = 6;
  if (has_ship_head()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->ship_head(), target);
  }

  // required double ship_pitch = 7;
  if (has_ship_pitch()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(7, this->ship_pitch(), target);
  }

  // required double ship_roll = 8;
  if (has_ship_roll()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(8, this->ship_roll(), target);
  }

  // required double ship_course = 9;
  if (has_ship_course()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(9, this->ship_course(), target);
  }

  // required double heave = 10;
  if (has_heave()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(10, this->heave(), target);
  }

  // required double wind_dir = 11;
  if (has_wind_dir()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(11, this->wind_dir(), target);
  }

  // required double wind_speed = 12;
  if (has_wind_speed()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(12, this->wind_speed(), target);
  }

  // required double surge_demand = 13;
  if (has_surge_demand()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(13, this->surge_demand(), target);
  }

  // required double surge_feedback = 14;
  if (has_surge_feedback()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(14, this->surge_feedback(), target);
  }

  // required double sway_demand = 15;
  if (has_sway_demand()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(15, this->sway_demand(), target);
  }

  // required double sway_feedback = 16;
  if (has_sway_feedback()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(16, this->sway_feedback(), target);
  }

  // required int32 ship_mode = 17;
  if (has_ship_mode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(17, this->ship_mode(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.zhichenhaixin.proto.ShipInfo)
  return target;
}

int ShipInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 ship_update_time = 1;
    if (has_ship_update_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->ship_update_time());
    }

    // required double ship_lat = 2;
    if (has_ship_lat()) {
      total_size += 1 + 8;
    }

    // required double ship_lon = 3;
    if (has_ship_lon()) {
      total_size += 1 + 8;
    }

    // required double ship_speed = 4;
    if (has_ship_speed()) {
      total_size += 1 + 8;
    }

    // required double ship_speed_ground = 5;
    if (has_ship_speed_ground()) {
      total_size += 1 + 8;
    }

    // required double ship_head = 6;
    if (has_ship_head()) {
      total_size += 1 + 8;
    }

    // required double ship_pitch = 7;
    if (has_ship_pitch()) {
      total_size += 1 + 8;
    }

    // required double ship_roll = 8;
    if (has_ship_roll()) {
      total_size += 1 + 8;
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required double ship_course = 9;
    if (has_ship_course()) {
      total_size += 1 + 8;
    }

    // required double heave = 10;
    if (has_heave()) {
      total_size += 1 + 8;
    }

    // required double wind_dir = 11;
    if (has_wind_dir()) {
      total_size += 1 + 8;
    }

    // required double wind_speed = 12;
    if (has_wind_speed()) {
      total_size += 1 + 8;
    }

    // required double surge_demand = 13;
    if (has_surge_demand()) {
      total_size += 1 + 8;
    }

    // required double surge_feedback = 14;
    if (has_surge_feedback()) {
      total_size += 1 + 8;
    }

    // required double sway_demand = 15;
    if (has_sway_demand()) {
      total_size += 1 + 8;
    }

    // required double sway_feedback = 16;
    if (has_sway_feedback()) {
      total_size += 2 + 8;
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // required int32 ship_mode = 17;
    if (has_ship_mode()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ship_mode());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ShipInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ShipInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ShipInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ShipInfo::MergeFrom(const ShipInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ship_update_time()) {
      set_ship_update_time(from.ship_update_time());
    }
    if (from.has_ship_lat()) {
      set_ship_lat(from.ship_lat());
    }
    if (from.has_ship_lon()) {
      set_ship_lon(from.ship_lon());
    }
    if (from.has_ship_speed()) {
      set_ship_speed(from.ship_speed());
    }
    if (from.has_ship_speed_ground()) {
      set_ship_speed_ground(from.ship_speed_ground());
    }
    if (from.has_ship_head()) {
      set_ship_head(from.ship_head());
    }
    if (from.has_ship_pitch()) {
      set_ship_pitch(from.ship_pitch());
    }
    if (from.has_ship_roll()) {
      set_ship_roll(from.ship_roll());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_ship_course()) {
      set_ship_course(from.ship_course());
    }
    if (from.has_heave()) {
      set_heave(from.heave());
    }
    if (from.has_wind_dir()) {
      set_wind_dir(from.wind_dir());
    }
    if (from.has_wind_speed()) {
      set_wind_speed(from.wind_speed());
    }
    if (from.has_surge_demand()) {
      set_surge_demand(from.surge_demand());
    }
    if (from.has_surge_feedback()) {
      set_surge_feedback(from.surge_feedback());
    }
    if (from.has_sway_demand()) {
      set_sway_demand(from.sway_demand());
    }
    if (from.has_sway_feedback()) {
      set_sway_feedback(from.sway_feedback());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_ship_mode()) {
      set_ship_mode(from.ship_mode());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ShipInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ShipInfo::CopyFrom(const ShipInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ShipInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x0001ffff) != 0x0001ffff) return false;

  return true;
}

void ShipInfo::Swap(ShipInfo* other) {
  if (other != this) {
    std::swap(ship_update_time_, other->ship_update_time_);
    std::swap(ship_lat_, other->ship_lat_);
    std::swap(ship_lon_, other->ship_lon_);
    std::swap(ship_speed_, other->ship_speed_);
    std::swap(ship_speed_ground_, other->ship_speed_ground_);
    std::swap(ship_head_, other->ship_head_);
    std::swap(ship_pitch_, other->ship_pitch_);
    std::swap(ship_roll_, other->ship_roll_);
    std::swap(ship_course_, other->ship_course_);
    std::swap(heave_, other->heave_);
    std::swap(wind_dir_, other->wind_dir_);
    std::swap(wind_speed_, other->wind_speed_);
    std::swap(surge_demand_, other->surge_demand_);
    std::swap(surge_feedback_, other->surge_feedback_);
    std::swap(sway_demand_, other->sway_demand_);
    std::swap(sway_feedback_, other->sway_feedback_);
    std::swap(ship_mode_, other->ship_mode_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ShipInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ShipInfo_descriptor_;
  metadata.reflection = ShipInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PlowInfo::kPlowUpdateTimeFieldNumber;
const int PlowInfo::kPlowLatFieldNumber;
const int PlowInfo::kPlowLonFieldNumber;
const int PlowInfo::kPlowPosModeFieldNumber;
const int PlowInfo::kPlowFlagFieldNumber;
const int PlowInfo::kPlowHeadFieldNumber;
const int PlowInfo::kPlowRollFieldNumber;
const int PlowInfo::kPlowPitchFieldNumber;
const int PlowInfo::kPlowWaterDepthFieldNumber;
const int PlowInfo::kPlowBuriedDepthFieldNumber;
const int PlowInfo::kPlowLeftPumpFieldNumber;
const int PlowInfo::kPlowRightPumpFieldNumber;
const int PlowInfo::kPlowSpeedFieldNumber;
const int PlowInfo::kPlowBootsAngleFieldNumber;
const int PlowInfo::kPlowBootsLengthFieldNumber;
const int PlowInfo::kPlowTowLengthFieldNumber;
const int PlowInfo::kPlowTowTensionFieldNumber;
const int PlowInfo::kPlowPosUpdateTimeFieldNumber;
const int PlowInfo::kPlowKpDisFieldNumber;
#endif  // !_MSC_VER

PlowInfo::PlowInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.zhichenhaixin.proto.PlowInfo)
}

void PlowInfo::InitAsDefaultInstance() {
}

PlowInfo::PlowInfo(const PlowInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:com.zhichenhaixin.proto.PlowInfo)
}

void PlowInfo::SharedCtor() {
  _cached_size_ = 0;
  plow_update_time_ = GOOGLE_LONGLONG(0);
  plow_lat_ = 0;
  plow_lon_ = 0;
  plow_pos_mode_ = 0;
  plow_flag_ = false;
  plow_head_ = 0;
  plow_roll_ = 0;
  plow_pitch_ = 0;
  plow_water_depth_ = 0;
  plow_buried_depth_ = 0;
  plow_left_pump_ = 0;
  plow_right_pump_ = 0;
  plow_speed_ = 0;
  plow_boots_angle_ = 0;
  plow_boots_length_ = 0;
  plow_tow_length_ = 0;
  plow_tow_tension_ = 0;
  plow_pos_update_time_ = GOOGLE_LONGLONG(0);
  plow_kp_dis_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PlowInfo::~PlowInfo() {
  // @@protoc_insertion_point(destructor:com.zhichenhaixin.proto.PlowInfo)
  SharedDtor();
}

void PlowInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PlowInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PlowInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PlowInfo_descriptor_;
}

const PlowInfo& PlowInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SCCMMSComData_2eproto();
  return *default_instance_;
}

PlowInfo* PlowInfo::default_instance_ = NULL;

PlowInfo* PlowInfo::New() const {
  return new PlowInfo;
}

void PlowInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<PlowInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(plow_update_time_, plow_pitch_);
  }
  if (_has_bits_[8 / 32] & 65280) {
    ZR_(plow_water_depth_, plow_tow_length_);
  }
  ZR_(plow_tow_tension_, plow_kp_dis_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PlowInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.zhichenhaixin.proto.PlowInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 plow_update_time = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &plow_update_time_)));
          set_has_plow_update_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(17)) goto parse_plow_lat;
        break;
      }

      // required double plow_lat = 2;
      case 2: {
        if (tag == 17) {
         parse_plow_lat:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &plow_lat_)));
          set_has_plow_lat();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(25)) goto parse_plow_lon;
        break;
      }

      // required double plow_lon = 3;
      case 3: {
        if (tag == 25) {
         parse_plow_lon:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &plow_lon_)));
          set_has_plow_lon();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_plow_pos_mode;
        break;
      }

      // required int32 plow_pos_mode = 4;
      case 4: {
        if (tag == 32) {
         parse_plow_pos_mode:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &plow_pos_mode_)));
          set_has_plow_pos_mode();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_plow_flag;
        break;
      }

      // required bool plow_flag = 5;
      case 5: {
        if (tag == 40) {
         parse_plow_flag:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &plow_flag_)));
          set_has_plow_flag();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(49)) goto parse_plow_head;
        break;
      }

      // required double plow_head = 6;
      case 6: {
        if (tag == 49) {
         parse_plow_head:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &plow_head_)));
          set_has_plow_head();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(57)) goto parse_plow_roll;
        break;
      }

      // required double plow_roll = 7;
      case 7: {
        if (tag == 57) {
         parse_plow_roll:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &plow_roll_)));
          set_has_plow_roll();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(65)) goto parse_plow_pitch;
        break;
      }

      // required double plow_pitch = 8;
      case 8: {
        if (tag == 65) {
         parse_plow_pitch:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &plow_pitch_)));
          set_has_plow_pitch();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(73)) goto parse_plow_water_depth;
        break;
      }

      // required double plow_water_depth = 9;
      case 9: {
        if (tag == 73) {
         parse_plow_water_depth:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &plow_water_depth_)));
          set_has_plow_water_depth();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(81)) goto parse_plow_buried_depth;
        break;
      }

      // required double plow_buried_depth = 10;
      case 10: {
        if (tag == 81) {
         parse_plow_buried_depth:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &plow_buried_depth_)));
          set_has_plow_buried_depth();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(89)) goto parse_plow_left_pump;
        break;
      }

      // required double plow_left_pump = 11;
      case 11: {
        if (tag == 89) {
         parse_plow_left_pump:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &plow_left_pump_)));
          set_has_plow_left_pump();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(97)) goto parse_plow_right_pump;
        break;
      }

      // required double plow_right_pump = 12;
      case 12: {
        if (tag == 97) {
         parse_plow_right_pump:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &plow_right_pump_)));
          set_has_plow_right_pump();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(105)) goto parse_plow_speed;
        break;
      }

      // required double plow_speed = 13;
      case 13: {
        if (tag == 105) {
         parse_plow_speed:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &plow_speed_)));
          set_has_plow_speed();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(113)) goto parse_plow_boots_angle;
        break;
      }

      // required double plow_boots_angle = 14;
      case 14: {
        if (tag == 113) {
         parse_plow_boots_angle:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &plow_boots_angle_)));
          set_has_plow_boots_angle();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(121)) goto parse_plow_boots_length;
        break;
      }

      // required double plow_boots_length = 15;
      case 15: {
        if (tag == 121) {
         parse_plow_boots_length:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &plow_boots_length_)));
          set_has_plow_boots_length();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(129)) goto parse_plow_tow_length;
        break;
      }

      // required double plow_tow_length = 16;
      case 16: {
        if (tag == 129) {
         parse_plow_tow_length:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &plow_tow_length_)));
          set_has_plow_tow_length();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(137)) goto parse_plow_tow_tension;
        break;
      }

      // required double plow_tow_tension = 17;
      case 17: {
        if (tag == 137) {
         parse_plow_tow_tension:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &plow_tow_tension_)));
          set_has_plow_tow_tension();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(144)) goto parse_plow_pos_update_time;
        break;
      }

      // required int64 plow_pos_update_time = 18;
      case 18: {
        if (tag == 144) {
         parse_plow_pos_update_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &plow_pos_update_time_)));
          set_has_plow_pos_update_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(153)) goto parse_plow_kp_dis;
        break;
      }

      // required double plow_kp_dis = 19;
      case 19: {
        if (tag == 153) {
         parse_plow_kp_dis:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &plow_kp_dis_)));
          set_has_plow_kp_dis();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.zhichenhaixin.proto.PlowInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.zhichenhaixin.proto.PlowInfo)
  return false;
#undef DO_
}

void PlowInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.zhichenhaixin.proto.PlowInfo)
  // required int64 plow_update_time = 1;
  if (has_plow_update_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->plow_update_time(), output);
  }

  // required double plow_lat = 2;
  if (has_plow_lat()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->plow_lat(), output);
  }

  // required double plow_lon = 3;
  if (has_plow_lon()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->plow_lon(), output);
  }

  // required int32 plow_pos_mode = 4;
  if (has_plow_pos_mode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->plow_pos_mode(), output);
  }

  // required bool plow_flag = 5;
  if (has_plow_flag()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->plow_flag(), output);
  }

  // required double plow_head = 6;
  if (has_plow_head()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->plow_head(), output);
  }

  // required double plow_roll = 7;
  if (has_plow_roll()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(7, this->plow_roll(), output);
  }

  // required double plow_pitch = 8;
  if (has_plow_pitch()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(8, this->plow_pitch(), output);
  }

  // required double plow_water_depth = 9;
  if (has_plow_water_depth()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(9, this->plow_water_depth(), output);
  }

  // required double plow_buried_depth = 10;
  if (has_plow_buried_depth()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(10, this->plow_buried_depth(), output);
  }

  // required double plow_left_pump = 11;
  if (has_plow_left_pump()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(11, this->plow_left_pump(), output);
  }

  // required double plow_right_pump = 12;
  if (has_plow_right_pump()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(12, this->plow_right_pump(), output);
  }

  // required double plow_speed = 13;
  if (has_plow_speed()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(13, this->plow_speed(), output);
  }

  // required double plow_boots_angle = 14;
  if (has_plow_boots_angle()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(14, this->plow_boots_angle(), output);
  }

  // required double plow_boots_length = 15;
  if (has_plow_boots_length()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(15, this->plow_boots_length(), output);
  }

  // required double plow_tow_length = 16;
  if (has_plow_tow_length()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(16, this->plow_tow_length(), output);
  }

  // required double plow_tow_tension = 17;
  if (has_plow_tow_tension()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(17, this->plow_tow_tension(), output);
  }

  // required int64 plow_pos_update_time = 18;
  if (has_plow_pos_update_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(18, this->plow_pos_update_time(), output);
  }

  // required double plow_kp_dis = 19;
  if (has_plow_kp_dis()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(19, this->plow_kp_dis(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.zhichenhaixin.proto.PlowInfo)
}

::google::protobuf::uint8* PlowInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.zhichenhaixin.proto.PlowInfo)
  // required int64 plow_update_time = 1;
  if (has_plow_update_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->plow_update_time(), target);
  }

  // required double plow_lat = 2;
  if (has_plow_lat()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->plow_lat(), target);
  }

  // required double plow_lon = 3;
  if (has_plow_lon()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->plow_lon(), target);
  }

  // required int32 plow_pos_mode = 4;
  if (has_plow_pos_mode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->plow_pos_mode(), target);
  }

  // required bool plow_flag = 5;
  if (has_plow_flag()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->plow_flag(), target);
  }

  // required double plow_head = 6;
  if (has_plow_head()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->plow_head(), target);
  }

  // required double plow_roll = 7;
  if (has_plow_roll()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(7, this->plow_roll(), target);
  }

  // required double plow_pitch = 8;
  if (has_plow_pitch()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(8, this->plow_pitch(), target);
  }

  // required double plow_water_depth = 9;
  if (has_plow_water_depth()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(9, this->plow_water_depth(), target);
  }

  // required double plow_buried_depth = 10;
  if (has_plow_buried_depth()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(10, this->plow_buried_depth(), target);
  }

  // required double plow_left_pump = 11;
  if (has_plow_left_pump()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(11, this->plow_left_pump(), target);
  }

  // required double plow_right_pump = 12;
  if (has_plow_right_pump()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(12, this->plow_right_pump(), target);
  }

  // required double plow_speed = 13;
  if (has_plow_speed()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(13, this->plow_speed(), target);
  }

  // required double plow_boots_angle = 14;
  if (has_plow_boots_angle()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(14, this->plow_boots_angle(), target);
  }

  // required double plow_boots_length = 15;
  if (has_plow_boots_length()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(15, this->plow_boots_length(), target);
  }

  // required double plow_tow_length = 16;
  if (has_plow_tow_length()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(16, this->plow_tow_length(), target);
  }

  // required double plow_tow_tension = 17;
  if (has_plow_tow_tension()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(17, this->plow_tow_tension(), target);
  }

  // required int64 plow_pos_update_time = 18;
  if (has_plow_pos_update_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(18, this->plow_pos_update_time(), target);
  }

  // required double plow_kp_dis = 19;
  if (has_plow_kp_dis()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(19, this->plow_kp_dis(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.zhichenhaixin.proto.PlowInfo)
  return target;
}

int PlowInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 plow_update_time = 1;
    if (has_plow_update_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->plow_update_time());
    }

    // required double plow_lat = 2;
    if (has_plow_lat()) {
      total_size += 1 + 8;
    }

    // required double plow_lon = 3;
    if (has_plow_lon()) {
      total_size += 1 + 8;
    }

    // required int32 plow_pos_mode = 4;
    if (has_plow_pos_mode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->plow_pos_mode());
    }

    // required bool plow_flag = 5;
    if (has_plow_flag()) {
      total_size += 1 + 1;
    }

    // required double plow_head = 6;
    if (has_plow_head()) {
      total_size += 1 + 8;
    }

    // required double plow_roll = 7;
    if (has_plow_roll()) {
      total_size += 1 + 8;
    }

    // required double plow_pitch = 8;
    if (has_plow_pitch()) {
      total_size += 1 + 8;
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required double plow_water_depth = 9;
    if (has_plow_water_depth()) {
      total_size += 1 + 8;
    }

    // required double plow_buried_depth = 10;
    if (has_plow_buried_depth()) {
      total_size += 1 + 8;
    }

    // required double plow_left_pump = 11;
    if (has_plow_left_pump()) {
      total_size += 1 + 8;
    }

    // required double plow_right_pump = 12;
    if (has_plow_right_pump()) {
      total_size += 1 + 8;
    }

    // required double plow_speed = 13;
    if (has_plow_speed()) {
      total_size += 1 + 8;
    }

    // required double plow_boots_angle = 14;
    if (has_plow_boots_angle()) {
      total_size += 1 + 8;
    }

    // required double plow_boots_length = 15;
    if (has_plow_boots_length()) {
      total_size += 1 + 8;
    }

    // required double plow_tow_length = 16;
    if (has_plow_tow_length()) {
      total_size += 2 + 8;
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // required double plow_tow_tension = 17;
    if (has_plow_tow_tension()) {
      total_size += 2 + 8;
    }

    // required int64 plow_pos_update_time = 18;
    if (has_plow_pos_update_time()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->plow_pos_update_time());
    }

    // required double plow_kp_dis = 19;
    if (has_plow_kp_dis()) {
      total_size += 2 + 8;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PlowInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PlowInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PlowInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PlowInfo::MergeFrom(const PlowInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_plow_update_time()) {
      set_plow_update_time(from.plow_update_time());
    }
    if (from.has_plow_lat()) {
      set_plow_lat(from.plow_lat());
    }
    if (from.has_plow_lon()) {
      set_plow_lon(from.plow_lon());
    }
    if (from.has_plow_pos_mode()) {
      set_plow_pos_mode(from.plow_pos_mode());
    }
    if (from.has_plow_flag()) {
      set_plow_flag(from.plow_flag());
    }
    if (from.has_plow_head()) {
      set_plow_head(from.plow_head());
    }
    if (from.has_plow_roll()) {
      set_plow_roll(from.plow_roll());
    }
    if (from.has_plow_pitch()) {
      set_plow_pitch(from.plow_pitch());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_plow_water_depth()) {
      set_plow_water_depth(from.plow_water_depth());
    }
    if (from.has_plow_buried_depth()) {
      set_plow_buried_depth(from.plow_buried_depth());
    }
    if (from.has_plow_left_pump()) {
      set_plow_left_pump(from.plow_left_pump());
    }
    if (from.has_plow_right_pump()) {
      set_plow_right_pump(from.plow_right_pump());
    }
    if (from.has_plow_speed()) {
      set_plow_speed(from.plow_speed());
    }
    if (from.has_plow_boots_angle()) {
      set_plow_boots_angle(from.plow_boots_angle());
    }
    if (from.has_plow_boots_length()) {
      set_plow_boots_length(from.plow_boots_length());
    }
    if (from.has_plow_tow_length()) {
      set_plow_tow_length(from.plow_tow_length());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_plow_tow_tension()) {
      set_plow_tow_tension(from.plow_tow_tension());
    }
    if (from.has_plow_pos_update_time()) {
      set_plow_pos_update_time(from.plow_pos_update_time());
    }
    if (from.has_plow_kp_dis()) {
      set_plow_kp_dis(from.plow_kp_dis());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PlowInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlowInfo::CopyFrom(const PlowInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlowInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x0007ffff) != 0x0007ffff) return false;

  return true;
}

void PlowInfo::Swap(PlowInfo* other) {
  if (other != this) {
    std::swap(plow_update_time_, other->plow_update_time_);
    std::swap(plow_lat_, other->plow_lat_);
    std::swap(plow_lon_, other->plow_lon_);
    std::swap(plow_pos_mode_, other->plow_pos_mode_);
    std::swap(plow_flag_, other->plow_flag_);
    std::swap(plow_head_, other->plow_head_);
    std::swap(plow_roll_, other->plow_roll_);
    std::swap(plow_pitch_, other->plow_pitch_);
    std::swap(plow_water_depth_, other->plow_water_depth_);
    std::swap(plow_buried_depth_, other->plow_buried_depth_);
    std::swap(plow_left_pump_, other->plow_left_pump_);
    std::swap(plow_right_pump_, other->plow_right_pump_);
    std::swap(plow_speed_, other->plow_speed_);
    std::swap(plow_boots_angle_, other->plow_boots_angle_);
    std::swap(plow_boots_length_, other->plow_boots_length_);
    std::swap(plow_tow_length_, other->plow_tow_length_);
    std::swap(plow_tow_tension_, other->plow_tow_tension_);
    std::swap(plow_pos_update_time_, other->plow_pos_update_time_);
    std::swap(plow_kp_dis_, other->plow_kp_dis_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PlowInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PlowInfo_descriptor_;
  metadata.reflection = PlowInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int LayInfo::kCableUpdateTimeFieldNumber;
const int LayInfo::kCablePayoutSpeedFieldNumber;
const int LayInfo::kMeterCounterCoeffFieldNumber;
const int LayInfo::kMeterCounterInitlenFieldNumber;
const int LayInfo::kMeterCounterLengthFieldNumber;
const int LayInfo::kCableLengthFieldNumber;
const int LayInfo::kGljCbTensionFieldNumber;
const int LayInfo::kGljCbSpeedFieldNumber;
const int LayInfo::kGljCbLengthFieldNumber;
const int LayInfo::kLtjCbTensionFieldNumber;
const int LayInfo::kLtjCbSpeedFieldNumber;
const int LayInfo::kLtjCbLengthFieldNumber;
const int LayInfo::kTlTensionFieldNumber;
const int LayInfo::kTlLengthFieldNumber;
const int LayInfo::kQdTensionFieldNumber;
const int LayInfo::kQdLengthFieldNumber;
const int LayInfo::kLightStatusFieldNumber;
const int LayInfo::kMeterCounterTimeFieldNumber;
const int LayInfo::kMeterSourceFieldNumber;
#endif  // !_MSC_VER

LayInfo::LayInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.zhichenhaixin.proto.LayInfo)
}

void LayInfo::InitAsDefaultInstance() {
}

LayInfo::LayInfo(const LayInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:com.zhichenhaixin.proto.LayInfo)
}

void LayInfo::SharedCtor() {
  _cached_size_ = 0;
  cable_update_time_ = GOOGLE_LONGLONG(0);
  cable_payout_speed_ = 0;
  meter_counter_coeff_ = 0;
  meter_counter_initlen_ = 0;
  meter_counter_length_ = 0;
  cable_length_ = 0;
  glj_cb_tension_ = 0;
  glj_cb_speed_ = 0;
  glj_cb_length_ = 0;
  ltj_cb_tension_ = 0;
  ltj_cb_speed_ = 0;
  ltj_cb_length_ = 0;
  tl_tension_ = 0;
  tl_length_ = 0;
  qd_tension_ = 0;
  qd_length_ = 0;
  light_status_ = 0;
  meter_counter_time_ = GOOGLE_LONGLONG(0);
  meter_source_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LayInfo::~LayInfo() {
  // @@protoc_insertion_point(destructor:com.zhichenhaixin.proto.LayInfo)
  SharedDtor();
}

void LayInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void LayInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LayInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LayInfo_descriptor_;
}

const LayInfo& LayInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SCCMMSComData_2eproto();
  return *default_instance_;
}

LayInfo* LayInfo::default_instance_ = NULL;

LayInfo* LayInfo::New() const {
  return new LayInfo;
}

void LayInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<LayInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(cable_update_time_, glj_cb_speed_);
  }
  if (_has_bits_[8 / 32] & 65280) {
    ZR_(glj_cb_length_, qd_length_);
  }
  ZR_(meter_counter_time_, meter_source_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LayInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.zhichenhaixin.proto.LayInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 cable_update_time = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &cable_update_time_)));
          set_has_cable_update_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(17)) goto parse_cable_payout_speed;
        break;
      }

      // required double cable_payout_speed = 2;
      case 2: {
        if (tag == 17) {
         parse_cable_payout_speed:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &cable_payout_speed_)));
          set_has_cable_payout_speed();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(25)) goto parse_meter_counter_coeff;
        break;
      }

      // required double meter_counter_coeff = 3;
      case 3: {
        if (tag == 25) {
         parse_meter_counter_coeff:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &meter_counter_coeff_)));
          set_has_meter_counter_coeff();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(33)) goto parse_meter_counter_initlen;
        break;
      }

      // required double meter_counter_initlen = 4;
      case 4: {
        if (tag == 33) {
         parse_meter_counter_initlen:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &meter_counter_initlen_)));
          set_has_meter_counter_initlen();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(41)) goto parse_meter_counter_length;
        break;
      }

      // required double meter_counter_length = 5;
      case 5: {
        if (tag == 41) {
         parse_meter_counter_length:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &meter_counter_length_)));
          set_has_meter_counter_length();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(49)) goto parse_cable_length;
        break;
      }

      // required double cable_length = 6;
      case 6: {
        if (tag == 49) {
         parse_cable_length:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &cable_length_)));
          set_has_cable_length();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(57)) goto parse_glj_cb_tension;
        break;
      }

      // required double glj_cb_tension = 7;
      case 7: {
        if (tag == 57) {
         parse_glj_cb_tension:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &glj_cb_tension_)));
          set_has_glj_cb_tension();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(65)) goto parse_glj_cb_speed;
        break;
      }

      // required double glj_cb_speed = 8;
      case 8: {
        if (tag == 65) {
         parse_glj_cb_speed:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &glj_cb_speed_)));
          set_has_glj_cb_speed();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(73)) goto parse_glj_cb_length;
        break;
      }

      // required double glj_cb_length = 9;
      case 9: {
        if (tag == 73) {
         parse_glj_cb_length:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &glj_cb_length_)));
          set_has_glj_cb_length();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(81)) goto parse_ltj_cb_tension;
        break;
      }

      // required double ltj_cb_tension = 10;
      case 10: {
        if (tag == 81) {
         parse_ltj_cb_tension:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &ltj_cb_tension_)));
          set_has_ltj_cb_tension();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(89)) goto parse_ltj_cb_speed;
        break;
      }

      // required double ltj_cb_speed = 11;
      case 11: {
        if (tag == 89) {
         parse_ltj_cb_speed:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &ltj_cb_speed_)));
          set_has_ltj_cb_speed();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(97)) goto parse_ltj_cb_length;
        break;
      }

      // required double ltj_cb_length = 12;
      case 12: {
        if (tag == 97) {
         parse_ltj_cb_length:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &ltj_cb_length_)));
          set_has_ltj_cb_length();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(105)) goto parse_tl_tension;
        break;
      }

      // required double tl_tension = 13;
      case 13: {
        if (tag == 105) {
         parse_tl_tension:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &tl_tension_)));
          set_has_tl_tension();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(113)) goto parse_tl_length;
        break;
      }

      // required double tl_length = 14;
      case 14: {
        if (tag == 113) {
         parse_tl_length:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &tl_length_)));
          set_has_tl_length();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(121)) goto parse_qd_tension;
        break;
      }

      // required double qd_tension = 15;
      case 15: {
        if (tag == 121) {
         parse_qd_tension:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &qd_tension_)));
          set_has_qd_tension();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(129)) goto parse_qd_length;
        break;
      }

      // required double qd_length = 16;
      case 16: {
        if (tag == 129) {
         parse_qd_length:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &qd_length_)));
          set_has_qd_length();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(136)) goto parse_light_status;
        break;
      }

      // required int32 light_status = 17;
      case 17: {
        if (tag == 136) {
         parse_light_status:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &light_status_)));
          set_has_light_status();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(144)) goto parse_meter_counter_time;
        break;
      }

      // required int64 meter_counter_time = 18;
      case 18: {
        if (tag == 144) {
         parse_meter_counter_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &meter_counter_time_)));
          set_has_meter_counter_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(152)) goto parse_meter_source;
        break;
      }

      // required int32 meter_source = 19;
      case 19: {
        if (tag == 152) {
         parse_meter_source:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &meter_source_)));
          set_has_meter_source();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.zhichenhaixin.proto.LayInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.zhichenhaixin.proto.LayInfo)
  return false;
#undef DO_
}

void LayInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.zhichenhaixin.proto.LayInfo)
  // required int64 cable_update_time = 1;
  if (has_cable_update_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->cable_update_time(), output);
  }

  // required double cable_payout_speed = 2;
  if (has_cable_payout_speed()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->cable_payout_speed(), output);
  }

  // required double meter_counter_coeff = 3;
  if (has_meter_counter_coeff()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->meter_counter_coeff(), output);
  }

  // required double meter_counter_initlen = 4;
  if (has_meter_counter_initlen()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->meter_counter_initlen(), output);
  }

  // required double meter_counter_length = 5;
  if (has_meter_counter_length()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->meter_counter_length(), output);
  }

  // required double cable_length = 6;
  if (has_cable_length()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->cable_length(), output);
  }

  // required double glj_cb_tension = 7;
  if (has_glj_cb_tension()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(7, this->glj_cb_tension(), output);
  }

  // required double glj_cb_speed = 8;
  if (has_glj_cb_speed()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(8, this->glj_cb_speed(), output);
  }

  // required double glj_cb_length = 9;
  if (has_glj_cb_length()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(9, this->glj_cb_length(), output);
  }

  // required double ltj_cb_tension = 10;
  if (has_ltj_cb_tension()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(10, this->ltj_cb_tension(), output);
  }

  // required double ltj_cb_speed = 11;
  if (has_ltj_cb_speed()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(11, this->ltj_cb_speed(), output);
  }

  // required double ltj_cb_length = 12;
  if (has_ltj_cb_length()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(12, this->ltj_cb_length(), output);
  }

  // required double tl_tension = 13;
  if (has_tl_tension()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(13, this->tl_tension(), output);
  }

  // required double tl_length = 14;
  if (has_tl_length()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(14, this->tl_length(), output);
  }

  // required double qd_tension = 15;
  if (has_qd_tension()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(15, this->qd_tension(), output);
  }

  // required double qd_length = 16;
  if (has_qd_length()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(16, this->qd_length(), output);
  }

  // required int32 light_status = 17;
  if (has_light_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(17, this->light_status(), output);
  }

  // required int64 meter_counter_time = 18;
  if (has_meter_counter_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(18, this->meter_counter_time(), output);
  }

  // required int32 meter_source = 19;
  if (has_meter_source()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(19, this->meter_source(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.zhichenhaixin.proto.LayInfo)
}

::google::protobuf::uint8* LayInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.zhichenhaixin.proto.LayInfo)
  // required int64 cable_update_time = 1;
  if (has_cable_update_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->cable_update_time(), target);
  }

  // required double cable_payout_speed = 2;
  if (has_cable_payout_speed()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->cable_payout_speed(), target);
  }

  // required double meter_counter_coeff = 3;
  if (has_meter_counter_coeff()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->meter_counter_coeff(), target);
  }

  // required double meter_counter_initlen = 4;
  if (has_meter_counter_initlen()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->meter_counter_initlen(), target);
  }

  // required double meter_counter_length = 5;
  if (has_meter_counter_length()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->meter_counter_length(), target);
  }

  // required double cable_length = 6;
  if (has_cable_length()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->cable_length(), target);
  }

  // required double glj_cb_tension = 7;
  if (has_glj_cb_tension()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(7, this->glj_cb_tension(), target);
  }

  // required double glj_cb_speed = 8;
  if (has_glj_cb_speed()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(8, this->glj_cb_speed(), target);
  }

  // required double glj_cb_length = 9;
  if (has_glj_cb_length()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(9, this->glj_cb_length(), target);
  }

  // required double ltj_cb_tension = 10;
  if (has_ltj_cb_tension()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(10, this->ltj_cb_tension(), target);
  }

  // required double ltj_cb_speed = 11;
  if (has_ltj_cb_speed()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(11, this->ltj_cb_speed(), target);
  }

  // required double ltj_cb_length = 12;
  if (has_ltj_cb_length()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(12, this->ltj_cb_length(), target);
  }

  // required double tl_tension = 13;
  if (has_tl_tension()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(13, this->tl_tension(), target);
  }

  // required double tl_length = 14;
  if (has_tl_length()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(14, this->tl_length(), target);
  }

  // required double qd_tension = 15;
  if (has_qd_tension()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(15, this->qd_tension(), target);
  }

  // required double qd_length = 16;
  if (has_qd_length()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(16, this->qd_length(), target);
  }

  // required int32 light_status = 17;
  if (has_light_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(17, this->light_status(), target);
  }

  // required int64 meter_counter_time = 18;
  if (has_meter_counter_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(18, this->meter_counter_time(), target);
  }

  // required int32 meter_source = 19;
  if (has_meter_source()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(19, this->meter_source(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.zhichenhaixin.proto.LayInfo)
  return target;
}

int LayInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 cable_update_time = 1;
    if (has_cable_update_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->cable_update_time());
    }

    // required double cable_payout_speed = 2;
    if (has_cable_payout_speed()) {
      total_size += 1 + 8;
    }

    // required double meter_counter_coeff = 3;
    if (has_meter_counter_coeff()) {
      total_size += 1 + 8;
    }

    // required double meter_counter_initlen = 4;
    if (has_meter_counter_initlen()) {
      total_size += 1 + 8;
    }

    // required double meter_counter_length = 5;
    if (has_meter_counter_length()) {
      total_size += 1 + 8;
    }

    // required double cable_length = 6;
    if (has_cable_length()) {
      total_size += 1 + 8;
    }

    // required double glj_cb_tension = 7;
    if (has_glj_cb_tension()) {
      total_size += 1 + 8;
    }

    // required double glj_cb_speed = 8;
    if (has_glj_cb_speed()) {
      total_size += 1 + 8;
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required double glj_cb_length = 9;
    if (has_glj_cb_length()) {
      total_size += 1 + 8;
    }

    // required double ltj_cb_tension = 10;
    if (has_ltj_cb_tension()) {
      total_size += 1 + 8;
    }

    // required double ltj_cb_speed = 11;
    if (has_ltj_cb_speed()) {
      total_size += 1 + 8;
    }

    // required double ltj_cb_length = 12;
    if (has_ltj_cb_length()) {
      total_size += 1 + 8;
    }

    // required double tl_tension = 13;
    if (has_tl_tension()) {
      total_size += 1 + 8;
    }

    // required double tl_length = 14;
    if (has_tl_length()) {
      total_size += 1 + 8;
    }

    // required double qd_tension = 15;
    if (has_qd_tension()) {
      total_size += 1 + 8;
    }

    // required double qd_length = 16;
    if (has_qd_length()) {
      total_size += 2 + 8;
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // required int32 light_status = 17;
    if (has_light_status()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->light_status());
    }

    // required int64 meter_counter_time = 18;
    if (has_meter_counter_time()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->meter_counter_time());
    }

    // required int32 meter_source = 19;
    if (has_meter_source()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->meter_source());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LayInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LayInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LayInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LayInfo::MergeFrom(const LayInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cable_update_time()) {
      set_cable_update_time(from.cable_update_time());
    }
    if (from.has_cable_payout_speed()) {
      set_cable_payout_speed(from.cable_payout_speed());
    }
    if (from.has_meter_counter_coeff()) {
      set_meter_counter_coeff(from.meter_counter_coeff());
    }
    if (from.has_meter_counter_initlen()) {
      set_meter_counter_initlen(from.meter_counter_initlen());
    }
    if (from.has_meter_counter_length()) {
      set_meter_counter_length(from.meter_counter_length());
    }
    if (from.has_cable_length()) {
      set_cable_length(from.cable_length());
    }
    if (from.has_glj_cb_tension()) {
      set_glj_cb_tension(from.glj_cb_tension());
    }
    if (from.has_glj_cb_speed()) {
      set_glj_cb_speed(from.glj_cb_speed());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_glj_cb_length()) {
      set_glj_cb_length(from.glj_cb_length());
    }
    if (from.has_ltj_cb_tension()) {
      set_ltj_cb_tension(from.ltj_cb_tension());
    }
    if (from.has_ltj_cb_speed()) {
      set_ltj_cb_speed(from.ltj_cb_speed());
    }
    if (from.has_ltj_cb_length()) {
      set_ltj_cb_length(from.ltj_cb_length());
    }
    if (from.has_tl_tension()) {
      set_tl_tension(from.tl_tension());
    }
    if (from.has_tl_length()) {
      set_tl_length(from.tl_length());
    }
    if (from.has_qd_tension()) {
      set_qd_tension(from.qd_tension());
    }
    if (from.has_qd_length()) {
      set_qd_length(from.qd_length());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_light_status()) {
      set_light_status(from.light_status());
    }
    if (from.has_meter_counter_time()) {
      set_meter_counter_time(from.meter_counter_time());
    }
    if (from.has_meter_source()) {
      set_meter_source(from.meter_source());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LayInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LayInfo::CopyFrom(const LayInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LayInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x0007ffff) != 0x0007ffff) return false;

  return true;
}

void LayInfo::Swap(LayInfo* other) {
  if (other != this) {
    std::swap(cable_update_time_, other->cable_update_time_);
    std::swap(cable_payout_speed_, other->cable_payout_speed_);
    std::swap(meter_counter_coeff_, other->meter_counter_coeff_);
    std::swap(meter_counter_initlen_, other->meter_counter_initlen_);
    std::swap(meter_counter_length_, other->meter_counter_length_);
    std::swap(cable_length_, other->cable_length_);
    std::swap(glj_cb_tension_, other->glj_cb_tension_);
    std::swap(glj_cb_speed_, other->glj_cb_speed_);
    std::swap(glj_cb_length_, other->glj_cb_length_);
    std::swap(ltj_cb_tension_, other->ltj_cb_tension_);
    std::swap(ltj_cb_speed_, other->ltj_cb_speed_);
    std::swap(ltj_cb_length_, other->ltj_cb_length_);
    std::swap(tl_tension_, other->tl_tension_);
    std::swap(tl_length_, other->tl_length_);
    std::swap(qd_tension_, other->qd_tension_);
    std::swap(qd_length_, other->qd_length_);
    std::swap(light_status_, other->light_status_);
    std::swap(meter_counter_time_, other->meter_counter_time_);
    std::swap(meter_source_, other->meter_source_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LayInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LayInfo_descriptor_;
  metadata.reflection = LayInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Surface4017Data::kSurface4017Pull1FieldNumber;
const int Surface4017Data::kSurface4017Pull2FieldNumber;
const int Surface4017Data::kSurface4017Pull3FieldNumber;
const int Surface4017Data::kSurface4017LpumpFieldNumber;
const int Surface4017Data::kSurface4017RpumpFieldNumber;
const int Surface4017Data::kSurface4017TimeFieldNumber;
#endif  // !_MSC_VER

Surface4017Data::Surface4017Data()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.zhichenhaixin.proto.Surface4017Data)
}

void Surface4017Data::InitAsDefaultInstance() {
}

Surface4017Data::Surface4017Data(const Surface4017Data& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:com.zhichenhaixin.proto.Surface4017Data)
}

void Surface4017Data::SharedCtor() {
  _cached_size_ = 0;
  surface_4017_pull1_ = 0;
  surface_4017_pull2_ = 0;
  surface_4017_pull3_ = 0;
  surface_4017_lpump_ = 0;
  surface_4017_rpump_ = 0;
  surface_4017_time_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Surface4017Data::~Surface4017Data() {
  // @@protoc_insertion_point(destructor:com.zhichenhaixin.proto.Surface4017Data)
  SharedDtor();
}

void Surface4017Data::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Surface4017Data::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Surface4017Data::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Surface4017Data_descriptor_;
}

const Surface4017Data& Surface4017Data::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SCCMMSComData_2eproto();
  return *default_instance_;
}

Surface4017Data* Surface4017Data::default_instance_ = NULL;

Surface4017Data* Surface4017Data::New() const {
  return new Surface4017Data;
}

void Surface4017Data::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<Surface4017Data*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 63) {
    ZR_(surface_4017_pull1_, surface_4017_time_);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Surface4017Data::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.zhichenhaixin.proto.Surface4017Data)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required double surface_4017_pull1 = 1;
      case 1: {
        if (tag == 9) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &surface_4017_pull1_)));
          set_has_surface_4017_pull1();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(17)) goto parse_surface_4017_pull2;
        break;
      }

      // required double surface_4017_pull2 = 2;
      case 2: {
        if (tag == 17) {
         parse_surface_4017_pull2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &surface_4017_pull2_)));
          set_has_surface_4017_pull2();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(25)) goto parse_surface_4017_pull3;
        break;
      }

      // required double surface_4017_pull3 = 3;
      case 3: {
        if (tag == 25) {
         parse_surface_4017_pull3:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &surface_4017_pull3_)));
          set_has_surface_4017_pull3();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(33)) goto parse_surface_4017_lpump;
        break;
      }

      // required double surface_4017_lpump = 4;
      case 4: {
        if (tag == 33) {
         parse_surface_4017_lpump:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &surface_4017_lpump_)));
          set_has_surface_4017_lpump();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(41)) goto parse_surface_4017_rpump;
        break;
      }

      // required double surface_4017_rpump = 5;
      case 5: {
        if (tag == 41) {
         parse_surface_4017_rpump:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &surface_4017_rpump_)));
          set_has_surface_4017_rpump();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_surface_4017_time;
        break;
      }

      // required int64 surface_4017_time = 6;
      case 6: {
        if (tag == 48) {
         parse_surface_4017_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &surface_4017_time_)));
          set_has_surface_4017_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.zhichenhaixin.proto.Surface4017Data)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.zhichenhaixin.proto.Surface4017Data)
  return false;
#undef DO_
}

void Surface4017Data::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.zhichenhaixin.proto.Surface4017Data)
  // required double surface_4017_pull1 = 1;
  if (has_surface_4017_pull1()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->surface_4017_pull1(), output);
  }

  // required double surface_4017_pull2 = 2;
  if (has_surface_4017_pull2()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->surface_4017_pull2(), output);
  }

  // required double surface_4017_pull3 = 3;
  if (has_surface_4017_pull3()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->surface_4017_pull3(), output);
  }

  // required double surface_4017_lpump = 4;
  if (has_surface_4017_lpump()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->surface_4017_lpump(), output);
  }

  // required double surface_4017_rpump = 5;
  if (has_surface_4017_rpump()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->surface_4017_rpump(), output);
  }

  // required int64 surface_4017_time = 6;
  if (has_surface_4017_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(6, this->surface_4017_time(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.zhichenhaixin.proto.Surface4017Data)
}

::google::protobuf::uint8* Surface4017Data::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.zhichenhaixin.proto.Surface4017Data)
  // required double surface_4017_pull1 = 1;
  if (has_surface_4017_pull1()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->surface_4017_pull1(), target);
  }

  // required double surface_4017_pull2 = 2;
  if (has_surface_4017_pull2()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->surface_4017_pull2(), target);
  }

  // required double surface_4017_pull3 = 3;
  if (has_surface_4017_pull3()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->surface_4017_pull3(), target);
  }

  // required double surface_4017_lpump = 4;
  if (has_surface_4017_lpump()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->surface_4017_lpump(), target);
  }

  // required double surface_4017_rpump = 5;
  if (has_surface_4017_rpump()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->surface_4017_rpump(), target);
  }

  // required int64 surface_4017_time = 6;
  if (has_surface_4017_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(6, this->surface_4017_time(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.zhichenhaixin.proto.Surface4017Data)
  return target;
}

int Surface4017Data::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required double surface_4017_pull1 = 1;
    if (has_surface_4017_pull1()) {
      total_size += 1 + 8;
    }

    // required double surface_4017_pull2 = 2;
    if (has_surface_4017_pull2()) {
      total_size += 1 + 8;
    }

    // required double surface_4017_pull3 = 3;
    if (has_surface_4017_pull3()) {
      total_size += 1 + 8;
    }

    // required double surface_4017_lpump = 4;
    if (has_surface_4017_lpump()) {
      total_size += 1 + 8;
    }

    // required double surface_4017_rpump = 5;
    if (has_surface_4017_rpump()) {
      total_size += 1 + 8;
    }

    // required int64 surface_4017_time = 6;
    if (has_surface_4017_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->surface_4017_time());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Surface4017Data::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Surface4017Data* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Surface4017Data*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Surface4017Data::MergeFrom(const Surface4017Data& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_surface_4017_pull1()) {
      set_surface_4017_pull1(from.surface_4017_pull1());
    }
    if (from.has_surface_4017_pull2()) {
      set_surface_4017_pull2(from.surface_4017_pull2());
    }
    if (from.has_surface_4017_pull3()) {
      set_surface_4017_pull3(from.surface_4017_pull3());
    }
    if (from.has_surface_4017_lpump()) {
      set_surface_4017_lpump(from.surface_4017_lpump());
    }
    if (from.has_surface_4017_rpump()) {
      set_surface_4017_rpump(from.surface_4017_rpump());
    }
    if (from.has_surface_4017_time()) {
      set_surface_4017_time(from.surface_4017_time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Surface4017Data::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Surface4017Data::CopyFrom(const Surface4017Data& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Surface4017Data::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000003f) != 0x0000003f) return false;

  return true;
}

void Surface4017Data::Swap(Surface4017Data* other) {
  if (other != this) {
    std::swap(surface_4017_pull1_, other->surface_4017_pull1_);
    std::swap(surface_4017_pull2_, other->surface_4017_pull2_);
    std::swap(surface_4017_pull3_, other->surface_4017_pull3_);
    std::swap(surface_4017_lpump_, other->surface_4017_lpump_);
    std::swap(surface_4017_rpump_, other->surface_4017_rpump_);
    std::swap(surface_4017_time_, other->surface_4017_time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Surface4017Data::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Surface4017Data_descriptor_;
  metadata.reflection = Surface4017Data_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UnderWater4017Data::kUnder4017Pull1FieldNumber;
const int UnderWater4017Data::kUnder4017Pull2FieldNumber;
const int UnderWater4017Data::kUnder4017Pull3FieldNumber;
const int UnderWater4017Data::kUnder4017LpumpFieldNumber;
const int UnderWater4017Data::kUnder4017RpumpFieldNumber;
const int UnderWater4017Data::kUnder4017WaterDepthFieldNumber;
const int UnderWater4017Data::kUnder4017BootsAngleFieldNumber;
const int UnderWater4017Data::kUnder4017BootsLengthFieldNumber;
const int UnderWater4017Data::kUnder4017BuriedDepthFieldNumber;
const int UnderWater4017Data::kUnder4017TouchDownP1FieldNumber;
const int UnderWater4017Data::kUnder4017TouchDownP2FieldNumber;
const int UnderWater4017Data::kUnder4017TouchDownP3FieldNumber;
const int UnderWater4017Data::kUnder4017TouchDownP4FieldNumber;
const int UnderWater4017Data::kUnder4017TimeFieldNumber;
#endif  // !_MSC_VER

UnderWater4017Data::UnderWater4017Data()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.zhichenhaixin.proto.UnderWater4017Data)
}

void UnderWater4017Data::InitAsDefaultInstance() {
}

UnderWater4017Data::UnderWater4017Data(const UnderWater4017Data& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:com.zhichenhaixin.proto.UnderWater4017Data)
}

void UnderWater4017Data::SharedCtor() {
  _cached_size_ = 0;
  under_4017_pull1_ = 0;
  under_4017_pull2_ = 0;
  under_4017_pull3_ = 0;
  under_4017_lpump_ = 0;
  under_4017_rpump_ = 0;
  under_4017_water_depth_ = 0;
  under_4017_boots_angle_ = 0;
  under_4017_boots_length_ = 0;
  under_4017_buried_depth_ = 0;
  under_4017_touch_down_p1_ = 0;
  under_4017_touch_down_p2_ = 0;
  under_4017_touch_down_p3_ = 0;
  under_4017_touch_down_p4_ = 0;
  under_4017_time_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UnderWater4017Data::~UnderWater4017Data() {
  // @@protoc_insertion_point(destructor:com.zhichenhaixin.proto.UnderWater4017Data)
  SharedDtor();
}

void UnderWater4017Data::SharedDtor() {
  if (this != default_instance_) {
  }
}

void UnderWater4017Data::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UnderWater4017Data::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UnderWater4017Data_descriptor_;
}

const UnderWater4017Data& UnderWater4017Data::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SCCMMSComData_2eproto();
  return *default_instance_;
}

UnderWater4017Data* UnderWater4017Data::default_instance_ = NULL;

UnderWater4017Data* UnderWater4017Data::New() const {
  return new UnderWater4017Data;
}

void UnderWater4017Data::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<UnderWater4017Data*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(under_4017_pull1_, under_4017_boots_length_);
  }
  if (_has_bits_[8 / 32] & 16128) {
    ZR_(under_4017_buried_depth_, under_4017_time_);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UnderWater4017Data::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.zhichenhaixin.proto.UnderWater4017Data)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required double under_4017_pull1 = 1;
      case 1: {
        if (tag == 9) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &under_4017_pull1_)));
          set_has_under_4017_pull1();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(17)) goto parse_under_4017_pull2;
        break;
      }

      // required double under_4017_pull2 = 2;
      case 2: {
        if (tag == 17) {
         parse_under_4017_pull2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &under_4017_pull2_)));
          set_has_under_4017_pull2();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(25)) goto parse_under_4017_pull3;
        break;
      }

      // required double under_4017_pull3 = 3;
      case 3: {
        if (tag == 25) {
         parse_under_4017_pull3:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &under_4017_pull3_)));
          set_has_under_4017_pull3();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(33)) goto parse_under_4017_lpump;
        break;
      }

      // required double under_4017_lpump = 4;
      case 4: {
        if (tag == 33) {
         parse_under_4017_lpump:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &under_4017_lpump_)));
          set_has_under_4017_lpump();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(41)) goto parse_under_4017_rpump;
        break;
      }

      // required double under_4017_rpump = 5;
      case 5: {
        if (tag == 41) {
         parse_under_4017_rpump:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &under_4017_rpump_)));
          set_has_under_4017_rpump();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(49)) goto parse_under_4017_water_depth;
        break;
      }

      // required double under_4017_water_depth = 6;
      case 6: {
        if (tag == 49) {
         parse_under_4017_water_depth:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &under_4017_water_depth_)));
          set_has_under_4017_water_depth();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(57)) goto parse_under_4017_boots_angle;
        break;
      }

      // required double under_4017_boots_angle = 7;
      case 7: {
        if (tag == 57) {
         parse_under_4017_boots_angle:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &under_4017_boots_angle_)));
          set_has_under_4017_boots_angle();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(65)) goto parse_under_4017_boots_length;
        break;
      }

      // required double under_4017_boots_length = 8;
      case 8: {
        if (tag == 65) {
         parse_under_4017_boots_length:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &under_4017_boots_length_)));
          set_has_under_4017_boots_length();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(73)) goto parse_under_4017_buried_depth;
        break;
      }

      // required double under_4017_buried_depth = 9;
      case 9: {
        if (tag == 73) {
         parse_under_4017_buried_depth:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &under_4017_buried_depth_)));
          set_has_under_4017_buried_depth();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(81)) goto parse_under_4017_touch_down_p1;
        break;
      }

      // required double under_4017_touch_down_p1 = 10;
      case 10: {
        if (tag == 81) {
         parse_under_4017_touch_down_p1:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &under_4017_touch_down_p1_)));
          set_has_under_4017_touch_down_p1();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(89)) goto parse_under_4017_touch_down_p2;
        break;
      }

      // required double under_4017_touch_down_p2 = 11;
      case 11: {
        if (tag == 89) {
         parse_under_4017_touch_down_p2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &under_4017_touch_down_p2_)));
          set_has_under_4017_touch_down_p2();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(97)) goto parse_under_4017_touch_down_p3;
        break;
      }

      // required double under_4017_touch_down_p3 = 12;
      case 12: {
        if (tag == 97) {
         parse_under_4017_touch_down_p3:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &under_4017_touch_down_p3_)));
          set_has_under_4017_touch_down_p3();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(105)) goto parse_under_4017_touch_down_p4;
        break;
      }

      // required double under_4017_touch_down_p4 = 13;
      case 13: {
        if (tag == 105) {
         parse_under_4017_touch_down_p4:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &under_4017_touch_down_p4_)));
          set_has_under_4017_touch_down_p4();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(112)) goto parse_under_4017_time;
        break;
      }

      // required int64 under_4017_time = 14;
      case 14: {
        if (tag == 112) {
         parse_under_4017_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &under_4017_time_)));
          set_has_under_4017_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.zhichenhaixin.proto.UnderWater4017Data)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.zhichenhaixin.proto.UnderWater4017Data)
  return false;
#undef DO_
}

void UnderWater4017Data::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.zhichenhaixin.proto.UnderWater4017Data)
  // required double under_4017_pull1 = 1;
  if (has_under_4017_pull1()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->under_4017_pull1(), output);
  }

  // required double under_4017_pull2 = 2;
  if (has_under_4017_pull2()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->under_4017_pull2(), output);
  }

  // required double under_4017_pull3 = 3;
  if (has_under_4017_pull3()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->under_4017_pull3(), output);
  }

  // required double under_4017_lpump = 4;
  if (has_under_4017_lpump()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->under_4017_lpump(), output);
  }

  // required double under_4017_rpump = 5;
  if (has_under_4017_rpump()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->under_4017_rpump(), output);
  }

  // required double under_4017_water_depth = 6;
  if (has_under_4017_water_depth()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->under_4017_water_depth(), output);
  }

  // required double under_4017_boots_angle = 7;
  if (has_under_4017_boots_angle()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(7, this->under_4017_boots_angle(), output);
  }

  // required double under_4017_boots_length = 8;
  if (has_under_4017_boots_length()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(8, this->under_4017_boots_length(), output);
  }

  // required double under_4017_buried_depth = 9;
  if (has_under_4017_buried_depth()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(9, this->under_4017_buried_depth(), output);
  }

  // required double under_4017_touch_down_p1 = 10;
  if (has_under_4017_touch_down_p1()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(10, this->under_4017_touch_down_p1(), output);
  }

  // required double under_4017_touch_down_p2 = 11;
  if (has_under_4017_touch_down_p2()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(11, this->under_4017_touch_down_p2(), output);
  }

  // required double under_4017_touch_down_p3 = 12;
  if (has_under_4017_touch_down_p3()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(12, this->under_4017_touch_down_p3(), output);
  }

  // required double under_4017_touch_down_p4 = 13;
  if (has_under_4017_touch_down_p4()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(13, this->under_4017_touch_down_p4(), output);
  }

  // required int64 under_4017_time = 14;
  if (has_under_4017_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(14, this->under_4017_time(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.zhichenhaixin.proto.UnderWater4017Data)
}

::google::protobuf::uint8* UnderWater4017Data::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.zhichenhaixin.proto.UnderWater4017Data)
  // required double under_4017_pull1 = 1;
  if (has_under_4017_pull1()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->under_4017_pull1(), target);
  }

  // required double under_4017_pull2 = 2;
  if (has_under_4017_pull2()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->under_4017_pull2(), target);
  }

  // required double under_4017_pull3 = 3;
  if (has_under_4017_pull3()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->under_4017_pull3(), target);
  }

  // required double under_4017_lpump = 4;
  if (has_under_4017_lpump()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->under_4017_lpump(), target);
  }

  // required double under_4017_rpump = 5;
  if (has_under_4017_rpump()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->under_4017_rpump(), target);
  }

  // required double under_4017_water_depth = 6;
  if (has_under_4017_water_depth()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->under_4017_water_depth(), target);
  }

  // required double under_4017_boots_angle = 7;
  if (has_under_4017_boots_angle()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(7, this->under_4017_boots_angle(), target);
  }

  // required double under_4017_boots_length = 8;
  if (has_under_4017_boots_length()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(8, this->under_4017_boots_length(), target);
  }

  // required double under_4017_buried_depth = 9;
  if (has_under_4017_buried_depth()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(9, this->under_4017_buried_depth(), target);
  }

  // required double under_4017_touch_down_p1 = 10;
  if (has_under_4017_touch_down_p1()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(10, this->under_4017_touch_down_p1(), target);
  }

  // required double under_4017_touch_down_p2 = 11;
  if (has_under_4017_touch_down_p2()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(11, this->under_4017_touch_down_p2(), target);
  }

  // required double under_4017_touch_down_p3 = 12;
  if (has_under_4017_touch_down_p3()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(12, this->under_4017_touch_down_p3(), target);
  }

  // required double under_4017_touch_down_p4 = 13;
  if (has_under_4017_touch_down_p4()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(13, this->under_4017_touch_down_p4(), target);
  }

  // required int64 under_4017_time = 14;
  if (has_under_4017_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(14, this->under_4017_time(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.zhichenhaixin.proto.UnderWater4017Data)
  return target;
}

int UnderWater4017Data::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required double under_4017_pull1 = 1;
    if (has_under_4017_pull1()) {
      total_size += 1 + 8;
    }

    // required double under_4017_pull2 = 2;
    if (has_under_4017_pull2()) {
      total_size += 1 + 8;
    }

    // required double under_4017_pull3 = 3;
    if (has_under_4017_pull3()) {
      total_size += 1 + 8;
    }

    // required double under_4017_lpump = 4;
    if (has_under_4017_lpump()) {
      total_size += 1 + 8;
    }

    // required double under_4017_rpump = 5;
    if (has_under_4017_rpump()) {
      total_size += 1 + 8;
    }

    // required double under_4017_water_depth = 6;
    if (has_under_4017_water_depth()) {
      total_size += 1 + 8;
    }

    // required double under_4017_boots_angle = 7;
    if (has_under_4017_boots_angle()) {
      total_size += 1 + 8;
    }

    // required double under_4017_boots_length = 8;
    if (has_under_4017_boots_length()) {
      total_size += 1 + 8;
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required double under_4017_buried_depth = 9;
    if (has_under_4017_buried_depth()) {
      total_size += 1 + 8;
    }

    // required double under_4017_touch_down_p1 = 10;
    if (has_under_4017_touch_down_p1()) {
      total_size += 1 + 8;
    }

    // required double under_4017_touch_down_p2 = 11;
    if (has_under_4017_touch_down_p2()) {
      total_size += 1 + 8;
    }

    // required double under_4017_touch_down_p3 = 12;
    if (has_under_4017_touch_down_p3()) {
      total_size += 1 + 8;
    }

    // required double under_4017_touch_down_p4 = 13;
    if (has_under_4017_touch_down_p4()) {
      total_size += 1 + 8;
    }

    // required int64 under_4017_time = 14;
    if (has_under_4017_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->under_4017_time());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UnderWater4017Data::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UnderWater4017Data* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UnderWater4017Data*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UnderWater4017Data::MergeFrom(const UnderWater4017Data& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_under_4017_pull1()) {
      set_under_4017_pull1(from.under_4017_pull1());
    }
    if (from.has_under_4017_pull2()) {
      set_under_4017_pull2(from.under_4017_pull2());
    }
    if (from.has_under_4017_pull3()) {
      set_under_4017_pull3(from.under_4017_pull3());
    }
    if (from.has_under_4017_lpump()) {
      set_under_4017_lpump(from.under_4017_lpump());
    }
    if (from.has_under_4017_rpump()) {
      set_under_4017_rpump(from.under_4017_rpump());
    }
    if (from.has_under_4017_water_depth()) {
      set_under_4017_water_depth(from.under_4017_water_depth());
    }
    if (from.has_under_4017_boots_angle()) {
      set_under_4017_boots_angle(from.under_4017_boots_angle());
    }
    if (from.has_under_4017_boots_length()) {
      set_under_4017_boots_length(from.under_4017_boots_length());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_under_4017_buried_depth()) {
      set_under_4017_buried_depth(from.under_4017_buried_depth());
    }
    if (from.has_under_4017_touch_down_p1()) {
      set_under_4017_touch_down_p1(from.under_4017_touch_down_p1());
    }
    if (from.has_under_4017_touch_down_p2()) {
      set_under_4017_touch_down_p2(from.under_4017_touch_down_p2());
    }
    if (from.has_under_4017_touch_down_p3()) {
      set_under_4017_touch_down_p3(from.under_4017_touch_down_p3());
    }
    if (from.has_under_4017_touch_down_p4()) {
      set_under_4017_touch_down_p4(from.under_4017_touch_down_p4());
    }
    if (from.has_under_4017_time()) {
      set_under_4017_time(from.under_4017_time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UnderWater4017Data::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UnderWater4017Data::CopyFrom(const UnderWater4017Data& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UnderWater4017Data::IsInitialized() const {
  if ((_has_bits_[0] & 0x00003fff) != 0x00003fff) return false;

  return true;
}

void UnderWater4017Data::Swap(UnderWater4017Data* other) {
  if (other != this) {
    std::swap(under_4017_pull1_, other->under_4017_pull1_);
    std::swap(under_4017_pull2_, other->under_4017_pull2_);
    std::swap(under_4017_pull3_, other->under_4017_pull3_);
    std::swap(under_4017_lpump_, other->under_4017_lpump_);
    std::swap(under_4017_rpump_, other->under_4017_rpump_);
    std::swap(under_4017_water_depth_, other->under_4017_water_depth_);
    std::swap(under_4017_boots_angle_, other->under_4017_boots_angle_);
    std::swap(under_4017_boots_length_, other->under_4017_boots_length_);
    std::swap(under_4017_buried_depth_, other->under_4017_buried_depth_);
    std::swap(under_4017_touch_down_p1_, other->under_4017_touch_down_p1_);
    std::swap(under_4017_touch_down_p2_, other->under_4017_touch_down_p2_);
    std::swap(under_4017_touch_down_p3_, other->under_4017_touch_down_p3_);
    std::swap(under_4017_touch_down_p4_, other->under_4017_touch_down_p4_);
    std::swap(under_4017_time_, other->under_4017_time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UnderWater4017Data::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UnderWater4017Data_descriptor_;
  metadata.reflection = UnderWater4017Data_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ConstructionInfo::kIsContructedFieldNumber;
const int ConstructionInfo::kHostNameFieldNumber;
const int ConstructionInfo::kProjectIdFieldNumber;
const int ConstructionInfo::kRouteIdFieldNumber;
const int ConstructionInfo::kPlanIdFieldNumber;
#endif  // !_MSC_VER

ConstructionInfo::ConstructionInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.zhichenhaixin.proto.ConstructionInfo)
}

void ConstructionInfo::InitAsDefaultInstance() {
}

ConstructionInfo::ConstructionInfo(const ConstructionInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:com.zhichenhaixin.proto.ConstructionInfo)
}

void ConstructionInfo::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  iscontructed_ = false;
  host_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  project_id_ = 0;
  route_id_ = 0;
  plan_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ConstructionInfo::~ConstructionInfo() {
  // @@protoc_insertion_point(destructor:com.zhichenhaixin.proto.ConstructionInfo)
  SharedDtor();
}

void ConstructionInfo::SharedDtor() {
  if (host_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete host_name_;
  }
  if (this != default_instance_) {
  }
}

void ConstructionInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ConstructionInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ConstructionInfo_descriptor_;
}

const ConstructionInfo& ConstructionInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SCCMMSComData_2eproto();
  return *default_instance_;
}

ConstructionInfo* ConstructionInfo::default_instance_ = NULL;

ConstructionInfo* ConstructionInfo::New() const {
  return new ConstructionInfo;
}

void ConstructionInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<ConstructionInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(iscontructed_, plan_id_);
    if (has_host_name()) {
      if (host_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        host_name_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ConstructionInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.zhichenhaixin.proto.ConstructionInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bool isContructed = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &iscontructed_)));
          set_has_iscontructed();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_host_name;
        break;
      }

      // required string host_name = 2;
      case 2: {
        if (tag == 18) {
         parse_host_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_host_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->host_name().data(), this->host_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "host_name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_project_id;
        break;
      }

      // required int32 project_id = 3;
      case 3: {
        if (tag == 24) {
         parse_project_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &project_id_)));
          set_has_project_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_route_id;
        break;
      }

      // required int32 route_id = 4;
      case 4: {
        if (tag == 32) {
         parse_route_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &route_id_)));
          set_has_route_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_plan_id;
        break;
      }

      // required int32 plan_id = 5;
      case 5: {
        if (tag == 40) {
         parse_plan_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &plan_id_)));
          set_has_plan_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.zhichenhaixin.proto.ConstructionInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.zhichenhaixin.proto.ConstructionInfo)
  return false;
#undef DO_
}

void ConstructionInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.zhichenhaixin.proto.ConstructionInfo)
  // required bool isContructed = 1;
  if (has_iscontructed()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->iscontructed(), output);
  }

  // required string host_name = 2;
  if (has_host_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->host_name().data(), this->host_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "host_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->host_name(), output);
  }

  // required int32 project_id = 3;
  if (has_project_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->project_id(), output);
  }

  // required int32 route_id = 4;
  if (has_route_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->route_id(), output);
  }

  // required int32 plan_id = 5;
  if (has_plan_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->plan_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.zhichenhaixin.proto.ConstructionInfo)
}

::google::protobuf::uint8* ConstructionInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.zhichenhaixin.proto.ConstructionInfo)
  // required bool isContructed = 1;
  if (has_iscontructed()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->iscontructed(), target);
  }

  // required string host_name = 2;
  if (has_host_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->host_name().data(), this->host_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "host_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->host_name(), target);
  }

  // required int32 project_id = 3;
  if (has_project_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->project_id(), target);
  }

  // required int32 route_id = 4;
  if (has_route_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->route_id(), target);
  }

  // required int32 plan_id = 5;
  if (has_plan_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->plan_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.zhichenhaixin.proto.ConstructionInfo)
  return target;
}

int ConstructionInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bool isContructed = 1;
    if (has_iscontructed()) {
      total_size += 1 + 1;
    }

    // required string host_name = 2;
    if (has_host_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->host_name());
    }

    // required int32 project_id = 3;
    if (has_project_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->project_id());
    }

    // required int32 route_id = 4;
    if (has_route_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->route_id());
    }

    // required int32 plan_id = 5;
    if (has_plan_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->plan_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ConstructionInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ConstructionInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ConstructionInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ConstructionInfo::MergeFrom(const ConstructionInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_iscontructed()) {
      set_iscontructed(from.iscontructed());
    }
    if (from.has_host_name()) {
      set_host_name(from.host_name());
    }
    if (from.has_project_id()) {
      set_project_id(from.project_id());
    }
    if (from.has_route_id()) {
      set_route_id(from.route_id());
    }
    if (from.has_plan_id()) {
      set_plan_id(from.plan_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ConstructionInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ConstructionInfo::CopyFrom(const ConstructionInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConstructionInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;

  return true;
}

void ConstructionInfo::Swap(ConstructionInfo* other) {
  if (other != this) {
    std::swap(iscontructed_, other->iscontructed_);
    std::swap(host_name_, other->host_name_);
    std::swap(project_id_, other->project_id_);
    std::swap(route_id_, other->route_id_);
    std::swap(plan_id_, other->plan_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ConstructionInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ConstructionInfo_descriptor_;
  metadata.reflection = ConstructionInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DevInfo::kShipInfoFieldNumber;
const int DevInfo::kPlowInfoFieldNumber;
const int DevInfo::kLayInfoFieldNumber;
const int DevInfo::kSurface4017FieldNumber;
const int DevInfo::kUnder4017FieldNumber;
const int DevInfo::kSurfaceHmr3000CheckedFlgFieldNumber;
const int DevInfo::kUnderHmr3000CheckedFlgFieldNumber;
const int DevInfo::kGspCheckedFlgFieldNumber;
const int DevInfo::kUsblCheckedFlgFieldNumber;
const int DevInfo::kSurface4017CheckedFlgFieldNumber;
const int DevInfo::kUnder4017CheckedFlgFieldNumber;
const int DevInfo::kMetercounterCheckedFlgFieldNumber;
const int DevInfo::kNaviDeviceCheckedFlgFieldNumber;
const int DevInfo::kCableIntegratedCheckedFlgFieldNumber;
const int DevInfo::kDpCheckedFlgFieldNumber;
const int DevInfo::kConstructInfoFieldNumber;
#endif  // !_MSC_VER

DevInfo::DevInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.zhichenhaixin.proto.DevInfo)
}

void DevInfo::InitAsDefaultInstance() {
  ship_info_ = const_cast< ::com::zhichenhaixin::proto::ShipInfo*>(&::com::zhichenhaixin::proto::ShipInfo::default_instance());
  plow_info_ = const_cast< ::com::zhichenhaixin::proto::PlowInfo*>(&::com::zhichenhaixin::proto::PlowInfo::default_instance());
  lay_info_ = const_cast< ::com::zhichenhaixin::proto::LayInfo*>(&::com::zhichenhaixin::proto::LayInfo::default_instance());
  surface_4017_ = const_cast< ::com::zhichenhaixin::proto::Surface4017Data*>(&::com::zhichenhaixin::proto::Surface4017Data::default_instance());
  under_4017_ = const_cast< ::com::zhichenhaixin::proto::UnderWater4017Data*>(&::com::zhichenhaixin::proto::UnderWater4017Data::default_instance());
  construct_info_ = const_cast< ::com::zhichenhaixin::proto::ConstructionInfo*>(&::com::zhichenhaixin::proto::ConstructionInfo::default_instance());
}

DevInfo::DevInfo(const DevInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:com.zhichenhaixin.proto.DevInfo)
}

void DevInfo::SharedCtor() {
  _cached_size_ = 0;
  ship_info_ = NULL;
  plow_info_ = NULL;
  lay_info_ = NULL;
  surface_4017_ = NULL;
  under_4017_ = NULL;
  surface_hmr3000_checked_flg_ = false;
  under_hmr3000_checked_flg_ = false;
  gsp_checked_flg_ = false;
  usbl_checked_flg_ = false;
  surface_4017_checked_flg_ = false;
  under_4017_checked_flg_ = false;
  metercounter_checked_flg_ = false;
  navi_device_checked_flg_ = false;
  cable_integrated_checked_flg_ = false;
  dp_checked_flg_ = false;
  construct_info_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DevInfo::~DevInfo() {
  // @@protoc_insertion_point(destructor:com.zhichenhaixin.proto.DevInfo)
  SharedDtor();
}

void DevInfo::SharedDtor() {
  if (this != default_instance_) {
    delete ship_info_;
    delete plow_info_;
    delete lay_info_;
    delete surface_4017_;
    delete under_4017_;
    delete construct_info_;
  }
}

void DevInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DevInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DevInfo_descriptor_;
}

const DevInfo& DevInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SCCMMSComData_2eproto();
  return *default_instance_;
}

DevInfo* DevInfo::default_instance_ = NULL;

DevInfo* DevInfo::New() const {
  return new DevInfo;
}

void DevInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<DevInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(surface_hmr3000_checked_flg_, gsp_checked_flg_);
    if (has_ship_info()) {
      if (ship_info_ != NULL) ship_info_->::com::zhichenhaixin::proto::ShipInfo::Clear();
    }
    if (has_plow_info()) {
      if (plow_info_ != NULL) plow_info_->::com::zhichenhaixin::proto::PlowInfo::Clear();
    }
    if (has_lay_info()) {
      if (lay_info_ != NULL) lay_info_->::com::zhichenhaixin::proto::LayInfo::Clear();
    }
    if (has_surface_4017()) {
      if (surface_4017_ != NULL) surface_4017_->::com::zhichenhaixin::proto::Surface4017Data::Clear();
    }
    if (has_under_4017()) {
      if (under_4017_ != NULL) under_4017_->::com::zhichenhaixin::proto::UnderWater4017Data::Clear();
    }
  }
  if (_has_bits_[8 / 32] & 65280) {
    ZR_(usbl_checked_flg_, navi_device_checked_flg_);
    ZR_(cable_integrated_checked_flg_, dp_checked_flg_);
    if (has_construct_info()) {
      if (construct_info_ != NULL) construct_info_->::com::zhichenhaixin::proto::ConstructionInfo::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DevInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.zhichenhaixin.proto.DevInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .com.zhichenhaixin.proto.ShipInfo ship_info = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_ship_info()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_plow_info;
        break;
      }

      // required .com.zhichenhaixin.proto.PlowInfo plow_info = 2;
      case 2: {
        if (tag == 18) {
         parse_plow_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_plow_info()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_lay_info;
        break;
      }

      // required .com.zhichenhaixin.proto.LayInfo lay_info = 3;
      case 3: {
        if (tag == 26) {
         parse_lay_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_lay_info()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_surface_4017;
        break;
      }

      // required .com.zhichenhaixin.proto.Surface4017Data surface_4017 = 4;
      case 4: {
        if (tag == 34) {
         parse_surface_4017:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_surface_4017()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_under_4017;
        break;
      }

      // required .com.zhichenhaixin.proto.UnderWater4017Data under_4017 = 5;
      case 5: {
        if (tag == 42) {
         parse_under_4017:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_under_4017()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_surface_hmr3000_checked_flg;
        break;
      }

      // required bool surface_hmr3000_checked_flg = 6;
      case 6: {
        if (tag == 48) {
         parse_surface_hmr3000_checked_flg:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &surface_hmr3000_checked_flg_)));
          set_has_surface_hmr3000_checked_flg();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_under_hmr3000_checked_flg;
        break;
      }

      // required bool under_hmr3000_checked_flg = 7;
      case 7: {
        if (tag == 56) {
         parse_under_hmr3000_checked_flg:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &under_hmr3000_checked_flg_)));
          set_has_under_hmr3000_checked_flg();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_gsp_checked_flg;
        break;
      }

      // required bool gsp_checked_flg = 8;
      case 8: {
        if (tag == 64) {
         parse_gsp_checked_flg:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &gsp_checked_flg_)));
          set_has_gsp_checked_flg();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_usbl_checked_flg;
        break;
      }

      // required bool usbl_checked_flg = 9;
      case 9: {
        if (tag == 72) {
         parse_usbl_checked_flg:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &usbl_checked_flg_)));
          set_has_usbl_checked_flg();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_surface_4017_checked_flg;
        break;
      }

      // required bool surface_4017_checked_flg = 10;
      case 10: {
        if (tag == 80) {
         parse_surface_4017_checked_flg:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &surface_4017_checked_flg_)));
          set_has_surface_4017_checked_flg();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_under_4017_checked_flg;
        break;
      }

      // required bool under_4017_checked_flg = 11;
      case 11: {
        if (tag == 88) {
         parse_under_4017_checked_flg:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &under_4017_checked_flg_)));
          set_has_under_4017_checked_flg();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(96)) goto parse_metercounter_checked_flg;
        break;
      }

      // required bool metercounter_checked_flg = 12;
      case 12: {
        if (tag == 96) {
         parse_metercounter_checked_flg:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &metercounter_checked_flg_)));
          set_has_metercounter_checked_flg();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(104)) goto parse_navi_device_checked_flg;
        break;
      }

      // required bool navi_device_checked_flg = 13;
      case 13: {
        if (tag == 104) {
         parse_navi_device_checked_flg:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &navi_device_checked_flg_)));
          set_has_navi_device_checked_flg();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(112)) goto parse_cable_integrated_checked_flg;
        break;
      }

      // required bool cable_integrated_checked_flg = 14;
      case 14: {
        if (tag == 112) {
         parse_cable_integrated_checked_flg:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &cable_integrated_checked_flg_)));
          set_has_cable_integrated_checked_flg();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(120)) goto parse_dp_checked_flg;
        break;
      }

      // required bool dp_checked_flg = 15;
      case 15: {
        if (tag == 120) {
         parse_dp_checked_flg:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &dp_checked_flg_)));
          set_has_dp_checked_flg();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(130)) goto parse_construct_info;
        break;
      }

      // required .com.zhichenhaixin.proto.ConstructionInfo construct_info = 16;
      case 16: {
        if (tag == 130) {
         parse_construct_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_construct_info()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.zhichenhaixin.proto.DevInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.zhichenhaixin.proto.DevInfo)
  return false;
#undef DO_
}

void DevInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.zhichenhaixin.proto.DevInfo)
  // required .com.zhichenhaixin.proto.ShipInfo ship_info = 1;
  if (has_ship_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->ship_info(), output);
  }

  // required .com.zhichenhaixin.proto.PlowInfo plow_info = 2;
  if (has_plow_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->plow_info(), output);
  }

  // required .com.zhichenhaixin.proto.LayInfo lay_info = 3;
  if (has_lay_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->lay_info(), output);
  }

  // required .com.zhichenhaixin.proto.Surface4017Data surface_4017 = 4;
  if (has_surface_4017()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->surface_4017(), output);
  }

  // required .com.zhichenhaixin.proto.UnderWater4017Data under_4017 = 5;
  if (has_under_4017()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->under_4017(), output);
  }

  // required bool surface_hmr3000_checked_flg = 6;
  if (has_surface_hmr3000_checked_flg()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->surface_hmr3000_checked_flg(), output);
  }

  // required bool under_hmr3000_checked_flg = 7;
  if (has_under_hmr3000_checked_flg()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->under_hmr3000_checked_flg(), output);
  }

  // required bool gsp_checked_flg = 8;
  if (has_gsp_checked_flg()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(8, this->gsp_checked_flg(), output);
  }

  // required bool usbl_checked_flg = 9;
  if (has_usbl_checked_flg()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(9, this->usbl_checked_flg(), output);
  }

  // required bool surface_4017_checked_flg = 10;
  if (has_surface_4017_checked_flg()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(10, this->surface_4017_checked_flg(), output);
  }

  // required bool under_4017_checked_flg = 11;
  if (has_under_4017_checked_flg()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(11, this->under_4017_checked_flg(), output);
  }

  // required bool metercounter_checked_flg = 12;
  if (has_metercounter_checked_flg()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(12, this->metercounter_checked_flg(), output);
  }

  // required bool navi_device_checked_flg = 13;
  if (has_navi_device_checked_flg()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(13, this->navi_device_checked_flg(), output);
  }

  // required bool cable_integrated_checked_flg = 14;
  if (has_cable_integrated_checked_flg()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(14, this->cable_integrated_checked_flg(), output);
  }

  // required bool dp_checked_flg = 15;
  if (has_dp_checked_flg()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(15, this->dp_checked_flg(), output);
  }

  // required .com.zhichenhaixin.proto.ConstructionInfo construct_info = 16;
  if (has_construct_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      16, this->construct_info(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.zhichenhaixin.proto.DevInfo)
}

::google::protobuf::uint8* DevInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.zhichenhaixin.proto.DevInfo)
  // required .com.zhichenhaixin.proto.ShipInfo ship_info = 1;
  if (has_ship_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->ship_info(), target);
  }

  // required .com.zhichenhaixin.proto.PlowInfo plow_info = 2;
  if (has_plow_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->plow_info(), target);
  }

  // required .com.zhichenhaixin.proto.LayInfo lay_info = 3;
  if (has_lay_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->lay_info(), target);
  }

  // required .com.zhichenhaixin.proto.Surface4017Data surface_4017 = 4;
  if (has_surface_4017()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->surface_4017(), target);
  }

  // required .com.zhichenhaixin.proto.UnderWater4017Data under_4017 = 5;
  if (has_under_4017()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->under_4017(), target);
  }

  // required bool surface_hmr3000_checked_flg = 6;
  if (has_surface_hmr3000_checked_flg()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->surface_hmr3000_checked_flg(), target);
  }

  // required bool under_hmr3000_checked_flg = 7;
  if (has_under_hmr3000_checked_flg()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->under_hmr3000_checked_flg(), target);
  }

  // required bool gsp_checked_flg = 8;
  if (has_gsp_checked_flg()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(8, this->gsp_checked_flg(), target);
  }

  // required bool usbl_checked_flg = 9;
  if (has_usbl_checked_flg()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(9, this->usbl_checked_flg(), target);
  }

  // required bool surface_4017_checked_flg = 10;
  if (has_surface_4017_checked_flg()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(10, this->surface_4017_checked_flg(), target);
  }

  // required bool under_4017_checked_flg = 11;
  if (has_under_4017_checked_flg()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(11, this->under_4017_checked_flg(), target);
  }

  // required bool metercounter_checked_flg = 12;
  if (has_metercounter_checked_flg()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(12, this->metercounter_checked_flg(), target);
  }

  // required bool navi_device_checked_flg = 13;
  if (has_navi_device_checked_flg()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(13, this->navi_device_checked_flg(), target);
  }

  // required bool cable_integrated_checked_flg = 14;
  if (has_cable_integrated_checked_flg()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(14, this->cable_integrated_checked_flg(), target);
  }

  // required bool dp_checked_flg = 15;
  if (has_dp_checked_flg()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(15, this->dp_checked_flg(), target);
  }

  // required .com.zhichenhaixin.proto.ConstructionInfo construct_info = 16;
  if (has_construct_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        16, this->construct_info(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.zhichenhaixin.proto.DevInfo)
  return target;
}

int DevInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .com.zhichenhaixin.proto.ShipInfo ship_info = 1;
    if (has_ship_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->ship_info());
    }

    // required .com.zhichenhaixin.proto.PlowInfo plow_info = 2;
    if (has_plow_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->plow_info());
    }

    // required .com.zhichenhaixin.proto.LayInfo lay_info = 3;
    if (has_lay_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->lay_info());
    }

    // required .com.zhichenhaixin.proto.Surface4017Data surface_4017 = 4;
    if (has_surface_4017()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->surface_4017());
    }

    // required .com.zhichenhaixin.proto.UnderWater4017Data under_4017 = 5;
    if (has_under_4017()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->under_4017());
    }

    // required bool surface_hmr3000_checked_flg = 6;
    if (has_surface_hmr3000_checked_flg()) {
      total_size += 1 + 1;
    }

    // required bool under_hmr3000_checked_flg = 7;
    if (has_under_hmr3000_checked_flg()) {
      total_size += 1 + 1;
    }

    // required bool gsp_checked_flg = 8;
    if (has_gsp_checked_flg()) {
      total_size += 1 + 1;
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required bool usbl_checked_flg = 9;
    if (has_usbl_checked_flg()) {
      total_size += 1 + 1;
    }

    // required bool surface_4017_checked_flg = 10;
    if (has_surface_4017_checked_flg()) {
      total_size += 1 + 1;
    }

    // required bool under_4017_checked_flg = 11;
    if (has_under_4017_checked_flg()) {
      total_size += 1 + 1;
    }

    // required bool metercounter_checked_flg = 12;
    if (has_metercounter_checked_flg()) {
      total_size += 1 + 1;
    }

    // required bool navi_device_checked_flg = 13;
    if (has_navi_device_checked_flg()) {
      total_size += 1 + 1;
    }

    // required bool cable_integrated_checked_flg = 14;
    if (has_cable_integrated_checked_flg()) {
      total_size += 1 + 1;
    }

    // required bool dp_checked_flg = 15;
    if (has_dp_checked_flg()) {
      total_size += 1 + 1;
    }

    // required .com.zhichenhaixin.proto.ConstructionInfo construct_info = 16;
    if (has_construct_info()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->construct_info());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DevInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DevInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DevInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DevInfo::MergeFrom(const DevInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ship_info()) {
      mutable_ship_info()->::com::zhichenhaixin::proto::ShipInfo::MergeFrom(from.ship_info());
    }
    if (from.has_plow_info()) {
      mutable_plow_info()->::com::zhichenhaixin::proto::PlowInfo::MergeFrom(from.plow_info());
    }
    if (from.has_lay_info()) {
      mutable_lay_info()->::com::zhichenhaixin::proto::LayInfo::MergeFrom(from.lay_info());
    }
    if (from.has_surface_4017()) {
      mutable_surface_4017()->::com::zhichenhaixin::proto::Surface4017Data::MergeFrom(from.surface_4017());
    }
    if (from.has_under_4017()) {
      mutable_under_4017()->::com::zhichenhaixin::proto::UnderWater4017Data::MergeFrom(from.under_4017());
    }
    if (from.has_surface_hmr3000_checked_flg()) {
      set_surface_hmr3000_checked_flg(from.surface_hmr3000_checked_flg());
    }
    if (from.has_under_hmr3000_checked_flg()) {
      set_under_hmr3000_checked_flg(from.under_hmr3000_checked_flg());
    }
    if (from.has_gsp_checked_flg()) {
      set_gsp_checked_flg(from.gsp_checked_flg());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_usbl_checked_flg()) {
      set_usbl_checked_flg(from.usbl_checked_flg());
    }
    if (from.has_surface_4017_checked_flg()) {
      set_surface_4017_checked_flg(from.surface_4017_checked_flg());
    }
    if (from.has_under_4017_checked_flg()) {
      set_under_4017_checked_flg(from.under_4017_checked_flg());
    }
    if (from.has_metercounter_checked_flg()) {
      set_metercounter_checked_flg(from.metercounter_checked_flg());
    }
    if (from.has_navi_device_checked_flg()) {
      set_navi_device_checked_flg(from.navi_device_checked_flg());
    }
    if (from.has_cable_integrated_checked_flg()) {
      set_cable_integrated_checked_flg(from.cable_integrated_checked_flg());
    }
    if (from.has_dp_checked_flg()) {
      set_dp_checked_flg(from.dp_checked_flg());
    }
    if (from.has_construct_info()) {
      mutable_construct_info()->::com::zhichenhaixin::proto::ConstructionInfo::MergeFrom(from.construct_info());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DevInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DevInfo::CopyFrom(const DevInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DevInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000ffff) != 0x0000ffff) return false;

  if (has_ship_info()) {
    if (!this->ship_info().IsInitialized()) return false;
  }
  if (has_plow_info()) {
    if (!this->plow_info().IsInitialized()) return false;
  }
  if (has_lay_info()) {
    if (!this->lay_info().IsInitialized()) return false;
  }
  if (has_surface_4017()) {
    if (!this->surface_4017().IsInitialized()) return false;
  }
  if (has_under_4017()) {
    if (!this->under_4017().IsInitialized()) return false;
  }
  if (has_construct_info()) {
    if (!this->construct_info().IsInitialized()) return false;
  }
  return true;
}

void DevInfo::Swap(DevInfo* other) {
  if (other != this) {
    std::swap(ship_info_, other->ship_info_);
    std::swap(plow_info_, other->plow_info_);
    std::swap(lay_info_, other->lay_info_);
    std::swap(surface_4017_, other->surface_4017_);
    std::swap(under_4017_, other->under_4017_);
    std::swap(surface_hmr3000_checked_flg_, other->surface_hmr3000_checked_flg_);
    std::swap(under_hmr3000_checked_flg_, other->under_hmr3000_checked_flg_);
    std::swap(gsp_checked_flg_, other->gsp_checked_flg_);
    std::swap(usbl_checked_flg_, other->usbl_checked_flg_);
    std::swap(surface_4017_checked_flg_, other->surface_4017_checked_flg_);
    std::swap(under_4017_checked_flg_, other->under_4017_checked_flg_);
    std::swap(metercounter_checked_flg_, other->metercounter_checked_flg_);
    std::swap(navi_device_checked_flg_, other->navi_device_checked_flg_);
    std::swap(cable_integrated_checked_flg_, other->cable_integrated_checked_flg_);
    std::swap(dp_checked_flg_, other->dp_checked_flg_);
    std::swap(construct_info_, other->construct_info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DevInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DevInfo_descriptor_;
  metadata.reflection = DevInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PMASNS::kDateFieldNumber;
const int PMASNS::kTimeFieldNumber;
const int PMASNS::kGyro1StsFieldNumber;
const int PMASNS::kHeading1FieldNumber;
const int PMASNS::kGyro2StsFieldNumber;
const int PMASNS::kHeading2FieldNumber;
const int PMASNS::kGyro3StsFieldNumber;
const int PMASNS::kHeading3FieldNumber;
const int PMASNS::kMru1StsFieldNumber;
const int PMASNS::kPitch1FieldNumber;
const int PMASNS::kRoll1FieldNumber;
const int PMASNS::kHeave1FieldNumber;
const int PMASNS::kMru2StsFieldNumber;
const int PMASNS::kPitch2FieldNumber;
const int PMASNS::kRoll2FieldNumber;
const int PMASNS::kHeave2FieldNumber;
const int PMASNS::kWind1StsFieldNumber;
const int PMASNS::kSpeed1FieldNumber;
const int PMASNS::kSpeedDir1FieldNumber;
const int PMASNS::kWind2StsFieldNumber;
const int PMASNS::kSpeed2FieldNumber;
const int PMASNS::kSpeedDir2FieldNumber;
#endif  // !_MSC_VER

PMASNS::PMASNS()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.zhichenhaixin.proto.PMASNS)
}

void PMASNS::InitAsDefaultInstance() {
}

PMASNS::PMASNS(const PMASNS& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:com.zhichenhaixin.proto.PMASNS)
}

void PMASNS::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  date_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  time_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  gyro1_sts_ = 0;
  heading1_ = 0;
  gyro2_sts_ = 0;
  heading2_ = 0;
  gyro3_sts_ = 0;
  heading3_ = 0;
  mru1_sts_ = 0;
  pitch1_ = 0;
  roll1_ = 0;
  heave1_ = 0;
  mru2_sts_ = 0;
  pitch2_ = 0;
  roll2_ = 0;
  heave2_ = 0;
  wind1_sts_ = 0;
  speed1_ = 0;
  speed_dir1_ = 0;
  wind2_sts_ = 0;
  speed2_ = 0;
  speed_dir2_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PMASNS::~PMASNS() {
  // @@protoc_insertion_point(destructor:com.zhichenhaixin.proto.PMASNS)
  SharedDtor();
}

void PMASNS::SharedDtor() {
  if (date_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete date_;
  }
  if (time_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete time_;
  }
  if (this != default_instance_) {
  }
}

void PMASNS::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PMASNS::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PMASNS_descriptor_;
}

const PMASNS& PMASNS::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SCCMMSComData_2eproto();
  return *default_instance_;
}

PMASNS* PMASNS::default_instance_ = NULL;

PMASNS* PMASNS::New() const {
  return new PMASNS;
}

void PMASNS::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<PMASNS*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(heading1_, gyro3_sts_);
    if (has_date()) {
      if (date_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        date_->clear();
      }
    }
    if (has_time()) {
      if (time_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        time_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & 65280) {
    ZR_(mru1_sts_, roll2_);
  }
  if (_has_bits_[16 / 32] & 4128768) {
    ZR_(wind1_sts_, speed_dir2_);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PMASNS::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.zhichenhaixin.proto.PMASNS)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string date = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_date()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->date().data(), this->date().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "date");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_time;
        break;
      }

      // required string time = 2;
      case 2: {
        if (tag == 18) {
         parse_time:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_time()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->time().data(), this->time().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "time");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_gyro1_sts;
        break;
      }

      // required int32 gyro1_sts = 3;
      case 3: {
        if (tag == 24) {
         parse_gyro1_sts:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gyro1_sts_)));
          set_has_gyro1_sts();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(33)) goto parse_heading1;
        break;
      }

      // required double heading1 = 4;
      case 4: {
        if (tag == 33) {
         parse_heading1:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &heading1_)));
          set_has_heading1();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_gyro2_sts;
        break;
      }

      // required int32 gyro2_sts = 5;
      case 5: {
        if (tag == 40) {
         parse_gyro2_sts:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gyro2_sts_)));
          set_has_gyro2_sts();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(49)) goto parse_heading2;
        break;
      }

      // required double heading2 = 6;
      case 6: {
        if (tag == 49) {
         parse_heading2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &heading2_)));
          set_has_heading2();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_gyro3_sts;
        break;
      }

      // required int32 gyro3_sts = 7;
      case 7: {
        if (tag == 56) {
         parse_gyro3_sts:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gyro3_sts_)));
          set_has_gyro3_sts();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(65)) goto parse_heading3;
        break;
      }

      // required double heading3 = 8;
      case 8: {
        if (tag == 65) {
         parse_heading3:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &heading3_)));
          set_has_heading3();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_mru1_sts;
        break;
      }

      // required int32 mru1_sts = 9;
      case 9: {
        if (tag == 72) {
         parse_mru1_sts:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mru1_sts_)));
          set_has_mru1_sts();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(81)) goto parse_pitch1;
        break;
      }

      // required double pitch1 = 10;
      case 10: {
        if (tag == 81) {
         parse_pitch1:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &pitch1_)));
          set_has_pitch1();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_roll1;
        break;
      }

      // required int32 roll1 = 11;
      case 11: {
        if (tag == 88) {
         parse_roll1:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &roll1_)));
          set_has_roll1();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(97)) goto parse_heave1;
        break;
      }

      // required double heave1 = 12;
      case 12: {
        if (tag == 97) {
         parse_heave1:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &heave1_)));
          set_has_heave1();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(104)) goto parse_mru2_sts;
        break;
      }

      // required int32 mru2_sts = 13;
      case 13: {
        if (tag == 104) {
         parse_mru2_sts:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mru2_sts_)));
          set_has_mru2_sts();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(113)) goto parse_pitch2;
        break;
      }

      // required double pitch2 = 14;
      case 14: {
        if (tag == 113) {
         parse_pitch2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &pitch2_)));
          set_has_pitch2();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(120)) goto parse_roll2;
        break;
      }

      // required int32 roll2 = 15;
      case 15: {
        if (tag == 120) {
         parse_roll2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &roll2_)));
          set_has_roll2();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(129)) goto parse_heave2;
        break;
      }

      // required double heave2 = 16;
      case 16: {
        if (tag == 129) {
         parse_heave2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &heave2_)));
          set_has_heave2();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(136)) goto parse_wind1_sts;
        break;
      }

      // required int32 wind1_sts = 17;
      case 17: {
        if (tag == 136) {
         parse_wind1_sts:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &wind1_sts_)));
          set_has_wind1_sts();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(145)) goto parse_speed1;
        break;
      }

      // required double speed1 = 18;
      case 18: {
        if (tag == 145) {
         parse_speed1:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &speed1_)));
          set_has_speed1();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(152)) goto parse_speed_dir1;
        break;
      }

      // required int32 speed_dir1 = 19;
      case 19: {
        if (tag == 152) {
         parse_speed_dir1:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &speed_dir1_)));
          set_has_speed_dir1();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(161)) goto parse_wind2_sts;
        break;
      }

      // required double wind2_sts = 20;
      case 20: {
        if (tag == 161) {
         parse_wind2_sts:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &wind2_sts_)));
          set_has_wind2_sts();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(168)) goto parse_speed2;
        break;
      }

      // required int32 speed2 = 21;
      case 21: {
        if (tag == 168) {
         parse_speed2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &speed2_)));
          set_has_speed2();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(177)) goto parse_speed_dir2;
        break;
      }

      // required double speed_dir2 = 22;
      case 22: {
        if (tag == 177) {
         parse_speed_dir2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &speed_dir2_)));
          set_has_speed_dir2();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.zhichenhaixin.proto.PMASNS)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.zhichenhaixin.proto.PMASNS)
  return false;
#undef DO_
}

void PMASNS::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.zhichenhaixin.proto.PMASNS)
  // required string date = 1;
  if (has_date()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->date().data(), this->date().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "date");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->date(), output);
  }

  // required string time = 2;
  if (has_time()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->time().data(), this->time().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "time");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->time(), output);
  }

  // required int32 gyro1_sts = 3;
  if (has_gyro1_sts()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->gyro1_sts(), output);
  }

  // required double heading1 = 4;
  if (has_heading1()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->heading1(), output);
  }

  // required int32 gyro2_sts = 5;
  if (has_gyro2_sts()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->gyro2_sts(), output);
  }

  // required double heading2 = 6;
  if (has_heading2()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->heading2(), output);
  }

  // required int32 gyro3_sts = 7;
  if (has_gyro3_sts()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->gyro3_sts(), output);
  }

  // required double heading3 = 8;
  if (has_heading3()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(8, this->heading3(), output);
  }

  // required int32 mru1_sts = 9;
  if (has_mru1_sts()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->mru1_sts(), output);
  }

  // required double pitch1 = 10;
  if (has_pitch1()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(10, this->pitch1(), output);
  }

  // required int32 roll1 = 11;
  if (has_roll1()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->roll1(), output);
  }

  // required double heave1 = 12;
  if (has_heave1()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(12, this->heave1(), output);
  }

  // required int32 mru2_sts = 13;
  if (has_mru2_sts()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->mru2_sts(), output);
  }

  // required double pitch2 = 14;
  if (has_pitch2()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(14, this->pitch2(), output);
  }

  // required int32 roll2 = 15;
  if (has_roll2()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(15, this->roll2(), output);
  }

  // required double heave2 = 16;
  if (has_heave2()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(16, this->heave2(), output);
  }

  // required int32 wind1_sts = 17;
  if (has_wind1_sts()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(17, this->wind1_sts(), output);
  }

  // required double speed1 = 18;
  if (has_speed1()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(18, this->speed1(), output);
  }

  // required int32 speed_dir1 = 19;
  if (has_speed_dir1()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(19, this->speed_dir1(), output);
  }

  // required double wind2_sts = 20;
  if (has_wind2_sts()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(20, this->wind2_sts(), output);
  }

  // required int32 speed2 = 21;
  if (has_speed2()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(21, this->speed2(), output);
  }

  // required double speed_dir2 = 22;
  if (has_speed_dir2()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(22, this->speed_dir2(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.zhichenhaixin.proto.PMASNS)
}

::google::protobuf::uint8* PMASNS::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.zhichenhaixin.proto.PMASNS)
  // required string date = 1;
  if (has_date()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->date().data(), this->date().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "date");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->date(), target);
  }

  // required string time = 2;
  if (has_time()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->time().data(), this->time().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "time");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->time(), target);
  }

  // required int32 gyro1_sts = 3;
  if (has_gyro1_sts()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->gyro1_sts(), target);
  }

  // required double heading1 = 4;
  if (has_heading1()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->heading1(), target);
  }

  // required int32 gyro2_sts = 5;
  if (has_gyro2_sts()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->gyro2_sts(), target);
  }

  // required double heading2 = 6;
  if (has_heading2()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->heading2(), target);
  }

  // required int32 gyro3_sts = 7;
  if (has_gyro3_sts()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->gyro3_sts(), target);
  }

  // required double heading3 = 8;
  if (has_heading3()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(8, this->heading3(), target);
  }

  // required int32 mru1_sts = 9;
  if (has_mru1_sts()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->mru1_sts(), target);
  }

  // required double pitch1 = 10;
  if (has_pitch1()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(10, this->pitch1(), target);
  }

  // required int32 roll1 = 11;
  if (has_roll1()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->roll1(), target);
  }

  // required double heave1 = 12;
  if (has_heave1()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(12, this->heave1(), target);
  }

  // required int32 mru2_sts = 13;
  if (has_mru2_sts()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->mru2_sts(), target);
  }

  // required double pitch2 = 14;
  if (has_pitch2()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(14, this->pitch2(), target);
  }

  // required int32 roll2 = 15;
  if (has_roll2()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(15, this->roll2(), target);
  }

  // required double heave2 = 16;
  if (has_heave2()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(16, this->heave2(), target);
  }

  // required int32 wind1_sts = 17;
  if (has_wind1_sts()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(17, this->wind1_sts(), target);
  }

  // required double speed1 = 18;
  if (has_speed1()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(18, this->speed1(), target);
  }

  // required int32 speed_dir1 = 19;
  if (has_speed_dir1()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(19, this->speed_dir1(), target);
  }

  // required double wind2_sts = 20;
  if (has_wind2_sts()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(20, this->wind2_sts(), target);
  }

  // required int32 speed2 = 21;
  if (has_speed2()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(21, this->speed2(), target);
  }

  // required double speed_dir2 = 22;
  if (has_speed_dir2()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(22, this->speed_dir2(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.zhichenhaixin.proto.PMASNS)
  return target;
}

int PMASNS::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string date = 1;
    if (has_date()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->date());
    }

    // required string time = 2;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->time());
    }

    // required int32 gyro1_sts = 3;
    if (has_gyro1_sts()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gyro1_sts());
    }

    // required double heading1 = 4;
    if (has_heading1()) {
      total_size += 1 + 8;
    }

    // required int32 gyro2_sts = 5;
    if (has_gyro2_sts()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gyro2_sts());
    }

    // required double heading2 = 6;
    if (has_heading2()) {
      total_size += 1 + 8;
    }

    // required int32 gyro3_sts = 7;
    if (has_gyro3_sts()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gyro3_sts());
    }

    // required double heading3 = 8;
    if (has_heading3()) {
      total_size += 1 + 8;
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required int32 mru1_sts = 9;
    if (has_mru1_sts()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->mru1_sts());
    }

    // required double pitch1 = 10;
    if (has_pitch1()) {
      total_size += 1 + 8;
    }

    // required int32 roll1 = 11;
    if (has_roll1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->roll1());
    }

    // required double heave1 = 12;
    if (has_heave1()) {
      total_size += 1 + 8;
    }

    // required int32 mru2_sts = 13;
    if (has_mru2_sts()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->mru2_sts());
    }

    // required double pitch2 = 14;
    if (has_pitch2()) {
      total_size += 1 + 8;
    }

    // required int32 roll2 = 15;
    if (has_roll2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->roll2());
    }

    // required double heave2 = 16;
    if (has_heave2()) {
      total_size += 2 + 8;
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // required int32 wind1_sts = 17;
    if (has_wind1_sts()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->wind1_sts());
    }

    // required double speed1 = 18;
    if (has_speed1()) {
      total_size += 2 + 8;
    }

    // required int32 speed_dir1 = 19;
    if (has_speed_dir1()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->speed_dir1());
    }

    // required double wind2_sts = 20;
    if (has_wind2_sts()) {
      total_size += 2 + 8;
    }

    // required int32 speed2 = 21;
    if (has_speed2()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->speed2());
    }

    // required double speed_dir2 = 22;
    if (has_speed_dir2()) {
      total_size += 2 + 8;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PMASNS::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PMASNS* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PMASNS*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PMASNS::MergeFrom(const PMASNS& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_date()) {
      set_date(from.date());
    }
    if (from.has_time()) {
      set_time(from.time());
    }
    if (from.has_gyro1_sts()) {
      set_gyro1_sts(from.gyro1_sts());
    }
    if (from.has_heading1()) {
      set_heading1(from.heading1());
    }
    if (from.has_gyro2_sts()) {
      set_gyro2_sts(from.gyro2_sts());
    }
    if (from.has_heading2()) {
      set_heading2(from.heading2());
    }
    if (from.has_gyro3_sts()) {
      set_gyro3_sts(from.gyro3_sts());
    }
    if (from.has_heading3()) {
      set_heading3(from.heading3());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_mru1_sts()) {
      set_mru1_sts(from.mru1_sts());
    }
    if (from.has_pitch1()) {
      set_pitch1(from.pitch1());
    }
    if (from.has_roll1()) {
      set_roll1(from.roll1());
    }
    if (from.has_heave1()) {
      set_heave1(from.heave1());
    }
    if (from.has_mru2_sts()) {
      set_mru2_sts(from.mru2_sts());
    }
    if (from.has_pitch2()) {
      set_pitch2(from.pitch2());
    }
    if (from.has_roll2()) {
      set_roll2(from.roll2());
    }
    if (from.has_heave2()) {
      set_heave2(from.heave2());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_wind1_sts()) {
      set_wind1_sts(from.wind1_sts());
    }
    if (from.has_speed1()) {
      set_speed1(from.speed1());
    }
    if (from.has_speed_dir1()) {
      set_speed_dir1(from.speed_dir1());
    }
    if (from.has_wind2_sts()) {
      set_wind2_sts(from.wind2_sts());
    }
    if (from.has_speed2()) {
      set_speed2(from.speed2());
    }
    if (from.has_speed_dir2()) {
      set_speed_dir2(from.speed_dir2());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PMASNS::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PMASNS::CopyFrom(const PMASNS& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PMASNS::IsInitialized() const {
  if ((_has_bits_[0] & 0x003fffff) != 0x003fffff) return false;

  return true;
}

void PMASNS::Swap(PMASNS* other) {
  if (other != this) {
    std::swap(date_, other->date_);
    std::swap(time_, other->time_);
    std::swap(gyro1_sts_, other->gyro1_sts_);
    std::swap(heading1_, other->heading1_);
    std::swap(gyro2_sts_, other->gyro2_sts_);
    std::swap(heading2_, other->heading2_);
    std::swap(gyro3_sts_, other->gyro3_sts_);
    std::swap(heading3_, other->heading3_);
    std::swap(mru1_sts_, other->mru1_sts_);
    std::swap(pitch1_, other->pitch1_);
    std::swap(roll1_, other->roll1_);
    std::swap(heave1_, other->heave1_);
    std::swap(mru2_sts_, other->mru2_sts_);
    std::swap(pitch2_, other->pitch2_);
    std::swap(roll2_, other->roll2_);
    std::swap(heave2_, other->heave2_);
    std::swap(wind1_sts_, other->wind1_sts_);
    std::swap(speed1_, other->speed1_);
    std::swap(speed_dir1_, other->speed_dir1_);
    std::swap(wind2_sts_, other->wind2_sts_);
    std::swap(speed2_, other->speed2_);
    std::swap(speed_dir2_, other->speed_dir2_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PMASNS::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PMASNS_descriptor_;
  metadata.reflection = PMASNS_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PMAGGA::kGpsIdentifierFieldNumber;
const int PMAGGA::kTimeFieldNumber;
const int PMAGGA::kLatFieldNumber;
const int PMAGGA::kLatDirFieldNumber;
const int PMAGGA::kLonFieldNumber;
const int PMAGGA::kLonDirFieldNumber;
const int PMAGGA::kGpsQualifierFieldNumber;
const int PMAGGA::kSatellitesNumberFieldNumber;
const int PMAGGA::kHdopFieldNumber;
const int PMAGGA::kReserve1FieldNumber;
const int PMAGGA::kReserve2FieldNumber;
const int PMAGGA::kReserve3FieldNumber;
const int PMAGGA::kGeoUnitFieldNumber;
const int PMAGGA::kReserve4FieldNumber;
const int PMAGGA::kReserve5FieldNumber;
#endif  // !_MSC_VER

PMAGGA::PMAGGA()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.zhichenhaixin.proto.PMAGGA)
}

void PMAGGA::InitAsDefaultInstance() {
}

PMAGGA::PMAGGA(const PMAGGA& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:com.zhichenhaixin.proto.PMAGGA)
}

void PMAGGA::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  gps_identifier_ = 0;
  time_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  lat_ = 0;
  lat_dir_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  lon_ = 0;
  lon_dir_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  gps_qualifier_ = 0;
  satellites_number_ = 0;
  hdop_ = 0;
  reserve1_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  reserve2_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  reserve3_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  geo_unit_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  reserve4_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  reserve5_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PMAGGA::~PMAGGA() {
  // @@protoc_insertion_point(destructor:com.zhichenhaixin.proto.PMAGGA)
  SharedDtor();
}

void PMAGGA::SharedDtor() {
  if (time_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete time_;
  }
  if (lat_dir_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete lat_dir_;
  }
  if (lon_dir_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete lon_dir_;
  }
  if (reserve1_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete reserve1_;
  }
  if (reserve2_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete reserve2_;
  }
  if (reserve3_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete reserve3_;
  }
  if (geo_unit_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete geo_unit_;
  }
  if (reserve4_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete reserve4_;
  }
  if (reserve5_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete reserve5_;
  }
  if (this != default_instance_) {
  }
}

void PMAGGA::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PMAGGA::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PMAGGA_descriptor_;
}

const PMAGGA& PMAGGA::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SCCMMSComData_2eproto();
  return *default_instance_;
}

PMAGGA* PMAGGA::default_instance_ = NULL;

PMAGGA* PMAGGA::New() const {
  return new PMAGGA;
}

void PMAGGA::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<PMAGGA*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(gps_identifier_, lon_);
    if (has_time()) {
      if (time_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        time_->clear();
      }
    }
    lat_ = 0;
    if (has_lat_dir()) {
      if (lat_dir_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        lat_dir_->clear();
      }
    }
    if (has_lon_dir()) {
      if (lon_dir_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        lon_dir_->clear();
      }
    }
    satellites_number_ = 0;
  }
  if (_has_bits_[8 / 32] & 32512) {
    hdop_ = 0;
    if (has_reserve1()) {
      if (reserve1_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        reserve1_->clear();
      }
    }
    if (has_reserve2()) {
      if (reserve2_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        reserve2_->clear();
      }
    }
    if (has_reserve3()) {
      if (reserve3_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        reserve3_->clear();
      }
    }
    if (has_geo_unit()) {
      if (geo_unit_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        geo_unit_->clear();
      }
    }
    if (has_reserve4()) {
      if (reserve4_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        reserve4_->clear();
      }
    }
    if (has_reserve5()) {
      if (reserve5_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        reserve5_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PMAGGA::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.zhichenhaixin.proto.PMAGGA)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 gps_identifier = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gps_identifier_)));
          set_has_gps_identifier();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_time;
        break;
      }

      // required string time = 2;
      case 2: {
        if (tag == 18) {
         parse_time:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_time()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->time().data(), this->time().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "time");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(25)) goto parse_lat;
        break;
      }

      // required double lat = 3;
      case 3: {
        if (tag == 25) {
         parse_lat:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &lat_)));
          set_has_lat();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_lat_dir;
        break;
      }

      // required string lat_dir = 4;
      case 4: {
        if (tag == 34) {
         parse_lat_dir:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_lat_dir()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->lat_dir().data(), this->lat_dir().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "lat_dir");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(41)) goto parse_lon;
        break;
      }

      // required double lon = 5;
      case 5: {
        if (tag == 41) {
         parse_lon:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &lon_)));
          set_has_lon();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_lon_dir;
        break;
      }

      // required string lon_dir = 6;
      case 6: {
        if (tag == 50) {
         parse_lon_dir:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_lon_dir()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->lon_dir().data(), this->lon_dir().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "lon_dir");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_gps_qualifier;
        break;
      }

      // required int32 gps_qualifier = 7;
      case 7: {
        if (tag == 56) {
         parse_gps_qualifier:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gps_qualifier_)));
          set_has_gps_qualifier();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_satellites_number;
        break;
      }

      // required int32 satellites_number = 8;
      case 8: {
        if (tag == 64) {
         parse_satellites_number:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &satellites_number_)));
          set_has_satellites_number();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(73)) goto parse_hdop;
        break;
      }

      // required double hdop = 9;
      case 9: {
        if (tag == 73) {
         parse_hdop:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &hdop_)));
          set_has_hdop();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_reserve1;
        break;
      }

      // required string reserve1 = 10;
      case 10: {
        if (tag == 82) {
         parse_reserve1:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_reserve1()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->reserve1().data(), this->reserve1().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "reserve1");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(90)) goto parse_reserve2;
        break;
      }

      // required string reserve2 = 11;
      case 11: {
        if (tag == 90) {
         parse_reserve2:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_reserve2()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->reserve2().data(), this->reserve2().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "reserve2");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(98)) goto parse_reserve3;
        break;
      }

      // required string reserve3 = 12;
      case 12: {
        if (tag == 98) {
         parse_reserve3:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_reserve3()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->reserve3().data(), this->reserve3().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "reserve3");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(106)) goto parse_geo_unit;
        break;
      }

      // required string geo_unit = 13;
      case 13: {
        if (tag == 106) {
         parse_geo_unit:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_geo_unit()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->geo_unit().data(), this->geo_unit().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "geo_unit");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(114)) goto parse_reserve4;
        break;
      }

      // required string reserve4 = 14;
      case 14: {
        if (tag == 114) {
         parse_reserve4:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_reserve4()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->reserve4().data(), this->reserve4().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "reserve4");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(122)) goto parse_reserve5;
        break;
      }

      // required string reserve5 = 15;
      case 15: {
        if (tag == 122) {
         parse_reserve5:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_reserve5()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->reserve5().data(), this->reserve5().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "reserve5");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.zhichenhaixin.proto.PMAGGA)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.zhichenhaixin.proto.PMAGGA)
  return false;
#undef DO_
}

void PMAGGA::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.zhichenhaixin.proto.PMAGGA)
  // required int32 gps_identifier = 1;
  if (has_gps_identifier()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->gps_identifier(), output);
  }

  // required string time = 2;
  if (has_time()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->time().data(), this->time().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "time");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->time(), output);
  }

  // required double lat = 3;
  if (has_lat()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->lat(), output);
  }

  // required string lat_dir = 4;
  if (has_lat_dir()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->lat_dir().data(), this->lat_dir().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "lat_dir");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->lat_dir(), output);
  }

  // required double lon = 5;
  if (has_lon()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->lon(), output);
  }

  // required string lon_dir = 6;
  if (has_lon_dir()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->lon_dir().data(), this->lon_dir().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "lon_dir");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->lon_dir(), output);
  }

  // required int32 gps_qualifier = 7;
  if (has_gps_qualifier()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->gps_qualifier(), output);
  }

  // required int32 satellites_number = 8;
  if (has_satellites_number()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->satellites_number(), output);
  }

  // required double hdop = 9;
  if (has_hdop()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(9, this->hdop(), output);
  }

  // required string reserve1 = 10;
  if (has_reserve1()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->reserve1().data(), this->reserve1().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "reserve1");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      10, this->reserve1(), output);
  }

  // required string reserve2 = 11;
  if (has_reserve2()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->reserve2().data(), this->reserve2().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "reserve2");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      11, this->reserve2(), output);
  }

  // required string reserve3 = 12;
  if (has_reserve3()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->reserve3().data(), this->reserve3().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "reserve3");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      12, this->reserve3(), output);
  }

  // required string geo_unit = 13;
  if (has_geo_unit()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->geo_unit().data(), this->geo_unit().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "geo_unit");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      13, this->geo_unit(), output);
  }

  // required string reserve4 = 14;
  if (has_reserve4()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->reserve4().data(), this->reserve4().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "reserve4");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      14, this->reserve4(), output);
  }

  // required string reserve5 = 15;
  if (has_reserve5()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->reserve5().data(), this->reserve5().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "reserve5");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      15, this->reserve5(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.zhichenhaixin.proto.PMAGGA)
}

::google::protobuf::uint8* PMAGGA::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.zhichenhaixin.proto.PMAGGA)
  // required int32 gps_identifier = 1;
  if (has_gps_identifier()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->gps_identifier(), target);
  }

  // required string time = 2;
  if (has_time()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->time().data(), this->time().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "time");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->time(), target);
  }

  // required double lat = 3;
  if (has_lat()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->lat(), target);
  }

  // required string lat_dir = 4;
  if (has_lat_dir()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->lat_dir().data(), this->lat_dir().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "lat_dir");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->lat_dir(), target);
  }

  // required double lon = 5;
  if (has_lon()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->lon(), target);
  }

  // required string lon_dir = 6;
  if (has_lon_dir()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->lon_dir().data(), this->lon_dir().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "lon_dir");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->lon_dir(), target);
  }

  // required int32 gps_qualifier = 7;
  if (has_gps_qualifier()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->gps_qualifier(), target);
  }

  // required int32 satellites_number = 8;
  if (has_satellites_number()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->satellites_number(), target);
  }

  // required double hdop = 9;
  if (has_hdop()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(9, this->hdop(), target);
  }

  // required string reserve1 = 10;
  if (has_reserve1()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->reserve1().data(), this->reserve1().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "reserve1");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->reserve1(), target);
  }

  // required string reserve2 = 11;
  if (has_reserve2()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->reserve2().data(), this->reserve2().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "reserve2");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        11, this->reserve2(), target);
  }

  // required string reserve3 = 12;
  if (has_reserve3()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->reserve3().data(), this->reserve3().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "reserve3");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        12, this->reserve3(), target);
  }

  // required string geo_unit = 13;
  if (has_geo_unit()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->geo_unit().data(), this->geo_unit().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "geo_unit");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        13, this->geo_unit(), target);
  }

  // required string reserve4 = 14;
  if (has_reserve4()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->reserve4().data(), this->reserve4().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "reserve4");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        14, this->reserve4(), target);
  }

  // required string reserve5 = 15;
  if (has_reserve5()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->reserve5().data(), this->reserve5().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "reserve5");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        15, this->reserve5(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.zhichenhaixin.proto.PMAGGA)
  return target;
}

int PMAGGA::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 gps_identifier = 1;
    if (has_gps_identifier()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gps_identifier());
    }

    // required string time = 2;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->time());
    }

    // required double lat = 3;
    if (has_lat()) {
      total_size += 1 + 8;
    }

    // required string lat_dir = 4;
    if (has_lat_dir()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->lat_dir());
    }

    // required double lon = 5;
    if (has_lon()) {
      total_size += 1 + 8;
    }

    // required string lon_dir = 6;
    if (has_lon_dir()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->lon_dir());
    }

    // required int32 gps_qualifier = 7;
    if (has_gps_qualifier()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gps_qualifier());
    }

    // required int32 satellites_number = 8;
    if (has_satellites_number()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->satellites_number());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required double hdop = 9;
    if (has_hdop()) {
      total_size += 1 + 8;
    }

    // required string reserve1 = 10;
    if (has_reserve1()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->reserve1());
    }

    // required string reserve2 = 11;
    if (has_reserve2()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->reserve2());
    }

    // required string reserve3 = 12;
    if (has_reserve3()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->reserve3());
    }

    // required string geo_unit = 13;
    if (has_geo_unit()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->geo_unit());
    }

    // required string reserve4 = 14;
    if (has_reserve4()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->reserve4());
    }

    // required string reserve5 = 15;
    if (has_reserve5()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->reserve5());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PMAGGA::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PMAGGA* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PMAGGA*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PMAGGA::MergeFrom(const PMAGGA& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_gps_identifier()) {
      set_gps_identifier(from.gps_identifier());
    }
    if (from.has_time()) {
      set_time(from.time());
    }
    if (from.has_lat()) {
      set_lat(from.lat());
    }
    if (from.has_lat_dir()) {
      set_lat_dir(from.lat_dir());
    }
    if (from.has_lon()) {
      set_lon(from.lon());
    }
    if (from.has_lon_dir()) {
      set_lon_dir(from.lon_dir());
    }
    if (from.has_gps_qualifier()) {
      set_gps_qualifier(from.gps_qualifier());
    }
    if (from.has_satellites_number()) {
      set_satellites_number(from.satellites_number());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_hdop()) {
      set_hdop(from.hdop());
    }
    if (from.has_reserve1()) {
      set_reserve1(from.reserve1());
    }
    if (from.has_reserve2()) {
      set_reserve2(from.reserve2());
    }
    if (from.has_reserve3()) {
      set_reserve3(from.reserve3());
    }
    if (from.has_geo_unit()) {
      set_geo_unit(from.geo_unit());
    }
    if (from.has_reserve4()) {
      set_reserve4(from.reserve4());
    }
    if (from.has_reserve5()) {
      set_reserve5(from.reserve5());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PMAGGA::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PMAGGA::CopyFrom(const PMAGGA& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PMAGGA::IsInitialized() const {
  if ((_has_bits_[0] & 0x00007fff) != 0x00007fff) return false;

  return true;
}

void PMAGGA::Swap(PMAGGA* other) {
  if (other != this) {
    std::swap(gps_identifier_, other->gps_identifier_);
    std::swap(time_, other->time_);
    std::swap(lat_, other->lat_);
    std::swap(lat_dir_, other->lat_dir_);
    std::swap(lon_, other->lon_);
    std::swap(lon_dir_, other->lon_dir_);
    std::swap(gps_qualifier_, other->gps_qualifier_);
    std::swap(satellites_number_, other->satellites_number_);
    std::swap(hdop_, other->hdop_);
    std::swap(reserve1_, other->reserve1_);
    std::swap(reserve2_, other->reserve2_);
    std::swap(reserve3_, other->reserve3_);
    std::swap(geo_unit_, other->geo_unit_);
    std::swap(reserve4_, other->reserve4_);
    std::swap(reserve5_, other->reserve5_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PMAGGA::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PMAGGA_descriptor_;
  metadata.reflection = PMAGGA_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PMAVTG::kGpsIdentifierFieldNumber;
const int PMAVTG::kTrueCourseFieldNumber;
const int PMAVTG::kMagnCourseFieldNumber;
const int PMAVTG::kSpeedKnotsFieldNumber;
const int PMAVTG::kSpeedKmphFieldNumber;
#endif  // !_MSC_VER

PMAVTG::PMAVTG()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.zhichenhaixin.proto.PMAVTG)
}

void PMAVTG::InitAsDefaultInstance() {
}

PMAVTG::PMAVTG(const PMAVTG& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:com.zhichenhaixin.proto.PMAVTG)
}

void PMAVTG::SharedCtor() {
  _cached_size_ = 0;
  gps_identifier_ = 0;
  true_course_ = 0;
  magn_course_ = 0;
  speed_knots_ = 0;
  speed_kmph_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PMAVTG::~PMAVTG() {
  // @@protoc_insertion_point(destructor:com.zhichenhaixin.proto.PMAVTG)
  SharedDtor();
}

void PMAVTG::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PMAVTG::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PMAVTG::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PMAVTG_descriptor_;
}

const PMAVTG& PMAVTG::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SCCMMSComData_2eproto();
  return *default_instance_;
}

PMAVTG* PMAVTG::default_instance_ = NULL;

PMAVTG* PMAVTG::New() const {
  return new PMAVTG;
}

void PMAVTG::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<PMAVTG*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(true_course_, gps_identifier_);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PMAVTG::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.zhichenhaixin.proto.PMAVTG)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 gps_identifier = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gps_identifier_)));
          set_has_gps_identifier();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(17)) goto parse_true_course;
        break;
      }

      // required double true_course = 2;
      case 2: {
        if (tag == 17) {
         parse_true_course:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &true_course_)));
          set_has_true_course();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(25)) goto parse_magn_course;
        break;
      }

      // required double magn_course = 3;
      case 3: {
        if (tag == 25) {
         parse_magn_course:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &magn_course_)));
          set_has_magn_course();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(33)) goto parse_speed_knots;
        break;
      }

      // required double speed_knots = 4;
      case 4: {
        if (tag == 33) {
         parse_speed_knots:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &speed_knots_)));
          set_has_speed_knots();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(41)) goto parse_speed_kmph;
        break;
      }

      // required double speed_kmph = 5;
      case 5: {
        if (tag == 41) {
         parse_speed_kmph:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &speed_kmph_)));
          set_has_speed_kmph();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.zhichenhaixin.proto.PMAVTG)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.zhichenhaixin.proto.PMAVTG)
  return false;
#undef DO_
}

void PMAVTG::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.zhichenhaixin.proto.PMAVTG)
  // required int32 gps_identifier = 1;
  if (has_gps_identifier()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->gps_identifier(), output);
  }

  // required double true_course = 2;
  if (has_true_course()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->true_course(), output);
  }

  // required double magn_course = 3;
  if (has_magn_course()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->magn_course(), output);
  }

  // required double speed_knots = 4;
  if (has_speed_knots()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->speed_knots(), output);
  }

  // required double speed_kmph = 5;
  if (has_speed_kmph()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->speed_kmph(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.zhichenhaixin.proto.PMAVTG)
}

::google::protobuf::uint8* PMAVTG::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.zhichenhaixin.proto.PMAVTG)
  // required int32 gps_identifier = 1;
  if (has_gps_identifier()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->gps_identifier(), target);
  }

  // required double true_course = 2;
  if (has_true_course()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->true_course(), target);
  }

  // required double magn_course = 3;
  if (has_magn_course()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->magn_course(), target);
  }

  // required double speed_knots = 4;
  if (has_speed_knots()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->speed_knots(), target);
  }

  // required double speed_kmph = 5;
  if (has_speed_kmph()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->speed_kmph(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.zhichenhaixin.proto.PMAVTG)
  return target;
}

int PMAVTG::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 gps_identifier = 1;
    if (has_gps_identifier()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gps_identifier());
    }

    // required double true_course = 2;
    if (has_true_course()) {
      total_size += 1 + 8;
    }

    // required double magn_course = 3;
    if (has_magn_course()) {
      total_size += 1 + 8;
    }

    // required double speed_knots = 4;
    if (has_speed_knots()) {
      total_size += 1 + 8;
    }

    // required double speed_kmph = 5;
    if (has_speed_kmph()) {
      total_size += 1 + 8;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PMAVTG::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PMAVTG* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PMAVTG*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PMAVTG::MergeFrom(const PMAVTG& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_gps_identifier()) {
      set_gps_identifier(from.gps_identifier());
    }
    if (from.has_true_course()) {
      set_true_course(from.true_course());
    }
    if (from.has_magn_course()) {
      set_magn_course(from.magn_course());
    }
    if (from.has_speed_knots()) {
      set_speed_knots(from.speed_knots());
    }
    if (from.has_speed_kmph()) {
      set_speed_kmph(from.speed_kmph());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PMAVTG::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PMAVTG::CopyFrom(const PMAVTG& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PMAVTG::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;

  return true;
}

void PMAVTG::Swap(PMAVTG* other) {
  if (other != this) {
    std::swap(gps_identifier_, other->gps_identifier_);
    std::swap(true_course_, other->true_course_);
    std::swap(magn_course_, other->magn_course_);
    std::swap(speed_knots_, other->speed_knots_);
    std::swap(speed_kmph_, other->speed_kmph_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PMAVTG::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PMAVTG_descriptor_;
  metadata.reflection = PMAVTG_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PMATHA::kSurgeDemandFieldNumber;
const int PMATHA::kSurgeFeedbackFieldNumber;
const int PMATHA::kSwayDemandFieldNumber;
const int PMATHA::kSwayFeedbackFieldNumber;
const int PMATHA::kYawDemandFieldNumber;
const int PMATHA::kYawFeedbackFieldNumber;
#endif  // !_MSC_VER

PMATHA::PMATHA()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.zhichenhaixin.proto.PMATHA)
}

void PMATHA::InitAsDefaultInstance() {
}

PMATHA::PMATHA(const PMATHA& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:com.zhichenhaixin.proto.PMATHA)
}

void PMATHA::SharedCtor() {
  _cached_size_ = 0;
  surge_demand_ = 0;
  surge_feedback_ = 0;
  sway_demand_ = 0;
  sway_feedback_ = 0;
  yaw_demand_ = 0;
  yaw_feedback_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PMATHA::~PMATHA() {
  // @@protoc_insertion_point(destructor:com.zhichenhaixin.proto.PMATHA)
  SharedDtor();
}

void PMATHA::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PMATHA::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PMATHA::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PMATHA_descriptor_;
}

const PMATHA& PMATHA::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SCCMMSComData_2eproto();
  return *default_instance_;
}

PMATHA* PMATHA::default_instance_ = NULL;

PMATHA* PMATHA::New() const {
  return new PMATHA;
}

void PMATHA::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<PMATHA*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 63) {
    ZR_(surge_demand_, yaw_feedback_);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PMATHA::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.zhichenhaixin.proto.PMATHA)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required double surge_demand = 1;
      case 1: {
        if (tag == 9) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &surge_demand_)));
          set_has_surge_demand();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(17)) goto parse_surge_feedback;
        break;
      }

      // required double surge_feedback = 2;
      case 2: {
        if (tag == 17) {
         parse_surge_feedback:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &surge_feedback_)));
          set_has_surge_feedback();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(25)) goto parse_sway_demand;
        break;
      }

      // required double sway_demand = 3;
      case 3: {
        if (tag == 25) {
         parse_sway_demand:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &sway_demand_)));
          set_has_sway_demand();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(33)) goto parse_sway_feedback;
        break;
      }

      // required double sway_feedback = 4;
      case 4: {
        if (tag == 33) {
         parse_sway_feedback:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &sway_feedback_)));
          set_has_sway_feedback();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(41)) goto parse_yaw_demand;
        break;
      }

      // required double yaw_demand = 5;
      case 5: {
        if (tag == 41) {
         parse_yaw_demand:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &yaw_demand_)));
          set_has_yaw_demand();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(49)) goto parse_yaw_feedback;
        break;
      }

      // required double yaw_feedback = 6;
      case 6: {
        if (tag == 49) {
         parse_yaw_feedback:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &yaw_feedback_)));
          set_has_yaw_feedback();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.zhichenhaixin.proto.PMATHA)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.zhichenhaixin.proto.PMATHA)
  return false;
#undef DO_
}

void PMATHA::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.zhichenhaixin.proto.PMATHA)
  // required double surge_demand = 1;
  if (has_surge_demand()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->surge_demand(), output);
  }

  // required double surge_feedback = 2;
  if (has_surge_feedback()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->surge_feedback(), output);
  }

  // required double sway_demand = 3;
  if (has_sway_demand()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->sway_demand(), output);
  }

  // required double sway_feedback = 4;
  if (has_sway_feedback()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->sway_feedback(), output);
  }

  // required double yaw_demand = 5;
  if (has_yaw_demand()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->yaw_demand(), output);
  }

  // required double yaw_feedback = 6;
  if (has_yaw_feedback()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->yaw_feedback(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.zhichenhaixin.proto.PMATHA)
}

::google::protobuf::uint8* PMATHA::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.zhichenhaixin.proto.PMATHA)
  // required double surge_demand = 1;
  if (has_surge_demand()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->surge_demand(), target);
  }

  // required double surge_feedback = 2;
  if (has_surge_feedback()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->surge_feedback(), target);
  }

  // required double sway_demand = 3;
  if (has_sway_demand()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->sway_demand(), target);
  }

  // required double sway_feedback = 4;
  if (has_sway_feedback()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->sway_feedback(), target);
  }

  // required double yaw_demand = 5;
  if (has_yaw_demand()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->yaw_demand(), target);
  }

  // required double yaw_feedback = 6;
  if (has_yaw_feedback()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->yaw_feedback(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.zhichenhaixin.proto.PMATHA)
  return target;
}

int PMATHA::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required double surge_demand = 1;
    if (has_surge_demand()) {
      total_size += 1 + 8;
    }

    // required double surge_feedback = 2;
    if (has_surge_feedback()) {
      total_size += 1 + 8;
    }

    // required double sway_demand = 3;
    if (has_sway_demand()) {
      total_size += 1 + 8;
    }

    // required double sway_feedback = 4;
    if (has_sway_feedback()) {
      total_size += 1 + 8;
    }

    // required double yaw_demand = 5;
    if (has_yaw_demand()) {
      total_size += 1 + 8;
    }

    // required double yaw_feedback = 6;
    if (has_yaw_feedback()) {
      total_size += 1 + 8;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PMATHA::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PMATHA* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PMATHA*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PMATHA::MergeFrom(const PMATHA& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_surge_demand()) {
      set_surge_demand(from.surge_demand());
    }
    if (from.has_surge_feedback()) {
      set_surge_feedback(from.surge_feedback());
    }
    if (from.has_sway_demand()) {
      set_sway_demand(from.sway_demand());
    }
    if (from.has_sway_feedback()) {
      set_sway_feedback(from.sway_feedback());
    }
    if (from.has_yaw_demand()) {
      set_yaw_demand(from.yaw_demand());
    }
    if (from.has_yaw_feedback()) {
      set_yaw_feedback(from.yaw_feedback());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PMATHA::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PMATHA::CopyFrom(const PMATHA& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PMATHA::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000003f) != 0x0000003f) return false;

  return true;
}

void PMATHA::Swap(PMATHA* other) {
  if (other != this) {
    std::swap(surge_demand_, other->surge_demand_);
    std::swap(surge_feedback_, other->surge_feedback_);
    std::swap(sway_demand_, other->sway_demand_);
    std::swap(sway_feedback_, other->sway_feedback_);
    std::swap(yaw_demand_, other->yaw_demand_);
    std::swap(yaw_feedback_, other->yaw_feedback_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PMATHA::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PMATHA_descriptor_;
  metadata.reflection = PMATHA_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PMATHF::kThrusterNumberFieldNumber;
const int PMATHF::kThrusterStatusFieldNumber;
const int PMATHF::kRpmPitchDemandFieldNumber;
const int PMATHF::kRpmPitchFeedbackFieldNumber;
const int PMATHF::kThrustDemandFieldNumber;
const int PMATHF::kThrustFeedbackFieldNumber;
const int PMATHF::kAzimuthDemandFieldNumber;
const int PMATHF::kAzimuthFeedbackFieldNumber;
#endif  // !_MSC_VER

PMATHF::PMATHF()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.zhichenhaixin.proto.PMATHF)
}

void PMATHF::InitAsDefaultInstance() {
}

PMATHF::PMATHF(const PMATHF& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:com.zhichenhaixin.proto.PMATHF)
}

void PMATHF::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  thruster_number_ = 0;
  thruster_status_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  rpm_pitch_demand_ = 0;
  rpm_pitch_feedback_ = 0;
  thrust_demand_ = 0;
  thrust_feedback_ = 0;
  azimuth_demand_ = 0;
  azimuth_feedback_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PMATHF::~PMATHF() {
  // @@protoc_insertion_point(destructor:com.zhichenhaixin.proto.PMATHF)
  SharedDtor();
}

void PMATHF::SharedDtor() {
  if (thruster_status_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete thruster_status_;
  }
  if (this != default_instance_) {
  }
}

void PMATHF::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PMATHF::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PMATHF_descriptor_;
}

const PMATHF& PMATHF::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SCCMMSComData_2eproto();
  return *default_instance_;
}

PMATHF* PMATHF::default_instance_ = NULL;

PMATHF* PMATHF::New() const {
  return new PMATHF;
}

void PMATHF::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<PMATHF*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(rpm_pitch_demand_, thruster_number_);
    if (has_thruster_status()) {
      if (thruster_status_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        thruster_status_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PMATHF::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.zhichenhaixin.proto.PMATHF)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 thruster_number = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &thruster_number_)));
          set_has_thruster_number();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_thruster_Status;
        break;
      }

      // required string thruster_Status = 2;
      case 2: {
        if (tag == 18) {
         parse_thruster_Status:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_thruster_status()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->thruster_status().data(), this->thruster_status().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "thruster_status");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(25)) goto parse_rpm_pitch_demand;
        break;
      }

      // required double rpm_pitch_demand = 3;
      case 3: {
        if (tag == 25) {
         parse_rpm_pitch_demand:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &rpm_pitch_demand_)));
          set_has_rpm_pitch_demand();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(33)) goto parse_rpm_pitch_feedback;
        break;
      }

      // required double rpm_pitch_feedback = 4;
      case 4: {
        if (tag == 33) {
         parse_rpm_pitch_feedback:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &rpm_pitch_feedback_)));
          set_has_rpm_pitch_feedback();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(41)) goto parse_thrust_demand;
        break;
      }

      // required double thrust_demand = 5;
      case 5: {
        if (tag == 41) {
         parse_thrust_demand:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &thrust_demand_)));
          set_has_thrust_demand();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(49)) goto parse_thrust_feedback;
        break;
      }

      // required double thrust_feedback = 6;
      case 6: {
        if (tag == 49) {
         parse_thrust_feedback:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &thrust_feedback_)));
          set_has_thrust_feedback();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(57)) goto parse_azimuth_demand;
        break;
      }

      // required double azimuth_demand = 7;
      case 7: {
        if (tag == 57) {
         parse_azimuth_demand:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &azimuth_demand_)));
          set_has_azimuth_demand();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(65)) goto parse_azimuth_feedback;
        break;
      }

      // required double azimuth_feedback = 8;
      case 8: {
        if (tag == 65) {
         parse_azimuth_feedback:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &azimuth_feedback_)));
          set_has_azimuth_feedback();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.zhichenhaixin.proto.PMATHF)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.zhichenhaixin.proto.PMATHF)
  return false;
#undef DO_
}

void PMATHF::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.zhichenhaixin.proto.PMATHF)
  // required int32 thruster_number = 1;
  if (has_thruster_number()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->thruster_number(), output);
  }

  // required string thruster_Status = 2;
  if (has_thruster_status()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->thruster_status().data(), this->thruster_status().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "thruster_status");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->thruster_status(), output);
  }

  // required double rpm_pitch_demand = 3;
  if (has_rpm_pitch_demand()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->rpm_pitch_demand(), output);
  }

  // required double rpm_pitch_feedback = 4;
  if (has_rpm_pitch_feedback()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->rpm_pitch_feedback(), output);
  }

  // required double thrust_demand = 5;
  if (has_thrust_demand()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->thrust_demand(), output);
  }

  // required double thrust_feedback = 6;
  if (has_thrust_feedback()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->thrust_feedback(), output);
  }

  // required double azimuth_demand = 7;
  if (has_azimuth_demand()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(7, this->azimuth_demand(), output);
  }

  // required double azimuth_feedback = 8;
  if (has_azimuth_feedback()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(8, this->azimuth_feedback(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.zhichenhaixin.proto.PMATHF)
}

::google::protobuf::uint8* PMATHF::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.zhichenhaixin.proto.PMATHF)
  // required int32 thruster_number = 1;
  if (has_thruster_number()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->thruster_number(), target);
  }

  // required string thruster_Status = 2;
  if (has_thruster_status()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->thruster_status().data(), this->thruster_status().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "thruster_status");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->thruster_status(), target);
  }

  // required double rpm_pitch_demand = 3;
  if (has_rpm_pitch_demand()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->rpm_pitch_demand(), target);
  }

  // required double rpm_pitch_feedback = 4;
  if (has_rpm_pitch_feedback()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->rpm_pitch_feedback(), target);
  }

  // required double thrust_demand = 5;
  if (has_thrust_demand()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->thrust_demand(), target);
  }

  // required double thrust_feedback = 6;
  if (has_thrust_feedback()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->thrust_feedback(), target);
  }

  // required double azimuth_demand = 7;
  if (has_azimuth_demand()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(7, this->azimuth_demand(), target);
  }

  // required double azimuth_feedback = 8;
  if (has_azimuth_feedback()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(8, this->azimuth_feedback(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.zhichenhaixin.proto.PMATHF)
  return target;
}

int PMATHF::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 thruster_number = 1;
    if (has_thruster_number()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->thruster_number());
    }

    // required string thruster_Status = 2;
    if (has_thruster_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->thruster_status());
    }

    // required double rpm_pitch_demand = 3;
    if (has_rpm_pitch_demand()) {
      total_size += 1 + 8;
    }

    // required double rpm_pitch_feedback = 4;
    if (has_rpm_pitch_feedback()) {
      total_size += 1 + 8;
    }

    // required double thrust_demand = 5;
    if (has_thrust_demand()) {
      total_size += 1 + 8;
    }

    // required double thrust_feedback = 6;
    if (has_thrust_feedback()) {
      total_size += 1 + 8;
    }

    // required double azimuth_demand = 7;
    if (has_azimuth_demand()) {
      total_size += 1 + 8;
    }

    // required double azimuth_feedback = 8;
    if (has_azimuth_feedback()) {
      total_size += 1 + 8;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PMATHF::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PMATHF* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PMATHF*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PMATHF::MergeFrom(const PMATHF& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_thruster_number()) {
      set_thruster_number(from.thruster_number());
    }
    if (from.has_thruster_status()) {
      set_thruster_status(from.thruster_status());
    }
    if (from.has_rpm_pitch_demand()) {
      set_rpm_pitch_demand(from.rpm_pitch_demand());
    }
    if (from.has_rpm_pitch_feedback()) {
      set_rpm_pitch_feedback(from.rpm_pitch_feedback());
    }
    if (from.has_thrust_demand()) {
      set_thrust_demand(from.thrust_demand());
    }
    if (from.has_thrust_feedback()) {
      set_thrust_feedback(from.thrust_feedback());
    }
    if (from.has_azimuth_demand()) {
      set_azimuth_demand(from.azimuth_demand());
    }
    if (from.has_azimuth_feedback()) {
      set_azimuth_feedback(from.azimuth_feedback());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PMATHF::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PMATHF::CopyFrom(const PMATHF& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PMATHF::IsInitialized() const {
  if ((_has_bits_[0] & 0x000000ff) != 0x000000ff) return false;

  return true;
}

void PMATHF::Swap(PMATHF* other) {
  if (other != this) {
    std::swap(thruster_number_, other->thruster_number_);
    std::swap(thruster_status_, other->thruster_status_);
    std::swap(rpm_pitch_demand_, other->rpm_pitch_demand_);
    std::swap(rpm_pitch_feedback_, other->rpm_pitch_feedback_);
    std::swap(thrust_demand_, other->thrust_demand_);
    std::swap(thrust_feedback_, other->thrust_feedback_);
    std::swap(azimuth_demand_, other->azimuth_demand_);
    std::swap(azimuth_feedback_, other->azimuth_feedback_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PMATHF::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PMATHF_descriptor_;
  metadata.reflection = PMATHF_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PMAINF::kRefsysFieldNumber;
const int PMAINF::kGyroFieldNumber;
const int PMAINF::kMruFieldNumber;
const int PMAINF::kWindFieldNumber;
const int PMAINF::kEstimateLatFieldNumber;
const int PMAINF::kEstimateLatDirFieldNumber;
const int PMAINF::kEstimateLonFieldNumber;
const int PMAINF::kEstimateLonDirFieldNumber;
const int PMAINF::kDemandLatFieldNumber;
const int PMAINF::kDemandLatDirFieldNumber;
const int PMAINF::kDemandLonFieldNumber;
const int PMAINF::kDemandLonDirFieldNumber;
const int PMAINF::kEstimateHeadingFieldNumber;
const int PMAINF::kDemandHeadingFieldNumber;
const int PMAINF::kControllerGainFieldNumber;
#endif  // !_MSC_VER

PMAINF::PMAINF()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.zhichenhaixin.proto.PMAINF)
}

void PMAINF::InitAsDefaultInstance() {
}

PMAINF::PMAINF(const PMAINF& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:com.zhichenhaixin.proto.PMAINF)
}

void PMAINF::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  refsys_ = 0;
  gyro_ = 0;
  mru_ = 0;
  wind_ = 0;
  estimate_lat_ = 0;
  estimate_lat_dir_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  estimate_lon_ = 0;
  estimate_lon_dir_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  demand_lat_ = 0;
  demand_lat_dir_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  demand_lon_ = 0;
  demand_lon_dir_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  estimate_heading_ = 0;
  demand_heading_ = 0;
  controller_gain_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PMAINF::~PMAINF() {
  // @@protoc_insertion_point(destructor:com.zhichenhaixin.proto.PMAINF)
  SharedDtor();
}

void PMAINF::SharedDtor() {
  if (estimate_lat_dir_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete estimate_lat_dir_;
  }
  if (estimate_lon_dir_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete estimate_lon_dir_;
  }
  if (demand_lat_dir_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete demand_lat_dir_;
  }
  if (demand_lon_dir_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete demand_lon_dir_;
  }
  if (this != default_instance_) {
  }
}

void PMAINF::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PMAINF::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PMAINF_descriptor_;
}

const PMAINF& PMAINF::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SCCMMSComData_2eproto();
  return *default_instance_;
}

PMAINF* PMAINF::default_instance_ = NULL;

PMAINF* PMAINF::New() const {
  return new PMAINF;
}

void PMAINF::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<PMAINF*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(refsys_, estimate_lat_);
    if (has_estimate_lat_dir()) {
      if (estimate_lat_dir_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        estimate_lat_dir_->clear();
      }
    }
    estimate_lon_ = 0;
    if (has_estimate_lon_dir()) {
      if (estimate_lon_dir_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        estimate_lon_dir_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & 32512) {
    ZR_(estimate_heading_, controller_gain_);
    demand_lat_ = 0;
    if (has_demand_lat_dir()) {
      if (demand_lat_dir_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        demand_lat_dir_->clear();
      }
    }
    demand_lon_ = 0;
    if (has_demand_lon_dir()) {
      if (demand_lon_dir_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        demand_lon_dir_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PMAINF::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.zhichenhaixin.proto.PMAINF)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 refsys = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &refsys_)));
          set_has_refsys();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_gyro;
        break;
      }

      // required int32 gyro = 2;
      case 2: {
        if (tag == 16) {
         parse_gyro:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gyro_)));
          set_has_gyro();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_mru;
        break;
      }

      // required int32 mru = 3;
      case 3: {
        if (tag == 24) {
         parse_mru:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mru_)));
          set_has_mru();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_wind;
        break;
      }

      // required int32 wind = 4;
      case 4: {
        if (tag == 32) {
         parse_wind:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &wind_)));
          set_has_wind();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(41)) goto parse_estimate_lat;
        break;
      }

      // required double estimate_lat = 5;
      case 5: {
        if (tag == 41) {
         parse_estimate_lat:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &estimate_lat_)));
          set_has_estimate_lat();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_estimate_lat_dir;
        break;
      }

      // required string estimate_lat_dir = 6;
      case 6: {
        if (tag == 50) {
         parse_estimate_lat_dir:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_estimate_lat_dir()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->estimate_lat_dir().data(), this->estimate_lat_dir().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "estimate_lat_dir");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(57)) goto parse_estimate_lon;
        break;
      }

      // required double estimate_lon = 7;
      case 7: {
        if (tag == 57) {
         parse_estimate_lon:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &estimate_lon_)));
          set_has_estimate_lon();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_estimate_lon_dir;
        break;
      }

      // required string estimate_lon_dir = 8;
      case 8: {
        if (tag == 66) {
         parse_estimate_lon_dir:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_estimate_lon_dir()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->estimate_lon_dir().data(), this->estimate_lon_dir().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "estimate_lon_dir");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(73)) goto parse_demand_lat;
        break;
      }

      // required double demand_lat = 9;
      case 9: {
        if (tag == 73) {
         parse_demand_lat:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &demand_lat_)));
          set_has_demand_lat();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_demand_lat_dir;
        break;
      }

      // required string demand_lat_dir = 10;
      case 10: {
        if (tag == 82) {
         parse_demand_lat_dir:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_demand_lat_dir()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->demand_lat_dir().data(), this->demand_lat_dir().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "demand_lat_dir");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(89)) goto parse_demand_lon;
        break;
      }

      // required double demand_lon = 11;
      case 11: {
        if (tag == 89) {
         parse_demand_lon:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &demand_lon_)));
          set_has_demand_lon();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(98)) goto parse_demand_lon_dir;
        break;
      }

      // required string demand_lon_dir = 12;
      case 12: {
        if (tag == 98) {
         parse_demand_lon_dir:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_demand_lon_dir()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->demand_lon_dir().data(), this->demand_lon_dir().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "demand_lon_dir");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(105)) goto parse_estimate_heading;
        break;
      }

      // required double estimate_heading = 13;
      case 13: {
        if (tag == 105) {
         parse_estimate_heading:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &estimate_heading_)));
          set_has_estimate_heading();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(113)) goto parse_demand_heading;
        break;
      }

      // required double demand_heading = 14;
      case 14: {
        if (tag == 113) {
         parse_demand_heading:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &demand_heading_)));
          set_has_demand_heading();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(120)) goto parse_controller_gain;
        break;
      }

      // required int32 controller_gain = 15;
      case 15: {
        if (tag == 120) {
         parse_controller_gain:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &controller_gain_)));
          set_has_controller_gain();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.zhichenhaixin.proto.PMAINF)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.zhichenhaixin.proto.PMAINF)
  return false;
#undef DO_
}

void PMAINF::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.zhichenhaixin.proto.PMAINF)
  // required int32 refsys = 1;
  if (has_refsys()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->refsys(), output);
  }

  // required int32 gyro = 2;
  if (has_gyro()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->gyro(), output);
  }

  // required int32 mru = 3;
  if (has_mru()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->mru(), output);
  }

  // required int32 wind = 4;
  if (has_wind()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->wind(), output);
  }

  // required double estimate_lat = 5;
  if (has_estimate_lat()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->estimate_lat(), output);
  }

  // required string estimate_lat_dir = 6;
  if (has_estimate_lat_dir()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->estimate_lat_dir().data(), this->estimate_lat_dir().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "estimate_lat_dir");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->estimate_lat_dir(), output);
  }

  // required double estimate_lon = 7;
  if (has_estimate_lon()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(7, this->estimate_lon(), output);
  }

  // required string estimate_lon_dir = 8;
  if (has_estimate_lon_dir()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->estimate_lon_dir().data(), this->estimate_lon_dir().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "estimate_lon_dir");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->estimate_lon_dir(), output);
  }

  // required double demand_lat = 9;
  if (has_demand_lat()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(9, this->demand_lat(), output);
  }

  // required string demand_lat_dir = 10;
  if (has_demand_lat_dir()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->demand_lat_dir().data(), this->demand_lat_dir().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "demand_lat_dir");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      10, this->demand_lat_dir(), output);
  }

  // required double demand_lon = 11;
  if (has_demand_lon()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(11, this->demand_lon(), output);
  }

  // required string demand_lon_dir = 12;
  if (has_demand_lon_dir()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->demand_lon_dir().data(), this->demand_lon_dir().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "demand_lon_dir");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      12, this->demand_lon_dir(), output);
  }

  // required double estimate_heading = 13;
  if (has_estimate_heading()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(13, this->estimate_heading(), output);
  }

  // required double demand_heading = 14;
  if (has_demand_heading()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(14, this->demand_heading(), output);
  }

  // required int32 controller_gain = 15;
  if (has_controller_gain()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(15, this->controller_gain(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.zhichenhaixin.proto.PMAINF)
}

::google::protobuf::uint8* PMAINF::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.zhichenhaixin.proto.PMAINF)
  // required int32 refsys = 1;
  if (has_refsys()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->refsys(), target);
  }

  // required int32 gyro = 2;
  if (has_gyro()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->gyro(), target);
  }

  // required int32 mru = 3;
  if (has_mru()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->mru(), target);
  }

  // required int32 wind = 4;
  if (has_wind()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->wind(), target);
  }

  // required double estimate_lat = 5;
  if (has_estimate_lat()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->estimate_lat(), target);
  }

  // required string estimate_lat_dir = 6;
  if (has_estimate_lat_dir()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->estimate_lat_dir().data(), this->estimate_lat_dir().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "estimate_lat_dir");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->estimate_lat_dir(), target);
  }

  // required double estimate_lon = 7;
  if (has_estimate_lon()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(7, this->estimate_lon(), target);
  }

  // required string estimate_lon_dir = 8;
  if (has_estimate_lon_dir()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->estimate_lon_dir().data(), this->estimate_lon_dir().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "estimate_lon_dir");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->estimate_lon_dir(), target);
  }

  // required double demand_lat = 9;
  if (has_demand_lat()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(9, this->demand_lat(), target);
  }

  // required string demand_lat_dir = 10;
  if (has_demand_lat_dir()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->demand_lat_dir().data(), this->demand_lat_dir().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "demand_lat_dir");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->demand_lat_dir(), target);
  }

  // required double demand_lon = 11;
  if (has_demand_lon()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(11, this->demand_lon(), target);
  }

  // required string demand_lon_dir = 12;
  if (has_demand_lon_dir()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->demand_lon_dir().data(), this->demand_lon_dir().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "demand_lon_dir");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        12, this->demand_lon_dir(), target);
  }

  // required double estimate_heading = 13;
  if (has_estimate_heading()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(13, this->estimate_heading(), target);
  }

  // required double demand_heading = 14;
  if (has_demand_heading()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(14, this->demand_heading(), target);
  }

  // required int32 controller_gain = 15;
  if (has_controller_gain()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(15, this->controller_gain(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.zhichenhaixin.proto.PMAINF)
  return target;
}

int PMAINF::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 refsys = 1;
    if (has_refsys()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->refsys());
    }

    // required int32 gyro = 2;
    if (has_gyro()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gyro());
    }

    // required int32 mru = 3;
    if (has_mru()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->mru());
    }

    // required int32 wind = 4;
    if (has_wind()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->wind());
    }

    // required double estimate_lat = 5;
    if (has_estimate_lat()) {
      total_size += 1 + 8;
    }

    // required string estimate_lat_dir = 6;
    if (has_estimate_lat_dir()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->estimate_lat_dir());
    }

    // required double estimate_lon = 7;
    if (has_estimate_lon()) {
      total_size += 1 + 8;
    }

    // required string estimate_lon_dir = 8;
    if (has_estimate_lon_dir()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->estimate_lon_dir());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required double demand_lat = 9;
    if (has_demand_lat()) {
      total_size += 1 + 8;
    }

    // required string demand_lat_dir = 10;
    if (has_demand_lat_dir()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->demand_lat_dir());
    }

    // required double demand_lon = 11;
    if (has_demand_lon()) {
      total_size += 1 + 8;
    }

    // required string demand_lon_dir = 12;
    if (has_demand_lon_dir()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->demand_lon_dir());
    }

    // required double estimate_heading = 13;
    if (has_estimate_heading()) {
      total_size += 1 + 8;
    }

    // required double demand_heading = 14;
    if (has_demand_heading()) {
      total_size += 1 + 8;
    }

    // required int32 controller_gain = 15;
    if (has_controller_gain()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->controller_gain());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PMAINF::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PMAINF* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PMAINF*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PMAINF::MergeFrom(const PMAINF& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_refsys()) {
      set_refsys(from.refsys());
    }
    if (from.has_gyro()) {
      set_gyro(from.gyro());
    }
    if (from.has_mru()) {
      set_mru(from.mru());
    }
    if (from.has_wind()) {
      set_wind(from.wind());
    }
    if (from.has_estimate_lat()) {
      set_estimate_lat(from.estimate_lat());
    }
    if (from.has_estimate_lat_dir()) {
      set_estimate_lat_dir(from.estimate_lat_dir());
    }
    if (from.has_estimate_lon()) {
      set_estimate_lon(from.estimate_lon());
    }
    if (from.has_estimate_lon_dir()) {
      set_estimate_lon_dir(from.estimate_lon_dir());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_demand_lat()) {
      set_demand_lat(from.demand_lat());
    }
    if (from.has_demand_lat_dir()) {
      set_demand_lat_dir(from.demand_lat_dir());
    }
    if (from.has_demand_lon()) {
      set_demand_lon(from.demand_lon());
    }
    if (from.has_demand_lon_dir()) {
      set_demand_lon_dir(from.demand_lon_dir());
    }
    if (from.has_estimate_heading()) {
      set_estimate_heading(from.estimate_heading());
    }
    if (from.has_demand_heading()) {
      set_demand_heading(from.demand_heading());
    }
    if (from.has_controller_gain()) {
      set_controller_gain(from.controller_gain());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PMAINF::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PMAINF::CopyFrom(const PMAINF& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PMAINF::IsInitialized() const {
  if ((_has_bits_[0] & 0x00007fff) != 0x00007fff) return false;

  return true;
}

void PMAINF::Swap(PMAINF* other) {
  if (other != this) {
    std::swap(refsys_, other->refsys_);
    std::swap(gyro_, other->gyro_);
    std::swap(mru_, other->mru_);
    std::swap(wind_, other->wind_);
    std::swap(estimate_lat_, other->estimate_lat_);
    std::swap(estimate_lat_dir_, other->estimate_lat_dir_);
    std::swap(estimate_lon_, other->estimate_lon_);
    std::swap(estimate_lon_dir_, other->estimate_lon_dir_);
    std::swap(demand_lat_, other->demand_lat_);
    std::swap(demand_lat_dir_, other->demand_lat_dir_);
    std::swap(demand_lon_, other->demand_lon_);
    std::swap(demand_lon_dir_, other->demand_lon_dir_);
    std::swap(estimate_heading_, other->estimate_heading_);
    std::swap(demand_heading_, other->demand_heading_);
    std::swap(controller_gain_, other->controller_gain_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PMAINF::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PMAINF_descriptor_;
  metadata.reflection = PMAINF_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PMAALA::kAlarmStatusFieldNumber;
const int PMAALA::kYawAlarmLimitFieldNumber;
const int PMAALA::kYawAlarmOnoffFieldNumber;
const int PMAALA::kSurgeAlarmLimitFieldNumber;
const int PMAALA::kSurgeAlarmOnoffFieldNumber;
const int PMAALA::kSwayAlarmLimitFieldNumber;
const int PMAALA::kSwayAlarmOnoffFieldNumber;
const int PMAALA::kXtrackAlarmLimitFieldNumber;
const int PMAALA::kXtrackAlarmOnoffFieldNumber;
#endif  // !_MSC_VER

PMAALA::PMAALA()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.zhichenhaixin.proto.PMAALA)
}

void PMAALA::InitAsDefaultInstance() {
}

PMAALA::PMAALA(const PMAALA& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:com.zhichenhaixin.proto.PMAALA)
}

void PMAALA::SharedCtor() {
  _cached_size_ = 0;
  alarm_status_ = 0;
  yaw_alarm_limit_ = 0;
  yaw_alarm_onoff_ = false;
  surge_alarm_limit_ = 0;
  surge_alarm_onoff_ = false;
  sway_alarm_limit_ = 0;
  sway_alarm_onoff_ = false;
  xtrack_alarm_limit_ = 0;
  xtrack_alarm_onoff_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PMAALA::~PMAALA() {
  // @@protoc_insertion_point(destructor:com.zhichenhaixin.proto.PMAALA)
  SharedDtor();
}

void PMAALA::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PMAALA::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PMAALA::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PMAALA_descriptor_;
}

const PMAALA& PMAALA::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SCCMMSComData_2eproto();
  return *default_instance_;
}

PMAALA* PMAALA::default_instance_ = NULL;

PMAALA* PMAALA::New() const {
  return new PMAALA;
}

void PMAALA::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<PMAALA*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(yaw_alarm_limit_, sway_alarm_onoff_);
    ZR_(sway_alarm_limit_, xtrack_alarm_limit_);
  }
  xtrack_alarm_onoff_ = false;

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PMAALA::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.zhichenhaixin.proto.PMAALA)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 alarm_status = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &alarm_status_)));
          set_has_alarm_status();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(17)) goto parse_yaw_alarm_limit;
        break;
      }

      // required double yaw_alarm_limit = 2;
      case 2: {
        if (tag == 17) {
         parse_yaw_alarm_limit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &yaw_alarm_limit_)));
          set_has_yaw_alarm_limit();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_yaw_alarm_onoff;
        break;
      }

      // required bool yaw_alarm_onoff = 3;
      case 3: {
        if (tag == 24) {
         parse_yaw_alarm_onoff:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &yaw_alarm_onoff_)));
          set_has_yaw_alarm_onoff();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(33)) goto parse_surge_alarm_limit;
        break;
      }

      // required double surge_alarm_limit = 4;
      case 4: {
        if (tag == 33) {
         parse_surge_alarm_limit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &surge_alarm_limit_)));
          set_has_surge_alarm_limit();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_surge_alarm_onoff;
        break;
      }

      // required bool surge_alarm_onoff = 5;
      case 5: {
        if (tag == 40) {
         parse_surge_alarm_onoff:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &surge_alarm_onoff_)));
          set_has_surge_alarm_onoff();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(49)) goto parse_sway_alarm_limit;
        break;
      }

      // required double sway_alarm_limit = 6;
      case 6: {
        if (tag == 49) {
         parse_sway_alarm_limit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &sway_alarm_limit_)));
          set_has_sway_alarm_limit();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_sway_alarm_onoff;
        break;
      }

      // required bool sway_alarm_onoff = 7;
      case 7: {
        if (tag == 56) {
         parse_sway_alarm_onoff:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &sway_alarm_onoff_)));
          set_has_sway_alarm_onoff();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(65)) goto parse_xtrack_alarm_limit;
        break;
      }

      // required double xtrack_alarm_limit = 8;
      case 8: {
        if (tag == 65) {
         parse_xtrack_alarm_limit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &xtrack_alarm_limit_)));
          set_has_xtrack_alarm_limit();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_xtrack_alarm_onoff;
        break;
      }

      // required bool xtrack_alarm_onoff = 9;
      case 9: {
        if (tag == 72) {
         parse_xtrack_alarm_onoff:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &xtrack_alarm_onoff_)));
          set_has_xtrack_alarm_onoff();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.zhichenhaixin.proto.PMAALA)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.zhichenhaixin.proto.PMAALA)
  return false;
#undef DO_
}

void PMAALA::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.zhichenhaixin.proto.PMAALA)
  // required int32 alarm_status = 1;
  if (has_alarm_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->alarm_status(), output);
  }

  // required double yaw_alarm_limit = 2;
  if (has_yaw_alarm_limit()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->yaw_alarm_limit(), output);
  }

  // required bool yaw_alarm_onoff = 3;
  if (has_yaw_alarm_onoff()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->yaw_alarm_onoff(), output);
  }

  // required double surge_alarm_limit = 4;
  if (has_surge_alarm_limit()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->surge_alarm_limit(), output);
  }

  // required bool surge_alarm_onoff = 5;
  if (has_surge_alarm_onoff()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->surge_alarm_onoff(), output);
  }

  // required double sway_alarm_limit = 6;
  if (has_sway_alarm_limit()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->sway_alarm_limit(), output);
  }

  // required bool sway_alarm_onoff = 7;
  if (has_sway_alarm_onoff()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->sway_alarm_onoff(), output);
  }

  // required double xtrack_alarm_limit = 8;
  if (has_xtrack_alarm_limit()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(8, this->xtrack_alarm_limit(), output);
  }

  // required bool xtrack_alarm_onoff = 9;
  if (has_xtrack_alarm_onoff()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(9, this->xtrack_alarm_onoff(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.zhichenhaixin.proto.PMAALA)
}

::google::protobuf::uint8* PMAALA::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.zhichenhaixin.proto.PMAALA)
  // required int32 alarm_status = 1;
  if (has_alarm_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->alarm_status(), target);
  }

  // required double yaw_alarm_limit = 2;
  if (has_yaw_alarm_limit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->yaw_alarm_limit(), target);
  }

  // required bool yaw_alarm_onoff = 3;
  if (has_yaw_alarm_onoff()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->yaw_alarm_onoff(), target);
  }

  // required double surge_alarm_limit = 4;
  if (has_surge_alarm_limit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->surge_alarm_limit(), target);
  }

  // required bool surge_alarm_onoff = 5;
  if (has_surge_alarm_onoff()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->surge_alarm_onoff(), target);
  }

  // required double sway_alarm_limit = 6;
  if (has_sway_alarm_limit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->sway_alarm_limit(), target);
  }

  // required bool sway_alarm_onoff = 7;
  if (has_sway_alarm_onoff()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->sway_alarm_onoff(), target);
  }

  // required double xtrack_alarm_limit = 8;
  if (has_xtrack_alarm_limit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(8, this->xtrack_alarm_limit(), target);
  }

  // required bool xtrack_alarm_onoff = 9;
  if (has_xtrack_alarm_onoff()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(9, this->xtrack_alarm_onoff(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.zhichenhaixin.proto.PMAALA)
  return target;
}

int PMAALA::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 alarm_status = 1;
    if (has_alarm_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->alarm_status());
    }

    // required double yaw_alarm_limit = 2;
    if (has_yaw_alarm_limit()) {
      total_size += 1 + 8;
    }

    // required bool yaw_alarm_onoff = 3;
    if (has_yaw_alarm_onoff()) {
      total_size += 1 + 1;
    }

    // required double surge_alarm_limit = 4;
    if (has_surge_alarm_limit()) {
      total_size += 1 + 8;
    }

    // required bool surge_alarm_onoff = 5;
    if (has_surge_alarm_onoff()) {
      total_size += 1 + 1;
    }

    // required double sway_alarm_limit = 6;
    if (has_sway_alarm_limit()) {
      total_size += 1 + 8;
    }

    // required bool sway_alarm_onoff = 7;
    if (has_sway_alarm_onoff()) {
      total_size += 1 + 1;
    }

    // required double xtrack_alarm_limit = 8;
    if (has_xtrack_alarm_limit()) {
      total_size += 1 + 8;
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required bool xtrack_alarm_onoff = 9;
    if (has_xtrack_alarm_onoff()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PMAALA::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PMAALA* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PMAALA*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PMAALA::MergeFrom(const PMAALA& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_alarm_status()) {
      set_alarm_status(from.alarm_status());
    }
    if (from.has_yaw_alarm_limit()) {
      set_yaw_alarm_limit(from.yaw_alarm_limit());
    }
    if (from.has_yaw_alarm_onoff()) {
      set_yaw_alarm_onoff(from.yaw_alarm_onoff());
    }
    if (from.has_surge_alarm_limit()) {
      set_surge_alarm_limit(from.surge_alarm_limit());
    }
    if (from.has_surge_alarm_onoff()) {
      set_surge_alarm_onoff(from.surge_alarm_onoff());
    }
    if (from.has_sway_alarm_limit()) {
      set_sway_alarm_limit(from.sway_alarm_limit());
    }
    if (from.has_sway_alarm_onoff()) {
      set_sway_alarm_onoff(from.sway_alarm_onoff());
    }
    if (from.has_xtrack_alarm_limit()) {
      set_xtrack_alarm_limit(from.xtrack_alarm_limit());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_xtrack_alarm_onoff()) {
      set_xtrack_alarm_onoff(from.xtrack_alarm_onoff());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PMAALA::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PMAALA::CopyFrom(const PMAALA& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PMAALA::IsInitialized() const {
  if ((_has_bits_[0] & 0x000001ff) != 0x000001ff) return false;

  return true;
}

void PMAALA::Swap(PMAALA* other) {
  if (other != this) {
    std::swap(alarm_status_, other->alarm_status_);
    std::swap(yaw_alarm_limit_, other->yaw_alarm_limit_);
    std::swap(yaw_alarm_onoff_, other->yaw_alarm_onoff_);
    std::swap(surge_alarm_limit_, other->surge_alarm_limit_);
    std::swap(surge_alarm_onoff_, other->surge_alarm_onoff_);
    std::swap(sway_alarm_limit_, other->sway_alarm_limit_);
    std::swap(sway_alarm_onoff_, other->sway_alarm_onoff_);
    std::swap(xtrack_alarm_limit_, other->xtrack_alarm_limit_);
    std::swap(xtrack_alarm_onoff_, other->xtrack_alarm_onoff_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PMAALA::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PMAALA_descriptor_;
  metadata.reflection = PMAALA_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PMAVDR::kActiveModeFieldNumber;
const int PMAVDR::kAzimuthSteeringLimitFieldNumber;
const int PMAVDR::kAxisActiveFieldNumber;
const int PMAVDR::kTurnRateFieldNumber;
const int PMAVDR::kSteeringModeFieldNumber;
const int PMAVDR::kSteeringGainFieldNumber;
#endif  // !_MSC_VER

PMAVDR::PMAVDR()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.zhichenhaixin.proto.PMAVDR)
}

void PMAVDR::InitAsDefaultInstance() {
}

PMAVDR::PMAVDR(const PMAVDR& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:com.zhichenhaixin.proto.PMAVDR)
}

void PMAVDR::SharedCtor() {
  _cached_size_ = 0;
  active_mode_ = 0;
  azimuth_steering_limit_ = 0;
  axis_active_ = 0;
  turn_rate_ = 0;
  steering_mode_ = 0;
  steering_gain_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PMAVDR::~PMAVDR() {
  // @@protoc_insertion_point(destructor:com.zhichenhaixin.proto.PMAVDR)
  SharedDtor();
}

void PMAVDR::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PMAVDR::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PMAVDR::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PMAVDR_descriptor_;
}

const PMAVDR& PMAVDR::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SCCMMSComData_2eproto();
  return *default_instance_;
}

PMAVDR* PMAVDR::default_instance_ = NULL;

PMAVDR* PMAVDR::New() const {
  return new PMAVDR;
}

void PMAVDR::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<PMAVDR*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 63) {
    ZR_(azimuth_steering_limit_, steering_gain_);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PMAVDR::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.zhichenhaixin.proto.PMAVDR)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 active_mode = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &active_mode_)));
          set_has_active_mode();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(17)) goto parse_azimuth_steering_limit;
        break;
      }

      // required double azimuth_steering_limit = 2;
      case 2: {
        if (tag == 17) {
         parse_azimuth_steering_limit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &azimuth_steering_limit_)));
          set_has_azimuth_steering_limit();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_axis_active;
        break;
      }

      // required int32 axis_active = 3;
      case 3: {
        if (tag == 24) {
         parse_axis_active:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &axis_active_)));
          set_has_axis_active();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(33)) goto parse_turn_rate;
        break;
      }

      // required double turn_rate = 4;
      case 4: {
        if (tag == 33) {
         parse_turn_rate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &turn_rate_)));
          set_has_turn_rate();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_steering_mode;
        break;
      }

      // required int32 steering_mode = 5;
      case 5: {
        if (tag == 40) {
         parse_steering_mode:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &steering_mode_)));
          set_has_steering_mode();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_steering_gain;
        break;
      }

      // required int32 steering_gain = 6;
      case 6: {
        if (tag == 48) {
         parse_steering_gain:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &steering_gain_)));
          set_has_steering_gain();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.zhichenhaixin.proto.PMAVDR)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.zhichenhaixin.proto.PMAVDR)
  return false;
#undef DO_
}

void PMAVDR::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.zhichenhaixin.proto.PMAVDR)
  // required int32 active_mode = 1;
  if (has_active_mode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->active_mode(), output);
  }

  // required double azimuth_steering_limit = 2;
  if (has_azimuth_steering_limit()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->azimuth_steering_limit(), output);
  }

  // required int32 axis_active = 3;
  if (has_axis_active()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->axis_active(), output);
  }

  // required double turn_rate = 4;
  if (has_turn_rate()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->turn_rate(), output);
  }

  // required int32 steering_mode = 5;
  if (has_steering_mode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->steering_mode(), output);
  }

  // required int32 steering_gain = 6;
  if (has_steering_gain()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->steering_gain(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.zhichenhaixin.proto.PMAVDR)
}

::google::protobuf::uint8* PMAVDR::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.zhichenhaixin.proto.PMAVDR)
  // required int32 active_mode = 1;
  if (has_active_mode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->active_mode(), target);
  }

  // required double azimuth_steering_limit = 2;
  if (has_azimuth_steering_limit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->azimuth_steering_limit(), target);
  }

  // required int32 axis_active = 3;
  if (has_axis_active()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->axis_active(), target);
  }

  // required double turn_rate = 4;
  if (has_turn_rate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->turn_rate(), target);
  }

  // required int32 steering_mode = 5;
  if (has_steering_mode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->steering_mode(), target);
  }

  // required int32 steering_gain = 6;
  if (has_steering_gain()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->steering_gain(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.zhichenhaixin.proto.PMAVDR)
  return target;
}

int PMAVDR::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 active_mode = 1;
    if (has_active_mode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->active_mode());
    }

    // required double azimuth_steering_limit = 2;
    if (has_azimuth_steering_limit()) {
      total_size += 1 + 8;
    }

    // required int32 axis_active = 3;
    if (has_axis_active()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->axis_active());
    }

    // required double turn_rate = 4;
    if (has_turn_rate()) {
      total_size += 1 + 8;
    }

    // required int32 steering_mode = 5;
    if (has_steering_mode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->steering_mode());
    }

    // required int32 steering_gain = 6;
    if (has_steering_gain()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->steering_gain());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PMAVDR::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PMAVDR* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PMAVDR*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PMAVDR::MergeFrom(const PMAVDR& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_active_mode()) {
      set_active_mode(from.active_mode());
    }
    if (from.has_azimuth_steering_limit()) {
      set_azimuth_steering_limit(from.azimuth_steering_limit());
    }
    if (from.has_axis_active()) {
      set_axis_active(from.axis_active());
    }
    if (from.has_turn_rate()) {
      set_turn_rate(from.turn_rate());
    }
    if (from.has_steering_mode()) {
      set_steering_mode(from.steering_mode());
    }
    if (from.has_steering_gain()) {
      set_steering_gain(from.steering_gain());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PMAVDR::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PMAVDR::CopyFrom(const PMAVDR& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PMAVDR::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000003f) != 0x0000003f) return false;

  return true;
}

void PMAVDR::Swap(PMAVDR* other) {
  if (other != this) {
    std::swap(active_mode_, other->active_mode_);
    std::swap(azimuth_steering_limit_, other->azimuth_steering_limit_);
    std::swap(axis_active_, other->axis_active_);
    std::swap(turn_rate_, other->turn_rate_);
    std::swap(steering_mode_, other->steering_mode_);
    std::swap(steering_gain_, other->steering_gain_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PMAVDR::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PMAVDR_descriptor_;
  metadata.reflection = PMAVDR_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DPPMAData::kGyroStsFieldNumber;
const int DPPMAData::kMruStsFieldNumber;
const int DPPMAData::kWindStsFieldNumber;
const int DPPMAData::kHeadingFieldNumber;
const int DPPMAData::kCourseFieldNumber;
const int DPPMAData::kSosFieldNumber;
const int DPPMAData::kSogFieldNumber;
const int DPPMAData::kPitchFieldNumber;
const int DPPMAData::kRollFieldNumber;
const int DPPMAData::kHeaveFieldNumber;
const int DPPMAData::kWaterDepthFieldNumber;
const int DPPMAData::kWindDirFieldNumber;
const int DPPMAData::kWindSpeedFieldNumber;
const int DPPMAData::kSurgeDemandFieldNumber;
const int DPPMAData::kSurgeFeedbackFieldNumber;
const int DPPMAData::kSwayDemandFieldNumber;
const int DPPMAData::kSwayFeedbackFieldNumber;
const int DPPMAData::kLonFieldNumber;
const int DPPMAData::kLonDirFieldNumber;
const int DPPMAData::kLatFieldNumber;
const int DPPMAData::kLatDirFieldNumber;
#endif  // !_MSC_VER

DPPMAData::DPPMAData()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.zhichenhaixin.proto.DPPMAData)
}

void DPPMAData::InitAsDefaultInstance() {
}

DPPMAData::DPPMAData(const DPPMAData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:com.zhichenhaixin.proto.DPPMAData)
}

void DPPMAData::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  gyro_sts_ = false;
  mru_sts_ = false;
  wind_sts_ = false;
  heading_ = 0;
  course_ = 0;
  sos_ = 0;
  sog_ = 0;
  pitch_ = 0;
  roll_ = 0;
  heave_ = 0;
  water_depth_ = 0;
  wind_dir_ = 0;
  wind_speed_ = 0;
  surge_demand_ = 0;
  surge_feedback_ = 0;
  sway_demand_ = 0;
  sway_feedback_ = 0;
  lon_ = 0;
  lon_dir_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  lat_ = 0;
  lat_dir_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DPPMAData::~DPPMAData() {
  // @@protoc_insertion_point(destructor:com.zhichenhaixin.proto.DPPMAData)
  SharedDtor();
}

void DPPMAData::SharedDtor() {
  if (lon_dir_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete lon_dir_;
  }
  if (lat_dir_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete lat_dir_;
  }
  if (this != default_instance_) {
  }
}

void DPPMAData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DPPMAData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DPPMAData_descriptor_;
}

const DPPMAData& DPPMAData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_SCCMMSComData_2eproto();
  return *default_instance_;
}

DPPMAData* DPPMAData::default_instance_ = NULL;

DPPMAData* DPPMAData::New() const {
  return new DPPMAData;
}

void DPPMAData::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<DPPMAData*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(heading_, pitch_);
    ZR_(gyro_sts_, wind_sts_);
  }
  if (_has_bits_[8 / 32] & 65280) {
    ZR_(roll_, sway_demand_);
  }
  if (_has_bits_[16 / 32] & 2031616) {
    ZR_(sway_feedback_, lon_);
    if (has_lon_dir()) {
      if (lon_dir_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        lon_dir_->clear();
      }
    }
    lat_ = 0;
    if (has_lat_dir()) {
      if (lat_dir_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        lat_dir_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DPPMAData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.zhichenhaixin.proto.DPPMAData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bool gyro_sts = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &gyro_sts_)));
          set_has_gyro_sts();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_mru_sts;
        break;
      }

      // required bool mru_sts = 2;
      case 2: {
        if (tag == 16) {
         parse_mru_sts:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &mru_sts_)));
          set_has_mru_sts();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_wind_sts;
        break;
      }

      // required bool wind_sts = 3;
      case 3: {
        if (tag == 24) {
         parse_wind_sts:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &wind_sts_)));
          set_has_wind_sts();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(33)) goto parse_heading;
        break;
      }

      // required double heading = 4;
      case 4: {
        if (tag == 33) {
         parse_heading:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &heading_)));
          set_has_heading();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(41)) goto parse_course;
        break;
      }

      // required double course = 5;
      case 5: {
        if (tag == 41) {
         parse_course:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &course_)));
          set_has_course();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(49)) goto parse_sos;
        break;
      }

      // required double sos = 6;
      case 6: {
        if (tag == 49) {
         parse_sos:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &sos_)));
          set_has_sos();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(57)) goto parse_sog;
        break;
      }

      // required double sog = 7;
      case 7: {
        if (tag == 57) {
         parse_sog:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &sog_)));
          set_has_sog();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(65)) goto parse_pitch;
        break;
      }

      // required double pitch = 8;
      case 8: {
        if (tag == 65) {
         parse_pitch:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &pitch_)));
          set_has_pitch();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(73)) goto parse_roll;
        break;
      }

      // required double roll = 9;
      case 9: {
        if (tag == 73) {
         parse_roll:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &roll_)));
          set_has_roll();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(81)) goto parse_heave;
        break;
      }

      // required double heave = 10;
      case 10: {
        if (tag == 81) {
         parse_heave:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &heave_)));
          set_has_heave();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(89)) goto parse_water_depth;
        break;
      }

      // required double water_depth = 11;
      case 11: {
        if (tag == 89) {
         parse_water_depth:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &water_depth_)));
          set_has_water_depth();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(97)) goto parse_wind_dir;
        break;
      }

      // required double wind_dir = 12;
      case 12: {
        if (tag == 97) {
         parse_wind_dir:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &wind_dir_)));
          set_has_wind_dir();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(105)) goto parse_wind_speed;
        break;
      }

      // required double wind_speed = 13;
      case 13: {
        if (tag == 105) {
         parse_wind_speed:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &wind_speed_)));
          set_has_wind_speed();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(113)) goto parse_surge_demand;
        break;
      }

      // required double surge_demand = 14;
      case 14: {
        if (tag == 113) {
         parse_surge_demand:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &surge_demand_)));
          set_has_surge_demand();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(121)) goto parse_surge_feedback;
        break;
      }

      // required double surge_feedback = 15;
      case 15: {
        if (tag == 121) {
         parse_surge_feedback:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &surge_feedback_)));
          set_has_surge_feedback();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(129)) goto parse_sway_demand;
        break;
      }

      // required double sway_demand = 16;
      case 16: {
        if (tag == 129) {
         parse_sway_demand:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &sway_demand_)));
          set_has_sway_demand();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(137)) goto parse_sway_feedback;
        break;
      }

      // required double sway_feedback = 17;
      case 17: {
        if (tag == 137) {
         parse_sway_feedback:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &sway_feedback_)));
          set_has_sway_feedback();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(145)) goto parse_lon;
        break;
      }

      // required double lon = 18;
      case 18: {
        if (tag == 145) {
         parse_lon:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &lon_)));
          set_has_lon();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(154)) goto parse_lon_dir;
        break;
      }

      // required string lon_dir = 19;
      case 19: {
        if (tag == 154) {
         parse_lon_dir:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_lon_dir()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->lon_dir().data(), this->lon_dir().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "lon_dir");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(161)) goto parse_lat;
        break;
      }

      // required double lat = 20;
      case 20: {
        if (tag == 161) {
         parse_lat:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &lat_)));
          set_has_lat();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(170)) goto parse_lat_dir;
        break;
      }

      // required string lat_dir = 21;
      case 21: {
        if (tag == 170) {
         parse_lat_dir:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_lat_dir()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->lat_dir().data(), this->lat_dir().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "lat_dir");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.zhichenhaixin.proto.DPPMAData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.zhichenhaixin.proto.DPPMAData)
  return false;
#undef DO_
}

void DPPMAData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.zhichenhaixin.proto.DPPMAData)
  // required bool gyro_sts = 1;
  if (has_gyro_sts()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->gyro_sts(), output);
  }

  // required bool mru_sts = 2;
  if (has_mru_sts()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->mru_sts(), output);
  }

  // required bool wind_sts = 3;
  if (has_wind_sts()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->wind_sts(), output);
  }

  // required double heading = 4;
  if (has_heading()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->heading(), output);
  }

  // required double course = 5;
  if (has_course()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->course(), output);
  }

  // required double sos = 6;
  if (has_sos()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->sos(), output);
  }

  // required double sog = 7;
  if (has_sog()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(7, this->sog(), output);
  }

  // required double pitch = 8;
  if (has_pitch()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(8, this->pitch(), output);
  }

  // required double roll = 9;
  if (has_roll()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(9, this->roll(), output);
  }

  // required double heave = 10;
  if (has_heave()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(10, this->heave(), output);
  }

  // required double water_depth = 11;
  if (has_water_depth()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(11, this->water_depth(), output);
  }

  // required double wind_dir = 12;
  if (has_wind_dir()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(12, this->wind_dir(), output);
  }

  // required double wind_speed = 13;
  if (has_wind_speed()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(13, this->wind_speed(), output);
  }

  // required double surge_demand = 14;
  if (has_surge_demand()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(14, this->surge_demand(), output);
  }

  // required double surge_feedback = 15;
  if (has_surge_feedback()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(15, this->surge_feedback(), output);
  }

  // required double sway_demand = 16;
  if (has_sway_demand()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(16, this->sway_demand(), output);
  }

  // required double sway_feedback = 17;
  if (has_sway_feedback()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(17, this->sway_feedback(), output);
  }

  // required double lon = 18;
  if (has_lon()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(18, this->lon(), output);
  }

  // required string lon_dir = 19;
  if (has_lon_dir()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->lon_dir().data(), this->lon_dir().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "lon_dir");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      19, this->lon_dir(), output);
  }

  // required double lat = 20;
  if (has_lat()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(20, this->lat(), output);
  }

  // required string lat_dir = 21;
  if (has_lat_dir()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->lat_dir().data(), this->lat_dir().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "lat_dir");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      21, this->lat_dir(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.zhichenhaixin.proto.DPPMAData)
}

::google::protobuf::uint8* DPPMAData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.zhichenhaixin.proto.DPPMAData)
  // required bool gyro_sts = 1;
  if (has_gyro_sts()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->gyro_sts(), target);
  }

  // required bool mru_sts = 2;
  if (has_mru_sts()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->mru_sts(), target);
  }

  // required bool wind_sts = 3;
  if (has_wind_sts()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->wind_sts(), target);
  }

  // required double heading = 4;
  if (has_heading()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->heading(), target);
  }

  // required double course = 5;
  if (has_course()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->course(), target);
  }

  // required double sos = 6;
  if (has_sos()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->sos(), target);
  }

  // required double sog = 7;
  if (has_sog()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(7, this->sog(), target);
  }

  // required double pitch = 8;
  if (has_pitch()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(8, this->pitch(), target);
  }

  // required double roll = 9;
  if (has_roll()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(9, this->roll(), target);
  }

  // required double heave = 10;
  if (has_heave()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(10, this->heave(), target);
  }

  // required double water_depth = 11;
  if (has_water_depth()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(11, this->water_depth(), target);
  }

  // required double wind_dir = 12;
  if (has_wind_dir()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(12, this->wind_dir(), target);
  }

  // required double wind_speed = 13;
  if (has_wind_speed()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(13, this->wind_speed(), target);
  }

  // required double surge_demand = 14;
  if (has_surge_demand()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(14, this->surge_demand(), target);
  }

  // required double surge_feedback = 15;
  if (has_surge_feedback()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(15, this->surge_feedback(), target);
  }

  // required double sway_demand = 16;
  if (has_sway_demand()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(16, this->sway_demand(), target);
  }

  // required double sway_feedback = 17;
  if (has_sway_feedback()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(17, this->sway_feedback(), target);
  }

  // required double lon = 18;
  if (has_lon()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(18, this->lon(), target);
  }

  // required string lon_dir = 19;
  if (has_lon_dir()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->lon_dir().data(), this->lon_dir().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "lon_dir");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        19, this->lon_dir(), target);
  }

  // required double lat = 20;
  if (has_lat()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(20, this->lat(), target);
  }

  // required string lat_dir = 21;
  if (has_lat_dir()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->lat_dir().data(), this->lat_dir().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "lat_dir");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        21, this->lat_dir(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.zhichenhaixin.proto.DPPMAData)
  return target;
}

int DPPMAData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bool gyro_sts = 1;
    if (has_gyro_sts()) {
      total_size += 1 + 1;
    }

    // required bool mru_sts = 2;
    if (has_mru_sts()) {
      total_size += 1 + 1;
    }

    // required bool wind_sts = 3;
    if (has_wind_sts()) {
      total_size += 1 + 1;
    }

    // required double heading = 4;
    if (has_heading()) {
      total_size += 1 + 8;
    }

    // required double course = 5;
    if (has_course()) {
      total_size += 1 + 8;
    }

    // required double sos = 6;
    if (has_sos()) {
      total_size += 1 + 8;
    }

    // required double sog = 7;
    if (has_sog()) {
      total_size += 1 + 8;
    }

    // required double pitch = 8;
    if (has_pitch()) {
      total_size += 1 + 8;
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required double roll = 9;
    if (has_roll()) {
      total_size += 1 + 8;
    }

    // required double heave = 10;
    if (has_heave()) {
      total_size += 1 + 8;
    }

    // required double water_depth = 11;
    if (has_water_depth()) {
      total_size += 1 + 8;
    }

    // required double wind_dir = 12;
    if (has_wind_dir()) {
      total_size += 1 + 8;
    }

    // required double wind_speed = 13;
    if (has_wind_speed()) {
      total_size += 1 + 8;
    }

    // required double surge_demand = 14;
    if (has_surge_demand()) {
      total_size += 1 + 8;
    }

    // required double surge_feedback = 15;
    if (has_surge_feedback()) {
      total_size += 1 + 8;
    }

    // required double sway_demand = 16;
    if (has_sway_demand()) {
      total_size += 2 + 8;
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // required double sway_feedback = 17;
    if (has_sway_feedback()) {
      total_size += 2 + 8;
    }

    // required double lon = 18;
    if (has_lon()) {
      total_size += 2 + 8;
    }

    // required string lon_dir = 19;
    if (has_lon_dir()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->lon_dir());
    }

    // required double lat = 20;
    if (has_lat()) {
      total_size += 2 + 8;
    }

    // required string lat_dir = 21;
    if (has_lat_dir()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->lat_dir());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DPPMAData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DPPMAData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DPPMAData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DPPMAData::MergeFrom(const DPPMAData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_gyro_sts()) {
      set_gyro_sts(from.gyro_sts());
    }
    if (from.has_mru_sts()) {
      set_mru_sts(from.mru_sts());
    }
    if (from.has_wind_sts()) {
      set_wind_sts(from.wind_sts());
    }
    if (from.has_heading()) {
      set_heading(from.heading());
    }
    if (from.has_course()) {
      set_course(from.course());
    }
    if (from.has_sos()) {
      set_sos(from.sos());
    }
    if (from.has_sog()) {
      set_sog(from.sog());
    }
    if (from.has_pitch()) {
      set_pitch(from.pitch());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_roll()) {
      set_roll(from.roll());
    }
    if (from.has_heave()) {
      set_heave(from.heave());
    }
    if (from.has_water_depth()) {
      set_water_depth(from.water_depth());
    }
    if (from.has_wind_dir()) {
      set_wind_dir(from.wind_dir());
    }
    if (from.has_wind_speed()) {
      set_wind_speed(from.wind_speed());
    }
    if (from.has_surge_demand()) {
      set_surge_demand(from.surge_demand());
    }
    if (from.has_surge_feedback()) {
      set_surge_feedback(from.surge_feedback());
    }
    if (from.has_sway_demand()) {
      set_sway_demand(from.sway_demand());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_sway_feedback()) {
      set_sway_feedback(from.sway_feedback());
    }
    if (from.has_lon()) {
      set_lon(from.lon());
    }
    if (from.has_lon_dir()) {
      set_lon_dir(from.lon_dir());
    }
    if (from.has_lat()) {
      set_lat(from.lat());
    }
    if (from.has_lat_dir()) {
      set_lat_dir(from.lat_dir());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DPPMAData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DPPMAData::CopyFrom(const DPPMAData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DPPMAData::IsInitialized() const {
  if ((_has_bits_[0] & 0x001fffff) != 0x001fffff) return false;

  return true;
}

void DPPMAData::Swap(DPPMAData* other) {
  if (other != this) {
    std::swap(gyro_sts_, other->gyro_sts_);
    std::swap(mru_sts_, other->mru_sts_);
    std::swap(wind_sts_, other->wind_sts_);
    std::swap(heading_, other->heading_);
    std::swap(course_, other->course_);
    std::swap(sos_, other->sos_);
    std::swap(sog_, other->sog_);
    std::swap(pitch_, other->pitch_);
    std::swap(roll_, other->roll_);
    std::swap(heave_, other->heave_);
    std::swap(water_depth_, other->water_depth_);
    std::swap(wind_dir_, other->wind_dir_);
    std::swap(wind_speed_, other->wind_speed_);
    std::swap(surge_demand_, other->surge_demand_);
    std::swap(surge_feedback_, other->surge_feedback_);
    std::swap(sway_demand_, other->sway_demand_);
    std::swap(sway_feedback_, other->sway_feedback_);
    std::swap(lon_, other->lon_);
    std::swap(lon_dir_, other->lon_dir_);
    std::swap(lat_, other->lat_);
    std::swap(lat_dir_, other->lat_dir_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DPPMAData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DPPMAData_descriptor_;
  metadata.reflection = DPPMAData_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace zhichenhaixin
}  // namespace com

// @@protoc_insertion_point(global_scope)
