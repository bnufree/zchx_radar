// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: SCCMMSComData.proto

#ifndef PROTOBUF_SCCMMSComData_2eproto__INCLUDED
#define PROTOBUF_SCCMMSComData_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace com {
namespace zhichenhaixin {
namespace proto {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_SCCMMSComData_2eproto();
void protobuf_AssignDesc_SCCMMSComData_2eproto();
void protobuf_ShutdownFile_SCCMMSComData_2eproto();

class ShipInfo;
class PlowInfo;
class LayInfo;
class Surface4017Data;
class UnderWater4017Data;
class ConstructionInfo;
class DevInfo;
class PMASNS;
class PMAGGA;
class PMAVTG;
class PMATHA;
class PMATHF;
class PMAINF;
class PMAALA;
class PMAVDR;
class DPPMAData;

// ===================================================================

class ShipInfo : public ::google::protobuf::Message {
 public:
  ShipInfo();
  virtual ~ShipInfo();

  ShipInfo(const ShipInfo& from);

  inline ShipInfo& operator=(const ShipInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ShipInfo& default_instance();

  void Swap(ShipInfo* other);

  // implements Message ----------------------------------------------

  ShipInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ShipInfo& from);
  void MergeFrom(const ShipInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int64 ship_update_time = 1;
  inline bool has_ship_update_time() const;
  inline void clear_ship_update_time();
  static const int kShipUpdateTimeFieldNumber = 1;
  inline ::google::protobuf::int64 ship_update_time() const;
  inline void set_ship_update_time(::google::protobuf::int64 value);

  // required double ship_lat = 2;
  inline bool has_ship_lat() const;
  inline void clear_ship_lat();
  static const int kShipLatFieldNumber = 2;
  inline double ship_lat() const;
  inline void set_ship_lat(double value);

  // required double ship_lon = 3;
  inline bool has_ship_lon() const;
  inline void clear_ship_lon();
  static const int kShipLonFieldNumber = 3;
  inline double ship_lon() const;
  inline void set_ship_lon(double value);

  // required double ship_speed = 4;
  inline bool has_ship_speed() const;
  inline void clear_ship_speed();
  static const int kShipSpeedFieldNumber = 4;
  inline double ship_speed() const;
  inline void set_ship_speed(double value);

  // required double ship_speed_ground = 5;
  inline bool has_ship_speed_ground() const;
  inline void clear_ship_speed_ground();
  static const int kShipSpeedGroundFieldNumber = 5;
  inline double ship_speed_ground() const;
  inline void set_ship_speed_ground(double value);

  // required double ship_head = 6;
  inline bool has_ship_head() const;
  inline void clear_ship_head();
  static const int kShipHeadFieldNumber = 6;
  inline double ship_head() const;
  inline void set_ship_head(double value);

  // required double ship_pitch = 7;
  inline bool has_ship_pitch() const;
  inline void clear_ship_pitch();
  static const int kShipPitchFieldNumber = 7;
  inline double ship_pitch() const;
  inline void set_ship_pitch(double value);

  // required double ship_roll = 8;
  inline bool has_ship_roll() const;
  inline void clear_ship_roll();
  static const int kShipRollFieldNumber = 8;
  inline double ship_roll() const;
  inline void set_ship_roll(double value);

  // required double ship_course = 9;
  inline bool has_ship_course() const;
  inline void clear_ship_course();
  static const int kShipCourseFieldNumber = 9;
  inline double ship_course() const;
  inline void set_ship_course(double value);

  // required double heave = 10;
  inline bool has_heave() const;
  inline void clear_heave();
  static const int kHeaveFieldNumber = 10;
  inline double heave() const;
  inline void set_heave(double value);

  // required double wind_dir = 11;
  inline bool has_wind_dir() const;
  inline void clear_wind_dir();
  static const int kWindDirFieldNumber = 11;
  inline double wind_dir() const;
  inline void set_wind_dir(double value);

  // required double wind_speed = 12;
  inline bool has_wind_speed() const;
  inline void clear_wind_speed();
  static const int kWindSpeedFieldNumber = 12;
  inline double wind_speed() const;
  inline void set_wind_speed(double value);

  // required double surge_demand = 13;
  inline bool has_surge_demand() const;
  inline void clear_surge_demand();
  static const int kSurgeDemandFieldNumber = 13;
  inline double surge_demand() const;
  inline void set_surge_demand(double value);

  // required double surge_feedback = 14;
  inline bool has_surge_feedback() const;
  inline void clear_surge_feedback();
  static const int kSurgeFeedbackFieldNumber = 14;
  inline double surge_feedback() const;
  inline void set_surge_feedback(double value);

  // required double sway_demand = 15;
  inline bool has_sway_demand() const;
  inline void clear_sway_demand();
  static const int kSwayDemandFieldNumber = 15;
  inline double sway_demand() const;
  inline void set_sway_demand(double value);

  // required double sway_feedback = 16;
  inline bool has_sway_feedback() const;
  inline void clear_sway_feedback();
  static const int kSwayFeedbackFieldNumber = 16;
  inline double sway_feedback() const;
  inline void set_sway_feedback(double value);

  // required int32 ship_mode = 17;
  inline bool has_ship_mode() const;
  inline void clear_ship_mode();
  static const int kShipModeFieldNumber = 17;
  inline ::google::protobuf::int32 ship_mode() const;
  inline void set_ship_mode(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:com.zhichenhaixin.proto.ShipInfo)
 private:
  inline void set_has_ship_update_time();
  inline void clear_has_ship_update_time();
  inline void set_has_ship_lat();
  inline void clear_has_ship_lat();
  inline void set_has_ship_lon();
  inline void clear_has_ship_lon();
  inline void set_has_ship_speed();
  inline void clear_has_ship_speed();
  inline void set_has_ship_speed_ground();
  inline void clear_has_ship_speed_ground();
  inline void set_has_ship_head();
  inline void clear_has_ship_head();
  inline void set_has_ship_pitch();
  inline void clear_has_ship_pitch();
  inline void set_has_ship_roll();
  inline void clear_has_ship_roll();
  inline void set_has_ship_course();
  inline void clear_has_ship_course();
  inline void set_has_heave();
  inline void clear_has_heave();
  inline void set_has_wind_dir();
  inline void clear_has_wind_dir();
  inline void set_has_wind_speed();
  inline void clear_has_wind_speed();
  inline void set_has_surge_demand();
  inline void clear_has_surge_demand();
  inline void set_has_surge_feedback();
  inline void clear_has_surge_feedback();
  inline void set_has_sway_demand();
  inline void clear_has_sway_demand();
  inline void set_has_sway_feedback();
  inline void clear_has_sway_feedback();
  inline void set_has_ship_mode();
  inline void clear_has_ship_mode();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int64 ship_update_time_;
  double ship_lat_;
  double ship_lon_;
  double ship_speed_;
  double ship_speed_ground_;
  double ship_head_;
  double ship_pitch_;
  double ship_roll_;
  double ship_course_;
  double heave_;
  double wind_dir_;
  double wind_speed_;
  double surge_demand_;
  double surge_feedback_;
  double sway_demand_;
  double sway_feedback_;
  ::google::protobuf::int32 ship_mode_;
  friend void  protobuf_AddDesc_SCCMMSComData_2eproto();
  friend void protobuf_AssignDesc_SCCMMSComData_2eproto();
  friend void protobuf_ShutdownFile_SCCMMSComData_2eproto();

  void InitAsDefaultInstance();
  static ShipInfo* default_instance_;
};
// -------------------------------------------------------------------

class PlowInfo : public ::google::protobuf::Message {
 public:
  PlowInfo();
  virtual ~PlowInfo();

  PlowInfo(const PlowInfo& from);

  inline PlowInfo& operator=(const PlowInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PlowInfo& default_instance();

  void Swap(PlowInfo* other);

  // implements Message ----------------------------------------------

  PlowInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PlowInfo& from);
  void MergeFrom(const PlowInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int64 plow_update_time = 1;
  inline bool has_plow_update_time() const;
  inline void clear_plow_update_time();
  static const int kPlowUpdateTimeFieldNumber = 1;
  inline ::google::protobuf::int64 plow_update_time() const;
  inline void set_plow_update_time(::google::protobuf::int64 value);

  // required double plow_lat = 2;
  inline bool has_plow_lat() const;
  inline void clear_plow_lat();
  static const int kPlowLatFieldNumber = 2;
  inline double plow_lat() const;
  inline void set_plow_lat(double value);

  // required double plow_lon = 3;
  inline bool has_plow_lon() const;
  inline void clear_plow_lon();
  static const int kPlowLonFieldNumber = 3;
  inline double plow_lon() const;
  inline void set_plow_lon(double value);

  // required int32 plow_pos_mode = 4;
  inline bool has_plow_pos_mode() const;
  inline void clear_plow_pos_mode();
  static const int kPlowPosModeFieldNumber = 4;
  inline ::google::protobuf::int32 plow_pos_mode() const;
  inline void set_plow_pos_mode(::google::protobuf::int32 value);

  // required bool plow_flag = 5;
  inline bool has_plow_flag() const;
  inline void clear_plow_flag();
  static const int kPlowFlagFieldNumber = 5;
  inline bool plow_flag() const;
  inline void set_plow_flag(bool value);

  // required double plow_head = 6;
  inline bool has_plow_head() const;
  inline void clear_plow_head();
  static const int kPlowHeadFieldNumber = 6;
  inline double plow_head() const;
  inline void set_plow_head(double value);

  // required double plow_roll = 7;
  inline bool has_plow_roll() const;
  inline void clear_plow_roll();
  static const int kPlowRollFieldNumber = 7;
  inline double plow_roll() const;
  inline void set_plow_roll(double value);

  // required double plow_pitch = 8;
  inline bool has_plow_pitch() const;
  inline void clear_plow_pitch();
  static const int kPlowPitchFieldNumber = 8;
  inline double plow_pitch() const;
  inline void set_plow_pitch(double value);

  // required double plow_water_depth = 9;
  inline bool has_plow_water_depth() const;
  inline void clear_plow_water_depth();
  static const int kPlowWaterDepthFieldNumber = 9;
  inline double plow_water_depth() const;
  inline void set_plow_water_depth(double value);

  // required double plow_buried_depth = 10;
  inline bool has_plow_buried_depth() const;
  inline void clear_plow_buried_depth();
  static const int kPlowBuriedDepthFieldNumber = 10;
  inline double plow_buried_depth() const;
  inline void set_plow_buried_depth(double value);

  // required double plow_left_pump = 11;
  inline bool has_plow_left_pump() const;
  inline void clear_plow_left_pump();
  static const int kPlowLeftPumpFieldNumber = 11;
  inline double plow_left_pump() const;
  inline void set_plow_left_pump(double value);

  // required double plow_right_pump = 12;
  inline bool has_plow_right_pump() const;
  inline void clear_plow_right_pump();
  static const int kPlowRightPumpFieldNumber = 12;
  inline double plow_right_pump() const;
  inline void set_plow_right_pump(double value);

  // required double plow_speed = 13;
  inline bool has_plow_speed() const;
  inline void clear_plow_speed();
  static const int kPlowSpeedFieldNumber = 13;
  inline double plow_speed() const;
  inline void set_plow_speed(double value);

  // required double plow_boots_angle = 14;
  inline bool has_plow_boots_angle() const;
  inline void clear_plow_boots_angle();
  static const int kPlowBootsAngleFieldNumber = 14;
  inline double plow_boots_angle() const;
  inline void set_plow_boots_angle(double value);

  // required double plow_boots_length = 15;
  inline bool has_plow_boots_length() const;
  inline void clear_plow_boots_length();
  static const int kPlowBootsLengthFieldNumber = 15;
  inline double plow_boots_length() const;
  inline void set_plow_boots_length(double value);

  // required double plow_tow_length = 16;
  inline bool has_plow_tow_length() const;
  inline void clear_plow_tow_length();
  static const int kPlowTowLengthFieldNumber = 16;
  inline double plow_tow_length() const;
  inline void set_plow_tow_length(double value);

  // required double plow_tow_tension = 17;
  inline bool has_plow_tow_tension() const;
  inline void clear_plow_tow_tension();
  static const int kPlowTowTensionFieldNumber = 17;
  inline double plow_tow_tension() const;
  inline void set_plow_tow_tension(double value);

  // required int64 plow_pos_update_time = 18;
  inline bool has_plow_pos_update_time() const;
  inline void clear_plow_pos_update_time();
  static const int kPlowPosUpdateTimeFieldNumber = 18;
  inline ::google::protobuf::int64 plow_pos_update_time() const;
  inline void set_plow_pos_update_time(::google::protobuf::int64 value);

  // required double plow_kp_dis = 19;
  inline bool has_plow_kp_dis() const;
  inline void clear_plow_kp_dis();
  static const int kPlowKpDisFieldNumber = 19;
  inline double plow_kp_dis() const;
  inline void set_plow_kp_dis(double value);

  // @@protoc_insertion_point(class_scope:com.zhichenhaixin.proto.PlowInfo)
 private:
  inline void set_has_plow_update_time();
  inline void clear_has_plow_update_time();
  inline void set_has_plow_lat();
  inline void clear_has_plow_lat();
  inline void set_has_plow_lon();
  inline void clear_has_plow_lon();
  inline void set_has_plow_pos_mode();
  inline void clear_has_plow_pos_mode();
  inline void set_has_plow_flag();
  inline void clear_has_plow_flag();
  inline void set_has_plow_head();
  inline void clear_has_plow_head();
  inline void set_has_plow_roll();
  inline void clear_has_plow_roll();
  inline void set_has_plow_pitch();
  inline void clear_has_plow_pitch();
  inline void set_has_plow_water_depth();
  inline void clear_has_plow_water_depth();
  inline void set_has_plow_buried_depth();
  inline void clear_has_plow_buried_depth();
  inline void set_has_plow_left_pump();
  inline void clear_has_plow_left_pump();
  inline void set_has_plow_right_pump();
  inline void clear_has_plow_right_pump();
  inline void set_has_plow_speed();
  inline void clear_has_plow_speed();
  inline void set_has_plow_boots_angle();
  inline void clear_has_plow_boots_angle();
  inline void set_has_plow_boots_length();
  inline void clear_has_plow_boots_length();
  inline void set_has_plow_tow_length();
  inline void clear_has_plow_tow_length();
  inline void set_has_plow_tow_tension();
  inline void clear_has_plow_tow_tension();
  inline void set_has_plow_pos_update_time();
  inline void clear_has_plow_pos_update_time();
  inline void set_has_plow_kp_dis();
  inline void clear_has_plow_kp_dis();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int64 plow_update_time_;
  double plow_lat_;
  double plow_lon_;
  ::google::protobuf::int32 plow_pos_mode_;
  bool plow_flag_;
  double plow_head_;
  double plow_roll_;
  double plow_pitch_;
  double plow_water_depth_;
  double plow_buried_depth_;
  double plow_left_pump_;
  double plow_right_pump_;
  double plow_speed_;
  double plow_boots_angle_;
  double plow_boots_length_;
  double plow_tow_length_;
  double plow_tow_tension_;
  ::google::protobuf::int64 plow_pos_update_time_;
  double plow_kp_dis_;
  friend void  protobuf_AddDesc_SCCMMSComData_2eproto();
  friend void protobuf_AssignDesc_SCCMMSComData_2eproto();
  friend void protobuf_ShutdownFile_SCCMMSComData_2eproto();

  void InitAsDefaultInstance();
  static PlowInfo* default_instance_;
};
// -------------------------------------------------------------------

class LayInfo : public ::google::protobuf::Message {
 public:
  LayInfo();
  virtual ~LayInfo();

  LayInfo(const LayInfo& from);

  inline LayInfo& operator=(const LayInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const LayInfo& default_instance();

  void Swap(LayInfo* other);

  // implements Message ----------------------------------------------

  LayInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const LayInfo& from);
  void MergeFrom(const LayInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int64 cable_update_time = 1;
  inline bool has_cable_update_time() const;
  inline void clear_cable_update_time();
  static const int kCableUpdateTimeFieldNumber = 1;
  inline ::google::protobuf::int64 cable_update_time() const;
  inline void set_cable_update_time(::google::protobuf::int64 value);

  // required double cable_payout_speed = 2;
  inline bool has_cable_payout_speed() const;
  inline void clear_cable_payout_speed();
  static const int kCablePayoutSpeedFieldNumber = 2;
  inline double cable_payout_speed() const;
  inline void set_cable_payout_speed(double value);

  // required double meter_counter_coeff = 3;
  inline bool has_meter_counter_coeff() const;
  inline void clear_meter_counter_coeff();
  static const int kMeterCounterCoeffFieldNumber = 3;
  inline double meter_counter_coeff() const;
  inline void set_meter_counter_coeff(double value);

  // required double meter_counter_initlen = 4;
  inline bool has_meter_counter_initlen() const;
  inline void clear_meter_counter_initlen();
  static const int kMeterCounterInitlenFieldNumber = 4;
  inline double meter_counter_initlen() const;
  inline void set_meter_counter_initlen(double value);

  // required double meter_counter_length = 5;
  inline bool has_meter_counter_length() const;
  inline void clear_meter_counter_length();
  static const int kMeterCounterLengthFieldNumber = 5;
  inline double meter_counter_length() const;
  inline void set_meter_counter_length(double value);

  // required double cable_length = 6;
  inline bool has_cable_length() const;
  inline void clear_cable_length();
  static const int kCableLengthFieldNumber = 6;
  inline double cable_length() const;
  inline void set_cable_length(double value);

  // required double glj_cb_tension = 7;
  inline bool has_glj_cb_tension() const;
  inline void clear_glj_cb_tension();
  static const int kGljCbTensionFieldNumber = 7;
  inline double glj_cb_tension() const;
  inline void set_glj_cb_tension(double value);

  // required double glj_cb_speed = 8;
  inline bool has_glj_cb_speed() const;
  inline void clear_glj_cb_speed();
  static const int kGljCbSpeedFieldNumber = 8;
  inline double glj_cb_speed() const;
  inline void set_glj_cb_speed(double value);

  // required double glj_cb_length = 9;
  inline bool has_glj_cb_length() const;
  inline void clear_glj_cb_length();
  static const int kGljCbLengthFieldNumber = 9;
  inline double glj_cb_length() const;
  inline void set_glj_cb_length(double value);

  // required double ltj_cb_tension = 10;
  inline bool has_ltj_cb_tension() const;
  inline void clear_ltj_cb_tension();
  static const int kLtjCbTensionFieldNumber = 10;
  inline double ltj_cb_tension() const;
  inline void set_ltj_cb_tension(double value);

  // required double ltj_cb_speed = 11;
  inline bool has_ltj_cb_speed() const;
  inline void clear_ltj_cb_speed();
  static const int kLtjCbSpeedFieldNumber = 11;
  inline double ltj_cb_speed() const;
  inline void set_ltj_cb_speed(double value);

  // required double ltj_cb_length = 12;
  inline bool has_ltj_cb_length() const;
  inline void clear_ltj_cb_length();
  static const int kLtjCbLengthFieldNumber = 12;
  inline double ltj_cb_length() const;
  inline void set_ltj_cb_length(double value);

  // required double tl_tension = 13;
  inline bool has_tl_tension() const;
  inline void clear_tl_tension();
  static const int kTlTensionFieldNumber = 13;
  inline double tl_tension() const;
  inline void set_tl_tension(double value);

  // required double tl_length = 14;
  inline bool has_tl_length() const;
  inline void clear_tl_length();
  static const int kTlLengthFieldNumber = 14;
  inline double tl_length() const;
  inline void set_tl_length(double value);

  // required double qd_tension = 15;
  inline bool has_qd_tension() const;
  inline void clear_qd_tension();
  static const int kQdTensionFieldNumber = 15;
  inline double qd_tension() const;
  inline void set_qd_tension(double value);

  // required double qd_length = 16;
  inline bool has_qd_length() const;
  inline void clear_qd_length();
  static const int kQdLengthFieldNumber = 16;
  inline double qd_length() const;
  inline void set_qd_length(double value);

  // required int32 light_status = 17;
  inline bool has_light_status() const;
  inline void clear_light_status();
  static const int kLightStatusFieldNumber = 17;
  inline ::google::protobuf::int32 light_status() const;
  inline void set_light_status(::google::protobuf::int32 value);

  // required int64 meter_counter_time = 18;
  inline bool has_meter_counter_time() const;
  inline void clear_meter_counter_time();
  static const int kMeterCounterTimeFieldNumber = 18;
  inline ::google::protobuf::int64 meter_counter_time() const;
  inline void set_meter_counter_time(::google::protobuf::int64 value);

  // required int32 meter_source = 19;
  inline bool has_meter_source() const;
  inline void clear_meter_source();
  static const int kMeterSourceFieldNumber = 19;
  inline ::google::protobuf::int32 meter_source() const;
  inline void set_meter_source(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:com.zhichenhaixin.proto.LayInfo)
 private:
  inline void set_has_cable_update_time();
  inline void clear_has_cable_update_time();
  inline void set_has_cable_payout_speed();
  inline void clear_has_cable_payout_speed();
  inline void set_has_meter_counter_coeff();
  inline void clear_has_meter_counter_coeff();
  inline void set_has_meter_counter_initlen();
  inline void clear_has_meter_counter_initlen();
  inline void set_has_meter_counter_length();
  inline void clear_has_meter_counter_length();
  inline void set_has_cable_length();
  inline void clear_has_cable_length();
  inline void set_has_glj_cb_tension();
  inline void clear_has_glj_cb_tension();
  inline void set_has_glj_cb_speed();
  inline void clear_has_glj_cb_speed();
  inline void set_has_glj_cb_length();
  inline void clear_has_glj_cb_length();
  inline void set_has_ltj_cb_tension();
  inline void clear_has_ltj_cb_tension();
  inline void set_has_ltj_cb_speed();
  inline void clear_has_ltj_cb_speed();
  inline void set_has_ltj_cb_length();
  inline void clear_has_ltj_cb_length();
  inline void set_has_tl_tension();
  inline void clear_has_tl_tension();
  inline void set_has_tl_length();
  inline void clear_has_tl_length();
  inline void set_has_qd_tension();
  inline void clear_has_qd_tension();
  inline void set_has_qd_length();
  inline void clear_has_qd_length();
  inline void set_has_light_status();
  inline void clear_has_light_status();
  inline void set_has_meter_counter_time();
  inline void clear_has_meter_counter_time();
  inline void set_has_meter_source();
  inline void clear_has_meter_source();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int64 cable_update_time_;
  double cable_payout_speed_;
  double meter_counter_coeff_;
  double meter_counter_initlen_;
  double meter_counter_length_;
  double cable_length_;
  double glj_cb_tension_;
  double glj_cb_speed_;
  double glj_cb_length_;
  double ltj_cb_tension_;
  double ltj_cb_speed_;
  double ltj_cb_length_;
  double tl_tension_;
  double tl_length_;
  double qd_tension_;
  double qd_length_;
  ::google::protobuf::int64 meter_counter_time_;
  ::google::protobuf::int32 light_status_;
  ::google::protobuf::int32 meter_source_;
  friend void  protobuf_AddDesc_SCCMMSComData_2eproto();
  friend void protobuf_AssignDesc_SCCMMSComData_2eproto();
  friend void protobuf_ShutdownFile_SCCMMSComData_2eproto();

  void InitAsDefaultInstance();
  static LayInfo* default_instance_;
};
// -------------------------------------------------------------------

class Surface4017Data : public ::google::protobuf::Message {
 public:
  Surface4017Data();
  virtual ~Surface4017Data();

  Surface4017Data(const Surface4017Data& from);

  inline Surface4017Data& operator=(const Surface4017Data& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Surface4017Data& default_instance();

  void Swap(Surface4017Data* other);

  // implements Message ----------------------------------------------

  Surface4017Data* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Surface4017Data& from);
  void MergeFrom(const Surface4017Data& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required double surface_4017_pull1 = 1;
  inline bool has_surface_4017_pull1() const;
  inline void clear_surface_4017_pull1();
  static const int kSurface4017Pull1FieldNumber = 1;
  inline double surface_4017_pull1() const;
  inline void set_surface_4017_pull1(double value);

  // required double surface_4017_pull2 = 2;
  inline bool has_surface_4017_pull2() const;
  inline void clear_surface_4017_pull2();
  static const int kSurface4017Pull2FieldNumber = 2;
  inline double surface_4017_pull2() const;
  inline void set_surface_4017_pull2(double value);

  // required double surface_4017_pull3 = 3;
  inline bool has_surface_4017_pull3() const;
  inline void clear_surface_4017_pull3();
  static const int kSurface4017Pull3FieldNumber = 3;
  inline double surface_4017_pull3() const;
  inline void set_surface_4017_pull3(double value);

  // required double surface_4017_lpump = 4;
  inline bool has_surface_4017_lpump() const;
  inline void clear_surface_4017_lpump();
  static const int kSurface4017LpumpFieldNumber = 4;
  inline double surface_4017_lpump() const;
  inline void set_surface_4017_lpump(double value);

  // required double surface_4017_rpump = 5;
  inline bool has_surface_4017_rpump() const;
  inline void clear_surface_4017_rpump();
  static const int kSurface4017RpumpFieldNumber = 5;
  inline double surface_4017_rpump() const;
  inline void set_surface_4017_rpump(double value);

  // required int64 surface_4017_time = 6;
  inline bool has_surface_4017_time() const;
  inline void clear_surface_4017_time();
  static const int kSurface4017TimeFieldNumber = 6;
  inline ::google::protobuf::int64 surface_4017_time() const;
  inline void set_surface_4017_time(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:com.zhichenhaixin.proto.Surface4017Data)
 private:
  inline void set_has_surface_4017_pull1();
  inline void clear_has_surface_4017_pull1();
  inline void set_has_surface_4017_pull2();
  inline void clear_has_surface_4017_pull2();
  inline void set_has_surface_4017_pull3();
  inline void clear_has_surface_4017_pull3();
  inline void set_has_surface_4017_lpump();
  inline void clear_has_surface_4017_lpump();
  inline void set_has_surface_4017_rpump();
  inline void clear_has_surface_4017_rpump();
  inline void set_has_surface_4017_time();
  inline void clear_has_surface_4017_time();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  double surface_4017_pull1_;
  double surface_4017_pull2_;
  double surface_4017_pull3_;
  double surface_4017_lpump_;
  double surface_4017_rpump_;
  ::google::protobuf::int64 surface_4017_time_;
  friend void  protobuf_AddDesc_SCCMMSComData_2eproto();
  friend void protobuf_AssignDesc_SCCMMSComData_2eproto();
  friend void protobuf_ShutdownFile_SCCMMSComData_2eproto();

  void InitAsDefaultInstance();
  static Surface4017Data* default_instance_;
};
// -------------------------------------------------------------------

class UnderWater4017Data : public ::google::protobuf::Message {
 public:
  UnderWater4017Data();
  virtual ~UnderWater4017Data();

  UnderWater4017Data(const UnderWater4017Data& from);

  inline UnderWater4017Data& operator=(const UnderWater4017Data& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const UnderWater4017Data& default_instance();

  void Swap(UnderWater4017Data* other);

  // implements Message ----------------------------------------------

  UnderWater4017Data* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const UnderWater4017Data& from);
  void MergeFrom(const UnderWater4017Data& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required double under_4017_pull1 = 1;
  inline bool has_under_4017_pull1() const;
  inline void clear_under_4017_pull1();
  static const int kUnder4017Pull1FieldNumber = 1;
  inline double under_4017_pull1() const;
  inline void set_under_4017_pull1(double value);

  // required double under_4017_pull2 = 2;
  inline bool has_under_4017_pull2() const;
  inline void clear_under_4017_pull2();
  static const int kUnder4017Pull2FieldNumber = 2;
  inline double under_4017_pull2() const;
  inline void set_under_4017_pull2(double value);

  // required double under_4017_pull3 = 3;
  inline bool has_under_4017_pull3() const;
  inline void clear_under_4017_pull3();
  static const int kUnder4017Pull3FieldNumber = 3;
  inline double under_4017_pull3() const;
  inline void set_under_4017_pull3(double value);

  // required double under_4017_lpump = 4;
  inline bool has_under_4017_lpump() const;
  inline void clear_under_4017_lpump();
  static const int kUnder4017LpumpFieldNumber = 4;
  inline double under_4017_lpump() const;
  inline void set_under_4017_lpump(double value);

  // required double under_4017_rpump = 5;
  inline bool has_under_4017_rpump() const;
  inline void clear_under_4017_rpump();
  static const int kUnder4017RpumpFieldNumber = 5;
  inline double under_4017_rpump() const;
  inline void set_under_4017_rpump(double value);

  // required double under_4017_water_depth = 6;
  inline bool has_under_4017_water_depth() const;
  inline void clear_under_4017_water_depth();
  static const int kUnder4017WaterDepthFieldNumber = 6;
  inline double under_4017_water_depth() const;
  inline void set_under_4017_water_depth(double value);

  // required double under_4017_boots_angle = 7;
  inline bool has_under_4017_boots_angle() const;
  inline void clear_under_4017_boots_angle();
  static const int kUnder4017BootsAngleFieldNumber = 7;
  inline double under_4017_boots_angle() const;
  inline void set_under_4017_boots_angle(double value);

  // required double under_4017_boots_length = 8;
  inline bool has_under_4017_boots_length() const;
  inline void clear_under_4017_boots_length();
  static const int kUnder4017BootsLengthFieldNumber = 8;
  inline double under_4017_boots_length() const;
  inline void set_under_4017_boots_length(double value);

  // required double under_4017_buried_depth = 9;
  inline bool has_under_4017_buried_depth() const;
  inline void clear_under_4017_buried_depth();
  static const int kUnder4017BuriedDepthFieldNumber = 9;
  inline double under_4017_buried_depth() const;
  inline void set_under_4017_buried_depth(double value);

  // required double under_4017_touch_down_p1 = 10;
  inline bool has_under_4017_touch_down_p1() const;
  inline void clear_under_4017_touch_down_p1();
  static const int kUnder4017TouchDownP1FieldNumber = 10;
  inline double under_4017_touch_down_p1() const;
  inline void set_under_4017_touch_down_p1(double value);

  // required double under_4017_touch_down_p2 = 11;
  inline bool has_under_4017_touch_down_p2() const;
  inline void clear_under_4017_touch_down_p2();
  static const int kUnder4017TouchDownP2FieldNumber = 11;
  inline double under_4017_touch_down_p2() const;
  inline void set_under_4017_touch_down_p2(double value);

  // required double under_4017_touch_down_p3 = 12;
  inline bool has_under_4017_touch_down_p3() const;
  inline void clear_under_4017_touch_down_p3();
  static const int kUnder4017TouchDownP3FieldNumber = 12;
  inline double under_4017_touch_down_p3() const;
  inline void set_under_4017_touch_down_p3(double value);

  // required double under_4017_touch_down_p4 = 13;
  inline bool has_under_4017_touch_down_p4() const;
  inline void clear_under_4017_touch_down_p4();
  static const int kUnder4017TouchDownP4FieldNumber = 13;
  inline double under_4017_touch_down_p4() const;
  inline void set_under_4017_touch_down_p4(double value);

  // required int64 under_4017_time = 14;
  inline bool has_under_4017_time() const;
  inline void clear_under_4017_time();
  static const int kUnder4017TimeFieldNumber = 14;
  inline ::google::protobuf::int64 under_4017_time() const;
  inline void set_under_4017_time(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:com.zhichenhaixin.proto.UnderWater4017Data)
 private:
  inline void set_has_under_4017_pull1();
  inline void clear_has_under_4017_pull1();
  inline void set_has_under_4017_pull2();
  inline void clear_has_under_4017_pull2();
  inline void set_has_under_4017_pull3();
  inline void clear_has_under_4017_pull3();
  inline void set_has_under_4017_lpump();
  inline void clear_has_under_4017_lpump();
  inline void set_has_under_4017_rpump();
  inline void clear_has_under_4017_rpump();
  inline void set_has_under_4017_water_depth();
  inline void clear_has_under_4017_water_depth();
  inline void set_has_under_4017_boots_angle();
  inline void clear_has_under_4017_boots_angle();
  inline void set_has_under_4017_boots_length();
  inline void clear_has_under_4017_boots_length();
  inline void set_has_under_4017_buried_depth();
  inline void clear_has_under_4017_buried_depth();
  inline void set_has_under_4017_touch_down_p1();
  inline void clear_has_under_4017_touch_down_p1();
  inline void set_has_under_4017_touch_down_p2();
  inline void clear_has_under_4017_touch_down_p2();
  inline void set_has_under_4017_touch_down_p3();
  inline void clear_has_under_4017_touch_down_p3();
  inline void set_has_under_4017_touch_down_p4();
  inline void clear_has_under_4017_touch_down_p4();
  inline void set_has_under_4017_time();
  inline void clear_has_under_4017_time();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  double under_4017_pull1_;
  double under_4017_pull2_;
  double under_4017_pull3_;
  double under_4017_lpump_;
  double under_4017_rpump_;
  double under_4017_water_depth_;
  double under_4017_boots_angle_;
  double under_4017_boots_length_;
  double under_4017_buried_depth_;
  double under_4017_touch_down_p1_;
  double under_4017_touch_down_p2_;
  double under_4017_touch_down_p3_;
  double under_4017_touch_down_p4_;
  ::google::protobuf::int64 under_4017_time_;
  friend void  protobuf_AddDesc_SCCMMSComData_2eproto();
  friend void protobuf_AssignDesc_SCCMMSComData_2eproto();
  friend void protobuf_ShutdownFile_SCCMMSComData_2eproto();

  void InitAsDefaultInstance();
  static UnderWater4017Data* default_instance_;
};
// -------------------------------------------------------------------

class ConstructionInfo : public ::google::protobuf::Message {
 public:
  ConstructionInfo();
  virtual ~ConstructionInfo();

  ConstructionInfo(const ConstructionInfo& from);

  inline ConstructionInfo& operator=(const ConstructionInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ConstructionInfo& default_instance();

  void Swap(ConstructionInfo* other);

  // implements Message ----------------------------------------------

  ConstructionInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ConstructionInfo& from);
  void MergeFrom(const ConstructionInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bool isContructed = 1;
  inline bool has_iscontructed() const;
  inline void clear_iscontructed();
  static const int kIsContructedFieldNumber = 1;
  inline bool iscontructed() const;
  inline void set_iscontructed(bool value);

  // required string host_name = 2;
  inline bool has_host_name() const;
  inline void clear_host_name();
  static const int kHostNameFieldNumber = 2;
  inline const ::std::string& host_name() const;
  inline void set_host_name(const ::std::string& value);
  inline void set_host_name(const char* value);
  inline void set_host_name(const char* value, size_t size);
  inline ::std::string* mutable_host_name();
  inline ::std::string* release_host_name();
  inline void set_allocated_host_name(::std::string* host_name);

  // required int32 project_id = 3;
  inline bool has_project_id() const;
  inline void clear_project_id();
  static const int kProjectIdFieldNumber = 3;
  inline ::google::protobuf::int32 project_id() const;
  inline void set_project_id(::google::protobuf::int32 value);

  // required int32 route_id = 4;
  inline bool has_route_id() const;
  inline void clear_route_id();
  static const int kRouteIdFieldNumber = 4;
  inline ::google::protobuf::int32 route_id() const;
  inline void set_route_id(::google::protobuf::int32 value);

  // required int32 plan_id = 5;
  inline bool has_plan_id() const;
  inline void clear_plan_id();
  static const int kPlanIdFieldNumber = 5;
  inline ::google::protobuf::int32 plan_id() const;
  inline void set_plan_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:com.zhichenhaixin.proto.ConstructionInfo)
 private:
  inline void set_has_iscontructed();
  inline void clear_has_iscontructed();
  inline void set_has_host_name();
  inline void clear_has_host_name();
  inline void set_has_project_id();
  inline void clear_has_project_id();
  inline void set_has_route_id();
  inline void clear_has_route_id();
  inline void set_has_plan_id();
  inline void clear_has_plan_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* host_name_;
  bool iscontructed_;
  ::google::protobuf::int32 project_id_;
  ::google::protobuf::int32 route_id_;
  ::google::protobuf::int32 plan_id_;
  friend void  protobuf_AddDesc_SCCMMSComData_2eproto();
  friend void protobuf_AssignDesc_SCCMMSComData_2eproto();
  friend void protobuf_ShutdownFile_SCCMMSComData_2eproto();

  void InitAsDefaultInstance();
  static ConstructionInfo* default_instance_;
};
// -------------------------------------------------------------------

class DevInfo : public ::google::protobuf::Message {
 public:
  DevInfo();
  virtual ~DevInfo();

  DevInfo(const DevInfo& from);

  inline DevInfo& operator=(const DevInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DevInfo& default_instance();

  void Swap(DevInfo* other);

  // implements Message ----------------------------------------------

  DevInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DevInfo& from);
  void MergeFrom(const DevInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .com.zhichenhaixin.proto.ShipInfo ship_info = 1;
  inline bool has_ship_info() const;
  inline void clear_ship_info();
  static const int kShipInfoFieldNumber = 1;
  inline const ::com::zhichenhaixin::proto::ShipInfo& ship_info() const;
  inline ::com::zhichenhaixin::proto::ShipInfo* mutable_ship_info();
  inline ::com::zhichenhaixin::proto::ShipInfo* release_ship_info();
  inline void set_allocated_ship_info(::com::zhichenhaixin::proto::ShipInfo* ship_info);

  // required .com.zhichenhaixin.proto.PlowInfo plow_info = 2;
  inline bool has_plow_info() const;
  inline void clear_plow_info();
  static const int kPlowInfoFieldNumber = 2;
  inline const ::com::zhichenhaixin::proto::PlowInfo& plow_info() const;
  inline ::com::zhichenhaixin::proto::PlowInfo* mutable_plow_info();
  inline ::com::zhichenhaixin::proto::PlowInfo* release_plow_info();
  inline void set_allocated_plow_info(::com::zhichenhaixin::proto::PlowInfo* plow_info);

  // required .com.zhichenhaixin.proto.LayInfo lay_info = 3;
  inline bool has_lay_info() const;
  inline void clear_lay_info();
  static const int kLayInfoFieldNumber = 3;
  inline const ::com::zhichenhaixin::proto::LayInfo& lay_info() const;
  inline ::com::zhichenhaixin::proto::LayInfo* mutable_lay_info();
  inline ::com::zhichenhaixin::proto::LayInfo* release_lay_info();
  inline void set_allocated_lay_info(::com::zhichenhaixin::proto::LayInfo* lay_info);

  // required .com.zhichenhaixin.proto.Surface4017Data surface_4017 = 4;
  inline bool has_surface_4017() const;
  inline void clear_surface_4017();
  static const int kSurface4017FieldNumber = 4;
  inline const ::com::zhichenhaixin::proto::Surface4017Data& surface_4017() const;
  inline ::com::zhichenhaixin::proto::Surface4017Data* mutable_surface_4017();
  inline ::com::zhichenhaixin::proto::Surface4017Data* release_surface_4017();
  inline void set_allocated_surface_4017(::com::zhichenhaixin::proto::Surface4017Data* surface_4017);

  // required .com.zhichenhaixin.proto.UnderWater4017Data under_4017 = 5;
  inline bool has_under_4017() const;
  inline void clear_under_4017();
  static const int kUnder4017FieldNumber = 5;
  inline const ::com::zhichenhaixin::proto::UnderWater4017Data& under_4017() const;
  inline ::com::zhichenhaixin::proto::UnderWater4017Data* mutable_under_4017();
  inline ::com::zhichenhaixin::proto::UnderWater4017Data* release_under_4017();
  inline void set_allocated_under_4017(::com::zhichenhaixin::proto::UnderWater4017Data* under_4017);

  // required bool surface_hmr3000_checked_flg = 6;
  inline bool has_surface_hmr3000_checked_flg() const;
  inline void clear_surface_hmr3000_checked_flg();
  static const int kSurfaceHmr3000CheckedFlgFieldNumber = 6;
  inline bool surface_hmr3000_checked_flg() const;
  inline void set_surface_hmr3000_checked_flg(bool value);

  // required bool under_hmr3000_checked_flg = 7;
  inline bool has_under_hmr3000_checked_flg() const;
  inline void clear_under_hmr3000_checked_flg();
  static const int kUnderHmr3000CheckedFlgFieldNumber = 7;
  inline bool under_hmr3000_checked_flg() const;
  inline void set_under_hmr3000_checked_flg(bool value);

  // required bool gsp_checked_flg = 8;
  inline bool has_gsp_checked_flg() const;
  inline void clear_gsp_checked_flg();
  static const int kGspCheckedFlgFieldNumber = 8;
  inline bool gsp_checked_flg() const;
  inline void set_gsp_checked_flg(bool value);

  // required bool usbl_checked_flg = 9;
  inline bool has_usbl_checked_flg() const;
  inline void clear_usbl_checked_flg();
  static const int kUsblCheckedFlgFieldNumber = 9;
  inline bool usbl_checked_flg() const;
  inline void set_usbl_checked_flg(bool value);

  // required bool surface_4017_checked_flg = 10;
  inline bool has_surface_4017_checked_flg() const;
  inline void clear_surface_4017_checked_flg();
  static const int kSurface4017CheckedFlgFieldNumber = 10;
  inline bool surface_4017_checked_flg() const;
  inline void set_surface_4017_checked_flg(bool value);

  // required bool under_4017_checked_flg = 11;
  inline bool has_under_4017_checked_flg() const;
  inline void clear_under_4017_checked_flg();
  static const int kUnder4017CheckedFlgFieldNumber = 11;
  inline bool under_4017_checked_flg() const;
  inline void set_under_4017_checked_flg(bool value);

  // required bool metercounter_checked_flg = 12;
  inline bool has_metercounter_checked_flg() const;
  inline void clear_metercounter_checked_flg();
  static const int kMetercounterCheckedFlgFieldNumber = 12;
  inline bool metercounter_checked_flg() const;
  inline void set_metercounter_checked_flg(bool value);

  // required bool navi_device_checked_flg = 13;
  inline bool has_navi_device_checked_flg() const;
  inline void clear_navi_device_checked_flg();
  static const int kNaviDeviceCheckedFlgFieldNumber = 13;
  inline bool navi_device_checked_flg() const;
  inline void set_navi_device_checked_flg(bool value);

  // required bool cable_integrated_checked_flg = 14;
  inline bool has_cable_integrated_checked_flg() const;
  inline void clear_cable_integrated_checked_flg();
  static const int kCableIntegratedCheckedFlgFieldNumber = 14;
  inline bool cable_integrated_checked_flg() const;
  inline void set_cable_integrated_checked_flg(bool value);

  // required bool dp_checked_flg = 15;
  inline bool has_dp_checked_flg() const;
  inline void clear_dp_checked_flg();
  static const int kDpCheckedFlgFieldNumber = 15;
  inline bool dp_checked_flg() const;
  inline void set_dp_checked_flg(bool value);

  // required .com.zhichenhaixin.proto.ConstructionInfo construct_info = 16;
  inline bool has_construct_info() const;
  inline void clear_construct_info();
  static const int kConstructInfoFieldNumber = 16;
  inline const ::com::zhichenhaixin::proto::ConstructionInfo& construct_info() const;
  inline ::com::zhichenhaixin::proto::ConstructionInfo* mutable_construct_info();
  inline ::com::zhichenhaixin::proto::ConstructionInfo* release_construct_info();
  inline void set_allocated_construct_info(::com::zhichenhaixin::proto::ConstructionInfo* construct_info);

  // @@protoc_insertion_point(class_scope:com.zhichenhaixin.proto.DevInfo)
 private:
  inline void set_has_ship_info();
  inline void clear_has_ship_info();
  inline void set_has_plow_info();
  inline void clear_has_plow_info();
  inline void set_has_lay_info();
  inline void clear_has_lay_info();
  inline void set_has_surface_4017();
  inline void clear_has_surface_4017();
  inline void set_has_under_4017();
  inline void clear_has_under_4017();
  inline void set_has_surface_hmr3000_checked_flg();
  inline void clear_has_surface_hmr3000_checked_flg();
  inline void set_has_under_hmr3000_checked_flg();
  inline void clear_has_under_hmr3000_checked_flg();
  inline void set_has_gsp_checked_flg();
  inline void clear_has_gsp_checked_flg();
  inline void set_has_usbl_checked_flg();
  inline void clear_has_usbl_checked_flg();
  inline void set_has_surface_4017_checked_flg();
  inline void clear_has_surface_4017_checked_flg();
  inline void set_has_under_4017_checked_flg();
  inline void clear_has_under_4017_checked_flg();
  inline void set_has_metercounter_checked_flg();
  inline void clear_has_metercounter_checked_flg();
  inline void set_has_navi_device_checked_flg();
  inline void clear_has_navi_device_checked_flg();
  inline void set_has_cable_integrated_checked_flg();
  inline void clear_has_cable_integrated_checked_flg();
  inline void set_has_dp_checked_flg();
  inline void clear_has_dp_checked_flg();
  inline void set_has_construct_info();
  inline void clear_has_construct_info();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::com::zhichenhaixin::proto::ShipInfo* ship_info_;
  ::com::zhichenhaixin::proto::PlowInfo* plow_info_;
  ::com::zhichenhaixin::proto::LayInfo* lay_info_;
  ::com::zhichenhaixin::proto::Surface4017Data* surface_4017_;
  ::com::zhichenhaixin::proto::UnderWater4017Data* under_4017_;
  bool surface_hmr3000_checked_flg_;
  bool under_hmr3000_checked_flg_;
  bool gsp_checked_flg_;
  bool usbl_checked_flg_;
  bool surface_4017_checked_flg_;
  bool under_4017_checked_flg_;
  bool metercounter_checked_flg_;
  bool navi_device_checked_flg_;
  ::com::zhichenhaixin::proto::ConstructionInfo* construct_info_;
  bool cable_integrated_checked_flg_;
  bool dp_checked_flg_;
  friend void  protobuf_AddDesc_SCCMMSComData_2eproto();
  friend void protobuf_AssignDesc_SCCMMSComData_2eproto();
  friend void protobuf_ShutdownFile_SCCMMSComData_2eproto();

  void InitAsDefaultInstance();
  static DevInfo* default_instance_;
};
// -------------------------------------------------------------------

class PMASNS : public ::google::protobuf::Message {
 public:
  PMASNS();
  virtual ~PMASNS();

  PMASNS(const PMASNS& from);

  inline PMASNS& operator=(const PMASNS& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PMASNS& default_instance();

  void Swap(PMASNS* other);

  // implements Message ----------------------------------------------

  PMASNS* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PMASNS& from);
  void MergeFrom(const PMASNS& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string date = 1;
  inline bool has_date() const;
  inline void clear_date();
  static const int kDateFieldNumber = 1;
  inline const ::std::string& date() const;
  inline void set_date(const ::std::string& value);
  inline void set_date(const char* value);
  inline void set_date(const char* value, size_t size);
  inline ::std::string* mutable_date();
  inline ::std::string* release_date();
  inline void set_allocated_date(::std::string* date);

  // required string time = 2;
  inline bool has_time() const;
  inline void clear_time();
  static const int kTimeFieldNumber = 2;
  inline const ::std::string& time() const;
  inline void set_time(const ::std::string& value);
  inline void set_time(const char* value);
  inline void set_time(const char* value, size_t size);
  inline ::std::string* mutable_time();
  inline ::std::string* release_time();
  inline void set_allocated_time(::std::string* time);

  // required int32 gyro1_sts = 3;
  inline bool has_gyro1_sts() const;
  inline void clear_gyro1_sts();
  static const int kGyro1StsFieldNumber = 3;
  inline ::google::protobuf::int32 gyro1_sts() const;
  inline void set_gyro1_sts(::google::protobuf::int32 value);

  // required double heading1 = 4;
  inline bool has_heading1() const;
  inline void clear_heading1();
  static const int kHeading1FieldNumber = 4;
  inline double heading1() const;
  inline void set_heading1(double value);

  // required int32 gyro2_sts = 5;
  inline bool has_gyro2_sts() const;
  inline void clear_gyro2_sts();
  static const int kGyro2StsFieldNumber = 5;
  inline ::google::protobuf::int32 gyro2_sts() const;
  inline void set_gyro2_sts(::google::protobuf::int32 value);

  // required double heading2 = 6;
  inline bool has_heading2() const;
  inline void clear_heading2();
  static const int kHeading2FieldNumber = 6;
  inline double heading2() const;
  inline void set_heading2(double value);

  // required int32 gyro3_sts = 7;
  inline bool has_gyro3_sts() const;
  inline void clear_gyro3_sts();
  static const int kGyro3StsFieldNumber = 7;
  inline ::google::protobuf::int32 gyro3_sts() const;
  inline void set_gyro3_sts(::google::protobuf::int32 value);

  // required double heading3 = 8;
  inline bool has_heading3() const;
  inline void clear_heading3();
  static const int kHeading3FieldNumber = 8;
  inline double heading3() const;
  inline void set_heading3(double value);

  // required int32 mru1_sts = 9;
  inline bool has_mru1_sts() const;
  inline void clear_mru1_sts();
  static const int kMru1StsFieldNumber = 9;
  inline ::google::protobuf::int32 mru1_sts() const;
  inline void set_mru1_sts(::google::protobuf::int32 value);

  // required double pitch1 = 10;
  inline bool has_pitch1() const;
  inline void clear_pitch1();
  static const int kPitch1FieldNumber = 10;
  inline double pitch1() const;
  inline void set_pitch1(double value);

  // required int32 roll1 = 11;
  inline bool has_roll1() const;
  inline void clear_roll1();
  static const int kRoll1FieldNumber = 11;
  inline ::google::protobuf::int32 roll1() const;
  inline void set_roll1(::google::protobuf::int32 value);

  // required double heave1 = 12;
  inline bool has_heave1() const;
  inline void clear_heave1();
  static const int kHeave1FieldNumber = 12;
  inline double heave1() const;
  inline void set_heave1(double value);

  // required int32 mru2_sts = 13;
  inline bool has_mru2_sts() const;
  inline void clear_mru2_sts();
  static const int kMru2StsFieldNumber = 13;
  inline ::google::protobuf::int32 mru2_sts() const;
  inline void set_mru2_sts(::google::protobuf::int32 value);

  // required double pitch2 = 14;
  inline bool has_pitch2() const;
  inline void clear_pitch2();
  static const int kPitch2FieldNumber = 14;
  inline double pitch2() const;
  inline void set_pitch2(double value);

  // required int32 roll2 = 15;
  inline bool has_roll2() const;
  inline void clear_roll2();
  static const int kRoll2FieldNumber = 15;
  inline ::google::protobuf::int32 roll2() const;
  inline void set_roll2(::google::protobuf::int32 value);

  // required double heave2 = 16;
  inline bool has_heave2() const;
  inline void clear_heave2();
  static const int kHeave2FieldNumber = 16;
  inline double heave2() const;
  inline void set_heave2(double value);

  // required int32 wind1_sts = 17;
  inline bool has_wind1_sts() const;
  inline void clear_wind1_sts();
  static const int kWind1StsFieldNumber = 17;
  inline ::google::protobuf::int32 wind1_sts() const;
  inline void set_wind1_sts(::google::protobuf::int32 value);

  // required double speed1 = 18;
  inline bool has_speed1() const;
  inline void clear_speed1();
  static const int kSpeed1FieldNumber = 18;
  inline double speed1() const;
  inline void set_speed1(double value);

  // required int32 speed_dir1 = 19;
  inline bool has_speed_dir1() const;
  inline void clear_speed_dir1();
  static const int kSpeedDir1FieldNumber = 19;
  inline ::google::protobuf::int32 speed_dir1() const;
  inline void set_speed_dir1(::google::protobuf::int32 value);

  // required double wind2_sts = 20;
  inline bool has_wind2_sts() const;
  inline void clear_wind2_sts();
  static const int kWind2StsFieldNumber = 20;
  inline double wind2_sts() const;
  inline void set_wind2_sts(double value);

  // required int32 speed2 = 21;
  inline bool has_speed2() const;
  inline void clear_speed2();
  static const int kSpeed2FieldNumber = 21;
  inline ::google::protobuf::int32 speed2() const;
  inline void set_speed2(::google::protobuf::int32 value);

  // required double speed_dir2 = 22;
  inline bool has_speed_dir2() const;
  inline void clear_speed_dir2();
  static const int kSpeedDir2FieldNumber = 22;
  inline double speed_dir2() const;
  inline void set_speed_dir2(double value);

  // @@protoc_insertion_point(class_scope:com.zhichenhaixin.proto.PMASNS)
 private:
  inline void set_has_date();
  inline void clear_has_date();
  inline void set_has_time();
  inline void clear_has_time();
  inline void set_has_gyro1_sts();
  inline void clear_has_gyro1_sts();
  inline void set_has_heading1();
  inline void clear_has_heading1();
  inline void set_has_gyro2_sts();
  inline void clear_has_gyro2_sts();
  inline void set_has_heading2();
  inline void clear_has_heading2();
  inline void set_has_gyro3_sts();
  inline void clear_has_gyro3_sts();
  inline void set_has_heading3();
  inline void clear_has_heading3();
  inline void set_has_mru1_sts();
  inline void clear_has_mru1_sts();
  inline void set_has_pitch1();
  inline void clear_has_pitch1();
  inline void set_has_roll1();
  inline void clear_has_roll1();
  inline void set_has_heave1();
  inline void clear_has_heave1();
  inline void set_has_mru2_sts();
  inline void clear_has_mru2_sts();
  inline void set_has_pitch2();
  inline void clear_has_pitch2();
  inline void set_has_roll2();
  inline void clear_has_roll2();
  inline void set_has_heave2();
  inline void clear_has_heave2();
  inline void set_has_wind1_sts();
  inline void clear_has_wind1_sts();
  inline void set_has_speed1();
  inline void clear_has_speed1();
  inline void set_has_speed_dir1();
  inline void clear_has_speed_dir1();
  inline void set_has_wind2_sts();
  inline void clear_has_wind2_sts();
  inline void set_has_speed2();
  inline void clear_has_speed2();
  inline void set_has_speed_dir2();
  inline void clear_has_speed_dir2();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* date_;
  ::std::string* time_;
  double heading1_;
  ::google::protobuf::int32 gyro1_sts_;
  ::google::protobuf::int32 gyro2_sts_;
  double heading2_;
  double heading3_;
  ::google::protobuf::int32 gyro3_sts_;
  ::google::protobuf::int32 mru1_sts_;
  double pitch1_;
  double heave1_;
  ::google::protobuf::int32 roll1_;
  ::google::protobuf::int32 mru2_sts_;
  double pitch2_;
  double heave2_;
  ::google::protobuf::int32 roll2_;
  ::google::protobuf::int32 wind1_sts_;
  double speed1_;
  double wind2_sts_;
  ::google::protobuf::int32 speed_dir1_;
  ::google::protobuf::int32 speed2_;
  double speed_dir2_;
  friend void  protobuf_AddDesc_SCCMMSComData_2eproto();
  friend void protobuf_AssignDesc_SCCMMSComData_2eproto();
  friend void protobuf_ShutdownFile_SCCMMSComData_2eproto();

  void InitAsDefaultInstance();
  static PMASNS* default_instance_;
};
// -------------------------------------------------------------------

class PMAGGA : public ::google::protobuf::Message {
 public:
  PMAGGA();
  virtual ~PMAGGA();

  PMAGGA(const PMAGGA& from);

  inline PMAGGA& operator=(const PMAGGA& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PMAGGA& default_instance();

  void Swap(PMAGGA* other);

  // implements Message ----------------------------------------------

  PMAGGA* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PMAGGA& from);
  void MergeFrom(const PMAGGA& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 gps_identifier = 1;
  inline bool has_gps_identifier() const;
  inline void clear_gps_identifier();
  static const int kGpsIdentifierFieldNumber = 1;
  inline ::google::protobuf::int32 gps_identifier() const;
  inline void set_gps_identifier(::google::protobuf::int32 value);

  // required string time = 2;
  inline bool has_time() const;
  inline void clear_time();
  static const int kTimeFieldNumber = 2;
  inline const ::std::string& time() const;
  inline void set_time(const ::std::string& value);
  inline void set_time(const char* value);
  inline void set_time(const char* value, size_t size);
  inline ::std::string* mutable_time();
  inline ::std::string* release_time();
  inline void set_allocated_time(::std::string* time);

  // required double lat = 3;
  inline bool has_lat() const;
  inline void clear_lat();
  static const int kLatFieldNumber = 3;
  inline double lat() const;
  inline void set_lat(double value);

  // required string lat_dir = 4;
  inline bool has_lat_dir() const;
  inline void clear_lat_dir();
  static const int kLatDirFieldNumber = 4;
  inline const ::std::string& lat_dir() const;
  inline void set_lat_dir(const ::std::string& value);
  inline void set_lat_dir(const char* value);
  inline void set_lat_dir(const char* value, size_t size);
  inline ::std::string* mutable_lat_dir();
  inline ::std::string* release_lat_dir();
  inline void set_allocated_lat_dir(::std::string* lat_dir);

  // required double lon = 5;
  inline bool has_lon() const;
  inline void clear_lon();
  static const int kLonFieldNumber = 5;
  inline double lon() const;
  inline void set_lon(double value);

  // required string lon_dir = 6;
  inline bool has_lon_dir() const;
  inline void clear_lon_dir();
  static const int kLonDirFieldNumber = 6;
  inline const ::std::string& lon_dir() const;
  inline void set_lon_dir(const ::std::string& value);
  inline void set_lon_dir(const char* value);
  inline void set_lon_dir(const char* value, size_t size);
  inline ::std::string* mutable_lon_dir();
  inline ::std::string* release_lon_dir();
  inline void set_allocated_lon_dir(::std::string* lon_dir);

  // required int32 gps_qualifier = 7;
  inline bool has_gps_qualifier() const;
  inline void clear_gps_qualifier();
  static const int kGpsQualifierFieldNumber = 7;
  inline ::google::protobuf::int32 gps_qualifier() const;
  inline void set_gps_qualifier(::google::protobuf::int32 value);

  // required int32 satellites_number = 8;
  inline bool has_satellites_number() const;
  inline void clear_satellites_number();
  static const int kSatellitesNumberFieldNumber = 8;
  inline ::google::protobuf::int32 satellites_number() const;
  inline void set_satellites_number(::google::protobuf::int32 value);

  // required double hdop = 9;
  inline bool has_hdop() const;
  inline void clear_hdop();
  static const int kHdopFieldNumber = 9;
  inline double hdop() const;
  inline void set_hdop(double value);

  // required string reserve1 = 10;
  inline bool has_reserve1() const;
  inline void clear_reserve1();
  static const int kReserve1FieldNumber = 10;
  inline const ::std::string& reserve1() const;
  inline void set_reserve1(const ::std::string& value);
  inline void set_reserve1(const char* value);
  inline void set_reserve1(const char* value, size_t size);
  inline ::std::string* mutable_reserve1();
  inline ::std::string* release_reserve1();
  inline void set_allocated_reserve1(::std::string* reserve1);

  // required string reserve2 = 11;
  inline bool has_reserve2() const;
  inline void clear_reserve2();
  static const int kReserve2FieldNumber = 11;
  inline const ::std::string& reserve2() const;
  inline void set_reserve2(const ::std::string& value);
  inline void set_reserve2(const char* value);
  inline void set_reserve2(const char* value, size_t size);
  inline ::std::string* mutable_reserve2();
  inline ::std::string* release_reserve2();
  inline void set_allocated_reserve2(::std::string* reserve2);

  // required string reserve3 = 12;
  inline bool has_reserve3() const;
  inline void clear_reserve3();
  static const int kReserve3FieldNumber = 12;
  inline const ::std::string& reserve3() const;
  inline void set_reserve3(const ::std::string& value);
  inline void set_reserve3(const char* value);
  inline void set_reserve3(const char* value, size_t size);
  inline ::std::string* mutable_reserve3();
  inline ::std::string* release_reserve3();
  inline void set_allocated_reserve3(::std::string* reserve3);

  // required string geo_unit = 13;
  inline bool has_geo_unit() const;
  inline void clear_geo_unit();
  static const int kGeoUnitFieldNumber = 13;
  inline const ::std::string& geo_unit() const;
  inline void set_geo_unit(const ::std::string& value);
  inline void set_geo_unit(const char* value);
  inline void set_geo_unit(const char* value, size_t size);
  inline ::std::string* mutable_geo_unit();
  inline ::std::string* release_geo_unit();
  inline void set_allocated_geo_unit(::std::string* geo_unit);

  // required string reserve4 = 14;
  inline bool has_reserve4() const;
  inline void clear_reserve4();
  static const int kReserve4FieldNumber = 14;
  inline const ::std::string& reserve4() const;
  inline void set_reserve4(const ::std::string& value);
  inline void set_reserve4(const char* value);
  inline void set_reserve4(const char* value, size_t size);
  inline ::std::string* mutable_reserve4();
  inline ::std::string* release_reserve4();
  inline void set_allocated_reserve4(::std::string* reserve4);

  // required string reserve5 = 15;
  inline bool has_reserve5() const;
  inline void clear_reserve5();
  static const int kReserve5FieldNumber = 15;
  inline const ::std::string& reserve5() const;
  inline void set_reserve5(const ::std::string& value);
  inline void set_reserve5(const char* value);
  inline void set_reserve5(const char* value, size_t size);
  inline ::std::string* mutable_reserve5();
  inline ::std::string* release_reserve5();
  inline void set_allocated_reserve5(::std::string* reserve5);

  // @@protoc_insertion_point(class_scope:com.zhichenhaixin.proto.PMAGGA)
 private:
  inline void set_has_gps_identifier();
  inline void clear_has_gps_identifier();
  inline void set_has_time();
  inline void clear_has_time();
  inline void set_has_lat();
  inline void clear_has_lat();
  inline void set_has_lat_dir();
  inline void clear_has_lat_dir();
  inline void set_has_lon();
  inline void clear_has_lon();
  inline void set_has_lon_dir();
  inline void clear_has_lon_dir();
  inline void set_has_gps_qualifier();
  inline void clear_has_gps_qualifier();
  inline void set_has_satellites_number();
  inline void clear_has_satellites_number();
  inline void set_has_hdop();
  inline void clear_has_hdop();
  inline void set_has_reserve1();
  inline void clear_has_reserve1();
  inline void set_has_reserve2();
  inline void clear_has_reserve2();
  inline void set_has_reserve3();
  inline void clear_has_reserve3();
  inline void set_has_geo_unit();
  inline void clear_has_geo_unit();
  inline void set_has_reserve4();
  inline void clear_has_reserve4();
  inline void set_has_reserve5();
  inline void clear_has_reserve5();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* time_;
  double lat_;
  ::std::string* lat_dir_;
  ::google::protobuf::int32 gps_identifier_;
  ::google::protobuf::int32 gps_qualifier_;
  double lon_;
  ::std::string* lon_dir_;
  double hdop_;
  ::std::string* reserve1_;
  ::std::string* reserve2_;
  ::std::string* reserve3_;
  ::std::string* geo_unit_;
  ::std::string* reserve4_;
  ::std::string* reserve5_;
  ::google::protobuf::int32 satellites_number_;
  friend void  protobuf_AddDesc_SCCMMSComData_2eproto();
  friend void protobuf_AssignDesc_SCCMMSComData_2eproto();
  friend void protobuf_ShutdownFile_SCCMMSComData_2eproto();

  void InitAsDefaultInstance();
  static PMAGGA* default_instance_;
};
// -------------------------------------------------------------------

class PMAVTG : public ::google::protobuf::Message {
 public:
  PMAVTG();
  virtual ~PMAVTG();

  PMAVTG(const PMAVTG& from);

  inline PMAVTG& operator=(const PMAVTG& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PMAVTG& default_instance();

  void Swap(PMAVTG* other);

  // implements Message ----------------------------------------------

  PMAVTG* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PMAVTG& from);
  void MergeFrom(const PMAVTG& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 gps_identifier = 1;
  inline bool has_gps_identifier() const;
  inline void clear_gps_identifier();
  static const int kGpsIdentifierFieldNumber = 1;
  inline ::google::protobuf::int32 gps_identifier() const;
  inline void set_gps_identifier(::google::protobuf::int32 value);

  // required double true_course = 2;
  inline bool has_true_course() const;
  inline void clear_true_course();
  static const int kTrueCourseFieldNumber = 2;
  inline double true_course() const;
  inline void set_true_course(double value);

  // required double magn_course = 3;
  inline bool has_magn_course() const;
  inline void clear_magn_course();
  static const int kMagnCourseFieldNumber = 3;
  inline double magn_course() const;
  inline void set_magn_course(double value);

  // required double speed_knots = 4;
  inline bool has_speed_knots() const;
  inline void clear_speed_knots();
  static const int kSpeedKnotsFieldNumber = 4;
  inline double speed_knots() const;
  inline void set_speed_knots(double value);

  // required double speed_kmph = 5;
  inline bool has_speed_kmph() const;
  inline void clear_speed_kmph();
  static const int kSpeedKmphFieldNumber = 5;
  inline double speed_kmph() const;
  inline void set_speed_kmph(double value);

  // @@protoc_insertion_point(class_scope:com.zhichenhaixin.proto.PMAVTG)
 private:
  inline void set_has_gps_identifier();
  inline void clear_has_gps_identifier();
  inline void set_has_true_course();
  inline void clear_has_true_course();
  inline void set_has_magn_course();
  inline void clear_has_magn_course();
  inline void set_has_speed_knots();
  inline void clear_has_speed_knots();
  inline void set_has_speed_kmph();
  inline void clear_has_speed_kmph();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  double true_course_;
  double magn_course_;
  double speed_knots_;
  double speed_kmph_;
  ::google::protobuf::int32 gps_identifier_;
  friend void  protobuf_AddDesc_SCCMMSComData_2eproto();
  friend void protobuf_AssignDesc_SCCMMSComData_2eproto();
  friend void protobuf_ShutdownFile_SCCMMSComData_2eproto();

  void InitAsDefaultInstance();
  static PMAVTG* default_instance_;
};
// -------------------------------------------------------------------

class PMATHA : public ::google::protobuf::Message {
 public:
  PMATHA();
  virtual ~PMATHA();

  PMATHA(const PMATHA& from);

  inline PMATHA& operator=(const PMATHA& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PMATHA& default_instance();

  void Swap(PMATHA* other);

  // implements Message ----------------------------------------------

  PMATHA* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PMATHA& from);
  void MergeFrom(const PMATHA& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required double surge_demand = 1;
  inline bool has_surge_demand() const;
  inline void clear_surge_demand();
  static const int kSurgeDemandFieldNumber = 1;
  inline double surge_demand() const;
  inline void set_surge_demand(double value);

  // required double surge_feedback = 2;
  inline bool has_surge_feedback() const;
  inline void clear_surge_feedback();
  static const int kSurgeFeedbackFieldNumber = 2;
  inline double surge_feedback() const;
  inline void set_surge_feedback(double value);

  // required double sway_demand = 3;
  inline bool has_sway_demand() const;
  inline void clear_sway_demand();
  static const int kSwayDemandFieldNumber = 3;
  inline double sway_demand() const;
  inline void set_sway_demand(double value);

  // required double sway_feedback = 4;
  inline bool has_sway_feedback() const;
  inline void clear_sway_feedback();
  static const int kSwayFeedbackFieldNumber = 4;
  inline double sway_feedback() const;
  inline void set_sway_feedback(double value);

  // required double yaw_demand = 5;
  inline bool has_yaw_demand() const;
  inline void clear_yaw_demand();
  static const int kYawDemandFieldNumber = 5;
  inline double yaw_demand() const;
  inline void set_yaw_demand(double value);

  // required double yaw_feedback = 6;
  inline bool has_yaw_feedback() const;
  inline void clear_yaw_feedback();
  static const int kYawFeedbackFieldNumber = 6;
  inline double yaw_feedback() const;
  inline void set_yaw_feedback(double value);

  // @@protoc_insertion_point(class_scope:com.zhichenhaixin.proto.PMATHA)
 private:
  inline void set_has_surge_demand();
  inline void clear_has_surge_demand();
  inline void set_has_surge_feedback();
  inline void clear_has_surge_feedback();
  inline void set_has_sway_demand();
  inline void clear_has_sway_demand();
  inline void set_has_sway_feedback();
  inline void clear_has_sway_feedback();
  inline void set_has_yaw_demand();
  inline void clear_has_yaw_demand();
  inline void set_has_yaw_feedback();
  inline void clear_has_yaw_feedback();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  double surge_demand_;
  double surge_feedback_;
  double sway_demand_;
  double sway_feedback_;
  double yaw_demand_;
  double yaw_feedback_;
  friend void  protobuf_AddDesc_SCCMMSComData_2eproto();
  friend void protobuf_AssignDesc_SCCMMSComData_2eproto();
  friend void protobuf_ShutdownFile_SCCMMSComData_2eproto();

  void InitAsDefaultInstance();
  static PMATHA* default_instance_;
};
// -------------------------------------------------------------------

class PMATHF : public ::google::protobuf::Message {
 public:
  PMATHF();
  virtual ~PMATHF();

  PMATHF(const PMATHF& from);

  inline PMATHF& operator=(const PMATHF& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PMATHF& default_instance();

  void Swap(PMATHF* other);

  // implements Message ----------------------------------------------

  PMATHF* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PMATHF& from);
  void MergeFrom(const PMATHF& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 thruster_number = 1;
  inline bool has_thruster_number() const;
  inline void clear_thruster_number();
  static const int kThrusterNumberFieldNumber = 1;
  inline ::google::protobuf::int32 thruster_number() const;
  inline void set_thruster_number(::google::protobuf::int32 value);

  // required string thruster_Status = 2;
  inline bool has_thruster_status() const;
  inline void clear_thruster_status();
  static const int kThrusterStatusFieldNumber = 2;
  inline const ::std::string& thruster_status() const;
  inline void set_thruster_status(const ::std::string& value);
  inline void set_thruster_status(const char* value);
  inline void set_thruster_status(const char* value, size_t size);
  inline ::std::string* mutable_thruster_status();
  inline ::std::string* release_thruster_status();
  inline void set_allocated_thruster_status(::std::string* thruster_status);

  // required double rpm_pitch_demand = 3;
  inline bool has_rpm_pitch_demand() const;
  inline void clear_rpm_pitch_demand();
  static const int kRpmPitchDemandFieldNumber = 3;
  inline double rpm_pitch_demand() const;
  inline void set_rpm_pitch_demand(double value);

  // required double rpm_pitch_feedback = 4;
  inline bool has_rpm_pitch_feedback() const;
  inline void clear_rpm_pitch_feedback();
  static const int kRpmPitchFeedbackFieldNumber = 4;
  inline double rpm_pitch_feedback() const;
  inline void set_rpm_pitch_feedback(double value);

  // required double thrust_demand = 5;
  inline bool has_thrust_demand() const;
  inline void clear_thrust_demand();
  static const int kThrustDemandFieldNumber = 5;
  inline double thrust_demand() const;
  inline void set_thrust_demand(double value);

  // required double thrust_feedback = 6;
  inline bool has_thrust_feedback() const;
  inline void clear_thrust_feedback();
  static const int kThrustFeedbackFieldNumber = 6;
  inline double thrust_feedback() const;
  inline void set_thrust_feedback(double value);

  // required double azimuth_demand = 7;
  inline bool has_azimuth_demand() const;
  inline void clear_azimuth_demand();
  static const int kAzimuthDemandFieldNumber = 7;
  inline double azimuth_demand() const;
  inline void set_azimuth_demand(double value);

  // required double azimuth_feedback = 8;
  inline bool has_azimuth_feedback() const;
  inline void clear_azimuth_feedback();
  static const int kAzimuthFeedbackFieldNumber = 8;
  inline double azimuth_feedback() const;
  inline void set_azimuth_feedback(double value);

  // @@protoc_insertion_point(class_scope:com.zhichenhaixin.proto.PMATHF)
 private:
  inline void set_has_thruster_number();
  inline void clear_has_thruster_number();
  inline void set_has_thruster_status();
  inline void clear_has_thruster_status();
  inline void set_has_rpm_pitch_demand();
  inline void clear_has_rpm_pitch_demand();
  inline void set_has_rpm_pitch_feedback();
  inline void clear_has_rpm_pitch_feedback();
  inline void set_has_thrust_demand();
  inline void clear_has_thrust_demand();
  inline void set_has_thrust_feedback();
  inline void clear_has_thrust_feedback();
  inline void set_has_azimuth_demand();
  inline void clear_has_azimuth_demand();
  inline void set_has_azimuth_feedback();
  inline void clear_has_azimuth_feedback();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* thruster_status_;
  double rpm_pitch_demand_;
  double rpm_pitch_feedback_;
  double thrust_demand_;
  double thrust_feedback_;
  double azimuth_demand_;
  double azimuth_feedback_;
  ::google::protobuf::int32 thruster_number_;
  friend void  protobuf_AddDesc_SCCMMSComData_2eproto();
  friend void protobuf_AssignDesc_SCCMMSComData_2eproto();
  friend void protobuf_ShutdownFile_SCCMMSComData_2eproto();

  void InitAsDefaultInstance();
  static PMATHF* default_instance_;
};
// -------------------------------------------------------------------

class PMAINF : public ::google::protobuf::Message {
 public:
  PMAINF();
  virtual ~PMAINF();

  PMAINF(const PMAINF& from);

  inline PMAINF& operator=(const PMAINF& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PMAINF& default_instance();

  void Swap(PMAINF* other);

  // implements Message ----------------------------------------------

  PMAINF* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PMAINF& from);
  void MergeFrom(const PMAINF& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 refsys = 1;
  inline bool has_refsys() const;
  inline void clear_refsys();
  static const int kRefsysFieldNumber = 1;
  inline ::google::protobuf::int32 refsys() const;
  inline void set_refsys(::google::protobuf::int32 value);

  // required int32 gyro = 2;
  inline bool has_gyro() const;
  inline void clear_gyro();
  static const int kGyroFieldNumber = 2;
  inline ::google::protobuf::int32 gyro() const;
  inline void set_gyro(::google::protobuf::int32 value);

  // required int32 mru = 3;
  inline bool has_mru() const;
  inline void clear_mru();
  static const int kMruFieldNumber = 3;
  inline ::google::protobuf::int32 mru() const;
  inline void set_mru(::google::protobuf::int32 value);

  // required int32 wind = 4;
  inline bool has_wind() const;
  inline void clear_wind();
  static const int kWindFieldNumber = 4;
  inline ::google::protobuf::int32 wind() const;
  inline void set_wind(::google::protobuf::int32 value);

  // required double estimate_lat = 5;
  inline bool has_estimate_lat() const;
  inline void clear_estimate_lat();
  static const int kEstimateLatFieldNumber = 5;
  inline double estimate_lat() const;
  inline void set_estimate_lat(double value);

  // required string estimate_lat_dir = 6;
  inline bool has_estimate_lat_dir() const;
  inline void clear_estimate_lat_dir();
  static const int kEstimateLatDirFieldNumber = 6;
  inline const ::std::string& estimate_lat_dir() const;
  inline void set_estimate_lat_dir(const ::std::string& value);
  inline void set_estimate_lat_dir(const char* value);
  inline void set_estimate_lat_dir(const char* value, size_t size);
  inline ::std::string* mutable_estimate_lat_dir();
  inline ::std::string* release_estimate_lat_dir();
  inline void set_allocated_estimate_lat_dir(::std::string* estimate_lat_dir);

  // required double estimate_lon = 7;
  inline bool has_estimate_lon() const;
  inline void clear_estimate_lon();
  static const int kEstimateLonFieldNumber = 7;
  inline double estimate_lon() const;
  inline void set_estimate_lon(double value);

  // required string estimate_lon_dir = 8;
  inline bool has_estimate_lon_dir() const;
  inline void clear_estimate_lon_dir();
  static const int kEstimateLonDirFieldNumber = 8;
  inline const ::std::string& estimate_lon_dir() const;
  inline void set_estimate_lon_dir(const ::std::string& value);
  inline void set_estimate_lon_dir(const char* value);
  inline void set_estimate_lon_dir(const char* value, size_t size);
  inline ::std::string* mutable_estimate_lon_dir();
  inline ::std::string* release_estimate_lon_dir();
  inline void set_allocated_estimate_lon_dir(::std::string* estimate_lon_dir);

  // required double demand_lat = 9;
  inline bool has_demand_lat() const;
  inline void clear_demand_lat();
  static const int kDemandLatFieldNumber = 9;
  inline double demand_lat() const;
  inline void set_demand_lat(double value);

  // required string demand_lat_dir = 10;
  inline bool has_demand_lat_dir() const;
  inline void clear_demand_lat_dir();
  static const int kDemandLatDirFieldNumber = 10;
  inline const ::std::string& demand_lat_dir() const;
  inline void set_demand_lat_dir(const ::std::string& value);
  inline void set_demand_lat_dir(const char* value);
  inline void set_demand_lat_dir(const char* value, size_t size);
  inline ::std::string* mutable_demand_lat_dir();
  inline ::std::string* release_demand_lat_dir();
  inline void set_allocated_demand_lat_dir(::std::string* demand_lat_dir);

  // required double demand_lon = 11;
  inline bool has_demand_lon() const;
  inline void clear_demand_lon();
  static const int kDemandLonFieldNumber = 11;
  inline double demand_lon() const;
  inline void set_demand_lon(double value);

  // required string demand_lon_dir = 12;
  inline bool has_demand_lon_dir() const;
  inline void clear_demand_lon_dir();
  static const int kDemandLonDirFieldNumber = 12;
  inline const ::std::string& demand_lon_dir() const;
  inline void set_demand_lon_dir(const ::std::string& value);
  inline void set_demand_lon_dir(const char* value);
  inline void set_demand_lon_dir(const char* value, size_t size);
  inline ::std::string* mutable_demand_lon_dir();
  inline ::std::string* release_demand_lon_dir();
  inline void set_allocated_demand_lon_dir(::std::string* demand_lon_dir);

  // required double estimate_heading = 13;
  inline bool has_estimate_heading() const;
  inline void clear_estimate_heading();
  static const int kEstimateHeadingFieldNumber = 13;
  inline double estimate_heading() const;
  inline void set_estimate_heading(double value);

  // required double demand_heading = 14;
  inline bool has_demand_heading() const;
  inline void clear_demand_heading();
  static const int kDemandHeadingFieldNumber = 14;
  inline double demand_heading() const;
  inline void set_demand_heading(double value);

  // required int32 controller_gain = 15;
  inline bool has_controller_gain() const;
  inline void clear_controller_gain();
  static const int kControllerGainFieldNumber = 15;
  inline ::google::protobuf::int32 controller_gain() const;
  inline void set_controller_gain(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:com.zhichenhaixin.proto.PMAINF)
 private:
  inline void set_has_refsys();
  inline void clear_has_refsys();
  inline void set_has_gyro();
  inline void clear_has_gyro();
  inline void set_has_mru();
  inline void clear_has_mru();
  inline void set_has_wind();
  inline void clear_has_wind();
  inline void set_has_estimate_lat();
  inline void clear_has_estimate_lat();
  inline void set_has_estimate_lat_dir();
  inline void clear_has_estimate_lat_dir();
  inline void set_has_estimate_lon();
  inline void clear_has_estimate_lon();
  inline void set_has_estimate_lon_dir();
  inline void clear_has_estimate_lon_dir();
  inline void set_has_demand_lat();
  inline void clear_has_demand_lat();
  inline void set_has_demand_lat_dir();
  inline void clear_has_demand_lat_dir();
  inline void set_has_demand_lon();
  inline void clear_has_demand_lon();
  inline void set_has_demand_lon_dir();
  inline void clear_has_demand_lon_dir();
  inline void set_has_estimate_heading();
  inline void clear_has_estimate_heading();
  inline void set_has_demand_heading();
  inline void clear_has_demand_heading();
  inline void set_has_controller_gain();
  inline void clear_has_controller_gain();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 refsys_;
  ::google::protobuf::int32 gyro_;
  ::google::protobuf::int32 mru_;
  ::google::protobuf::int32 wind_;
  double estimate_lat_;
  ::std::string* estimate_lat_dir_;
  double estimate_lon_;
  ::std::string* estimate_lon_dir_;
  double demand_lat_;
  ::std::string* demand_lat_dir_;
  double demand_lon_;
  ::std::string* demand_lon_dir_;
  double estimate_heading_;
  double demand_heading_;
  ::google::protobuf::int32 controller_gain_;
  friend void  protobuf_AddDesc_SCCMMSComData_2eproto();
  friend void protobuf_AssignDesc_SCCMMSComData_2eproto();
  friend void protobuf_ShutdownFile_SCCMMSComData_2eproto();

  void InitAsDefaultInstance();
  static PMAINF* default_instance_;
};
// -------------------------------------------------------------------

class PMAALA : public ::google::protobuf::Message {
 public:
  PMAALA();
  virtual ~PMAALA();

  PMAALA(const PMAALA& from);

  inline PMAALA& operator=(const PMAALA& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PMAALA& default_instance();

  void Swap(PMAALA* other);

  // implements Message ----------------------------------------------

  PMAALA* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PMAALA& from);
  void MergeFrom(const PMAALA& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 alarm_status = 1;
  inline bool has_alarm_status() const;
  inline void clear_alarm_status();
  static const int kAlarmStatusFieldNumber = 1;
  inline ::google::protobuf::int32 alarm_status() const;
  inline void set_alarm_status(::google::protobuf::int32 value);

  // required double yaw_alarm_limit = 2;
  inline bool has_yaw_alarm_limit() const;
  inline void clear_yaw_alarm_limit();
  static const int kYawAlarmLimitFieldNumber = 2;
  inline double yaw_alarm_limit() const;
  inline void set_yaw_alarm_limit(double value);

  // required bool yaw_alarm_onoff = 3;
  inline bool has_yaw_alarm_onoff() const;
  inline void clear_yaw_alarm_onoff();
  static const int kYawAlarmOnoffFieldNumber = 3;
  inline bool yaw_alarm_onoff() const;
  inline void set_yaw_alarm_onoff(bool value);

  // required double surge_alarm_limit = 4;
  inline bool has_surge_alarm_limit() const;
  inline void clear_surge_alarm_limit();
  static const int kSurgeAlarmLimitFieldNumber = 4;
  inline double surge_alarm_limit() const;
  inline void set_surge_alarm_limit(double value);

  // required bool surge_alarm_onoff = 5;
  inline bool has_surge_alarm_onoff() const;
  inline void clear_surge_alarm_onoff();
  static const int kSurgeAlarmOnoffFieldNumber = 5;
  inline bool surge_alarm_onoff() const;
  inline void set_surge_alarm_onoff(bool value);

  // required double sway_alarm_limit = 6;
  inline bool has_sway_alarm_limit() const;
  inline void clear_sway_alarm_limit();
  static const int kSwayAlarmLimitFieldNumber = 6;
  inline double sway_alarm_limit() const;
  inline void set_sway_alarm_limit(double value);

  // required bool sway_alarm_onoff = 7;
  inline bool has_sway_alarm_onoff() const;
  inline void clear_sway_alarm_onoff();
  static const int kSwayAlarmOnoffFieldNumber = 7;
  inline bool sway_alarm_onoff() const;
  inline void set_sway_alarm_onoff(bool value);

  // required double xtrack_alarm_limit = 8;
  inline bool has_xtrack_alarm_limit() const;
  inline void clear_xtrack_alarm_limit();
  static const int kXtrackAlarmLimitFieldNumber = 8;
  inline double xtrack_alarm_limit() const;
  inline void set_xtrack_alarm_limit(double value);

  // required bool xtrack_alarm_onoff = 9;
  inline bool has_xtrack_alarm_onoff() const;
  inline void clear_xtrack_alarm_onoff();
  static const int kXtrackAlarmOnoffFieldNumber = 9;
  inline bool xtrack_alarm_onoff() const;
  inline void set_xtrack_alarm_onoff(bool value);

  // @@protoc_insertion_point(class_scope:com.zhichenhaixin.proto.PMAALA)
 private:
  inline void set_has_alarm_status();
  inline void clear_has_alarm_status();
  inline void set_has_yaw_alarm_limit();
  inline void clear_has_yaw_alarm_limit();
  inline void set_has_yaw_alarm_onoff();
  inline void clear_has_yaw_alarm_onoff();
  inline void set_has_surge_alarm_limit();
  inline void clear_has_surge_alarm_limit();
  inline void set_has_surge_alarm_onoff();
  inline void clear_has_surge_alarm_onoff();
  inline void set_has_sway_alarm_limit();
  inline void clear_has_sway_alarm_limit();
  inline void set_has_sway_alarm_onoff();
  inline void clear_has_sway_alarm_onoff();
  inline void set_has_xtrack_alarm_limit();
  inline void clear_has_xtrack_alarm_limit();
  inline void set_has_xtrack_alarm_onoff();
  inline void clear_has_xtrack_alarm_onoff();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  double yaw_alarm_limit_;
  double surge_alarm_limit_;
  ::google::protobuf::int32 alarm_status_;
  bool yaw_alarm_onoff_;
  bool surge_alarm_onoff_;
  bool sway_alarm_onoff_;
  bool xtrack_alarm_onoff_;
  double sway_alarm_limit_;
  double xtrack_alarm_limit_;
  friend void  protobuf_AddDesc_SCCMMSComData_2eproto();
  friend void protobuf_AssignDesc_SCCMMSComData_2eproto();
  friend void protobuf_ShutdownFile_SCCMMSComData_2eproto();

  void InitAsDefaultInstance();
  static PMAALA* default_instance_;
};
// -------------------------------------------------------------------

class PMAVDR : public ::google::protobuf::Message {
 public:
  PMAVDR();
  virtual ~PMAVDR();

  PMAVDR(const PMAVDR& from);

  inline PMAVDR& operator=(const PMAVDR& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PMAVDR& default_instance();

  void Swap(PMAVDR* other);

  // implements Message ----------------------------------------------

  PMAVDR* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PMAVDR& from);
  void MergeFrom(const PMAVDR& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 active_mode = 1;
  inline bool has_active_mode() const;
  inline void clear_active_mode();
  static const int kActiveModeFieldNumber = 1;
  inline ::google::protobuf::int32 active_mode() const;
  inline void set_active_mode(::google::protobuf::int32 value);

  // required double azimuth_steering_limit = 2;
  inline bool has_azimuth_steering_limit() const;
  inline void clear_azimuth_steering_limit();
  static const int kAzimuthSteeringLimitFieldNumber = 2;
  inline double azimuth_steering_limit() const;
  inline void set_azimuth_steering_limit(double value);

  // required int32 axis_active = 3;
  inline bool has_axis_active() const;
  inline void clear_axis_active();
  static const int kAxisActiveFieldNumber = 3;
  inline ::google::protobuf::int32 axis_active() const;
  inline void set_axis_active(::google::protobuf::int32 value);

  // required double turn_rate = 4;
  inline bool has_turn_rate() const;
  inline void clear_turn_rate();
  static const int kTurnRateFieldNumber = 4;
  inline double turn_rate() const;
  inline void set_turn_rate(double value);

  // required int32 steering_mode = 5;
  inline bool has_steering_mode() const;
  inline void clear_steering_mode();
  static const int kSteeringModeFieldNumber = 5;
  inline ::google::protobuf::int32 steering_mode() const;
  inline void set_steering_mode(::google::protobuf::int32 value);

  // required int32 steering_gain = 6;
  inline bool has_steering_gain() const;
  inline void clear_steering_gain();
  static const int kSteeringGainFieldNumber = 6;
  inline ::google::protobuf::int32 steering_gain() const;
  inline void set_steering_gain(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:com.zhichenhaixin.proto.PMAVDR)
 private:
  inline void set_has_active_mode();
  inline void clear_has_active_mode();
  inline void set_has_azimuth_steering_limit();
  inline void clear_has_azimuth_steering_limit();
  inline void set_has_axis_active();
  inline void clear_has_axis_active();
  inline void set_has_turn_rate();
  inline void clear_has_turn_rate();
  inline void set_has_steering_mode();
  inline void clear_has_steering_mode();
  inline void set_has_steering_gain();
  inline void clear_has_steering_gain();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  double azimuth_steering_limit_;
  ::google::protobuf::int32 active_mode_;
  ::google::protobuf::int32 axis_active_;
  double turn_rate_;
  ::google::protobuf::int32 steering_mode_;
  ::google::protobuf::int32 steering_gain_;
  friend void  protobuf_AddDesc_SCCMMSComData_2eproto();
  friend void protobuf_AssignDesc_SCCMMSComData_2eproto();
  friend void protobuf_ShutdownFile_SCCMMSComData_2eproto();

  void InitAsDefaultInstance();
  static PMAVDR* default_instance_;
};
// -------------------------------------------------------------------

class DPPMAData : public ::google::protobuf::Message {
 public:
  DPPMAData();
  virtual ~DPPMAData();

  DPPMAData(const DPPMAData& from);

  inline DPPMAData& operator=(const DPPMAData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DPPMAData& default_instance();

  void Swap(DPPMAData* other);

  // implements Message ----------------------------------------------

  DPPMAData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DPPMAData& from);
  void MergeFrom(const DPPMAData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bool gyro_sts = 1;
  inline bool has_gyro_sts() const;
  inline void clear_gyro_sts();
  static const int kGyroStsFieldNumber = 1;
  inline bool gyro_sts() const;
  inline void set_gyro_sts(bool value);

  // required bool mru_sts = 2;
  inline bool has_mru_sts() const;
  inline void clear_mru_sts();
  static const int kMruStsFieldNumber = 2;
  inline bool mru_sts() const;
  inline void set_mru_sts(bool value);

  // required bool wind_sts = 3;
  inline bool has_wind_sts() const;
  inline void clear_wind_sts();
  static const int kWindStsFieldNumber = 3;
  inline bool wind_sts() const;
  inline void set_wind_sts(bool value);

  // required double heading = 4;
  inline bool has_heading() const;
  inline void clear_heading();
  static const int kHeadingFieldNumber = 4;
  inline double heading() const;
  inline void set_heading(double value);

  // required double course = 5;
  inline bool has_course() const;
  inline void clear_course();
  static const int kCourseFieldNumber = 5;
  inline double course() const;
  inline void set_course(double value);

  // required double sos = 6;
  inline bool has_sos() const;
  inline void clear_sos();
  static const int kSosFieldNumber = 6;
  inline double sos() const;
  inline void set_sos(double value);

  // required double sog = 7;
  inline bool has_sog() const;
  inline void clear_sog();
  static const int kSogFieldNumber = 7;
  inline double sog() const;
  inline void set_sog(double value);

  // required double pitch = 8;
  inline bool has_pitch() const;
  inline void clear_pitch();
  static const int kPitchFieldNumber = 8;
  inline double pitch() const;
  inline void set_pitch(double value);

  // required double roll = 9;
  inline bool has_roll() const;
  inline void clear_roll();
  static const int kRollFieldNumber = 9;
  inline double roll() const;
  inline void set_roll(double value);

  // required double heave = 10;
  inline bool has_heave() const;
  inline void clear_heave();
  static const int kHeaveFieldNumber = 10;
  inline double heave() const;
  inline void set_heave(double value);

  // required double water_depth = 11;
  inline bool has_water_depth() const;
  inline void clear_water_depth();
  static const int kWaterDepthFieldNumber = 11;
  inline double water_depth() const;
  inline void set_water_depth(double value);

  // required double wind_dir = 12;
  inline bool has_wind_dir() const;
  inline void clear_wind_dir();
  static const int kWindDirFieldNumber = 12;
  inline double wind_dir() const;
  inline void set_wind_dir(double value);

  // required double wind_speed = 13;
  inline bool has_wind_speed() const;
  inline void clear_wind_speed();
  static const int kWindSpeedFieldNumber = 13;
  inline double wind_speed() const;
  inline void set_wind_speed(double value);

  // required double surge_demand = 14;
  inline bool has_surge_demand() const;
  inline void clear_surge_demand();
  static const int kSurgeDemandFieldNumber = 14;
  inline double surge_demand() const;
  inline void set_surge_demand(double value);

  // required double surge_feedback = 15;
  inline bool has_surge_feedback() const;
  inline void clear_surge_feedback();
  static const int kSurgeFeedbackFieldNumber = 15;
  inline double surge_feedback() const;
  inline void set_surge_feedback(double value);

  // required double sway_demand = 16;
  inline bool has_sway_demand() const;
  inline void clear_sway_demand();
  static const int kSwayDemandFieldNumber = 16;
  inline double sway_demand() const;
  inline void set_sway_demand(double value);

  // required double sway_feedback = 17;
  inline bool has_sway_feedback() const;
  inline void clear_sway_feedback();
  static const int kSwayFeedbackFieldNumber = 17;
  inline double sway_feedback() const;
  inline void set_sway_feedback(double value);

  // required double lon = 18;
  inline bool has_lon() const;
  inline void clear_lon();
  static const int kLonFieldNumber = 18;
  inline double lon() const;
  inline void set_lon(double value);

  // required string lon_dir = 19;
  inline bool has_lon_dir() const;
  inline void clear_lon_dir();
  static const int kLonDirFieldNumber = 19;
  inline const ::std::string& lon_dir() const;
  inline void set_lon_dir(const ::std::string& value);
  inline void set_lon_dir(const char* value);
  inline void set_lon_dir(const char* value, size_t size);
  inline ::std::string* mutable_lon_dir();
  inline ::std::string* release_lon_dir();
  inline void set_allocated_lon_dir(::std::string* lon_dir);

  // required double lat = 20;
  inline bool has_lat() const;
  inline void clear_lat();
  static const int kLatFieldNumber = 20;
  inline double lat() const;
  inline void set_lat(double value);

  // required string lat_dir = 21;
  inline bool has_lat_dir() const;
  inline void clear_lat_dir();
  static const int kLatDirFieldNumber = 21;
  inline const ::std::string& lat_dir() const;
  inline void set_lat_dir(const ::std::string& value);
  inline void set_lat_dir(const char* value);
  inline void set_lat_dir(const char* value, size_t size);
  inline ::std::string* mutable_lat_dir();
  inline ::std::string* release_lat_dir();
  inline void set_allocated_lat_dir(::std::string* lat_dir);

  // @@protoc_insertion_point(class_scope:com.zhichenhaixin.proto.DPPMAData)
 private:
  inline void set_has_gyro_sts();
  inline void clear_has_gyro_sts();
  inline void set_has_mru_sts();
  inline void clear_has_mru_sts();
  inline void set_has_wind_sts();
  inline void clear_has_wind_sts();
  inline void set_has_heading();
  inline void clear_has_heading();
  inline void set_has_course();
  inline void clear_has_course();
  inline void set_has_sos();
  inline void clear_has_sos();
  inline void set_has_sog();
  inline void clear_has_sog();
  inline void set_has_pitch();
  inline void clear_has_pitch();
  inline void set_has_roll();
  inline void clear_has_roll();
  inline void set_has_heave();
  inline void clear_has_heave();
  inline void set_has_water_depth();
  inline void clear_has_water_depth();
  inline void set_has_wind_dir();
  inline void clear_has_wind_dir();
  inline void set_has_wind_speed();
  inline void clear_has_wind_speed();
  inline void set_has_surge_demand();
  inline void clear_has_surge_demand();
  inline void set_has_surge_feedback();
  inline void clear_has_surge_feedback();
  inline void set_has_sway_demand();
  inline void clear_has_sway_demand();
  inline void set_has_sway_feedback();
  inline void clear_has_sway_feedback();
  inline void set_has_lon();
  inline void clear_has_lon();
  inline void set_has_lon_dir();
  inline void clear_has_lon_dir();
  inline void set_has_lat();
  inline void clear_has_lat();
  inline void set_has_lat_dir();
  inline void clear_has_lat_dir();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  double heading_;
  double course_;
  double sos_;
  double sog_;
  double pitch_;
  double roll_;
  double heave_;
  double water_depth_;
  double wind_dir_;
  double wind_speed_;
  double surge_demand_;
  double surge_feedback_;
  double sway_demand_;
  double sway_feedback_;
  double lon_;
  ::std::string* lon_dir_;
  double lat_;
  ::std::string* lat_dir_;
  bool gyro_sts_;
  bool mru_sts_;
  bool wind_sts_;
  friend void  protobuf_AddDesc_SCCMMSComData_2eproto();
  friend void protobuf_AssignDesc_SCCMMSComData_2eproto();
  friend void protobuf_ShutdownFile_SCCMMSComData_2eproto();

  void InitAsDefaultInstance();
  static DPPMAData* default_instance_;
};
// ===================================================================


// ===================================================================

// ShipInfo

// required int64 ship_update_time = 1;
inline bool ShipInfo::has_ship_update_time() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ShipInfo::set_has_ship_update_time() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ShipInfo::clear_has_ship_update_time() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ShipInfo::clear_ship_update_time() {
  ship_update_time_ = GOOGLE_LONGLONG(0);
  clear_has_ship_update_time();
}
inline ::google::protobuf::int64 ShipInfo::ship_update_time() const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.proto.ShipInfo.ship_update_time)
  return ship_update_time_;
}
inline void ShipInfo::set_ship_update_time(::google::protobuf::int64 value) {
  set_has_ship_update_time();
  ship_update_time_ = value;
  // @@protoc_insertion_point(field_set:com.zhichenhaixin.proto.ShipInfo.ship_update_time)
}

// required double ship_lat = 2;
inline bool ShipInfo::has_ship_lat() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ShipInfo::set_has_ship_lat() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ShipInfo::clear_has_ship_lat() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ShipInfo::clear_ship_lat() {
  ship_lat_ = 0;
  clear_has_ship_lat();
}
inline double ShipInfo::ship_lat() const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.proto.ShipInfo.ship_lat)
  return ship_lat_;
}
inline void ShipInfo::set_ship_lat(double value) {
  set_has_ship_lat();
  ship_lat_ = value;
  // @@protoc_insertion_point(field_set:com.zhichenhaixin.proto.ShipInfo.ship_lat)
}

// required double ship_lon = 3;
inline bool ShipInfo::has_ship_lon() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ShipInfo::set_has_ship_lon() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ShipInfo::clear_has_ship_lon() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ShipInfo::clear_ship_lon() {
  ship_lon_ = 0;
  clear_has_ship_lon();
}
inline double ShipInfo::ship_lon() const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.proto.ShipInfo.ship_lon)
  return ship_lon_;
}
inline void ShipInfo::set_ship_lon(double value) {
  set_has_ship_lon();
  ship_lon_ = value;
  // @@protoc_insertion_point(field_set:com.zhichenhaixin.proto.ShipInfo.ship_lon)
}

// required double ship_speed = 4;
inline bool ShipInfo::has_ship_speed() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ShipInfo::set_has_ship_speed() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ShipInfo::clear_has_ship_speed() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ShipInfo::clear_ship_speed() {
  ship_speed_ = 0;
  clear_has_ship_speed();
}
inline double ShipInfo::ship_speed() const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.proto.ShipInfo.ship_speed)
  return ship_speed_;
}
inline void ShipInfo::set_ship_speed(double value) {
  set_has_ship_speed();
  ship_speed_ = value;
  // @@protoc_insertion_point(field_set:com.zhichenhaixin.proto.ShipInfo.ship_speed)
}

// required double ship_speed_ground = 5;
inline bool ShipInfo::has_ship_speed_ground() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ShipInfo::set_has_ship_speed_ground() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ShipInfo::clear_has_ship_speed_ground() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ShipInfo::clear_ship_speed_ground() {
  ship_speed_ground_ = 0;
  clear_has_ship_speed_ground();
}
inline double ShipInfo::ship_speed_ground() const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.proto.ShipInfo.ship_speed_ground)
  return ship_speed_ground_;
}
inline void ShipInfo::set_ship_speed_ground(double value) {
  set_has_ship_speed_ground();
  ship_speed_ground_ = value;
  // @@protoc_insertion_point(field_set:com.zhichenhaixin.proto.ShipInfo.ship_speed_ground)
}

// required double ship_head = 6;
inline bool ShipInfo::has_ship_head() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ShipInfo::set_has_ship_head() {
  _has_bits_[0] |= 0x00000020u;
}
inline void ShipInfo::clear_has_ship_head() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void ShipInfo::clear_ship_head() {
  ship_head_ = 0;
  clear_has_ship_head();
}
inline double ShipInfo::ship_head() const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.proto.ShipInfo.ship_head)
  return ship_head_;
}
inline void ShipInfo::set_ship_head(double value) {
  set_has_ship_head();
  ship_head_ = value;
  // @@protoc_insertion_point(field_set:com.zhichenhaixin.proto.ShipInfo.ship_head)
}

// required double ship_pitch = 7;
inline bool ShipInfo::has_ship_pitch() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void ShipInfo::set_has_ship_pitch() {
  _has_bits_[0] |= 0x00000040u;
}
inline void ShipInfo::clear_has_ship_pitch() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void ShipInfo::clear_ship_pitch() {
  ship_pitch_ = 0;
  clear_has_ship_pitch();
}
inline double ShipInfo::ship_pitch() const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.proto.ShipInfo.ship_pitch)
  return ship_pitch_;
}
inline void ShipInfo::set_ship_pitch(double value) {
  set_has_ship_pitch();
  ship_pitch_ = value;
  // @@protoc_insertion_point(field_set:com.zhichenhaixin.proto.ShipInfo.ship_pitch)
}

// required double ship_roll = 8;
inline bool ShipInfo::has_ship_roll() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void ShipInfo::set_has_ship_roll() {
  _has_bits_[0] |= 0x00000080u;
}
inline void ShipInfo::clear_has_ship_roll() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void ShipInfo::clear_ship_roll() {
  ship_roll_ = 0;
  clear_has_ship_roll();
}
inline double ShipInfo::ship_roll() const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.proto.ShipInfo.ship_roll)
  return ship_roll_;
}
inline void ShipInfo::set_ship_roll(double value) {
  set_has_ship_roll();
  ship_roll_ = value;
  // @@protoc_insertion_point(field_set:com.zhichenhaixin.proto.ShipInfo.ship_roll)
}

// required double ship_course = 9;
inline bool ShipInfo::has_ship_course() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void ShipInfo::set_has_ship_course() {
  _has_bits_[0] |= 0x00000100u;
}
inline void ShipInfo::clear_has_ship_course() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void ShipInfo::clear_ship_course() {
  ship_course_ = 0;
  clear_has_ship_course();
}
inline double ShipInfo::ship_course() const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.proto.ShipInfo.ship_course)
  return ship_course_;
}
inline void ShipInfo::set_ship_course(double value) {
  set_has_ship_course();
  ship_course_ = value;
  // @@protoc_insertion_point(field_set:com.zhichenhaixin.proto.ShipInfo.ship_course)
}

// required double heave = 10;
inline bool ShipInfo::has_heave() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void ShipInfo::set_has_heave() {
  _has_bits_[0] |= 0x00000200u;
}
inline void ShipInfo::clear_has_heave() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void ShipInfo::clear_heave() {
  heave_ = 0;
  clear_has_heave();
}
inline double ShipInfo::heave() const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.proto.ShipInfo.heave)
  return heave_;
}
inline void ShipInfo::set_heave(double value) {
  set_has_heave();
  heave_ = value;
  // @@protoc_insertion_point(field_set:com.zhichenhaixin.proto.ShipInfo.heave)
}

// required double wind_dir = 11;
inline bool ShipInfo::has_wind_dir() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void ShipInfo::set_has_wind_dir() {
  _has_bits_[0] |= 0x00000400u;
}
inline void ShipInfo::clear_has_wind_dir() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void ShipInfo::clear_wind_dir() {
  wind_dir_ = 0;
  clear_has_wind_dir();
}
inline double ShipInfo::wind_dir() const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.proto.ShipInfo.wind_dir)
  return wind_dir_;
}
inline void ShipInfo::set_wind_dir(double value) {
  set_has_wind_dir();
  wind_dir_ = value;
  // @@protoc_insertion_point(field_set:com.zhichenhaixin.proto.ShipInfo.wind_dir)
}

// required double wind_speed = 12;
inline bool ShipInfo::has_wind_speed() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void ShipInfo::set_has_wind_speed() {
  _has_bits_[0] |= 0x00000800u;
}
inline void ShipInfo::clear_has_wind_speed() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void ShipInfo::clear_wind_speed() {
  wind_speed_ = 0;
  clear_has_wind_speed();
}
inline double ShipInfo::wind_speed() const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.proto.ShipInfo.wind_speed)
  return wind_speed_;
}
inline void ShipInfo::set_wind_speed(double value) {
  set_has_wind_speed();
  wind_speed_ = value;
  // @@protoc_insertion_point(field_set:com.zhichenhaixin.proto.ShipInfo.wind_speed)
}

// required double surge_demand = 13;
inline bool ShipInfo::has_surge_demand() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void ShipInfo::set_has_surge_demand() {
  _has_bits_[0] |= 0x00001000u;
}
inline void ShipInfo::clear_has_surge_demand() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void ShipInfo::clear_surge_demand() {
  surge_demand_ = 0;
  clear_has_surge_demand();
}
inline double ShipInfo::surge_demand() const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.proto.ShipInfo.surge_demand)
  return surge_demand_;
}
inline void ShipInfo::set_surge_demand(double value) {
  set_has_surge_demand();
  surge_demand_ = value;
  // @@protoc_insertion_point(field_set:com.zhichenhaixin.proto.ShipInfo.surge_demand)
}

// required double surge_feedback = 14;
inline bool ShipInfo::has_surge_feedback() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void ShipInfo::set_has_surge_feedback() {
  _has_bits_[0] |= 0x00002000u;
}
inline void ShipInfo::clear_has_surge_feedback() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void ShipInfo::clear_surge_feedback() {
  surge_feedback_ = 0;
  clear_has_surge_feedback();
}
inline double ShipInfo::surge_feedback() const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.proto.ShipInfo.surge_feedback)
  return surge_feedback_;
}
inline void ShipInfo::set_surge_feedback(double value) {
  set_has_surge_feedback();
  surge_feedback_ = value;
  // @@protoc_insertion_point(field_set:com.zhichenhaixin.proto.ShipInfo.surge_feedback)
}

// required double sway_demand = 15;
inline bool ShipInfo::has_sway_demand() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void ShipInfo::set_has_sway_demand() {
  _has_bits_[0] |= 0x00004000u;
}
inline void ShipInfo::clear_has_sway_demand() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void ShipInfo::clear_sway_demand() {
  sway_demand_ = 0;
  clear_has_sway_demand();
}
inline double ShipInfo::sway_demand() const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.proto.ShipInfo.sway_demand)
  return sway_demand_;
}
inline void ShipInfo::set_sway_demand(double value) {
  set_has_sway_demand();
  sway_demand_ = value;
  // @@protoc_insertion_point(field_set:com.zhichenhaixin.proto.ShipInfo.sway_demand)
}

// required double sway_feedback = 16;
inline bool ShipInfo::has_sway_feedback() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void ShipInfo::set_has_sway_feedback() {
  _has_bits_[0] |= 0x00008000u;
}
inline void ShipInfo::clear_has_sway_feedback() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void ShipInfo::clear_sway_feedback() {
  sway_feedback_ = 0;
  clear_has_sway_feedback();
}
inline double ShipInfo::sway_feedback() const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.proto.ShipInfo.sway_feedback)
  return sway_feedback_;
}
inline void ShipInfo::set_sway_feedback(double value) {
  set_has_sway_feedback();
  sway_feedback_ = value;
  // @@protoc_insertion_point(field_set:com.zhichenhaixin.proto.ShipInfo.sway_feedback)
}

// required int32 ship_mode = 17;
inline bool ShipInfo::has_ship_mode() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void ShipInfo::set_has_ship_mode() {
  _has_bits_[0] |= 0x00010000u;
}
inline void ShipInfo::clear_has_ship_mode() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void ShipInfo::clear_ship_mode() {
  ship_mode_ = 0;
  clear_has_ship_mode();
}
inline ::google::protobuf::int32 ShipInfo::ship_mode() const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.proto.ShipInfo.ship_mode)
  return ship_mode_;
}
inline void ShipInfo::set_ship_mode(::google::protobuf::int32 value) {
  set_has_ship_mode();
  ship_mode_ = value;
  // @@protoc_insertion_point(field_set:com.zhichenhaixin.proto.ShipInfo.ship_mode)
}

// -------------------------------------------------------------------

// PlowInfo

// required int64 plow_update_time = 1;
inline bool PlowInfo::has_plow_update_time() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PlowInfo::set_has_plow_update_time() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PlowInfo::clear_has_plow_update_time() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PlowInfo::clear_plow_update_time() {
  plow_update_time_ = GOOGLE_LONGLONG(0);
  clear_has_plow_update_time();
}
inline ::google::protobuf::int64 PlowInfo::plow_update_time() const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.proto.PlowInfo.plow_update_time)
  return plow_update_time_;
}
inline void PlowInfo::set_plow_update_time(::google::protobuf::int64 value) {
  set_has_plow_update_time();
  plow_update_time_ = value;
  // @@protoc_insertion_point(field_set:com.zhichenhaixin.proto.PlowInfo.plow_update_time)
}

// required double plow_lat = 2;
inline bool PlowInfo::has_plow_lat() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PlowInfo::set_has_plow_lat() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PlowInfo::clear_has_plow_lat() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PlowInfo::clear_plow_lat() {
  plow_lat_ = 0;
  clear_has_plow_lat();
}
inline double PlowInfo::plow_lat() const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.proto.PlowInfo.plow_lat)
  return plow_lat_;
}
inline void PlowInfo::set_plow_lat(double value) {
  set_has_plow_lat();
  plow_lat_ = value;
  // @@protoc_insertion_point(field_set:com.zhichenhaixin.proto.PlowInfo.plow_lat)
}

// required double plow_lon = 3;
inline bool PlowInfo::has_plow_lon() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PlowInfo::set_has_plow_lon() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PlowInfo::clear_has_plow_lon() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PlowInfo::clear_plow_lon() {
  plow_lon_ = 0;
  clear_has_plow_lon();
}
inline double PlowInfo::plow_lon() const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.proto.PlowInfo.plow_lon)
  return plow_lon_;
}
inline void PlowInfo::set_plow_lon(double value) {
  set_has_plow_lon();
  plow_lon_ = value;
  // @@protoc_insertion_point(field_set:com.zhichenhaixin.proto.PlowInfo.plow_lon)
}

// required int32 plow_pos_mode = 4;
inline bool PlowInfo::has_plow_pos_mode() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void PlowInfo::set_has_plow_pos_mode() {
  _has_bits_[0] |= 0x00000008u;
}
inline void PlowInfo::clear_has_plow_pos_mode() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void PlowInfo::clear_plow_pos_mode() {
  plow_pos_mode_ = 0;
  clear_has_plow_pos_mode();
}
inline ::google::protobuf::int32 PlowInfo::plow_pos_mode() const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.proto.PlowInfo.plow_pos_mode)
  return plow_pos_mode_;
}
inline void PlowInfo::set_plow_pos_mode(::google::protobuf::int32 value) {
  set_has_plow_pos_mode();
  plow_pos_mode_ = value;
  // @@protoc_insertion_point(field_set:com.zhichenhaixin.proto.PlowInfo.plow_pos_mode)
}

// required bool plow_flag = 5;
inline bool PlowInfo::has_plow_flag() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void PlowInfo::set_has_plow_flag() {
  _has_bits_[0] |= 0x00000010u;
}
inline void PlowInfo::clear_has_plow_flag() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void PlowInfo::clear_plow_flag() {
  plow_flag_ = false;
  clear_has_plow_flag();
}
inline bool PlowInfo::plow_flag() const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.proto.PlowInfo.plow_flag)
  return plow_flag_;
}
inline void PlowInfo::set_plow_flag(bool value) {
  set_has_plow_flag();
  plow_flag_ = value;
  // @@protoc_insertion_point(field_set:com.zhichenhaixin.proto.PlowInfo.plow_flag)
}

// required double plow_head = 6;
inline bool PlowInfo::has_plow_head() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void PlowInfo::set_has_plow_head() {
  _has_bits_[0] |= 0x00000020u;
}
inline void PlowInfo::clear_has_plow_head() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void PlowInfo::clear_plow_head() {
  plow_head_ = 0;
  clear_has_plow_head();
}
inline double PlowInfo::plow_head() const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.proto.PlowInfo.plow_head)
  return plow_head_;
}
inline void PlowInfo::set_plow_head(double value) {
  set_has_plow_head();
  plow_head_ = value;
  // @@protoc_insertion_point(field_set:com.zhichenhaixin.proto.PlowInfo.plow_head)
}

// required double plow_roll = 7;
inline bool PlowInfo::has_plow_roll() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void PlowInfo::set_has_plow_roll() {
  _has_bits_[0] |= 0x00000040u;
}
inline void PlowInfo::clear_has_plow_roll() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void PlowInfo::clear_plow_roll() {
  plow_roll_ = 0;
  clear_has_plow_roll();
}
inline double PlowInfo::plow_roll() const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.proto.PlowInfo.plow_roll)
  return plow_roll_;
}
inline void PlowInfo::set_plow_roll(double value) {
  set_has_plow_roll();
  plow_roll_ = value;
  // @@protoc_insertion_point(field_set:com.zhichenhaixin.proto.PlowInfo.plow_roll)
}

// required double plow_pitch = 8;
inline bool PlowInfo::has_plow_pitch() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void PlowInfo::set_has_plow_pitch() {
  _has_bits_[0] |= 0x00000080u;
}
inline void PlowInfo::clear_has_plow_pitch() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void PlowInfo::clear_plow_pitch() {
  plow_pitch_ = 0;
  clear_has_plow_pitch();
}
inline double PlowInfo::plow_pitch() const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.proto.PlowInfo.plow_pitch)
  return plow_pitch_;
}
inline void PlowInfo::set_plow_pitch(double value) {
  set_has_plow_pitch();
  plow_pitch_ = value;
  // @@protoc_insertion_point(field_set:com.zhichenhaixin.proto.PlowInfo.plow_pitch)
}

// required double plow_water_depth = 9;
inline bool PlowInfo::has_plow_water_depth() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void PlowInfo::set_has_plow_water_depth() {
  _has_bits_[0] |= 0x00000100u;
}
inline void PlowInfo::clear_has_plow_water_depth() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void PlowInfo::clear_plow_water_depth() {
  plow_water_depth_ = 0;
  clear_has_plow_water_depth();
}
inline double PlowInfo::plow_water_depth() const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.proto.PlowInfo.plow_water_depth)
  return plow_water_depth_;
}
inline void PlowInfo::set_plow_water_depth(double value) {
  set_has_plow_water_depth();
  plow_water_depth_ = value;
  // @@protoc_insertion_point(field_set:com.zhichenhaixin.proto.PlowInfo.plow_water_depth)
}

// required double plow_buried_depth = 10;
inline bool PlowInfo::has_plow_buried_depth() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void PlowInfo::set_has_plow_buried_depth() {
  _has_bits_[0] |= 0x00000200u;
}
inline void PlowInfo::clear_has_plow_buried_depth() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void PlowInfo::clear_plow_buried_depth() {
  plow_buried_depth_ = 0;
  clear_has_plow_buried_depth();
}
inline double PlowInfo::plow_buried_depth() const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.proto.PlowInfo.plow_buried_depth)
  return plow_buried_depth_;
}
inline void PlowInfo::set_plow_buried_depth(double value) {
  set_has_plow_buried_depth();
  plow_buried_depth_ = value;
  // @@protoc_insertion_point(field_set:com.zhichenhaixin.proto.PlowInfo.plow_buried_depth)
}

// required double plow_left_pump = 11;
inline bool PlowInfo::has_plow_left_pump() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void PlowInfo::set_has_plow_left_pump() {
  _has_bits_[0] |= 0x00000400u;
}
inline void PlowInfo::clear_has_plow_left_pump() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void PlowInfo::clear_plow_left_pump() {
  plow_left_pump_ = 0;
  clear_has_plow_left_pump();
}
inline double PlowInfo::plow_left_pump() const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.proto.PlowInfo.plow_left_pump)
  return plow_left_pump_;
}
inline void PlowInfo::set_plow_left_pump(double value) {
  set_has_plow_left_pump();
  plow_left_pump_ = value;
  // @@protoc_insertion_point(field_set:com.zhichenhaixin.proto.PlowInfo.plow_left_pump)
}

// required double plow_right_pump = 12;
inline bool PlowInfo::has_plow_right_pump() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void PlowInfo::set_has_plow_right_pump() {
  _has_bits_[0] |= 0x00000800u;
}
inline void PlowInfo::clear_has_plow_right_pump() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void PlowInfo::clear_plow_right_pump() {
  plow_right_pump_ = 0;
  clear_has_plow_right_pump();
}
inline double PlowInfo::plow_right_pump() const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.proto.PlowInfo.plow_right_pump)
  return plow_right_pump_;
}
inline void PlowInfo::set_plow_right_pump(double value) {
  set_has_plow_right_pump();
  plow_right_pump_ = value;
  // @@protoc_insertion_point(field_set:com.zhichenhaixin.proto.PlowInfo.plow_right_pump)
}

// required double plow_speed = 13;
inline bool PlowInfo::has_plow_speed() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void PlowInfo::set_has_plow_speed() {
  _has_bits_[0] |= 0x00001000u;
}
inline void PlowInfo::clear_has_plow_speed() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void PlowInfo::clear_plow_speed() {
  plow_speed_ = 0;
  clear_has_plow_speed();
}
inline double PlowInfo::plow_speed() const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.proto.PlowInfo.plow_speed)
  return plow_speed_;
}
inline void PlowInfo::set_plow_speed(double value) {
  set_has_plow_speed();
  plow_speed_ = value;
  // @@protoc_insertion_point(field_set:com.zhichenhaixin.proto.PlowInfo.plow_speed)
}

// required double plow_boots_angle = 14;
inline bool PlowInfo::has_plow_boots_angle() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void PlowInfo::set_has_plow_boots_angle() {
  _has_bits_[0] |= 0x00002000u;
}
inline void PlowInfo::clear_has_plow_boots_angle() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void PlowInfo::clear_plow_boots_angle() {
  plow_boots_angle_ = 0;
  clear_has_plow_boots_angle();
}
inline double PlowInfo::plow_boots_angle() const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.proto.PlowInfo.plow_boots_angle)
  return plow_boots_angle_;
}
inline void PlowInfo::set_plow_boots_angle(double value) {
  set_has_plow_boots_angle();
  plow_boots_angle_ = value;
  // @@protoc_insertion_point(field_set:com.zhichenhaixin.proto.PlowInfo.plow_boots_angle)
}

// required double plow_boots_length = 15;
inline bool PlowInfo::has_plow_boots_length() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void PlowInfo::set_has_plow_boots_length() {
  _has_bits_[0] |= 0x00004000u;
}
inline void PlowInfo::clear_has_plow_boots_length() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void PlowInfo::clear_plow_boots_length() {
  plow_boots_length_ = 0;
  clear_has_plow_boots_length();
}
inline double PlowInfo::plow_boots_length() const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.proto.PlowInfo.plow_boots_length)
  return plow_boots_length_;
}
inline void PlowInfo::set_plow_boots_length(double value) {
  set_has_plow_boots_length();
  plow_boots_length_ = value;
  // @@protoc_insertion_point(field_set:com.zhichenhaixin.proto.PlowInfo.plow_boots_length)
}

// required double plow_tow_length = 16;
inline bool PlowInfo::has_plow_tow_length() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void PlowInfo::set_has_plow_tow_length() {
  _has_bits_[0] |= 0x00008000u;
}
inline void PlowInfo::clear_has_plow_tow_length() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void PlowInfo::clear_plow_tow_length() {
  plow_tow_length_ = 0;
  clear_has_plow_tow_length();
}
inline double PlowInfo::plow_tow_length() const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.proto.PlowInfo.plow_tow_length)
  return plow_tow_length_;
}
inline void PlowInfo::set_plow_tow_length(double value) {
  set_has_plow_tow_length();
  plow_tow_length_ = value;
  // @@protoc_insertion_point(field_set:com.zhichenhaixin.proto.PlowInfo.plow_tow_length)
}

// required double plow_tow_tension = 17;
inline bool PlowInfo::has_plow_tow_tension() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void PlowInfo::set_has_plow_tow_tension() {
  _has_bits_[0] |= 0x00010000u;
}
inline void PlowInfo::clear_has_plow_tow_tension() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void PlowInfo::clear_plow_tow_tension() {
  plow_tow_tension_ = 0;
  clear_has_plow_tow_tension();
}
inline double PlowInfo::plow_tow_tension() const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.proto.PlowInfo.plow_tow_tension)
  return plow_tow_tension_;
}
inline void PlowInfo::set_plow_tow_tension(double value) {
  set_has_plow_tow_tension();
  plow_tow_tension_ = value;
  // @@protoc_insertion_point(field_set:com.zhichenhaixin.proto.PlowInfo.plow_tow_tension)
}

// required int64 plow_pos_update_time = 18;
inline bool PlowInfo::has_plow_pos_update_time() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void PlowInfo::set_has_plow_pos_update_time() {
  _has_bits_[0] |= 0x00020000u;
}
inline void PlowInfo::clear_has_plow_pos_update_time() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void PlowInfo::clear_plow_pos_update_time() {
  plow_pos_update_time_ = GOOGLE_LONGLONG(0);
  clear_has_plow_pos_update_time();
}
inline ::google::protobuf::int64 PlowInfo::plow_pos_update_time() const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.proto.PlowInfo.plow_pos_update_time)
  return plow_pos_update_time_;
}
inline void PlowInfo::set_plow_pos_update_time(::google::protobuf::int64 value) {
  set_has_plow_pos_update_time();
  plow_pos_update_time_ = value;
  // @@protoc_insertion_point(field_set:com.zhichenhaixin.proto.PlowInfo.plow_pos_update_time)
}

// required double plow_kp_dis = 19;
inline bool PlowInfo::has_plow_kp_dis() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void PlowInfo::set_has_plow_kp_dis() {
  _has_bits_[0] |= 0x00040000u;
}
inline void PlowInfo::clear_has_plow_kp_dis() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void PlowInfo::clear_plow_kp_dis() {
  plow_kp_dis_ = 0;
  clear_has_plow_kp_dis();
}
inline double PlowInfo::plow_kp_dis() const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.proto.PlowInfo.plow_kp_dis)
  return plow_kp_dis_;
}
inline void PlowInfo::set_plow_kp_dis(double value) {
  set_has_plow_kp_dis();
  plow_kp_dis_ = value;
  // @@protoc_insertion_point(field_set:com.zhichenhaixin.proto.PlowInfo.plow_kp_dis)
}

// -------------------------------------------------------------------

// LayInfo

// required int64 cable_update_time = 1;
inline bool LayInfo::has_cable_update_time() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void LayInfo::set_has_cable_update_time() {
  _has_bits_[0] |= 0x00000001u;
}
inline void LayInfo::clear_has_cable_update_time() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void LayInfo::clear_cable_update_time() {
  cable_update_time_ = GOOGLE_LONGLONG(0);
  clear_has_cable_update_time();
}
inline ::google::protobuf::int64 LayInfo::cable_update_time() const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.proto.LayInfo.cable_update_time)
  return cable_update_time_;
}
inline void LayInfo::set_cable_update_time(::google::protobuf::int64 value) {
  set_has_cable_update_time();
  cable_update_time_ = value;
  // @@protoc_insertion_point(field_set:com.zhichenhaixin.proto.LayInfo.cable_update_time)
}

// required double cable_payout_speed = 2;
inline bool LayInfo::has_cable_payout_speed() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void LayInfo::set_has_cable_payout_speed() {
  _has_bits_[0] |= 0x00000002u;
}
inline void LayInfo::clear_has_cable_payout_speed() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void LayInfo::clear_cable_payout_speed() {
  cable_payout_speed_ = 0;
  clear_has_cable_payout_speed();
}
inline double LayInfo::cable_payout_speed() const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.proto.LayInfo.cable_payout_speed)
  return cable_payout_speed_;
}
inline void LayInfo::set_cable_payout_speed(double value) {
  set_has_cable_payout_speed();
  cable_payout_speed_ = value;
  // @@protoc_insertion_point(field_set:com.zhichenhaixin.proto.LayInfo.cable_payout_speed)
}

// required double meter_counter_coeff = 3;
inline bool LayInfo::has_meter_counter_coeff() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void LayInfo::set_has_meter_counter_coeff() {
  _has_bits_[0] |= 0x00000004u;
}
inline void LayInfo::clear_has_meter_counter_coeff() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void LayInfo::clear_meter_counter_coeff() {
  meter_counter_coeff_ = 0;
  clear_has_meter_counter_coeff();
}
inline double LayInfo::meter_counter_coeff() const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.proto.LayInfo.meter_counter_coeff)
  return meter_counter_coeff_;
}
inline void LayInfo::set_meter_counter_coeff(double value) {
  set_has_meter_counter_coeff();
  meter_counter_coeff_ = value;
  // @@protoc_insertion_point(field_set:com.zhichenhaixin.proto.LayInfo.meter_counter_coeff)
}

// required double meter_counter_initlen = 4;
inline bool LayInfo::has_meter_counter_initlen() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void LayInfo::set_has_meter_counter_initlen() {
  _has_bits_[0] |= 0x00000008u;
}
inline void LayInfo::clear_has_meter_counter_initlen() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void LayInfo::clear_meter_counter_initlen() {
  meter_counter_initlen_ = 0;
  clear_has_meter_counter_initlen();
}
inline double LayInfo::meter_counter_initlen() const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.proto.LayInfo.meter_counter_initlen)
  return meter_counter_initlen_;
}
inline void LayInfo::set_meter_counter_initlen(double value) {
  set_has_meter_counter_initlen();
  meter_counter_initlen_ = value;
  // @@protoc_insertion_point(field_set:com.zhichenhaixin.proto.LayInfo.meter_counter_initlen)
}

// required double meter_counter_length = 5;
inline bool LayInfo::has_meter_counter_length() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void LayInfo::set_has_meter_counter_length() {
  _has_bits_[0] |= 0x00000010u;
}
inline void LayInfo::clear_has_meter_counter_length() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void LayInfo::clear_meter_counter_length() {
  meter_counter_length_ = 0;
  clear_has_meter_counter_length();
}
inline double LayInfo::meter_counter_length() const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.proto.LayInfo.meter_counter_length)
  return meter_counter_length_;
}
inline void LayInfo::set_meter_counter_length(double value) {
  set_has_meter_counter_length();
  meter_counter_length_ = value;
  // @@protoc_insertion_point(field_set:com.zhichenhaixin.proto.LayInfo.meter_counter_length)
}

// required double cable_length = 6;
inline bool LayInfo::has_cable_length() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void LayInfo::set_has_cable_length() {
  _has_bits_[0] |= 0x00000020u;
}
inline void LayInfo::clear_has_cable_length() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void LayInfo::clear_cable_length() {
  cable_length_ = 0;
  clear_has_cable_length();
}
inline double LayInfo::cable_length() const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.proto.LayInfo.cable_length)
  return cable_length_;
}
inline void LayInfo::set_cable_length(double value) {
  set_has_cable_length();
  cable_length_ = value;
  // @@protoc_insertion_point(field_set:com.zhichenhaixin.proto.LayInfo.cable_length)
}

// required double glj_cb_tension = 7;
inline bool LayInfo::has_glj_cb_tension() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void LayInfo::set_has_glj_cb_tension() {
  _has_bits_[0] |= 0x00000040u;
}
inline void LayInfo::clear_has_glj_cb_tension() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void LayInfo::clear_glj_cb_tension() {
  glj_cb_tension_ = 0;
  clear_has_glj_cb_tension();
}
inline double LayInfo::glj_cb_tension() const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.proto.LayInfo.glj_cb_tension)
  return glj_cb_tension_;
}
inline void LayInfo::set_glj_cb_tension(double value) {
  set_has_glj_cb_tension();
  glj_cb_tension_ = value;
  // @@protoc_insertion_point(field_set:com.zhichenhaixin.proto.LayInfo.glj_cb_tension)
}

// required double glj_cb_speed = 8;
inline bool LayInfo::has_glj_cb_speed() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void LayInfo::set_has_glj_cb_speed() {
  _has_bits_[0] |= 0x00000080u;
}
inline void LayInfo::clear_has_glj_cb_speed() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void LayInfo::clear_glj_cb_speed() {
  glj_cb_speed_ = 0;
  clear_has_glj_cb_speed();
}
inline double LayInfo::glj_cb_speed() const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.proto.LayInfo.glj_cb_speed)
  return glj_cb_speed_;
}
inline void LayInfo::set_glj_cb_speed(double value) {
  set_has_glj_cb_speed();
  glj_cb_speed_ = value;
  // @@protoc_insertion_point(field_set:com.zhichenhaixin.proto.LayInfo.glj_cb_speed)
}

// required double glj_cb_length = 9;
inline bool LayInfo::has_glj_cb_length() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void LayInfo::set_has_glj_cb_length() {
  _has_bits_[0] |= 0x00000100u;
}
inline void LayInfo::clear_has_glj_cb_length() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void LayInfo::clear_glj_cb_length() {
  glj_cb_length_ = 0;
  clear_has_glj_cb_length();
}
inline double LayInfo::glj_cb_length() const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.proto.LayInfo.glj_cb_length)
  return glj_cb_length_;
}
inline void LayInfo::set_glj_cb_length(double value) {
  set_has_glj_cb_length();
  glj_cb_length_ = value;
  // @@protoc_insertion_point(field_set:com.zhichenhaixin.proto.LayInfo.glj_cb_length)
}

// required double ltj_cb_tension = 10;
inline bool LayInfo::has_ltj_cb_tension() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void LayInfo::set_has_ltj_cb_tension() {
  _has_bits_[0] |= 0x00000200u;
}
inline void LayInfo::clear_has_ltj_cb_tension() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void LayInfo::clear_ltj_cb_tension() {
  ltj_cb_tension_ = 0;
  clear_has_ltj_cb_tension();
}
inline double LayInfo::ltj_cb_tension() const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.proto.LayInfo.ltj_cb_tension)
  return ltj_cb_tension_;
}
inline void LayInfo::set_ltj_cb_tension(double value) {
  set_has_ltj_cb_tension();
  ltj_cb_tension_ = value;
  // @@protoc_insertion_point(field_set:com.zhichenhaixin.proto.LayInfo.ltj_cb_tension)
}

// required double ltj_cb_speed = 11;
inline bool LayInfo::has_ltj_cb_speed() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void LayInfo::set_has_ltj_cb_speed() {
  _has_bits_[0] |= 0x00000400u;
}
inline void LayInfo::clear_has_ltj_cb_speed() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void LayInfo::clear_ltj_cb_speed() {
  ltj_cb_speed_ = 0;
  clear_has_ltj_cb_speed();
}
inline double LayInfo::ltj_cb_speed() const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.proto.LayInfo.ltj_cb_speed)
  return ltj_cb_speed_;
}
inline void LayInfo::set_ltj_cb_speed(double value) {
  set_has_ltj_cb_speed();
  ltj_cb_speed_ = value;
  // @@protoc_insertion_point(field_set:com.zhichenhaixin.proto.LayInfo.ltj_cb_speed)
}

// required double ltj_cb_length = 12;
inline bool LayInfo::has_ltj_cb_length() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void LayInfo::set_has_ltj_cb_length() {
  _has_bits_[0] |= 0x00000800u;
}
inline void LayInfo::clear_has_ltj_cb_length() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void LayInfo::clear_ltj_cb_length() {
  ltj_cb_length_ = 0;
  clear_has_ltj_cb_length();
}
inline double LayInfo::ltj_cb_length() const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.proto.LayInfo.ltj_cb_length)
  return ltj_cb_length_;
}
inline void LayInfo::set_ltj_cb_length(double value) {
  set_has_ltj_cb_length();
  ltj_cb_length_ = value;
  // @@protoc_insertion_point(field_set:com.zhichenhaixin.proto.LayInfo.ltj_cb_length)
}

// required double tl_tension = 13;
inline bool LayInfo::has_tl_tension() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void LayInfo::set_has_tl_tension() {
  _has_bits_[0] |= 0x00001000u;
}
inline void LayInfo::clear_has_tl_tension() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void LayInfo::clear_tl_tension() {
  tl_tension_ = 0;
  clear_has_tl_tension();
}
inline double LayInfo::tl_tension() const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.proto.LayInfo.tl_tension)
  return tl_tension_;
}
inline void LayInfo::set_tl_tension(double value) {
  set_has_tl_tension();
  tl_tension_ = value;
  // @@protoc_insertion_point(field_set:com.zhichenhaixin.proto.LayInfo.tl_tension)
}

// required double tl_length = 14;
inline bool LayInfo::has_tl_length() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void LayInfo::set_has_tl_length() {
  _has_bits_[0] |= 0x00002000u;
}
inline void LayInfo::clear_has_tl_length() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void LayInfo::clear_tl_length() {
  tl_length_ = 0;
  clear_has_tl_length();
}
inline double LayInfo::tl_length() const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.proto.LayInfo.tl_length)
  return tl_length_;
}
inline void LayInfo::set_tl_length(double value) {
  set_has_tl_length();
  tl_length_ = value;
  // @@protoc_insertion_point(field_set:com.zhichenhaixin.proto.LayInfo.tl_length)
}

// required double qd_tension = 15;
inline bool LayInfo::has_qd_tension() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void LayInfo::set_has_qd_tension() {
  _has_bits_[0] |= 0x00004000u;
}
inline void LayInfo::clear_has_qd_tension() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void LayInfo::clear_qd_tension() {
  qd_tension_ = 0;
  clear_has_qd_tension();
}
inline double LayInfo::qd_tension() const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.proto.LayInfo.qd_tension)
  return qd_tension_;
}
inline void LayInfo::set_qd_tension(double value) {
  set_has_qd_tension();
  qd_tension_ = value;
  // @@protoc_insertion_point(field_set:com.zhichenhaixin.proto.LayInfo.qd_tension)
}

// required double qd_length = 16;
inline bool LayInfo::has_qd_length() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void LayInfo::set_has_qd_length() {
  _has_bits_[0] |= 0x00008000u;
}
inline void LayInfo::clear_has_qd_length() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void LayInfo::clear_qd_length() {
  qd_length_ = 0;
  clear_has_qd_length();
}
inline double LayInfo::qd_length() const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.proto.LayInfo.qd_length)
  return qd_length_;
}
inline void LayInfo::set_qd_length(double value) {
  set_has_qd_length();
  qd_length_ = value;
  // @@protoc_insertion_point(field_set:com.zhichenhaixin.proto.LayInfo.qd_length)
}

// required int32 light_status = 17;
inline bool LayInfo::has_light_status() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void LayInfo::set_has_light_status() {
  _has_bits_[0] |= 0x00010000u;
}
inline void LayInfo::clear_has_light_status() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void LayInfo::clear_light_status() {
  light_status_ = 0;
  clear_has_light_status();
}
inline ::google::protobuf::int32 LayInfo::light_status() const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.proto.LayInfo.light_status)
  return light_status_;
}
inline void LayInfo::set_light_status(::google::protobuf::int32 value) {
  set_has_light_status();
  light_status_ = value;
  // @@protoc_insertion_point(field_set:com.zhichenhaixin.proto.LayInfo.light_status)
}

// required int64 meter_counter_time = 18;
inline bool LayInfo::has_meter_counter_time() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void LayInfo::set_has_meter_counter_time() {
  _has_bits_[0] |= 0x00020000u;
}
inline void LayInfo::clear_has_meter_counter_time() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void LayInfo::clear_meter_counter_time() {
  meter_counter_time_ = GOOGLE_LONGLONG(0);
  clear_has_meter_counter_time();
}
inline ::google::protobuf::int64 LayInfo::meter_counter_time() const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.proto.LayInfo.meter_counter_time)
  return meter_counter_time_;
}
inline void LayInfo::set_meter_counter_time(::google::protobuf::int64 value) {
  set_has_meter_counter_time();
  meter_counter_time_ = value;
  // @@protoc_insertion_point(field_set:com.zhichenhaixin.proto.LayInfo.meter_counter_time)
}

// required int32 meter_source = 19;
inline bool LayInfo::has_meter_source() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void LayInfo::set_has_meter_source() {
  _has_bits_[0] |= 0x00040000u;
}
inline void LayInfo::clear_has_meter_source() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void LayInfo::clear_meter_source() {
  meter_source_ = 0;
  clear_has_meter_source();
}
inline ::google::protobuf::int32 LayInfo::meter_source() const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.proto.LayInfo.meter_source)
  return meter_source_;
}
inline void LayInfo::set_meter_source(::google::protobuf::int32 value) {
  set_has_meter_source();
  meter_source_ = value;
  // @@protoc_insertion_point(field_set:com.zhichenhaixin.proto.LayInfo.meter_source)
}

// -------------------------------------------------------------------

// Surface4017Data

// required double surface_4017_pull1 = 1;
inline bool Surface4017Data::has_surface_4017_pull1() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Surface4017Data::set_has_surface_4017_pull1() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Surface4017Data::clear_has_surface_4017_pull1() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Surface4017Data::clear_surface_4017_pull1() {
  surface_4017_pull1_ = 0;
  clear_has_surface_4017_pull1();
}
inline double Surface4017Data::surface_4017_pull1() const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.proto.Surface4017Data.surface_4017_pull1)
  return surface_4017_pull1_;
}
inline void Surface4017Data::set_surface_4017_pull1(double value) {
  set_has_surface_4017_pull1();
  surface_4017_pull1_ = value;
  // @@protoc_insertion_point(field_set:com.zhichenhaixin.proto.Surface4017Data.surface_4017_pull1)
}

// required double surface_4017_pull2 = 2;
inline bool Surface4017Data::has_surface_4017_pull2() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Surface4017Data::set_has_surface_4017_pull2() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Surface4017Data::clear_has_surface_4017_pull2() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Surface4017Data::clear_surface_4017_pull2() {
  surface_4017_pull2_ = 0;
  clear_has_surface_4017_pull2();
}
inline double Surface4017Data::surface_4017_pull2() const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.proto.Surface4017Data.surface_4017_pull2)
  return surface_4017_pull2_;
}
inline void Surface4017Data::set_surface_4017_pull2(double value) {
  set_has_surface_4017_pull2();
  surface_4017_pull2_ = value;
  // @@protoc_insertion_point(field_set:com.zhichenhaixin.proto.Surface4017Data.surface_4017_pull2)
}

// required double surface_4017_pull3 = 3;
inline bool Surface4017Data::has_surface_4017_pull3() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Surface4017Data::set_has_surface_4017_pull3() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Surface4017Data::clear_has_surface_4017_pull3() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Surface4017Data::clear_surface_4017_pull3() {
  surface_4017_pull3_ = 0;
  clear_has_surface_4017_pull3();
}
inline double Surface4017Data::surface_4017_pull3() const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.proto.Surface4017Data.surface_4017_pull3)
  return surface_4017_pull3_;
}
inline void Surface4017Data::set_surface_4017_pull3(double value) {
  set_has_surface_4017_pull3();
  surface_4017_pull3_ = value;
  // @@protoc_insertion_point(field_set:com.zhichenhaixin.proto.Surface4017Data.surface_4017_pull3)
}

// required double surface_4017_lpump = 4;
inline bool Surface4017Data::has_surface_4017_lpump() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Surface4017Data::set_has_surface_4017_lpump() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Surface4017Data::clear_has_surface_4017_lpump() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Surface4017Data::clear_surface_4017_lpump() {
  surface_4017_lpump_ = 0;
  clear_has_surface_4017_lpump();
}
inline double Surface4017Data::surface_4017_lpump() const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.proto.Surface4017Data.surface_4017_lpump)
  return surface_4017_lpump_;
}
inline void Surface4017Data::set_surface_4017_lpump(double value) {
  set_has_surface_4017_lpump();
  surface_4017_lpump_ = value;
  // @@protoc_insertion_point(field_set:com.zhichenhaixin.proto.Surface4017Data.surface_4017_lpump)
}

// required double surface_4017_rpump = 5;
inline bool Surface4017Data::has_surface_4017_rpump() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Surface4017Data::set_has_surface_4017_rpump() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Surface4017Data::clear_has_surface_4017_rpump() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Surface4017Data::clear_surface_4017_rpump() {
  surface_4017_rpump_ = 0;
  clear_has_surface_4017_rpump();
}
inline double Surface4017Data::surface_4017_rpump() const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.proto.Surface4017Data.surface_4017_rpump)
  return surface_4017_rpump_;
}
inline void Surface4017Data::set_surface_4017_rpump(double value) {
  set_has_surface_4017_rpump();
  surface_4017_rpump_ = value;
  // @@protoc_insertion_point(field_set:com.zhichenhaixin.proto.Surface4017Data.surface_4017_rpump)
}

// required int64 surface_4017_time = 6;
inline bool Surface4017Data::has_surface_4017_time() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Surface4017Data::set_has_surface_4017_time() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Surface4017Data::clear_has_surface_4017_time() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Surface4017Data::clear_surface_4017_time() {
  surface_4017_time_ = GOOGLE_LONGLONG(0);
  clear_has_surface_4017_time();
}
inline ::google::protobuf::int64 Surface4017Data::surface_4017_time() const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.proto.Surface4017Data.surface_4017_time)
  return surface_4017_time_;
}
inline void Surface4017Data::set_surface_4017_time(::google::protobuf::int64 value) {
  set_has_surface_4017_time();
  surface_4017_time_ = value;
  // @@protoc_insertion_point(field_set:com.zhichenhaixin.proto.Surface4017Data.surface_4017_time)
}

// -------------------------------------------------------------------

// UnderWater4017Data

// required double under_4017_pull1 = 1;
inline bool UnderWater4017Data::has_under_4017_pull1() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void UnderWater4017Data::set_has_under_4017_pull1() {
  _has_bits_[0] |= 0x00000001u;
}
inline void UnderWater4017Data::clear_has_under_4017_pull1() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void UnderWater4017Data::clear_under_4017_pull1() {
  under_4017_pull1_ = 0;
  clear_has_under_4017_pull1();
}
inline double UnderWater4017Data::under_4017_pull1() const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.proto.UnderWater4017Data.under_4017_pull1)
  return under_4017_pull1_;
}
inline void UnderWater4017Data::set_under_4017_pull1(double value) {
  set_has_under_4017_pull1();
  under_4017_pull1_ = value;
  // @@protoc_insertion_point(field_set:com.zhichenhaixin.proto.UnderWater4017Data.under_4017_pull1)
}

// required double under_4017_pull2 = 2;
inline bool UnderWater4017Data::has_under_4017_pull2() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void UnderWater4017Data::set_has_under_4017_pull2() {
  _has_bits_[0] |= 0x00000002u;
}
inline void UnderWater4017Data::clear_has_under_4017_pull2() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void UnderWater4017Data::clear_under_4017_pull2() {
  under_4017_pull2_ = 0;
  clear_has_under_4017_pull2();
}
inline double UnderWater4017Data::under_4017_pull2() const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.proto.UnderWater4017Data.under_4017_pull2)
  return under_4017_pull2_;
}
inline void UnderWater4017Data::set_under_4017_pull2(double value) {
  set_has_under_4017_pull2();
  under_4017_pull2_ = value;
  // @@protoc_insertion_point(field_set:com.zhichenhaixin.proto.UnderWater4017Data.under_4017_pull2)
}

// required double under_4017_pull3 = 3;
inline bool UnderWater4017Data::has_under_4017_pull3() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void UnderWater4017Data::set_has_under_4017_pull3() {
  _has_bits_[0] |= 0x00000004u;
}
inline void UnderWater4017Data::clear_has_under_4017_pull3() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void UnderWater4017Data::clear_under_4017_pull3() {
  under_4017_pull3_ = 0;
  clear_has_under_4017_pull3();
}
inline double UnderWater4017Data::under_4017_pull3() const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.proto.UnderWater4017Data.under_4017_pull3)
  return under_4017_pull3_;
}
inline void UnderWater4017Data::set_under_4017_pull3(double value) {
  set_has_under_4017_pull3();
  under_4017_pull3_ = value;
  // @@protoc_insertion_point(field_set:com.zhichenhaixin.proto.UnderWater4017Data.under_4017_pull3)
}

// required double under_4017_lpump = 4;
inline bool UnderWater4017Data::has_under_4017_lpump() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void UnderWater4017Data::set_has_under_4017_lpump() {
  _has_bits_[0] |= 0x00000008u;
}
inline void UnderWater4017Data::clear_has_under_4017_lpump() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void UnderWater4017Data::clear_under_4017_lpump() {
  under_4017_lpump_ = 0;
  clear_has_under_4017_lpump();
}
inline double UnderWater4017Data::under_4017_lpump() const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.proto.UnderWater4017Data.under_4017_lpump)
  return under_4017_lpump_;
}
inline void UnderWater4017Data::set_under_4017_lpump(double value) {
  set_has_under_4017_lpump();
  under_4017_lpump_ = value;
  // @@protoc_insertion_point(field_set:com.zhichenhaixin.proto.UnderWater4017Data.under_4017_lpump)
}

// required double under_4017_rpump = 5;
inline bool UnderWater4017Data::has_under_4017_rpump() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void UnderWater4017Data::set_has_under_4017_rpump() {
  _has_bits_[0] |= 0x00000010u;
}
inline void UnderWater4017Data::clear_has_under_4017_rpump() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void UnderWater4017Data::clear_under_4017_rpump() {
  under_4017_rpump_ = 0;
  clear_has_under_4017_rpump();
}
inline double UnderWater4017Data::under_4017_rpump() const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.proto.UnderWater4017Data.under_4017_rpump)
  return under_4017_rpump_;
}
inline void UnderWater4017Data::set_under_4017_rpump(double value) {
  set_has_under_4017_rpump();
  under_4017_rpump_ = value;
  // @@protoc_insertion_point(field_set:com.zhichenhaixin.proto.UnderWater4017Data.under_4017_rpump)
}

// required double under_4017_water_depth = 6;
inline bool UnderWater4017Data::has_under_4017_water_depth() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void UnderWater4017Data::set_has_under_4017_water_depth() {
  _has_bits_[0] |= 0x00000020u;
}
inline void UnderWater4017Data::clear_has_under_4017_water_depth() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void UnderWater4017Data::clear_under_4017_water_depth() {
  under_4017_water_depth_ = 0;
  clear_has_under_4017_water_depth();
}
inline double UnderWater4017Data::under_4017_water_depth() const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.proto.UnderWater4017Data.under_4017_water_depth)
  return under_4017_water_depth_;
}
inline void UnderWater4017Data::set_under_4017_water_depth(double value) {
  set_has_under_4017_water_depth();
  under_4017_water_depth_ = value;
  // @@protoc_insertion_point(field_set:com.zhichenhaixin.proto.UnderWater4017Data.under_4017_water_depth)
}

// required double under_4017_boots_angle = 7;
inline bool UnderWater4017Data::has_under_4017_boots_angle() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void UnderWater4017Data::set_has_under_4017_boots_angle() {
  _has_bits_[0] |= 0x00000040u;
}
inline void UnderWater4017Data::clear_has_under_4017_boots_angle() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void UnderWater4017Data::clear_under_4017_boots_angle() {
  under_4017_boots_angle_ = 0;
  clear_has_under_4017_boots_angle();
}
inline double UnderWater4017Data::under_4017_boots_angle() const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.proto.UnderWater4017Data.under_4017_boots_angle)
  return under_4017_boots_angle_;
}
inline void UnderWater4017Data::set_under_4017_boots_angle(double value) {
  set_has_under_4017_boots_angle();
  under_4017_boots_angle_ = value;
  // @@protoc_insertion_point(field_set:com.zhichenhaixin.proto.UnderWater4017Data.under_4017_boots_angle)
}

// required double under_4017_boots_length = 8;
inline bool UnderWater4017Data::has_under_4017_boots_length() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void UnderWater4017Data::set_has_under_4017_boots_length() {
  _has_bits_[0] |= 0x00000080u;
}
inline void UnderWater4017Data::clear_has_under_4017_boots_length() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void UnderWater4017Data::clear_under_4017_boots_length() {
  under_4017_boots_length_ = 0;
  clear_has_under_4017_boots_length();
}
inline double UnderWater4017Data::under_4017_boots_length() const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.proto.UnderWater4017Data.under_4017_boots_length)
  return under_4017_boots_length_;
}
inline void UnderWater4017Data::set_under_4017_boots_length(double value) {
  set_has_under_4017_boots_length();
  under_4017_boots_length_ = value;
  // @@protoc_insertion_point(field_set:com.zhichenhaixin.proto.UnderWater4017Data.under_4017_boots_length)
}

// required double under_4017_buried_depth = 9;
inline bool UnderWater4017Data::has_under_4017_buried_depth() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void UnderWater4017Data::set_has_under_4017_buried_depth() {
  _has_bits_[0] |= 0x00000100u;
}
inline void UnderWater4017Data::clear_has_under_4017_buried_depth() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void UnderWater4017Data::clear_under_4017_buried_depth() {
  under_4017_buried_depth_ = 0;
  clear_has_under_4017_buried_depth();
}
inline double UnderWater4017Data::under_4017_buried_depth() const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.proto.UnderWater4017Data.under_4017_buried_depth)
  return under_4017_buried_depth_;
}
inline void UnderWater4017Data::set_under_4017_buried_depth(double value) {
  set_has_under_4017_buried_depth();
  under_4017_buried_depth_ = value;
  // @@protoc_insertion_point(field_set:com.zhichenhaixin.proto.UnderWater4017Data.under_4017_buried_depth)
}

// required double under_4017_touch_down_p1 = 10;
inline bool UnderWater4017Data::has_under_4017_touch_down_p1() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void UnderWater4017Data::set_has_under_4017_touch_down_p1() {
  _has_bits_[0] |= 0x00000200u;
}
inline void UnderWater4017Data::clear_has_under_4017_touch_down_p1() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void UnderWater4017Data::clear_under_4017_touch_down_p1() {
  under_4017_touch_down_p1_ = 0;
  clear_has_under_4017_touch_down_p1();
}
inline double UnderWater4017Data::under_4017_touch_down_p1() const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.proto.UnderWater4017Data.under_4017_touch_down_p1)
  return under_4017_touch_down_p1_;
}
inline void UnderWater4017Data::set_under_4017_touch_down_p1(double value) {
  set_has_under_4017_touch_down_p1();
  under_4017_touch_down_p1_ = value;
  // @@protoc_insertion_point(field_set:com.zhichenhaixin.proto.UnderWater4017Data.under_4017_touch_down_p1)
}

// required double under_4017_touch_down_p2 = 11;
inline bool UnderWater4017Data::has_under_4017_touch_down_p2() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void UnderWater4017Data::set_has_under_4017_touch_down_p2() {
  _has_bits_[0] |= 0x00000400u;
}
inline void UnderWater4017Data::clear_has_under_4017_touch_down_p2() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void UnderWater4017Data::clear_under_4017_touch_down_p2() {
  under_4017_touch_down_p2_ = 0;
  clear_has_under_4017_touch_down_p2();
}
inline double UnderWater4017Data::under_4017_touch_down_p2() const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.proto.UnderWater4017Data.under_4017_touch_down_p2)
  return under_4017_touch_down_p2_;
}
inline void UnderWater4017Data::set_under_4017_touch_down_p2(double value) {
  set_has_under_4017_touch_down_p2();
  under_4017_touch_down_p2_ = value;
  // @@protoc_insertion_point(field_set:com.zhichenhaixin.proto.UnderWater4017Data.under_4017_touch_down_p2)
}

// required double under_4017_touch_down_p3 = 12;
inline bool UnderWater4017Data::has_under_4017_touch_down_p3() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void UnderWater4017Data::set_has_under_4017_touch_down_p3() {
  _has_bits_[0] |= 0x00000800u;
}
inline void UnderWater4017Data::clear_has_under_4017_touch_down_p3() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void UnderWater4017Data::clear_under_4017_touch_down_p3() {
  under_4017_touch_down_p3_ = 0;
  clear_has_under_4017_touch_down_p3();
}
inline double UnderWater4017Data::under_4017_touch_down_p3() const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.proto.UnderWater4017Data.under_4017_touch_down_p3)
  return under_4017_touch_down_p3_;
}
inline void UnderWater4017Data::set_under_4017_touch_down_p3(double value) {
  set_has_under_4017_touch_down_p3();
  under_4017_touch_down_p3_ = value;
  // @@protoc_insertion_point(field_set:com.zhichenhaixin.proto.UnderWater4017Data.under_4017_touch_down_p3)
}

// required double under_4017_touch_down_p4 = 13;
inline bool UnderWater4017Data::has_under_4017_touch_down_p4() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void UnderWater4017Data::set_has_under_4017_touch_down_p4() {
  _has_bits_[0] |= 0x00001000u;
}
inline void UnderWater4017Data::clear_has_under_4017_touch_down_p4() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void UnderWater4017Data::clear_under_4017_touch_down_p4() {
  under_4017_touch_down_p4_ = 0;
  clear_has_under_4017_touch_down_p4();
}
inline double UnderWater4017Data::under_4017_touch_down_p4() const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.proto.UnderWater4017Data.under_4017_touch_down_p4)
  return under_4017_touch_down_p4_;
}
inline void UnderWater4017Data::set_under_4017_touch_down_p4(double value) {
  set_has_under_4017_touch_down_p4();
  under_4017_touch_down_p4_ = value;
  // @@protoc_insertion_point(field_set:com.zhichenhaixin.proto.UnderWater4017Data.under_4017_touch_down_p4)
}

// required int64 under_4017_time = 14;
inline bool UnderWater4017Data::has_under_4017_time() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void UnderWater4017Data::set_has_under_4017_time() {
  _has_bits_[0] |= 0x00002000u;
}
inline void UnderWater4017Data::clear_has_under_4017_time() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void UnderWater4017Data::clear_under_4017_time() {
  under_4017_time_ = GOOGLE_LONGLONG(0);
  clear_has_under_4017_time();
}
inline ::google::protobuf::int64 UnderWater4017Data::under_4017_time() const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.proto.UnderWater4017Data.under_4017_time)
  return under_4017_time_;
}
inline void UnderWater4017Data::set_under_4017_time(::google::protobuf::int64 value) {
  set_has_under_4017_time();
  under_4017_time_ = value;
  // @@protoc_insertion_point(field_set:com.zhichenhaixin.proto.UnderWater4017Data.under_4017_time)
}

// -------------------------------------------------------------------

// ConstructionInfo

// required bool isContructed = 1;
inline bool ConstructionInfo::has_iscontructed() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ConstructionInfo::set_has_iscontructed() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ConstructionInfo::clear_has_iscontructed() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ConstructionInfo::clear_iscontructed() {
  iscontructed_ = false;
  clear_has_iscontructed();
}
inline bool ConstructionInfo::iscontructed() const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.proto.ConstructionInfo.isContructed)
  return iscontructed_;
}
inline void ConstructionInfo::set_iscontructed(bool value) {
  set_has_iscontructed();
  iscontructed_ = value;
  // @@protoc_insertion_point(field_set:com.zhichenhaixin.proto.ConstructionInfo.isContructed)
}

// required string host_name = 2;
inline bool ConstructionInfo::has_host_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ConstructionInfo::set_has_host_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ConstructionInfo::clear_has_host_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ConstructionInfo::clear_host_name() {
  if (host_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    host_name_->clear();
  }
  clear_has_host_name();
}
inline const ::std::string& ConstructionInfo::host_name() const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.proto.ConstructionInfo.host_name)
  return *host_name_;
}
inline void ConstructionInfo::set_host_name(const ::std::string& value) {
  set_has_host_name();
  if (host_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    host_name_ = new ::std::string;
  }
  host_name_->assign(value);
  // @@protoc_insertion_point(field_set:com.zhichenhaixin.proto.ConstructionInfo.host_name)
}
inline void ConstructionInfo::set_host_name(const char* value) {
  set_has_host_name();
  if (host_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    host_name_ = new ::std::string;
  }
  host_name_->assign(value);
  // @@protoc_insertion_point(field_set_char:com.zhichenhaixin.proto.ConstructionInfo.host_name)
}
inline void ConstructionInfo::set_host_name(const char* value, size_t size) {
  set_has_host_name();
  if (host_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    host_name_ = new ::std::string;
  }
  host_name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:com.zhichenhaixin.proto.ConstructionInfo.host_name)
}
inline ::std::string* ConstructionInfo::mutable_host_name() {
  set_has_host_name();
  if (host_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    host_name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:com.zhichenhaixin.proto.ConstructionInfo.host_name)
  return host_name_;
}
inline ::std::string* ConstructionInfo::release_host_name() {
  clear_has_host_name();
  if (host_name_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = host_name_;
    host_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void ConstructionInfo::set_allocated_host_name(::std::string* host_name) {
  if (host_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete host_name_;
  }
  if (host_name) {
    set_has_host_name();
    host_name_ = host_name;
  } else {
    clear_has_host_name();
    host_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:com.zhichenhaixin.proto.ConstructionInfo.host_name)
}

// required int32 project_id = 3;
inline bool ConstructionInfo::has_project_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ConstructionInfo::set_has_project_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ConstructionInfo::clear_has_project_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ConstructionInfo::clear_project_id() {
  project_id_ = 0;
  clear_has_project_id();
}
inline ::google::protobuf::int32 ConstructionInfo::project_id() const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.proto.ConstructionInfo.project_id)
  return project_id_;
}
inline void ConstructionInfo::set_project_id(::google::protobuf::int32 value) {
  set_has_project_id();
  project_id_ = value;
  // @@protoc_insertion_point(field_set:com.zhichenhaixin.proto.ConstructionInfo.project_id)
}

// required int32 route_id = 4;
inline bool ConstructionInfo::has_route_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ConstructionInfo::set_has_route_id() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ConstructionInfo::clear_has_route_id() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ConstructionInfo::clear_route_id() {
  route_id_ = 0;
  clear_has_route_id();
}
inline ::google::protobuf::int32 ConstructionInfo::route_id() const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.proto.ConstructionInfo.route_id)
  return route_id_;
}
inline void ConstructionInfo::set_route_id(::google::protobuf::int32 value) {
  set_has_route_id();
  route_id_ = value;
  // @@protoc_insertion_point(field_set:com.zhichenhaixin.proto.ConstructionInfo.route_id)
}

// required int32 plan_id = 5;
inline bool ConstructionInfo::has_plan_id() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ConstructionInfo::set_has_plan_id() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ConstructionInfo::clear_has_plan_id() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ConstructionInfo::clear_plan_id() {
  plan_id_ = 0;
  clear_has_plan_id();
}
inline ::google::protobuf::int32 ConstructionInfo::plan_id() const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.proto.ConstructionInfo.plan_id)
  return plan_id_;
}
inline void ConstructionInfo::set_plan_id(::google::protobuf::int32 value) {
  set_has_plan_id();
  plan_id_ = value;
  // @@protoc_insertion_point(field_set:com.zhichenhaixin.proto.ConstructionInfo.plan_id)
}

// -------------------------------------------------------------------

// DevInfo

// required .com.zhichenhaixin.proto.ShipInfo ship_info = 1;
inline bool DevInfo::has_ship_info() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DevInfo::set_has_ship_info() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DevInfo::clear_has_ship_info() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DevInfo::clear_ship_info() {
  if (ship_info_ != NULL) ship_info_->::com::zhichenhaixin::proto::ShipInfo::Clear();
  clear_has_ship_info();
}
inline const ::com::zhichenhaixin::proto::ShipInfo& DevInfo::ship_info() const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.proto.DevInfo.ship_info)
  return ship_info_ != NULL ? *ship_info_ : *default_instance_->ship_info_;
}
inline ::com::zhichenhaixin::proto::ShipInfo* DevInfo::mutable_ship_info() {
  set_has_ship_info();
  if (ship_info_ == NULL) ship_info_ = new ::com::zhichenhaixin::proto::ShipInfo;
  // @@protoc_insertion_point(field_mutable:com.zhichenhaixin.proto.DevInfo.ship_info)
  return ship_info_;
}
inline ::com::zhichenhaixin::proto::ShipInfo* DevInfo::release_ship_info() {
  clear_has_ship_info();
  ::com::zhichenhaixin::proto::ShipInfo* temp = ship_info_;
  ship_info_ = NULL;
  return temp;
}
inline void DevInfo::set_allocated_ship_info(::com::zhichenhaixin::proto::ShipInfo* ship_info) {
  delete ship_info_;
  ship_info_ = ship_info;
  if (ship_info) {
    set_has_ship_info();
  } else {
    clear_has_ship_info();
  }
  // @@protoc_insertion_point(field_set_allocated:com.zhichenhaixin.proto.DevInfo.ship_info)
}

// required .com.zhichenhaixin.proto.PlowInfo plow_info = 2;
inline bool DevInfo::has_plow_info() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void DevInfo::set_has_plow_info() {
  _has_bits_[0] |= 0x00000002u;
}
inline void DevInfo::clear_has_plow_info() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void DevInfo::clear_plow_info() {
  if (plow_info_ != NULL) plow_info_->::com::zhichenhaixin::proto::PlowInfo::Clear();
  clear_has_plow_info();
}
inline const ::com::zhichenhaixin::proto::PlowInfo& DevInfo::plow_info() const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.proto.DevInfo.plow_info)
  return plow_info_ != NULL ? *plow_info_ : *default_instance_->plow_info_;
}
inline ::com::zhichenhaixin::proto::PlowInfo* DevInfo::mutable_plow_info() {
  set_has_plow_info();
  if (plow_info_ == NULL) plow_info_ = new ::com::zhichenhaixin::proto::PlowInfo;
  // @@protoc_insertion_point(field_mutable:com.zhichenhaixin.proto.DevInfo.plow_info)
  return plow_info_;
}
inline ::com::zhichenhaixin::proto::PlowInfo* DevInfo::release_plow_info() {
  clear_has_plow_info();
  ::com::zhichenhaixin::proto::PlowInfo* temp = plow_info_;
  plow_info_ = NULL;
  return temp;
}
inline void DevInfo::set_allocated_plow_info(::com::zhichenhaixin::proto::PlowInfo* plow_info) {
  delete plow_info_;
  plow_info_ = plow_info;
  if (plow_info) {
    set_has_plow_info();
  } else {
    clear_has_plow_info();
  }
  // @@protoc_insertion_point(field_set_allocated:com.zhichenhaixin.proto.DevInfo.plow_info)
}

// required .com.zhichenhaixin.proto.LayInfo lay_info = 3;
inline bool DevInfo::has_lay_info() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void DevInfo::set_has_lay_info() {
  _has_bits_[0] |= 0x00000004u;
}
inline void DevInfo::clear_has_lay_info() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void DevInfo::clear_lay_info() {
  if (lay_info_ != NULL) lay_info_->::com::zhichenhaixin::proto::LayInfo::Clear();
  clear_has_lay_info();
}
inline const ::com::zhichenhaixin::proto::LayInfo& DevInfo::lay_info() const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.proto.DevInfo.lay_info)
  return lay_info_ != NULL ? *lay_info_ : *default_instance_->lay_info_;
}
inline ::com::zhichenhaixin::proto::LayInfo* DevInfo::mutable_lay_info() {
  set_has_lay_info();
  if (lay_info_ == NULL) lay_info_ = new ::com::zhichenhaixin::proto::LayInfo;
  // @@protoc_insertion_point(field_mutable:com.zhichenhaixin.proto.DevInfo.lay_info)
  return lay_info_;
}
inline ::com::zhichenhaixin::proto::LayInfo* DevInfo::release_lay_info() {
  clear_has_lay_info();
  ::com::zhichenhaixin::proto::LayInfo* temp = lay_info_;
  lay_info_ = NULL;
  return temp;
}
inline void DevInfo::set_allocated_lay_info(::com::zhichenhaixin::proto::LayInfo* lay_info) {
  delete lay_info_;
  lay_info_ = lay_info;
  if (lay_info) {
    set_has_lay_info();
  } else {
    clear_has_lay_info();
  }
  // @@protoc_insertion_point(field_set_allocated:com.zhichenhaixin.proto.DevInfo.lay_info)
}

// required .com.zhichenhaixin.proto.Surface4017Data surface_4017 = 4;
inline bool DevInfo::has_surface_4017() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void DevInfo::set_has_surface_4017() {
  _has_bits_[0] |= 0x00000008u;
}
inline void DevInfo::clear_has_surface_4017() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void DevInfo::clear_surface_4017() {
  if (surface_4017_ != NULL) surface_4017_->::com::zhichenhaixin::proto::Surface4017Data::Clear();
  clear_has_surface_4017();
}
inline const ::com::zhichenhaixin::proto::Surface4017Data& DevInfo::surface_4017() const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.proto.DevInfo.surface_4017)
  return surface_4017_ != NULL ? *surface_4017_ : *default_instance_->surface_4017_;
}
inline ::com::zhichenhaixin::proto::Surface4017Data* DevInfo::mutable_surface_4017() {
  set_has_surface_4017();
  if (surface_4017_ == NULL) surface_4017_ = new ::com::zhichenhaixin::proto::Surface4017Data;
  // @@protoc_insertion_point(field_mutable:com.zhichenhaixin.proto.DevInfo.surface_4017)
  return surface_4017_;
}
inline ::com::zhichenhaixin::proto::Surface4017Data* DevInfo::release_surface_4017() {
  clear_has_surface_4017();
  ::com::zhichenhaixin::proto::Surface4017Data* temp = surface_4017_;
  surface_4017_ = NULL;
  return temp;
}
inline void DevInfo::set_allocated_surface_4017(::com::zhichenhaixin::proto::Surface4017Data* surface_4017) {
  delete surface_4017_;
  surface_4017_ = surface_4017;
  if (surface_4017) {
    set_has_surface_4017();
  } else {
    clear_has_surface_4017();
  }
  // @@protoc_insertion_point(field_set_allocated:com.zhichenhaixin.proto.DevInfo.surface_4017)
}

// required .com.zhichenhaixin.proto.UnderWater4017Data under_4017 = 5;
inline bool DevInfo::has_under_4017() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void DevInfo::set_has_under_4017() {
  _has_bits_[0] |= 0x00000010u;
}
inline void DevInfo::clear_has_under_4017() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void DevInfo::clear_under_4017() {
  if (under_4017_ != NULL) under_4017_->::com::zhichenhaixin::proto::UnderWater4017Data::Clear();
  clear_has_under_4017();
}
inline const ::com::zhichenhaixin::proto::UnderWater4017Data& DevInfo::under_4017() const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.proto.DevInfo.under_4017)
  return under_4017_ != NULL ? *under_4017_ : *default_instance_->under_4017_;
}
inline ::com::zhichenhaixin::proto::UnderWater4017Data* DevInfo::mutable_under_4017() {
  set_has_under_4017();
  if (under_4017_ == NULL) under_4017_ = new ::com::zhichenhaixin::proto::UnderWater4017Data;
  // @@protoc_insertion_point(field_mutable:com.zhichenhaixin.proto.DevInfo.under_4017)
  return under_4017_;
}
inline ::com::zhichenhaixin::proto::UnderWater4017Data* DevInfo::release_under_4017() {
  clear_has_under_4017();
  ::com::zhichenhaixin::proto::UnderWater4017Data* temp = under_4017_;
  under_4017_ = NULL;
  return temp;
}
inline void DevInfo::set_allocated_under_4017(::com::zhichenhaixin::proto::UnderWater4017Data* under_4017) {
  delete under_4017_;
  under_4017_ = under_4017;
  if (under_4017) {
    set_has_under_4017();
  } else {
    clear_has_under_4017();
  }
  // @@protoc_insertion_point(field_set_allocated:com.zhichenhaixin.proto.DevInfo.under_4017)
}

// required bool surface_hmr3000_checked_flg = 6;
inline bool DevInfo::has_surface_hmr3000_checked_flg() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void DevInfo::set_has_surface_hmr3000_checked_flg() {
  _has_bits_[0] |= 0x00000020u;
}
inline void DevInfo::clear_has_surface_hmr3000_checked_flg() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void DevInfo::clear_surface_hmr3000_checked_flg() {
  surface_hmr3000_checked_flg_ = false;
  clear_has_surface_hmr3000_checked_flg();
}
inline bool DevInfo::surface_hmr3000_checked_flg() const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.proto.DevInfo.surface_hmr3000_checked_flg)
  return surface_hmr3000_checked_flg_;
}
inline void DevInfo::set_surface_hmr3000_checked_flg(bool value) {
  set_has_surface_hmr3000_checked_flg();
  surface_hmr3000_checked_flg_ = value;
  // @@protoc_insertion_point(field_set:com.zhichenhaixin.proto.DevInfo.surface_hmr3000_checked_flg)
}

// required bool under_hmr3000_checked_flg = 7;
inline bool DevInfo::has_under_hmr3000_checked_flg() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void DevInfo::set_has_under_hmr3000_checked_flg() {
  _has_bits_[0] |= 0x00000040u;
}
inline void DevInfo::clear_has_under_hmr3000_checked_flg() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void DevInfo::clear_under_hmr3000_checked_flg() {
  under_hmr3000_checked_flg_ = false;
  clear_has_under_hmr3000_checked_flg();
}
inline bool DevInfo::under_hmr3000_checked_flg() const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.proto.DevInfo.under_hmr3000_checked_flg)
  return under_hmr3000_checked_flg_;
}
inline void DevInfo::set_under_hmr3000_checked_flg(bool value) {
  set_has_under_hmr3000_checked_flg();
  under_hmr3000_checked_flg_ = value;
  // @@protoc_insertion_point(field_set:com.zhichenhaixin.proto.DevInfo.under_hmr3000_checked_flg)
}

// required bool gsp_checked_flg = 8;
inline bool DevInfo::has_gsp_checked_flg() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void DevInfo::set_has_gsp_checked_flg() {
  _has_bits_[0] |= 0x00000080u;
}
inline void DevInfo::clear_has_gsp_checked_flg() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void DevInfo::clear_gsp_checked_flg() {
  gsp_checked_flg_ = false;
  clear_has_gsp_checked_flg();
}
inline bool DevInfo::gsp_checked_flg() const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.proto.DevInfo.gsp_checked_flg)
  return gsp_checked_flg_;
}
inline void DevInfo::set_gsp_checked_flg(bool value) {
  set_has_gsp_checked_flg();
  gsp_checked_flg_ = value;
  // @@protoc_insertion_point(field_set:com.zhichenhaixin.proto.DevInfo.gsp_checked_flg)
}

// required bool usbl_checked_flg = 9;
inline bool DevInfo::has_usbl_checked_flg() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void DevInfo::set_has_usbl_checked_flg() {
  _has_bits_[0] |= 0x00000100u;
}
inline void DevInfo::clear_has_usbl_checked_flg() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void DevInfo::clear_usbl_checked_flg() {
  usbl_checked_flg_ = false;
  clear_has_usbl_checked_flg();
}
inline bool DevInfo::usbl_checked_flg() const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.proto.DevInfo.usbl_checked_flg)
  return usbl_checked_flg_;
}
inline void DevInfo::set_usbl_checked_flg(bool value) {
  set_has_usbl_checked_flg();
  usbl_checked_flg_ = value;
  // @@protoc_insertion_point(field_set:com.zhichenhaixin.proto.DevInfo.usbl_checked_flg)
}

// required bool surface_4017_checked_flg = 10;
inline bool DevInfo::has_surface_4017_checked_flg() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void DevInfo::set_has_surface_4017_checked_flg() {
  _has_bits_[0] |= 0x00000200u;
}
inline void DevInfo::clear_has_surface_4017_checked_flg() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void DevInfo::clear_surface_4017_checked_flg() {
  surface_4017_checked_flg_ = false;
  clear_has_surface_4017_checked_flg();
}
inline bool DevInfo::surface_4017_checked_flg() const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.proto.DevInfo.surface_4017_checked_flg)
  return surface_4017_checked_flg_;
}
inline void DevInfo::set_surface_4017_checked_flg(bool value) {
  set_has_surface_4017_checked_flg();
  surface_4017_checked_flg_ = value;
  // @@protoc_insertion_point(field_set:com.zhichenhaixin.proto.DevInfo.surface_4017_checked_flg)
}

// required bool under_4017_checked_flg = 11;
inline bool DevInfo::has_under_4017_checked_flg() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void DevInfo::set_has_under_4017_checked_flg() {
  _has_bits_[0] |= 0x00000400u;
}
inline void DevInfo::clear_has_under_4017_checked_flg() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void DevInfo::clear_under_4017_checked_flg() {
  under_4017_checked_flg_ = false;
  clear_has_under_4017_checked_flg();
}
inline bool DevInfo::under_4017_checked_flg() const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.proto.DevInfo.under_4017_checked_flg)
  return under_4017_checked_flg_;
}
inline void DevInfo::set_under_4017_checked_flg(bool value) {
  set_has_under_4017_checked_flg();
  under_4017_checked_flg_ = value;
  // @@protoc_insertion_point(field_set:com.zhichenhaixin.proto.DevInfo.under_4017_checked_flg)
}

// required bool metercounter_checked_flg = 12;
inline bool DevInfo::has_metercounter_checked_flg() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void DevInfo::set_has_metercounter_checked_flg() {
  _has_bits_[0] |= 0x00000800u;
}
inline void DevInfo::clear_has_metercounter_checked_flg() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void DevInfo::clear_metercounter_checked_flg() {
  metercounter_checked_flg_ = false;
  clear_has_metercounter_checked_flg();
}
inline bool DevInfo::metercounter_checked_flg() const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.proto.DevInfo.metercounter_checked_flg)
  return metercounter_checked_flg_;
}
inline void DevInfo::set_metercounter_checked_flg(bool value) {
  set_has_metercounter_checked_flg();
  metercounter_checked_flg_ = value;
  // @@protoc_insertion_point(field_set:com.zhichenhaixin.proto.DevInfo.metercounter_checked_flg)
}

// required bool navi_device_checked_flg = 13;
inline bool DevInfo::has_navi_device_checked_flg() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void DevInfo::set_has_navi_device_checked_flg() {
  _has_bits_[0] |= 0x00001000u;
}
inline void DevInfo::clear_has_navi_device_checked_flg() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void DevInfo::clear_navi_device_checked_flg() {
  navi_device_checked_flg_ = false;
  clear_has_navi_device_checked_flg();
}
inline bool DevInfo::navi_device_checked_flg() const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.proto.DevInfo.navi_device_checked_flg)
  return navi_device_checked_flg_;
}
inline void DevInfo::set_navi_device_checked_flg(bool value) {
  set_has_navi_device_checked_flg();
  navi_device_checked_flg_ = value;
  // @@protoc_insertion_point(field_set:com.zhichenhaixin.proto.DevInfo.navi_device_checked_flg)
}

// required bool cable_integrated_checked_flg = 14;
inline bool DevInfo::has_cable_integrated_checked_flg() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void DevInfo::set_has_cable_integrated_checked_flg() {
  _has_bits_[0] |= 0x00002000u;
}
inline void DevInfo::clear_has_cable_integrated_checked_flg() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void DevInfo::clear_cable_integrated_checked_flg() {
  cable_integrated_checked_flg_ = false;
  clear_has_cable_integrated_checked_flg();
}
inline bool DevInfo::cable_integrated_checked_flg() const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.proto.DevInfo.cable_integrated_checked_flg)
  return cable_integrated_checked_flg_;
}
inline void DevInfo::set_cable_integrated_checked_flg(bool value) {
  set_has_cable_integrated_checked_flg();
  cable_integrated_checked_flg_ = value;
  // @@protoc_insertion_point(field_set:com.zhichenhaixin.proto.DevInfo.cable_integrated_checked_flg)
}

// required bool dp_checked_flg = 15;
inline bool DevInfo::has_dp_checked_flg() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void DevInfo::set_has_dp_checked_flg() {
  _has_bits_[0] |= 0x00004000u;
}
inline void DevInfo::clear_has_dp_checked_flg() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void DevInfo::clear_dp_checked_flg() {
  dp_checked_flg_ = false;
  clear_has_dp_checked_flg();
}
inline bool DevInfo::dp_checked_flg() const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.proto.DevInfo.dp_checked_flg)
  return dp_checked_flg_;
}
inline void DevInfo::set_dp_checked_flg(bool value) {
  set_has_dp_checked_flg();
  dp_checked_flg_ = value;
  // @@protoc_insertion_point(field_set:com.zhichenhaixin.proto.DevInfo.dp_checked_flg)
}

// required .com.zhichenhaixin.proto.ConstructionInfo construct_info = 16;
inline bool DevInfo::has_construct_info() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void DevInfo::set_has_construct_info() {
  _has_bits_[0] |= 0x00008000u;
}
inline void DevInfo::clear_has_construct_info() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void DevInfo::clear_construct_info() {
  if (construct_info_ != NULL) construct_info_->::com::zhichenhaixin::proto::ConstructionInfo::Clear();
  clear_has_construct_info();
}
inline const ::com::zhichenhaixin::proto::ConstructionInfo& DevInfo::construct_info() const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.proto.DevInfo.construct_info)
  return construct_info_ != NULL ? *construct_info_ : *default_instance_->construct_info_;
}
inline ::com::zhichenhaixin::proto::ConstructionInfo* DevInfo::mutable_construct_info() {
  set_has_construct_info();
  if (construct_info_ == NULL) construct_info_ = new ::com::zhichenhaixin::proto::ConstructionInfo;
  // @@protoc_insertion_point(field_mutable:com.zhichenhaixin.proto.DevInfo.construct_info)
  return construct_info_;
}
inline ::com::zhichenhaixin::proto::ConstructionInfo* DevInfo::release_construct_info() {
  clear_has_construct_info();
  ::com::zhichenhaixin::proto::ConstructionInfo* temp = construct_info_;
  construct_info_ = NULL;
  return temp;
}
inline void DevInfo::set_allocated_construct_info(::com::zhichenhaixin::proto::ConstructionInfo* construct_info) {
  delete construct_info_;
  construct_info_ = construct_info;
  if (construct_info) {
    set_has_construct_info();
  } else {
    clear_has_construct_info();
  }
  // @@protoc_insertion_point(field_set_allocated:com.zhichenhaixin.proto.DevInfo.construct_info)
}

// -------------------------------------------------------------------

// PMASNS

// required string date = 1;
inline bool PMASNS::has_date() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PMASNS::set_has_date() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PMASNS::clear_has_date() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PMASNS::clear_date() {
  if (date_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    date_->clear();
  }
  clear_has_date();
}
inline const ::std::string& PMASNS::date() const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.proto.PMASNS.date)
  return *date_;
}
inline void PMASNS::set_date(const ::std::string& value) {
  set_has_date();
  if (date_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    date_ = new ::std::string;
  }
  date_->assign(value);
  // @@protoc_insertion_point(field_set:com.zhichenhaixin.proto.PMASNS.date)
}
inline void PMASNS::set_date(const char* value) {
  set_has_date();
  if (date_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    date_ = new ::std::string;
  }
  date_->assign(value);
  // @@protoc_insertion_point(field_set_char:com.zhichenhaixin.proto.PMASNS.date)
}
inline void PMASNS::set_date(const char* value, size_t size) {
  set_has_date();
  if (date_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    date_ = new ::std::string;
  }
  date_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:com.zhichenhaixin.proto.PMASNS.date)
}
inline ::std::string* PMASNS::mutable_date() {
  set_has_date();
  if (date_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    date_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:com.zhichenhaixin.proto.PMASNS.date)
  return date_;
}
inline ::std::string* PMASNS::release_date() {
  clear_has_date();
  if (date_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = date_;
    date_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void PMASNS::set_allocated_date(::std::string* date) {
  if (date_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete date_;
  }
  if (date) {
    set_has_date();
    date_ = date;
  } else {
    clear_has_date();
    date_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:com.zhichenhaixin.proto.PMASNS.date)
}

// required string time = 2;
inline bool PMASNS::has_time() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PMASNS::set_has_time() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PMASNS::clear_has_time() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PMASNS::clear_time() {
  if (time_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    time_->clear();
  }
  clear_has_time();
}
inline const ::std::string& PMASNS::time() const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.proto.PMASNS.time)
  return *time_;
}
inline void PMASNS::set_time(const ::std::string& value) {
  set_has_time();
  if (time_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    time_ = new ::std::string;
  }
  time_->assign(value);
  // @@protoc_insertion_point(field_set:com.zhichenhaixin.proto.PMASNS.time)
}
inline void PMASNS::set_time(const char* value) {
  set_has_time();
  if (time_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    time_ = new ::std::string;
  }
  time_->assign(value);
  // @@protoc_insertion_point(field_set_char:com.zhichenhaixin.proto.PMASNS.time)
}
inline void PMASNS::set_time(const char* value, size_t size) {
  set_has_time();
  if (time_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    time_ = new ::std::string;
  }
  time_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:com.zhichenhaixin.proto.PMASNS.time)
}
inline ::std::string* PMASNS::mutable_time() {
  set_has_time();
  if (time_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    time_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:com.zhichenhaixin.proto.PMASNS.time)
  return time_;
}
inline ::std::string* PMASNS::release_time() {
  clear_has_time();
  if (time_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = time_;
    time_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void PMASNS::set_allocated_time(::std::string* time) {
  if (time_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete time_;
  }
  if (time) {
    set_has_time();
    time_ = time;
  } else {
    clear_has_time();
    time_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:com.zhichenhaixin.proto.PMASNS.time)
}

// required int32 gyro1_sts = 3;
inline bool PMASNS::has_gyro1_sts() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PMASNS::set_has_gyro1_sts() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PMASNS::clear_has_gyro1_sts() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PMASNS::clear_gyro1_sts() {
  gyro1_sts_ = 0;
  clear_has_gyro1_sts();
}
inline ::google::protobuf::int32 PMASNS::gyro1_sts() const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.proto.PMASNS.gyro1_sts)
  return gyro1_sts_;
}
inline void PMASNS::set_gyro1_sts(::google::protobuf::int32 value) {
  set_has_gyro1_sts();
  gyro1_sts_ = value;
  // @@protoc_insertion_point(field_set:com.zhichenhaixin.proto.PMASNS.gyro1_sts)
}

// required double heading1 = 4;
inline bool PMASNS::has_heading1() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void PMASNS::set_has_heading1() {
  _has_bits_[0] |= 0x00000008u;
}
inline void PMASNS::clear_has_heading1() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void PMASNS::clear_heading1() {
  heading1_ = 0;
  clear_has_heading1();
}
inline double PMASNS::heading1() const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.proto.PMASNS.heading1)
  return heading1_;
}
inline void PMASNS::set_heading1(double value) {
  set_has_heading1();
  heading1_ = value;
  // @@protoc_insertion_point(field_set:com.zhichenhaixin.proto.PMASNS.heading1)
}

// required int32 gyro2_sts = 5;
inline bool PMASNS::has_gyro2_sts() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void PMASNS::set_has_gyro2_sts() {
  _has_bits_[0] |= 0x00000010u;
}
inline void PMASNS::clear_has_gyro2_sts() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void PMASNS::clear_gyro2_sts() {
  gyro2_sts_ = 0;
  clear_has_gyro2_sts();
}
inline ::google::protobuf::int32 PMASNS::gyro2_sts() const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.proto.PMASNS.gyro2_sts)
  return gyro2_sts_;
}
inline void PMASNS::set_gyro2_sts(::google::protobuf::int32 value) {
  set_has_gyro2_sts();
  gyro2_sts_ = value;
  // @@protoc_insertion_point(field_set:com.zhichenhaixin.proto.PMASNS.gyro2_sts)
}

// required double heading2 = 6;
inline bool PMASNS::has_heading2() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void PMASNS::set_has_heading2() {
  _has_bits_[0] |= 0x00000020u;
}
inline void PMASNS::clear_has_heading2() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void PMASNS::clear_heading2() {
  heading2_ = 0;
  clear_has_heading2();
}
inline double PMASNS::heading2() const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.proto.PMASNS.heading2)
  return heading2_;
}
inline void PMASNS::set_heading2(double value) {
  set_has_heading2();
  heading2_ = value;
  // @@protoc_insertion_point(field_set:com.zhichenhaixin.proto.PMASNS.heading2)
}

// required int32 gyro3_sts = 7;
inline bool PMASNS::has_gyro3_sts() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void PMASNS::set_has_gyro3_sts() {
  _has_bits_[0] |= 0x00000040u;
}
inline void PMASNS::clear_has_gyro3_sts() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void PMASNS::clear_gyro3_sts() {
  gyro3_sts_ = 0;
  clear_has_gyro3_sts();
}
inline ::google::protobuf::int32 PMASNS::gyro3_sts() const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.proto.PMASNS.gyro3_sts)
  return gyro3_sts_;
}
inline void PMASNS::set_gyro3_sts(::google::protobuf::int32 value) {
  set_has_gyro3_sts();
  gyro3_sts_ = value;
  // @@protoc_insertion_point(field_set:com.zhichenhaixin.proto.PMASNS.gyro3_sts)
}

// required double heading3 = 8;
inline bool PMASNS::has_heading3() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void PMASNS::set_has_heading3() {
  _has_bits_[0] |= 0x00000080u;
}
inline void PMASNS::clear_has_heading3() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void PMASNS::clear_heading3() {
  heading3_ = 0;
  clear_has_heading3();
}
inline double PMASNS::heading3() const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.proto.PMASNS.heading3)
  return heading3_;
}
inline void PMASNS::set_heading3(double value) {
  set_has_heading3();
  heading3_ = value;
  // @@protoc_insertion_point(field_set:com.zhichenhaixin.proto.PMASNS.heading3)
}

// required int32 mru1_sts = 9;
inline bool PMASNS::has_mru1_sts() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void PMASNS::set_has_mru1_sts() {
  _has_bits_[0] |= 0x00000100u;
}
inline void PMASNS::clear_has_mru1_sts() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void PMASNS::clear_mru1_sts() {
  mru1_sts_ = 0;
  clear_has_mru1_sts();
}
inline ::google::protobuf::int32 PMASNS::mru1_sts() const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.proto.PMASNS.mru1_sts)
  return mru1_sts_;
}
inline void PMASNS::set_mru1_sts(::google::protobuf::int32 value) {
  set_has_mru1_sts();
  mru1_sts_ = value;
  // @@protoc_insertion_point(field_set:com.zhichenhaixin.proto.PMASNS.mru1_sts)
}

// required double pitch1 = 10;
inline bool PMASNS::has_pitch1() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void PMASNS::set_has_pitch1() {
  _has_bits_[0] |= 0x00000200u;
}
inline void PMASNS::clear_has_pitch1() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void PMASNS::clear_pitch1() {
  pitch1_ = 0;
  clear_has_pitch1();
}
inline double PMASNS::pitch1() const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.proto.PMASNS.pitch1)
  return pitch1_;
}
inline void PMASNS::set_pitch1(double value) {
  set_has_pitch1();
  pitch1_ = value;
  // @@protoc_insertion_point(field_set:com.zhichenhaixin.proto.PMASNS.pitch1)
}

// required int32 roll1 = 11;
inline bool PMASNS::has_roll1() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void PMASNS::set_has_roll1() {
  _has_bits_[0] |= 0x00000400u;
}
inline void PMASNS::clear_has_roll1() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void PMASNS::clear_roll1() {
  roll1_ = 0;
  clear_has_roll1();
}
inline ::google::protobuf::int32 PMASNS::roll1() const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.proto.PMASNS.roll1)
  return roll1_;
}
inline void PMASNS::set_roll1(::google::protobuf::int32 value) {
  set_has_roll1();
  roll1_ = value;
  // @@protoc_insertion_point(field_set:com.zhichenhaixin.proto.PMASNS.roll1)
}

// required double heave1 = 12;
inline bool PMASNS::has_heave1() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void PMASNS::set_has_heave1() {
  _has_bits_[0] |= 0x00000800u;
}
inline void PMASNS::clear_has_heave1() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void PMASNS::clear_heave1() {
  heave1_ = 0;
  clear_has_heave1();
}
inline double PMASNS::heave1() const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.proto.PMASNS.heave1)
  return heave1_;
}
inline void PMASNS::set_heave1(double value) {
  set_has_heave1();
  heave1_ = value;
  // @@protoc_insertion_point(field_set:com.zhichenhaixin.proto.PMASNS.heave1)
}

// required int32 mru2_sts = 13;
inline bool PMASNS::has_mru2_sts() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void PMASNS::set_has_mru2_sts() {
  _has_bits_[0] |= 0x00001000u;
}
inline void PMASNS::clear_has_mru2_sts() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void PMASNS::clear_mru2_sts() {
  mru2_sts_ = 0;
  clear_has_mru2_sts();
}
inline ::google::protobuf::int32 PMASNS::mru2_sts() const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.proto.PMASNS.mru2_sts)
  return mru2_sts_;
}
inline void PMASNS::set_mru2_sts(::google::protobuf::int32 value) {
  set_has_mru2_sts();
  mru2_sts_ = value;
  // @@protoc_insertion_point(field_set:com.zhichenhaixin.proto.PMASNS.mru2_sts)
}

// required double pitch2 = 14;
inline bool PMASNS::has_pitch2() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void PMASNS::set_has_pitch2() {
  _has_bits_[0] |= 0x00002000u;
}
inline void PMASNS::clear_has_pitch2() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void PMASNS::clear_pitch2() {
  pitch2_ = 0;
  clear_has_pitch2();
}
inline double PMASNS::pitch2() const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.proto.PMASNS.pitch2)
  return pitch2_;
}
inline void PMASNS::set_pitch2(double value) {
  set_has_pitch2();
  pitch2_ = value;
  // @@protoc_insertion_point(field_set:com.zhichenhaixin.proto.PMASNS.pitch2)
}

// required int32 roll2 = 15;
inline bool PMASNS::has_roll2() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void PMASNS::set_has_roll2() {
  _has_bits_[0] |= 0x00004000u;
}
inline void PMASNS::clear_has_roll2() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void PMASNS::clear_roll2() {
  roll2_ = 0;
  clear_has_roll2();
}
inline ::google::protobuf::int32 PMASNS::roll2() const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.proto.PMASNS.roll2)
  return roll2_;
}
inline void PMASNS::set_roll2(::google::protobuf::int32 value) {
  set_has_roll2();
  roll2_ = value;
  // @@protoc_insertion_point(field_set:com.zhichenhaixin.proto.PMASNS.roll2)
}

// required double heave2 = 16;
inline bool PMASNS::has_heave2() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void PMASNS::set_has_heave2() {
  _has_bits_[0] |= 0x00008000u;
}
inline void PMASNS::clear_has_heave2() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void PMASNS::clear_heave2() {
  heave2_ = 0;
  clear_has_heave2();
}
inline double PMASNS::heave2() const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.proto.PMASNS.heave2)
  return heave2_;
}
inline void PMASNS::set_heave2(double value) {
  set_has_heave2();
  heave2_ = value;
  // @@protoc_insertion_point(field_set:com.zhichenhaixin.proto.PMASNS.heave2)
}

// required int32 wind1_sts = 17;
inline bool PMASNS::has_wind1_sts() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void PMASNS::set_has_wind1_sts() {
  _has_bits_[0] |= 0x00010000u;
}
inline void PMASNS::clear_has_wind1_sts() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void PMASNS::clear_wind1_sts() {
  wind1_sts_ = 0;
  clear_has_wind1_sts();
}
inline ::google::protobuf::int32 PMASNS::wind1_sts() const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.proto.PMASNS.wind1_sts)
  return wind1_sts_;
}
inline void PMASNS::set_wind1_sts(::google::protobuf::int32 value) {
  set_has_wind1_sts();
  wind1_sts_ = value;
  // @@protoc_insertion_point(field_set:com.zhichenhaixin.proto.PMASNS.wind1_sts)
}

// required double speed1 = 18;
inline bool PMASNS::has_speed1() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void PMASNS::set_has_speed1() {
  _has_bits_[0] |= 0x00020000u;
}
inline void PMASNS::clear_has_speed1() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void PMASNS::clear_speed1() {
  speed1_ = 0;
  clear_has_speed1();
}
inline double PMASNS::speed1() const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.proto.PMASNS.speed1)
  return speed1_;
}
inline void PMASNS::set_speed1(double value) {
  set_has_speed1();
  speed1_ = value;
  // @@protoc_insertion_point(field_set:com.zhichenhaixin.proto.PMASNS.speed1)
}

// required int32 speed_dir1 = 19;
inline bool PMASNS::has_speed_dir1() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void PMASNS::set_has_speed_dir1() {
  _has_bits_[0] |= 0x00040000u;
}
inline void PMASNS::clear_has_speed_dir1() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void PMASNS::clear_speed_dir1() {
  speed_dir1_ = 0;
  clear_has_speed_dir1();
}
inline ::google::protobuf::int32 PMASNS::speed_dir1() const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.proto.PMASNS.speed_dir1)
  return speed_dir1_;
}
inline void PMASNS::set_speed_dir1(::google::protobuf::int32 value) {
  set_has_speed_dir1();
  speed_dir1_ = value;
  // @@protoc_insertion_point(field_set:com.zhichenhaixin.proto.PMASNS.speed_dir1)
}

// required double wind2_sts = 20;
inline bool PMASNS::has_wind2_sts() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void PMASNS::set_has_wind2_sts() {
  _has_bits_[0] |= 0x00080000u;
}
inline void PMASNS::clear_has_wind2_sts() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void PMASNS::clear_wind2_sts() {
  wind2_sts_ = 0;
  clear_has_wind2_sts();
}
inline double PMASNS::wind2_sts() const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.proto.PMASNS.wind2_sts)
  return wind2_sts_;
}
inline void PMASNS::set_wind2_sts(double value) {
  set_has_wind2_sts();
  wind2_sts_ = value;
  // @@protoc_insertion_point(field_set:com.zhichenhaixin.proto.PMASNS.wind2_sts)
}

// required int32 speed2 = 21;
inline bool PMASNS::has_speed2() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void PMASNS::set_has_speed2() {
  _has_bits_[0] |= 0x00100000u;
}
inline void PMASNS::clear_has_speed2() {
  _has_bits_[0] &= ~0x00100000u;
}
inline void PMASNS::clear_speed2() {
  speed2_ = 0;
  clear_has_speed2();
}
inline ::google::protobuf::int32 PMASNS::speed2() const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.proto.PMASNS.speed2)
  return speed2_;
}
inline void PMASNS::set_speed2(::google::protobuf::int32 value) {
  set_has_speed2();
  speed2_ = value;
  // @@protoc_insertion_point(field_set:com.zhichenhaixin.proto.PMASNS.speed2)
}

// required double speed_dir2 = 22;
inline bool PMASNS::has_speed_dir2() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
inline void PMASNS::set_has_speed_dir2() {
  _has_bits_[0] |= 0x00200000u;
}
inline void PMASNS::clear_has_speed_dir2() {
  _has_bits_[0] &= ~0x00200000u;
}
inline void PMASNS::clear_speed_dir2() {
  speed_dir2_ = 0;
  clear_has_speed_dir2();
}
inline double PMASNS::speed_dir2() const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.proto.PMASNS.speed_dir2)
  return speed_dir2_;
}
inline void PMASNS::set_speed_dir2(double value) {
  set_has_speed_dir2();
  speed_dir2_ = value;
  // @@protoc_insertion_point(field_set:com.zhichenhaixin.proto.PMASNS.speed_dir2)
}

// -------------------------------------------------------------------

// PMAGGA

// required int32 gps_identifier = 1;
inline bool PMAGGA::has_gps_identifier() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PMAGGA::set_has_gps_identifier() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PMAGGA::clear_has_gps_identifier() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PMAGGA::clear_gps_identifier() {
  gps_identifier_ = 0;
  clear_has_gps_identifier();
}
inline ::google::protobuf::int32 PMAGGA::gps_identifier() const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.proto.PMAGGA.gps_identifier)
  return gps_identifier_;
}
inline void PMAGGA::set_gps_identifier(::google::protobuf::int32 value) {
  set_has_gps_identifier();
  gps_identifier_ = value;
  // @@protoc_insertion_point(field_set:com.zhichenhaixin.proto.PMAGGA.gps_identifier)
}

// required string time = 2;
inline bool PMAGGA::has_time() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PMAGGA::set_has_time() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PMAGGA::clear_has_time() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PMAGGA::clear_time() {
  if (time_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    time_->clear();
  }
  clear_has_time();
}
inline const ::std::string& PMAGGA::time() const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.proto.PMAGGA.time)
  return *time_;
}
inline void PMAGGA::set_time(const ::std::string& value) {
  set_has_time();
  if (time_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    time_ = new ::std::string;
  }
  time_->assign(value);
  // @@protoc_insertion_point(field_set:com.zhichenhaixin.proto.PMAGGA.time)
}
inline void PMAGGA::set_time(const char* value) {
  set_has_time();
  if (time_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    time_ = new ::std::string;
  }
  time_->assign(value);
  // @@protoc_insertion_point(field_set_char:com.zhichenhaixin.proto.PMAGGA.time)
}
inline void PMAGGA::set_time(const char* value, size_t size) {
  set_has_time();
  if (time_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    time_ = new ::std::string;
  }
  time_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:com.zhichenhaixin.proto.PMAGGA.time)
}
inline ::std::string* PMAGGA::mutable_time() {
  set_has_time();
  if (time_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    time_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:com.zhichenhaixin.proto.PMAGGA.time)
  return time_;
}
inline ::std::string* PMAGGA::release_time() {
  clear_has_time();
  if (time_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = time_;
    time_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void PMAGGA::set_allocated_time(::std::string* time) {
  if (time_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete time_;
  }
  if (time) {
    set_has_time();
    time_ = time;
  } else {
    clear_has_time();
    time_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:com.zhichenhaixin.proto.PMAGGA.time)
}

// required double lat = 3;
inline bool PMAGGA::has_lat() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PMAGGA::set_has_lat() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PMAGGA::clear_has_lat() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PMAGGA::clear_lat() {
  lat_ = 0;
  clear_has_lat();
}
inline double PMAGGA::lat() const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.proto.PMAGGA.lat)
  return lat_;
}
inline void PMAGGA::set_lat(double value) {
  set_has_lat();
  lat_ = value;
  // @@protoc_insertion_point(field_set:com.zhichenhaixin.proto.PMAGGA.lat)
}

// required string lat_dir = 4;
inline bool PMAGGA::has_lat_dir() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void PMAGGA::set_has_lat_dir() {
  _has_bits_[0] |= 0x00000008u;
}
inline void PMAGGA::clear_has_lat_dir() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void PMAGGA::clear_lat_dir() {
  if (lat_dir_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    lat_dir_->clear();
  }
  clear_has_lat_dir();
}
inline const ::std::string& PMAGGA::lat_dir() const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.proto.PMAGGA.lat_dir)
  return *lat_dir_;
}
inline void PMAGGA::set_lat_dir(const ::std::string& value) {
  set_has_lat_dir();
  if (lat_dir_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    lat_dir_ = new ::std::string;
  }
  lat_dir_->assign(value);
  // @@protoc_insertion_point(field_set:com.zhichenhaixin.proto.PMAGGA.lat_dir)
}
inline void PMAGGA::set_lat_dir(const char* value) {
  set_has_lat_dir();
  if (lat_dir_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    lat_dir_ = new ::std::string;
  }
  lat_dir_->assign(value);
  // @@protoc_insertion_point(field_set_char:com.zhichenhaixin.proto.PMAGGA.lat_dir)
}
inline void PMAGGA::set_lat_dir(const char* value, size_t size) {
  set_has_lat_dir();
  if (lat_dir_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    lat_dir_ = new ::std::string;
  }
  lat_dir_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:com.zhichenhaixin.proto.PMAGGA.lat_dir)
}
inline ::std::string* PMAGGA::mutable_lat_dir() {
  set_has_lat_dir();
  if (lat_dir_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    lat_dir_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:com.zhichenhaixin.proto.PMAGGA.lat_dir)
  return lat_dir_;
}
inline ::std::string* PMAGGA::release_lat_dir() {
  clear_has_lat_dir();
  if (lat_dir_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = lat_dir_;
    lat_dir_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void PMAGGA::set_allocated_lat_dir(::std::string* lat_dir) {
  if (lat_dir_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete lat_dir_;
  }
  if (lat_dir) {
    set_has_lat_dir();
    lat_dir_ = lat_dir;
  } else {
    clear_has_lat_dir();
    lat_dir_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:com.zhichenhaixin.proto.PMAGGA.lat_dir)
}

// required double lon = 5;
inline bool PMAGGA::has_lon() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void PMAGGA::set_has_lon() {
  _has_bits_[0] |= 0x00000010u;
}
inline void PMAGGA::clear_has_lon() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void PMAGGA::clear_lon() {
  lon_ = 0;
  clear_has_lon();
}
inline double PMAGGA::lon() const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.proto.PMAGGA.lon)
  return lon_;
}
inline void PMAGGA::set_lon(double value) {
  set_has_lon();
  lon_ = value;
  // @@protoc_insertion_point(field_set:com.zhichenhaixin.proto.PMAGGA.lon)
}

// required string lon_dir = 6;
inline bool PMAGGA::has_lon_dir() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void PMAGGA::set_has_lon_dir() {
  _has_bits_[0] |= 0x00000020u;
}
inline void PMAGGA::clear_has_lon_dir() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void PMAGGA::clear_lon_dir() {
  if (lon_dir_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    lon_dir_->clear();
  }
  clear_has_lon_dir();
}
inline const ::std::string& PMAGGA::lon_dir() const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.proto.PMAGGA.lon_dir)
  return *lon_dir_;
}
inline void PMAGGA::set_lon_dir(const ::std::string& value) {
  set_has_lon_dir();
  if (lon_dir_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    lon_dir_ = new ::std::string;
  }
  lon_dir_->assign(value);
  // @@protoc_insertion_point(field_set:com.zhichenhaixin.proto.PMAGGA.lon_dir)
}
inline void PMAGGA::set_lon_dir(const char* value) {
  set_has_lon_dir();
  if (lon_dir_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    lon_dir_ = new ::std::string;
  }
  lon_dir_->assign(value);
  // @@protoc_insertion_point(field_set_char:com.zhichenhaixin.proto.PMAGGA.lon_dir)
}
inline void PMAGGA::set_lon_dir(const char* value, size_t size) {
  set_has_lon_dir();
  if (lon_dir_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    lon_dir_ = new ::std::string;
  }
  lon_dir_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:com.zhichenhaixin.proto.PMAGGA.lon_dir)
}
inline ::std::string* PMAGGA::mutable_lon_dir() {
  set_has_lon_dir();
  if (lon_dir_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    lon_dir_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:com.zhichenhaixin.proto.PMAGGA.lon_dir)
  return lon_dir_;
}
inline ::std::string* PMAGGA::release_lon_dir() {
  clear_has_lon_dir();
  if (lon_dir_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = lon_dir_;
    lon_dir_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void PMAGGA::set_allocated_lon_dir(::std::string* lon_dir) {
  if (lon_dir_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete lon_dir_;
  }
  if (lon_dir) {
    set_has_lon_dir();
    lon_dir_ = lon_dir;
  } else {
    clear_has_lon_dir();
    lon_dir_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:com.zhichenhaixin.proto.PMAGGA.lon_dir)
}

// required int32 gps_qualifier = 7;
inline bool PMAGGA::has_gps_qualifier() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void PMAGGA::set_has_gps_qualifier() {
  _has_bits_[0] |= 0x00000040u;
}
inline void PMAGGA::clear_has_gps_qualifier() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void PMAGGA::clear_gps_qualifier() {
  gps_qualifier_ = 0;
  clear_has_gps_qualifier();
}
inline ::google::protobuf::int32 PMAGGA::gps_qualifier() const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.proto.PMAGGA.gps_qualifier)
  return gps_qualifier_;
}
inline void PMAGGA::set_gps_qualifier(::google::protobuf::int32 value) {
  set_has_gps_qualifier();
  gps_qualifier_ = value;
  // @@protoc_insertion_point(field_set:com.zhichenhaixin.proto.PMAGGA.gps_qualifier)
}

// required int32 satellites_number = 8;
inline bool PMAGGA::has_satellites_number() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void PMAGGA::set_has_satellites_number() {
  _has_bits_[0] |= 0x00000080u;
}
inline void PMAGGA::clear_has_satellites_number() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void PMAGGA::clear_satellites_number() {
  satellites_number_ = 0;
  clear_has_satellites_number();
}
inline ::google::protobuf::int32 PMAGGA::satellites_number() const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.proto.PMAGGA.satellites_number)
  return satellites_number_;
}
inline void PMAGGA::set_satellites_number(::google::protobuf::int32 value) {
  set_has_satellites_number();
  satellites_number_ = value;
  // @@protoc_insertion_point(field_set:com.zhichenhaixin.proto.PMAGGA.satellites_number)
}

// required double hdop = 9;
inline bool PMAGGA::has_hdop() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void PMAGGA::set_has_hdop() {
  _has_bits_[0] |= 0x00000100u;
}
inline void PMAGGA::clear_has_hdop() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void PMAGGA::clear_hdop() {
  hdop_ = 0;
  clear_has_hdop();
}
inline double PMAGGA::hdop() const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.proto.PMAGGA.hdop)
  return hdop_;
}
inline void PMAGGA::set_hdop(double value) {
  set_has_hdop();
  hdop_ = value;
  // @@protoc_insertion_point(field_set:com.zhichenhaixin.proto.PMAGGA.hdop)
}

// required string reserve1 = 10;
inline bool PMAGGA::has_reserve1() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void PMAGGA::set_has_reserve1() {
  _has_bits_[0] |= 0x00000200u;
}
inline void PMAGGA::clear_has_reserve1() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void PMAGGA::clear_reserve1() {
  if (reserve1_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    reserve1_->clear();
  }
  clear_has_reserve1();
}
inline const ::std::string& PMAGGA::reserve1() const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.proto.PMAGGA.reserve1)
  return *reserve1_;
}
inline void PMAGGA::set_reserve1(const ::std::string& value) {
  set_has_reserve1();
  if (reserve1_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    reserve1_ = new ::std::string;
  }
  reserve1_->assign(value);
  // @@protoc_insertion_point(field_set:com.zhichenhaixin.proto.PMAGGA.reserve1)
}
inline void PMAGGA::set_reserve1(const char* value) {
  set_has_reserve1();
  if (reserve1_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    reserve1_ = new ::std::string;
  }
  reserve1_->assign(value);
  // @@protoc_insertion_point(field_set_char:com.zhichenhaixin.proto.PMAGGA.reserve1)
}
inline void PMAGGA::set_reserve1(const char* value, size_t size) {
  set_has_reserve1();
  if (reserve1_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    reserve1_ = new ::std::string;
  }
  reserve1_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:com.zhichenhaixin.proto.PMAGGA.reserve1)
}
inline ::std::string* PMAGGA::mutable_reserve1() {
  set_has_reserve1();
  if (reserve1_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    reserve1_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:com.zhichenhaixin.proto.PMAGGA.reserve1)
  return reserve1_;
}
inline ::std::string* PMAGGA::release_reserve1() {
  clear_has_reserve1();
  if (reserve1_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = reserve1_;
    reserve1_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void PMAGGA::set_allocated_reserve1(::std::string* reserve1) {
  if (reserve1_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete reserve1_;
  }
  if (reserve1) {
    set_has_reserve1();
    reserve1_ = reserve1;
  } else {
    clear_has_reserve1();
    reserve1_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:com.zhichenhaixin.proto.PMAGGA.reserve1)
}

// required string reserve2 = 11;
inline bool PMAGGA::has_reserve2() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void PMAGGA::set_has_reserve2() {
  _has_bits_[0] |= 0x00000400u;
}
inline void PMAGGA::clear_has_reserve2() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void PMAGGA::clear_reserve2() {
  if (reserve2_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    reserve2_->clear();
  }
  clear_has_reserve2();
}
inline const ::std::string& PMAGGA::reserve2() const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.proto.PMAGGA.reserve2)
  return *reserve2_;
}
inline void PMAGGA::set_reserve2(const ::std::string& value) {
  set_has_reserve2();
  if (reserve2_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    reserve2_ = new ::std::string;
  }
  reserve2_->assign(value);
  // @@protoc_insertion_point(field_set:com.zhichenhaixin.proto.PMAGGA.reserve2)
}
inline void PMAGGA::set_reserve2(const char* value) {
  set_has_reserve2();
  if (reserve2_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    reserve2_ = new ::std::string;
  }
  reserve2_->assign(value);
  // @@protoc_insertion_point(field_set_char:com.zhichenhaixin.proto.PMAGGA.reserve2)
}
inline void PMAGGA::set_reserve2(const char* value, size_t size) {
  set_has_reserve2();
  if (reserve2_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    reserve2_ = new ::std::string;
  }
  reserve2_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:com.zhichenhaixin.proto.PMAGGA.reserve2)
}
inline ::std::string* PMAGGA::mutable_reserve2() {
  set_has_reserve2();
  if (reserve2_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    reserve2_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:com.zhichenhaixin.proto.PMAGGA.reserve2)
  return reserve2_;
}
inline ::std::string* PMAGGA::release_reserve2() {
  clear_has_reserve2();
  if (reserve2_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = reserve2_;
    reserve2_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void PMAGGA::set_allocated_reserve2(::std::string* reserve2) {
  if (reserve2_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete reserve2_;
  }
  if (reserve2) {
    set_has_reserve2();
    reserve2_ = reserve2;
  } else {
    clear_has_reserve2();
    reserve2_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:com.zhichenhaixin.proto.PMAGGA.reserve2)
}

// required string reserve3 = 12;
inline bool PMAGGA::has_reserve3() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void PMAGGA::set_has_reserve3() {
  _has_bits_[0] |= 0x00000800u;
}
inline void PMAGGA::clear_has_reserve3() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void PMAGGA::clear_reserve3() {
  if (reserve3_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    reserve3_->clear();
  }
  clear_has_reserve3();
}
inline const ::std::string& PMAGGA::reserve3() const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.proto.PMAGGA.reserve3)
  return *reserve3_;
}
inline void PMAGGA::set_reserve3(const ::std::string& value) {
  set_has_reserve3();
  if (reserve3_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    reserve3_ = new ::std::string;
  }
  reserve3_->assign(value);
  // @@protoc_insertion_point(field_set:com.zhichenhaixin.proto.PMAGGA.reserve3)
}
inline void PMAGGA::set_reserve3(const char* value) {
  set_has_reserve3();
  if (reserve3_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    reserve3_ = new ::std::string;
  }
  reserve3_->assign(value);
  // @@protoc_insertion_point(field_set_char:com.zhichenhaixin.proto.PMAGGA.reserve3)
}
inline void PMAGGA::set_reserve3(const char* value, size_t size) {
  set_has_reserve3();
  if (reserve3_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    reserve3_ = new ::std::string;
  }
  reserve3_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:com.zhichenhaixin.proto.PMAGGA.reserve3)
}
inline ::std::string* PMAGGA::mutable_reserve3() {
  set_has_reserve3();
  if (reserve3_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    reserve3_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:com.zhichenhaixin.proto.PMAGGA.reserve3)
  return reserve3_;
}
inline ::std::string* PMAGGA::release_reserve3() {
  clear_has_reserve3();
  if (reserve3_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = reserve3_;
    reserve3_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void PMAGGA::set_allocated_reserve3(::std::string* reserve3) {
  if (reserve3_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete reserve3_;
  }
  if (reserve3) {
    set_has_reserve3();
    reserve3_ = reserve3;
  } else {
    clear_has_reserve3();
    reserve3_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:com.zhichenhaixin.proto.PMAGGA.reserve3)
}

// required string geo_unit = 13;
inline bool PMAGGA::has_geo_unit() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void PMAGGA::set_has_geo_unit() {
  _has_bits_[0] |= 0x00001000u;
}
inline void PMAGGA::clear_has_geo_unit() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void PMAGGA::clear_geo_unit() {
  if (geo_unit_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    geo_unit_->clear();
  }
  clear_has_geo_unit();
}
inline const ::std::string& PMAGGA::geo_unit() const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.proto.PMAGGA.geo_unit)
  return *geo_unit_;
}
inline void PMAGGA::set_geo_unit(const ::std::string& value) {
  set_has_geo_unit();
  if (geo_unit_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    geo_unit_ = new ::std::string;
  }
  geo_unit_->assign(value);
  // @@protoc_insertion_point(field_set:com.zhichenhaixin.proto.PMAGGA.geo_unit)
}
inline void PMAGGA::set_geo_unit(const char* value) {
  set_has_geo_unit();
  if (geo_unit_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    geo_unit_ = new ::std::string;
  }
  geo_unit_->assign(value);
  // @@protoc_insertion_point(field_set_char:com.zhichenhaixin.proto.PMAGGA.geo_unit)
}
inline void PMAGGA::set_geo_unit(const char* value, size_t size) {
  set_has_geo_unit();
  if (geo_unit_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    geo_unit_ = new ::std::string;
  }
  geo_unit_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:com.zhichenhaixin.proto.PMAGGA.geo_unit)
}
inline ::std::string* PMAGGA::mutable_geo_unit() {
  set_has_geo_unit();
  if (geo_unit_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    geo_unit_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:com.zhichenhaixin.proto.PMAGGA.geo_unit)
  return geo_unit_;
}
inline ::std::string* PMAGGA::release_geo_unit() {
  clear_has_geo_unit();
  if (geo_unit_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = geo_unit_;
    geo_unit_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void PMAGGA::set_allocated_geo_unit(::std::string* geo_unit) {
  if (geo_unit_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete geo_unit_;
  }
  if (geo_unit) {
    set_has_geo_unit();
    geo_unit_ = geo_unit;
  } else {
    clear_has_geo_unit();
    geo_unit_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:com.zhichenhaixin.proto.PMAGGA.geo_unit)
}

// required string reserve4 = 14;
inline bool PMAGGA::has_reserve4() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void PMAGGA::set_has_reserve4() {
  _has_bits_[0] |= 0x00002000u;
}
inline void PMAGGA::clear_has_reserve4() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void PMAGGA::clear_reserve4() {
  if (reserve4_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    reserve4_->clear();
  }
  clear_has_reserve4();
}
inline const ::std::string& PMAGGA::reserve4() const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.proto.PMAGGA.reserve4)
  return *reserve4_;
}
inline void PMAGGA::set_reserve4(const ::std::string& value) {
  set_has_reserve4();
  if (reserve4_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    reserve4_ = new ::std::string;
  }
  reserve4_->assign(value);
  // @@protoc_insertion_point(field_set:com.zhichenhaixin.proto.PMAGGA.reserve4)
}
inline void PMAGGA::set_reserve4(const char* value) {
  set_has_reserve4();
  if (reserve4_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    reserve4_ = new ::std::string;
  }
  reserve4_->assign(value);
  // @@protoc_insertion_point(field_set_char:com.zhichenhaixin.proto.PMAGGA.reserve4)
}
inline void PMAGGA::set_reserve4(const char* value, size_t size) {
  set_has_reserve4();
  if (reserve4_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    reserve4_ = new ::std::string;
  }
  reserve4_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:com.zhichenhaixin.proto.PMAGGA.reserve4)
}
inline ::std::string* PMAGGA::mutable_reserve4() {
  set_has_reserve4();
  if (reserve4_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    reserve4_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:com.zhichenhaixin.proto.PMAGGA.reserve4)
  return reserve4_;
}
inline ::std::string* PMAGGA::release_reserve4() {
  clear_has_reserve4();
  if (reserve4_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = reserve4_;
    reserve4_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void PMAGGA::set_allocated_reserve4(::std::string* reserve4) {
  if (reserve4_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete reserve4_;
  }
  if (reserve4) {
    set_has_reserve4();
    reserve4_ = reserve4;
  } else {
    clear_has_reserve4();
    reserve4_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:com.zhichenhaixin.proto.PMAGGA.reserve4)
}

// required string reserve5 = 15;
inline bool PMAGGA::has_reserve5() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void PMAGGA::set_has_reserve5() {
  _has_bits_[0] |= 0x00004000u;
}
inline void PMAGGA::clear_has_reserve5() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void PMAGGA::clear_reserve5() {
  if (reserve5_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    reserve5_->clear();
  }
  clear_has_reserve5();
}
inline const ::std::string& PMAGGA::reserve5() const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.proto.PMAGGA.reserve5)
  return *reserve5_;
}
inline void PMAGGA::set_reserve5(const ::std::string& value) {
  set_has_reserve5();
  if (reserve5_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    reserve5_ = new ::std::string;
  }
  reserve5_->assign(value);
  // @@protoc_insertion_point(field_set:com.zhichenhaixin.proto.PMAGGA.reserve5)
}
inline void PMAGGA::set_reserve5(const char* value) {
  set_has_reserve5();
  if (reserve5_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    reserve5_ = new ::std::string;
  }
  reserve5_->assign(value);
  // @@protoc_insertion_point(field_set_char:com.zhichenhaixin.proto.PMAGGA.reserve5)
}
inline void PMAGGA::set_reserve5(const char* value, size_t size) {
  set_has_reserve5();
  if (reserve5_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    reserve5_ = new ::std::string;
  }
  reserve5_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:com.zhichenhaixin.proto.PMAGGA.reserve5)
}
inline ::std::string* PMAGGA::mutable_reserve5() {
  set_has_reserve5();
  if (reserve5_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    reserve5_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:com.zhichenhaixin.proto.PMAGGA.reserve5)
  return reserve5_;
}
inline ::std::string* PMAGGA::release_reserve5() {
  clear_has_reserve5();
  if (reserve5_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = reserve5_;
    reserve5_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void PMAGGA::set_allocated_reserve5(::std::string* reserve5) {
  if (reserve5_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete reserve5_;
  }
  if (reserve5) {
    set_has_reserve5();
    reserve5_ = reserve5;
  } else {
    clear_has_reserve5();
    reserve5_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:com.zhichenhaixin.proto.PMAGGA.reserve5)
}

// -------------------------------------------------------------------

// PMAVTG

// required int32 gps_identifier = 1;
inline bool PMAVTG::has_gps_identifier() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PMAVTG::set_has_gps_identifier() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PMAVTG::clear_has_gps_identifier() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PMAVTG::clear_gps_identifier() {
  gps_identifier_ = 0;
  clear_has_gps_identifier();
}
inline ::google::protobuf::int32 PMAVTG::gps_identifier() const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.proto.PMAVTG.gps_identifier)
  return gps_identifier_;
}
inline void PMAVTG::set_gps_identifier(::google::protobuf::int32 value) {
  set_has_gps_identifier();
  gps_identifier_ = value;
  // @@protoc_insertion_point(field_set:com.zhichenhaixin.proto.PMAVTG.gps_identifier)
}

// required double true_course = 2;
inline bool PMAVTG::has_true_course() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PMAVTG::set_has_true_course() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PMAVTG::clear_has_true_course() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PMAVTG::clear_true_course() {
  true_course_ = 0;
  clear_has_true_course();
}
inline double PMAVTG::true_course() const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.proto.PMAVTG.true_course)
  return true_course_;
}
inline void PMAVTG::set_true_course(double value) {
  set_has_true_course();
  true_course_ = value;
  // @@protoc_insertion_point(field_set:com.zhichenhaixin.proto.PMAVTG.true_course)
}

// required double magn_course = 3;
inline bool PMAVTG::has_magn_course() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PMAVTG::set_has_magn_course() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PMAVTG::clear_has_magn_course() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PMAVTG::clear_magn_course() {
  magn_course_ = 0;
  clear_has_magn_course();
}
inline double PMAVTG::magn_course() const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.proto.PMAVTG.magn_course)
  return magn_course_;
}
inline void PMAVTG::set_magn_course(double value) {
  set_has_magn_course();
  magn_course_ = value;
  // @@protoc_insertion_point(field_set:com.zhichenhaixin.proto.PMAVTG.magn_course)
}

// required double speed_knots = 4;
inline bool PMAVTG::has_speed_knots() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void PMAVTG::set_has_speed_knots() {
  _has_bits_[0] |= 0x00000008u;
}
inline void PMAVTG::clear_has_speed_knots() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void PMAVTG::clear_speed_knots() {
  speed_knots_ = 0;
  clear_has_speed_knots();
}
inline double PMAVTG::speed_knots() const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.proto.PMAVTG.speed_knots)
  return speed_knots_;
}
inline void PMAVTG::set_speed_knots(double value) {
  set_has_speed_knots();
  speed_knots_ = value;
  // @@protoc_insertion_point(field_set:com.zhichenhaixin.proto.PMAVTG.speed_knots)
}

// required double speed_kmph = 5;
inline bool PMAVTG::has_speed_kmph() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void PMAVTG::set_has_speed_kmph() {
  _has_bits_[0] |= 0x00000010u;
}
inline void PMAVTG::clear_has_speed_kmph() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void PMAVTG::clear_speed_kmph() {
  speed_kmph_ = 0;
  clear_has_speed_kmph();
}
inline double PMAVTG::speed_kmph() const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.proto.PMAVTG.speed_kmph)
  return speed_kmph_;
}
inline void PMAVTG::set_speed_kmph(double value) {
  set_has_speed_kmph();
  speed_kmph_ = value;
  // @@protoc_insertion_point(field_set:com.zhichenhaixin.proto.PMAVTG.speed_kmph)
}

// -------------------------------------------------------------------

// PMATHA

// required double surge_demand = 1;
inline bool PMATHA::has_surge_demand() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PMATHA::set_has_surge_demand() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PMATHA::clear_has_surge_demand() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PMATHA::clear_surge_demand() {
  surge_demand_ = 0;
  clear_has_surge_demand();
}
inline double PMATHA::surge_demand() const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.proto.PMATHA.surge_demand)
  return surge_demand_;
}
inline void PMATHA::set_surge_demand(double value) {
  set_has_surge_demand();
  surge_demand_ = value;
  // @@protoc_insertion_point(field_set:com.zhichenhaixin.proto.PMATHA.surge_demand)
}

// required double surge_feedback = 2;
inline bool PMATHA::has_surge_feedback() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PMATHA::set_has_surge_feedback() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PMATHA::clear_has_surge_feedback() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PMATHA::clear_surge_feedback() {
  surge_feedback_ = 0;
  clear_has_surge_feedback();
}
inline double PMATHA::surge_feedback() const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.proto.PMATHA.surge_feedback)
  return surge_feedback_;
}
inline void PMATHA::set_surge_feedback(double value) {
  set_has_surge_feedback();
  surge_feedback_ = value;
  // @@protoc_insertion_point(field_set:com.zhichenhaixin.proto.PMATHA.surge_feedback)
}

// required double sway_demand = 3;
inline bool PMATHA::has_sway_demand() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PMATHA::set_has_sway_demand() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PMATHA::clear_has_sway_demand() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PMATHA::clear_sway_demand() {
  sway_demand_ = 0;
  clear_has_sway_demand();
}
inline double PMATHA::sway_demand() const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.proto.PMATHA.sway_demand)
  return sway_demand_;
}
inline void PMATHA::set_sway_demand(double value) {
  set_has_sway_demand();
  sway_demand_ = value;
  // @@protoc_insertion_point(field_set:com.zhichenhaixin.proto.PMATHA.sway_demand)
}

// required double sway_feedback = 4;
inline bool PMATHA::has_sway_feedback() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void PMATHA::set_has_sway_feedback() {
  _has_bits_[0] |= 0x00000008u;
}
inline void PMATHA::clear_has_sway_feedback() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void PMATHA::clear_sway_feedback() {
  sway_feedback_ = 0;
  clear_has_sway_feedback();
}
inline double PMATHA::sway_feedback() const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.proto.PMATHA.sway_feedback)
  return sway_feedback_;
}
inline void PMATHA::set_sway_feedback(double value) {
  set_has_sway_feedback();
  sway_feedback_ = value;
  // @@protoc_insertion_point(field_set:com.zhichenhaixin.proto.PMATHA.sway_feedback)
}

// required double yaw_demand = 5;
inline bool PMATHA::has_yaw_demand() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void PMATHA::set_has_yaw_demand() {
  _has_bits_[0] |= 0x00000010u;
}
inline void PMATHA::clear_has_yaw_demand() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void PMATHA::clear_yaw_demand() {
  yaw_demand_ = 0;
  clear_has_yaw_demand();
}
inline double PMATHA::yaw_demand() const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.proto.PMATHA.yaw_demand)
  return yaw_demand_;
}
inline void PMATHA::set_yaw_demand(double value) {
  set_has_yaw_demand();
  yaw_demand_ = value;
  // @@protoc_insertion_point(field_set:com.zhichenhaixin.proto.PMATHA.yaw_demand)
}

// required double yaw_feedback = 6;
inline bool PMATHA::has_yaw_feedback() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void PMATHA::set_has_yaw_feedback() {
  _has_bits_[0] |= 0x00000020u;
}
inline void PMATHA::clear_has_yaw_feedback() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void PMATHA::clear_yaw_feedback() {
  yaw_feedback_ = 0;
  clear_has_yaw_feedback();
}
inline double PMATHA::yaw_feedback() const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.proto.PMATHA.yaw_feedback)
  return yaw_feedback_;
}
inline void PMATHA::set_yaw_feedback(double value) {
  set_has_yaw_feedback();
  yaw_feedback_ = value;
  // @@protoc_insertion_point(field_set:com.zhichenhaixin.proto.PMATHA.yaw_feedback)
}

// -------------------------------------------------------------------

// PMATHF

// required int32 thruster_number = 1;
inline bool PMATHF::has_thruster_number() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PMATHF::set_has_thruster_number() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PMATHF::clear_has_thruster_number() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PMATHF::clear_thruster_number() {
  thruster_number_ = 0;
  clear_has_thruster_number();
}
inline ::google::protobuf::int32 PMATHF::thruster_number() const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.proto.PMATHF.thruster_number)
  return thruster_number_;
}
inline void PMATHF::set_thruster_number(::google::protobuf::int32 value) {
  set_has_thruster_number();
  thruster_number_ = value;
  // @@protoc_insertion_point(field_set:com.zhichenhaixin.proto.PMATHF.thruster_number)
}

// required string thruster_Status = 2;
inline bool PMATHF::has_thruster_status() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PMATHF::set_has_thruster_status() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PMATHF::clear_has_thruster_status() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PMATHF::clear_thruster_status() {
  if (thruster_status_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    thruster_status_->clear();
  }
  clear_has_thruster_status();
}
inline const ::std::string& PMATHF::thruster_status() const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.proto.PMATHF.thruster_Status)
  return *thruster_status_;
}
inline void PMATHF::set_thruster_status(const ::std::string& value) {
  set_has_thruster_status();
  if (thruster_status_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    thruster_status_ = new ::std::string;
  }
  thruster_status_->assign(value);
  // @@protoc_insertion_point(field_set:com.zhichenhaixin.proto.PMATHF.thruster_Status)
}
inline void PMATHF::set_thruster_status(const char* value) {
  set_has_thruster_status();
  if (thruster_status_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    thruster_status_ = new ::std::string;
  }
  thruster_status_->assign(value);
  // @@protoc_insertion_point(field_set_char:com.zhichenhaixin.proto.PMATHF.thruster_Status)
}
inline void PMATHF::set_thruster_status(const char* value, size_t size) {
  set_has_thruster_status();
  if (thruster_status_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    thruster_status_ = new ::std::string;
  }
  thruster_status_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:com.zhichenhaixin.proto.PMATHF.thruster_Status)
}
inline ::std::string* PMATHF::mutable_thruster_status() {
  set_has_thruster_status();
  if (thruster_status_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    thruster_status_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:com.zhichenhaixin.proto.PMATHF.thruster_Status)
  return thruster_status_;
}
inline ::std::string* PMATHF::release_thruster_status() {
  clear_has_thruster_status();
  if (thruster_status_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = thruster_status_;
    thruster_status_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void PMATHF::set_allocated_thruster_status(::std::string* thruster_status) {
  if (thruster_status_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete thruster_status_;
  }
  if (thruster_status) {
    set_has_thruster_status();
    thruster_status_ = thruster_status;
  } else {
    clear_has_thruster_status();
    thruster_status_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:com.zhichenhaixin.proto.PMATHF.thruster_Status)
}

// required double rpm_pitch_demand = 3;
inline bool PMATHF::has_rpm_pitch_demand() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PMATHF::set_has_rpm_pitch_demand() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PMATHF::clear_has_rpm_pitch_demand() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PMATHF::clear_rpm_pitch_demand() {
  rpm_pitch_demand_ = 0;
  clear_has_rpm_pitch_demand();
}
inline double PMATHF::rpm_pitch_demand() const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.proto.PMATHF.rpm_pitch_demand)
  return rpm_pitch_demand_;
}
inline void PMATHF::set_rpm_pitch_demand(double value) {
  set_has_rpm_pitch_demand();
  rpm_pitch_demand_ = value;
  // @@protoc_insertion_point(field_set:com.zhichenhaixin.proto.PMATHF.rpm_pitch_demand)
}

// required double rpm_pitch_feedback = 4;
inline bool PMATHF::has_rpm_pitch_feedback() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void PMATHF::set_has_rpm_pitch_feedback() {
  _has_bits_[0] |= 0x00000008u;
}
inline void PMATHF::clear_has_rpm_pitch_feedback() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void PMATHF::clear_rpm_pitch_feedback() {
  rpm_pitch_feedback_ = 0;
  clear_has_rpm_pitch_feedback();
}
inline double PMATHF::rpm_pitch_feedback() const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.proto.PMATHF.rpm_pitch_feedback)
  return rpm_pitch_feedback_;
}
inline void PMATHF::set_rpm_pitch_feedback(double value) {
  set_has_rpm_pitch_feedback();
  rpm_pitch_feedback_ = value;
  // @@protoc_insertion_point(field_set:com.zhichenhaixin.proto.PMATHF.rpm_pitch_feedback)
}

// required double thrust_demand = 5;
inline bool PMATHF::has_thrust_demand() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void PMATHF::set_has_thrust_demand() {
  _has_bits_[0] |= 0x00000010u;
}
inline void PMATHF::clear_has_thrust_demand() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void PMATHF::clear_thrust_demand() {
  thrust_demand_ = 0;
  clear_has_thrust_demand();
}
inline double PMATHF::thrust_demand() const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.proto.PMATHF.thrust_demand)
  return thrust_demand_;
}
inline void PMATHF::set_thrust_demand(double value) {
  set_has_thrust_demand();
  thrust_demand_ = value;
  // @@protoc_insertion_point(field_set:com.zhichenhaixin.proto.PMATHF.thrust_demand)
}

// required double thrust_feedback = 6;
inline bool PMATHF::has_thrust_feedback() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void PMATHF::set_has_thrust_feedback() {
  _has_bits_[0] |= 0x00000020u;
}
inline void PMATHF::clear_has_thrust_feedback() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void PMATHF::clear_thrust_feedback() {
  thrust_feedback_ = 0;
  clear_has_thrust_feedback();
}
inline double PMATHF::thrust_feedback() const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.proto.PMATHF.thrust_feedback)
  return thrust_feedback_;
}
inline void PMATHF::set_thrust_feedback(double value) {
  set_has_thrust_feedback();
  thrust_feedback_ = value;
  // @@protoc_insertion_point(field_set:com.zhichenhaixin.proto.PMATHF.thrust_feedback)
}

// required double azimuth_demand = 7;
inline bool PMATHF::has_azimuth_demand() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void PMATHF::set_has_azimuth_demand() {
  _has_bits_[0] |= 0x00000040u;
}
inline void PMATHF::clear_has_azimuth_demand() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void PMATHF::clear_azimuth_demand() {
  azimuth_demand_ = 0;
  clear_has_azimuth_demand();
}
inline double PMATHF::azimuth_demand() const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.proto.PMATHF.azimuth_demand)
  return azimuth_demand_;
}
inline void PMATHF::set_azimuth_demand(double value) {
  set_has_azimuth_demand();
  azimuth_demand_ = value;
  // @@protoc_insertion_point(field_set:com.zhichenhaixin.proto.PMATHF.azimuth_demand)
}

// required double azimuth_feedback = 8;
inline bool PMATHF::has_azimuth_feedback() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void PMATHF::set_has_azimuth_feedback() {
  _has_bits_[0] |= 0x00000080u;
}
inline void PMATHF::clear_has_azimuth_feedback() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void PMATHF::clear_azimuth_feedback() {
  azimuth_feedback_ = 0;
  clear_has_azimuth_feedback();
}
inline double PMATHF::azimuth_feedback() const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.proto.PMATHF.azimuth_feedback)
  return azimuth_feedback_;
}
inline void PMATHF::set_azimuth_feedback(double value) {
  set_has_azimuth_feedback();
  azimuth_feedback_ = value;
  // @@protoc_insertion_point(field_set:com.zhichenhaixin.proto.PMATHF.azimuth_feedback)
}

// -------------------------------------------------------------------

// PMAINF

// required int32 refsys = 1;
inline bool PMAINF::has_refsys() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PMAINF::set_has_refsys() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PMAINF::clear_has_refsys() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PMAINF::clear_refsys() {
  refsys_ = 0;
  clear_has_refsys();
}
inline ::google::protobuf::int32 PMAINF::refsys() const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.proto.PMAINF.refsys)
  return refsys_;
}
inline void PMAINF::set_refsys(::google::protobuf::int32 value) {
  set_has_refsys();
  refsys_ = value;
  // @@protoc_insertion_point(field_set:com.zhichenhaixin.proto.PMAINF.refsys)
}

// required int32 gyro = 2;
inline bool PMAINF::has_gyro() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PMAINF::set_has_gyro() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PMAINF::clear_has_gyro() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PMAINF::clear_gyro() {
  gyro_ = 0;
  clear_has_gyro();
}
inline ::google::protobuf::int32 PMAINF::gyro() const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.proto.PMAINF.gyro)
  return gyro_;
}
inline void PMAINF::set_gyro(::google::protobuf::int32 value) {
  set_has_gyro();
  gyro_ = value;
  // @@protoc_insertion_point(field_set:com.zhichenhaixin.proto.PMAINF.gyro)
}

// required int32 mru = 3;
inline bool PMAINF::has_mru() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PMAINF::set_has_mru() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PMAINF::clear_has_mru() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PMAINF::clear_mru() {
  mru_ = 0;
  clear_has_mru();
}
inline ::google::protobuf::int32 PMAINF::mru() const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.proto.PMAINF.mru)
  return mru_;
}
inline void PMAINF::set_mru(::google::protobuf::int32 value) {
  set_has_mru();
  mru_ = value;
  // @@protoc_insertion_point(field_set:com.zhichenhaixin.proto.PMAINF.mru)
}

// required int32 wind = 4;
inline bool PMAINF::has_wind() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void PMAINF::set_has_wind() {
  _has_bits_[0] |= 0x00000008u;
}
inline void PMAINF::clear_has_wind() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void PMAINF::clear_wind() {
  wind_ = 0;
  clear_has_wind();
}
inline ::google::protobuf::int32 PMAINF::wind() const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.proto.PMAINF.wind)
  return wind_;
}
inline void PMAINF::set_wind(::google::protobuf::int32 value) {
  set_has_wind();
  wind_ = value;
  // @@protoc_insertion_point(field_set:com.zhichenhaixin.proto.PMAINF.wind)
}

// required double estimate_lat = 5;
inline bool PMAINF::has_estimate_lat() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void PMAINF::set_has_estimate_lat() {
  _has_bits_[0] |= 0x00000010u;
}
inline void PMAINF::clear_has_estimate_lat() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void PMAINF::clear_estimate_lat() {
  estimate_lat_ = 0;
  clear_has_estimate_lat();
}
inline double PMAINF::estimate_lat() const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.proto.PMAINF.estimate_lat)
  return estimate_lat_;
}
inline void PMAINF::set_estimate_lat(double value) {
  set_has_estimate_lat();
  estimate_lat_ = value;
  // @@protoc_insertion_point(field_set:com.zhichenhaixin.proto.PMAINF.estimate_lat)
}

// required string estimate_lat_dir = 6;
inline bool PMAINF::has_estimate_lat_dir() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void PMAINF::set_has_estimate_lat_dir() {
  _has_bits_[0] |= 0x00000020u;
}
inline void PMAINF::clear_has_estimate_lat_dir() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void PMAINF::clear_estimate_lat_dir() {
  if (estimate_lat_dir_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    estimate_lat_dir_->clear();
  }
  clear_has_estimate_lat_dir();
}
inline const ::std::string& PMAINF::estimate_lat_dir() const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.proto.PMAINF.estimate_lat_dir)
  return *estimate_lat_dir_;
}
inline void PMAINF::set_estimate_lat_dir(const ::std::string& value) {
  set_has_estimate_lat_dir();
  if (estimate_lat_dir_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    estimate_lat_dir_ = new ::std::string;
  }
  estimate_lat_dir_->assign(value);
  // @@protoc_insertion_point(field_set:com.zhichenhaixin.proto.PMAINF.estimate_lat_dir)
}
inline void PMAINF::set_estimate_lat_dir(const char* value) {
  set_has_estimate_lat_dir();
  if (estimate_lat_dir_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    estimate_lat_dir_ = new ::std::string;
  }
  estimate_lat_dir_->assign(value);
  // @@protoc_insertion_point(field_set_char:com.zhichenhaixin.proto.PMAINF.estimate_lat_dir)
}
inline void PMAINF::set_estimate_lat_dir(const char* value, size_t size) {
  set_has_estimate_lat_dir();
  if (estimate_lat_dir_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    estimate_lat_dir_ = new ::std::string;
  }
  estimate_lat_dir_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:com.zhichenhaixin.proto.PMAINF.estimate_lat_dir)
}
inline ::std::string* PMAINF::mutable_estimate_lat_dir() {
  set_has_estimate_lat_dir();
  if (estimate_lat_dir_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    estimate_lat_dir_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:com.zhichenhaixin.proto.PMAINF.estimate_lat_dir)
  return estimate_lat_dir_;
}
inline ::std::string* PMAINF::release_estimate_lat_dir() {
  clear_has_estimate_lat_dir();
  if (estimate_lat_dir_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = estimate_lat_dir_;
    estimate_lat_dir_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void PMAINF::set_allocated_estimate_lat_dir(::std::string* estimate_lat_dir) {
  if (estimate_lat_dir_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete estimate_lat_dir_;
  }
  if (estimate_lat_dir) {
    set_has_estimate_lat_dir();
    estimate_lat_dir_ = estimate_lat_dir;
  } else {
    clear_has_estimate_lat_dir();
    estimate_lat_dir_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:com.zhichenhaixin.proto.PMAINF.estimate_lat_dir)
}

// required double estimate_lon = 7;
inline bool PMAINF::has_estimate_lon() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void PMAINF::set_has_estimate_lon() {
  _has_bits_[0] |= 0x00000040u;
}
inline void PMAINF::clear_has_estimate_lon() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void PMAINF::clear_estimate_lon() {
  estimate_lon_ = 0;
  clear_has_estimate_lon();
}
inline double PMAINF::estimate_lon() const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.proto.PMAINF.estimate_lon)
  return estimate_lon_;
}
inline void PMAINF::set_estimate_lon(double value) {
  set_has_estimate_lon();
  estimate_lon_ = value;
  // @@protoc_insertion_point(field_set:com.zhichenhaixin.proto.PMAINF.estimate_lon)
}

// required string estimate_lon_dir = 8;
inline bool PMAINF::has_estimate_lon_dir() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void PMAINF::set_has_estimate_lon_dir() {
  _has_bits_[0] |= 0x00000080u;
}
inline void PMAINF::clear_has_estimate_lon_dir() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void PMAINF::clear_estimate_lon_dir() {
  if (estimate_lon_dir_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    estimate_lon_dir_->clear();
  }
  clear_has_estimate_lon_dir();
}
inline const ::std::string& PMAINF::estimate_lon_dir() const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.proto.PMAINF.estimate_lon_dir)
  return *estimate_lon_dir_;
}
inline void PMAINF::set_estimate_lon_dir(const ::std::string& value) {
  set_has_estimate_lon_dir();
  if (estimate_lon_dir_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    estimate_lon_dir_ = new ::std::string;
  }
  estimate_lon_dir_->assign(value);
  // @@protoc_insertion_point(field_set:com.zhichenhaixin.proto.PMAINF.estimate_lon_dir)
}
inline void PMAINF::set_estimate_lon_dir(const char* value) {
  set_has_estimate_lon_dir();
  if (estimate_lon_dir_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    estimate_lon_dir_ = new ::std::string;
  }
  estimate_lon_dir_->assign(value);
  // @@protoc_insertion_point(field_set_char:com.zhichenhaixin.proto.PMAINF.estimate_lon_dir)
}
inline void PMAINF::set_estimate_lon_dir(const char* value, size_t size) {
  set_has_estimate_lon_dir();
  if (estimate_lon_dir_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    estimate_lon_dir_ = new ::std::string;
  }
  estimate_lon_dir_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:com.zhichenhaixin.proto.PMAINF.estimate_lon_dir)
}
inline ::std::string* PMAINF::mutable_estimate_lon_dir() {
  set_has_estimate_lon_dir();
  if (estimate_lon_dir_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    estimate_lon_dir_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:com.zhichenhaixin.proto.PMAINF.estimate_lon_dir)
  return estimate_lon_dir_;
}
inline ::std::string* PMAINF::release_estimate_lon_dir() {
  clear_has_estimate_lon_dir();
  if (estimate_lon_dir_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = estimate_lon_dir_;
    estimate_lon_dir_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void PMAINF::set_allocated_estimate_lon_dir(::std::string* estimate_lon_dir) {
  if (estimate_lon_dir_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete estimate_lon_dir_;
  }
  if (estimate_lon_dir) {
    set_has_estimate_lon_dir();
    estimate_lon_dir_ = estimate_lon_dir;
  } else {
    clear_has_estimate_lon_dir();
    estimate_lon_dir_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:com.zhichenhaixin.proto.PMAINF.estimate_lon_dir)
}

// required double demand_lat = 9;
inline bool PMAINF::has_demand_lat() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void PMAINF::set_has_demand_lat() {
  _has_bits_[0] |= 0x00000100u;
}
inline void PMAINF::clear_has_demand_lat() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void PMAINF::clear_demand_lat() {
  demand_lat_ = 0;
  clear_has_demand_lat();
}
inline double PMAINF::demand_lat() const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.proto.PMAINF.demand_lat)
  return demand_lat_;
}
inline void PMAINF::set_demand_lat(double value) {
  set_has_demand_lat();
  demand_lat_ = value;
  // @@protoc_insertion_point(field_set:com.zhichenhaixin.proto.PMAINF.demand_lat)
}

// required string demand_lat_dir = 10;
inline bool PMAINF::has_demand_lat_dir() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void PMAINF::set_has_demand_lat_dir() {
  _has_bits_[0] |= 0x00000200u;
}
inline void PMAINF::clear_has_demand_lat_dir() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void PMAINF::clear_demand_lat_dir() {
  if (demand_lat_dir_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    demand_lat_dir_->clear();
  }
  clear_has_demand_lat_dir();
}
inline const ::std::string& PMAINF::demand_lat_dir() const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.proto.PMAINF.demand_lat_dir)
  return *demand_lat_dir_;
}
inline void PMAINF::set_demand_lat_dir(const ::std::string& value) {
  set_has_demand_lat_dir();
  if (demand_lat_dir_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    demand_lat_dir_ = new ::std::string;
  }
  demand_lat_dir_->assign(value);
  // @@protoc_insertion_point(field_set:com.zhichenhaixin.proto.PMAINF.demand_lat_dir)
}
inline void PMAINF::set_demand_lat_dir(const char* value) {
  set_has_demand_lat_dir();
  if (demand_lat_dir_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    demand_lat_dir_ = new ::std::string;
  }
  demand_lat_dir_->assign(value);
  // @@protoc_insertion_point(field_set_char:com.zhichenhaixin.proto.PMAINF.demand_lat_dir)
}
inline void PMAINF::set_demand_lat_dir(const char* value, size_t size) {
  set_has_demand_lat_dir();
  if (demand_lat_dir_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    demand_lat_dir_ = new ::std::string;
  }
  demand_lat_dir_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:com.zhichenhaixin.proto.PMAINF.demand_lat_dir)
}
inline ::std::string* PMAINF::mutable_demand_lat_dir() {
  set_has_demand_lat_dir();
  if (demand_lat_dir_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    demand_lat_dir_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:com.zhichenhaixin.proto.PMAINF.demand_lat_dir)
  return demand_lat_dir_;
}
inline ::std::string* PMAINF::release_demand_lat_dir() {
  clear_has_demand_lat_dir();
  if (demand_lat_dir_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = demand_lat_dir_;
    demand_lat_dir_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void PMAINF::set_allocated_demand_lat_dir(::std::string* demand_lat_dir) {
  if (demand_lat_dir_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete demand_lat_dir_;
  }
  if (demand_lat_dir) {
    set_has_demand_lat_dir();
    demand_lat_dir_ = demand_lat_dir;
  } else {
    clear_has_demand_lat_dir();
    demand_lat_dir_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:com.zhichenhaixin.proto.PMAINF.demand_lat_dir)
}

// required double demand_lon = 11;
inline bool PMAINF::has_demand_lon() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void PMAINF::set_has_demand_lon() {
  _has_bits_[0] |= 0x00000400u;
}
inline void PMAINF::clear_has_demand_lon() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void PMAINF::clear_demand_lon() {
  demand_lon_ = 0;
  clear_has_demand_lon();
}
inline double PMAINF::demand_lon() const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.proto.PMAINF.demand_lon)
  return demand_lon_;
}
inline void PMAINF::set_demand_lon(double value) {
  set_has_demand_lon();
  demand_lon_ = value;
  // @@protoc_insertion_point(field_set:com.zhichenhaixin.proto.PMAINF.demand_lon)
}

// required string demand_lon_dir = 12;
inline bool PMAINF::has_demand_lon_dir() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void PMAINF::set_has_demand_lon_dir() {
  _has_bits_[0] |= 0x00000800u;
}
inline void PMAINF::clear_has_demand_lon_dir() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void PMAINF::clear_demand_lon_dir() {
  if (demand_lon_dir_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    demand_lon_dir_->clear();
  }
  clear_has_demand_lon_dir();
}
inline const ::std::string& PMAINF::demand_lon_dir() const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.proto.PMAINF.demand_lon_dir)
  return *demand_lon_dir_;
}
inline void PMAINF::set_demand_lon_dir(const ::std::string& value) {
  set_has_demand_lon_dir();
  if (demand_lon_dir_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    demand_lon_dir_ = new ::std::string;
  }
  demand_lon_dir_->assign(value);
  // @@protoc_insertion_point(field_set:com.zhichenhaixin.proto.PMAINF.demand_lon_dir)
}
inline void PMAINF::set_demand_lon_dir(const char* value) {
  set_has_demand_lon_dir();
  if (demand_lon_dir_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    demand_lon_dir_ = new ::std::string;
  }
  demand_lon_dir_->assign(value);
  // @@protoc_insertion_point(field_set_char:com.zhichenhaixin.proto.PMAINF.demand_lon_dir)
}
inline void PMAINF::set_demand_lon_dir(const char* value, size_t size) {
  set_has_demand_lon_dir();
  if (demand_lon_dir_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    demand_lon_dir_ = new ::std::string;
  }
  demand_lon_dir_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:com.zhichenhaixin.proto.PMAINF.demand_lon_dir)
}
inline ::std::string* PMAINF::mutable_demand_lon_dir() {
  set_has_demand_lon_dir();
  if (demand_lon_dir_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    demand_lon_dir_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:com.zhichenhaixin.proto.PMAINF.demand_lon_dir)
  return demand_lon_dir_;
}
inline ::std::string* PMAINF::release_demand_lon_dir() {
  clear_has_demand_lon_dir();
  if (demand_lon_dir_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = demand_lon_dir_;
    demand_lon_dir_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void PMAINF::set_allocated_demand_lon_dir(::std::string* demand_lon_dir) {
  if (demand_lon_dir_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete demand_lon_dir_;
  }
  if (demand_lon_dir) {
    set_has_demand_lon_dir();
    demand_lon_dir_ = demand_lon_dir;
  } else {
    clear_has_demand_lon_dir();
    demand_lon_dir_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:com.zhichenhaixin.proto.PMAINF.demand_lon_dir)
}

// required double estimate_heading = 13;
inline bool PMAINF::has_estimate_heading() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void PMAINF::set_has_estimate_heading() {
  _has_bits_[0] |= 0x00001000u;
}
inline void PMAINF::clear_has_estimate_heading() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void PMAINF::clear_estimate_heading() {
  estimate_heading_ = 0;
  clear_has_estimate_heading();
}
inline double PMAINF::estimate_heading() const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.proto.PMAINF.estimate_heading)
  return estimate_heading_;
}
inline void PMAINF::set_estimate_heading(double value) {
  set_has_estimate_heading();
  estimate_heading_ = value;
  // @@protoc_insertion_point(field_set:com.zhichenhaixin.proto.PMAINF.estimate_heading)
}

// required double demand_heading = 14;
inline bool PMAINF::has_demand_heading() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void PMAINF::set_has_demand_heading() {
  _has_bits_[0] |= 0x00002000u;
}
inline void PMAINF::clear_has_demand_heading() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void PMAINF::clear_demand_heading() {
  demand_heading_ = 0;
  clear_has_demand_heading();
}
inline double PMAINF::demand_heading() const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.proto.PMAINF.demand_heading)
  return demand_heading_;
}
inline void PMAINF::set_demand_heading(double value) {
  set_has_demand_heading();
  demand_heading_ = value;
  // @@protoc_insertion_point(field_set:com.zhichenhaixin.proto.PMAINF.demand_heading)
}

// required int32 controller_gain = 15;
inline bool PMAINF::has_controller_gain() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void PMAINF::set_has_controller_gain() {
  _has_bits_[0] |= 0x00004000u;
}
inline void PMAINF::clear_has_controller_gain() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void PMAINF::clear_controller_gain() {
  controller_gain_ = 0;
  clear_has_controller_gain();
}
inline ::google::protobuf::int32 PMAINF::controller_gain() const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.proto.PMAINF.controller_gain)
  return controller_gain_;
}
inline void PMAINF::set_controller_gain(::google::protobuf::int32 value) {
  set_has_controller_gain();
  controller_gain_ = value;
  // @@protoc_insertion_point(field_set:com.zhichenhaixin.proto.PMAINF.controller_gain)
}

// -------------------------------------------------------------------

// PMAALA

// required int32 alarm_status = 1;
inline bool PMAALA::has_alarm_status() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PMAALA::set_has_alarm_status() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PMAALA::clear_has_alarm_status() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PMAALA::clear_alarm_status() {
  alarm_status_ = 0;
  clear_has_alarm_status();
}
inline ::google::protobuf::int32 PMAALA::alarm_status() const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.proto.PMAALA.alarm_status)
  return alarm_status_;
}
inline void PMAALA::set_alarm_status(::google::protobuf::int32 value) {
  set_has_alarm_status();
  alarm_status_ = value;
  // @@protoc_insertion_point(field_set:com.zhichenhaixin.proto.PMAALA.alarm_status)
}

// required double yaw_alarm_limit = 2;
inline bool PMAALA::has_yaw_alarm_limit() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PMAALA::set_has_yaw_alarm_limit() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PMAALA::clear_has_yaw_alarm_limit() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PMAALA::clear_yaw_alarm_limit() {
  yaw_alarm_limit_ = 0;
  clear_has_yaw_alarm_limit();
}
inline double PMAALA::yaw_alarm_limit() const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.proto.PMAALA.yaw_alarm_limit)
  return yaw_alarm_limit_;
}
inline void PMAALA::set_yaw_alarm_limit(double value) {
  set_has_yaw_alarm_limit();
  yaw_alarm_limit_ = value;
  // @@protoc_insertion_point(field_set:com.zhichenhaixin.proto.PMAALA.yaw_alarm_limit)
}

// required bool yaw_alarm_onoff = 3;
inline bool PMAALA::has_yaw_alarm_onoff() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PMAALA::set_has_yaw_alarm_onoff() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PMAALA::clear_has_yaw_alarm_onoff() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PMAALA::clear_yaw_alarm_onoff() {
  yaw_alarm_onoff_ = false;
  clear_has_yaw_alarm_onoff();
}
inline bool PMAALA::yaw_alarm_onoff() const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.proto.PMAALA.yaw_alarm_onoff)
  return yaw_alarm_onoff_;
}
inline void PMAALA::set_yaw_alarm_onoff(bool value) {
  set_has_yaw_alarm_onoff();
  yaw_alarm_onoff_ = value;
  // @@protoc_insertion_point(field_set:com.zhichenhaixin.proto.PMAALA.yaw_alarm_onoff)
}

// required double surge_alarm_limit = 4;
inline bool PMAALA::has_surge_alarm_limit() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void PMAALA::set_has_surge_alarm_limit() {
  _has_bits_[0] |= 0x00000008u;
}
inline void PMAALA::clear_has_surge_alarm_limit() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void PMAALA::clear_surge_alarm_limit() {
  surge_alarm_limit_ = 0;
  clear_has_surge_alarm_limit();
}
inline double PMAALA::surge_alarm_limit() const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.proto.PMAALA.surge_alarm_limit)
  return surge_alarm_limit_;
}
inline void PMAALA::set_surge_alarm_limit(double value) {
  set_has_surge_alarm_limit();
  surge_alarm_limit_ = value;
  // @@protoc_insertion_point(field_set:com.zhichenhaixin.proto.PMAALA.surge_alarm_limit)
}

// required bool surge_alarm_onoff = 5;
inline bool PMAALA::has_surge_alarm_onoff() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void PMAALA::set_has_surge_alarm_onoff() {
  _has_bits_[0] |= 0x00000010u;
}
inline void PMAALA::clear_has_surge_alarm_onoff() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void PMAALA::clear_surge_alarm_onoff() {
  surge_alarm_onoff_ = false;
  clear_has_surge_alarm_onoff();
}
inline bool PMAALA::surge_alarm_onoff() const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.proto.PMAALA.surge_alarm_onoff)
  return surge_alarm_onoff_;
}
inline void PMAALA::set_surge_alarm_onoff(bool value) {
  set_has_surge_alarm_onoff();
  surge_alarm_onoff_ = value;
  // @@protoc_insertion_point(field_set:com.zhichenhaixin.proto.PMAALA.surge_alarm_onoff)
}

// required double sway_alarm_limit = 6;
inline bool PMAALA::has_sway_alarm_limit() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void PMAALA::set_has_sway_alarm_limit() {
  _has_bits_[0] |= 0x00000020u;
}
inline void PMAALA::clear_has_sway_alarm_limit() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void PMAALA::clear_sway_alarm_limit() {
  sway_alarm_limit_ = 0;
  clear_has_sway_alarm_limit();
}
inline double PMAALA::sway_alarm_limit() const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.proto.PMAALA.sway_alarm_limit)
  return sway_alarm_limit_;
}
inline void PMAALA::set_sway_alarm_limit(double value) {
  set_has_sway_alarm_limit();
  sway_alarm_limit_ = value;
  // @@protoc_insertion_point(field_set:com.zhichenhaixin.proto.PMAALA.sway_alarm_limit)
}

// required bool sway_alarm_onoff = 7;
inline bool PMAALA::has_sway_alarm_onoff() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void PMAALA::set_has_sway_alarm_onoff() {
  _has_bits_[0] |= 0x00000040u;
}
inline void PMAALA::clear_has_sway_alarm_onoff() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void PMAALA::clear_sway_alarm_onoff() {
  sway_alarm_onoff_ = false;
  clear_has_sway_alarm_onoff();
}
inline bool PMAALA::sway_alarm_onoff() const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.proto.PMAALA.sway_alarm_onoff)
  return sway_alarm_onoff_;
}
inline void PMAALA::set_sway_alarm_onoff(bool value) {
  set_has_sway_alarm_onoff();
  sway_alarm_onoff_ = value;
  // @@protoc_insertion_point(field_set:com.zhichenhaixin.proto.PMAALA.sway_alarm_onoff)
}

// required double xtrack_alarm_limit = 8;
inline bool PMAALA::has_xtrack_alarm_limit() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void PMAALA::set_has_xtrack_alarm_limit() {
  _has_bits_[0] |= 0x00000080u;
}
inline void PMAALA::clear_has_xtrack_alarm_limit() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void PMAALA::clear_xtrack_alarm_limit() {
  xtrack_alarm_limit_ = 0;
  clear_has_xtrack_alarm_limit();
}
inline double PMAALA::xtrack_alarm_limit() const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.proto.PMAALA.xtrack_alarm_limit)
  return xtrack_alarm_limit_;
}
inline void PMAALA::set_xtrack_alarm_limit(double value) {
  set_has_xtrack_alarm_limit();
  xtrack_alarm_limit_ = value;
  // @@protoc_insertion_point(field_set:com.zhichenhaixin.proto.PMAALA.xtrack_alarm_limit)
}

// required bool xtrack_alarm_onoff = 9;
inline bool PMAALA::has_xtrack_alarm_onoff() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void PMAALA::set_has_xtrack_alarm_onoff() {
  _has_bits_[0] |= 0x00000100u;
}
inline void PMAALA::clear_has_xtrack_alarm_onoff() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void PMAALA::clear_xtrack_alarm_onoff() {
  xtrack_alarm_onoff_ = false;
  clear_has_xtrack_alarm_onoff();
}
inline bool PMAALA::xtrack_alarm_onoff() const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.proto.PMAALA.xtrack_alarm_onoff)
  return xtrack_alarm_onoff_;
}
inline void PMAALA::set_xtrack_alarm_onoff(bool value) {
  set_has_xtrack_alarm_onoff();
  xtrack_alarm_onoff_ = value;
  // @@protoc_insertion_point(field_set:com.zhichenhaixin.proto.PMAALA.xtrack_alarm_onoff)
}

// -------------------------------------------------------------------

// PMAVDR

// required int32 active_mode = 1;
inline bool PMAVDR::has_active_mode() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PMAVDR::set_has_active_mode() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PMAVDR::clear_has_active_mode() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PMAVDR::clear_active_mode() {
  active_mode_ = 0;
  clear_has_active_mode();
}
inline ::google::protobuf::int32 PMAVDR::active_mode() const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.proto.PMAVDR.active_mode)
  return active_mode_;
}
inline void PMAVDR::set_active_mode(::google::protobuf::int32 value) {
  set_has_active_mode();
  active_mode_ = value;
  // @@protoc_insertion_point(field_set:com.zhichenhaixin.proto.PMAVDR.active_mode)
}

// required double azimuth_steering_limit = 2;
inline bool PMAVDR::has_azimuth_steering_limit() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PMAVDR::set_has_azimuth_steering_limit() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PMAVDR::clear_has_azimuth_steering_limit() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PMAVDR::clear_azimuth_steering_limit() {
  azimuth_steering_limit_ = 0;
  clear_has_azimuth_steering_limit();
}
inline double PMAVDR::azimuth_steering_limit() const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.proto.PMAVDR.azimuth_steering_limit)
  return azimuth_steering_limit_;
}
inline void PMAVDR::set_azimuth_steering_limit(double value) {
  set_has_azimuth_steering_limit();
  azimuth_steering_limit_ = value;
  // @@protoc_insertion_point(field_set:com.zhichenhaixin.proto.PMAVDR.azimuth_steering_limit)
}

// required int32 axis_active = 3;
inline bool PMAVDR::has_axis_active() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PMAVDR::set_has_axis_active() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PMAVDR::clear_has_axis_active() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PMAVDR::clear_axis_active() {
  axis_active_ = 0;
  clear_has_axis_active();
}
inline ::google::protobuf::int32 PMAVDR::axis_active() const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.proto.PMAVDR.axis_active)
  return axis_active_;
}
inline void PMAVDR::set_axis_active(::google::protobuf::int32 value) {
  set_has_axis_active();
  axis_active_ = value;
  // @@protoc_insertion_point(field_set:com.zhichenhaixin.proto.PMAVDR.axis_active)
}

// required double turn_rate = 4;
inline bool PMAVDR::has_turn_rate() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void PMAVDR::set_has_turn_rate() {
  _has_bits_[0] |= 0x00000008u;
}
inline void PMAVDR::clear_has_turn_rate() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void PMAVDR::clear_turn_rate() {
  turn_rate_ = 0;
  clear_has_turn_rate();
}
inline double PMAVDR::turn_rate() const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.proto.PMAVDR.turn_rate)
  return turn_rate_;
}
inline void PMAVDR::set_turn_rate(double value) {
  set_has_turn_rate();
  turn_rate_ = value;
  // @@protoc_insertion_point(field_set:com.zhichenhaixin.proto.PMAVDR.turn_rate)
}

// required int32 steering_mode = 5;
inline bool PMAVDR::has_steering_mode() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void PMAVDR::set_has_steering_mode() {
  _has_bits_[0] |= 0x00000010u;
}
inline void PMAVDR::clear_has_steering_mode() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void PMAVDR::clear_steering_mode() {
  steering_mode_ = 0;
  clear_has_steering_mode();
}
inline ::google::protobuf::int32 PMAVDR::steering_mode() const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.proto.PMAVDR.steering_mode)
  return steering_mode_;
}
inline void PMAVDR::set_steering_mode(::google::protobuf::int32 value) {
  set_has_steering_mode();
  steering_mode_ = value;
  // @@protoc_insertion_point(field_set:com.zhichenhaixin.proto.PMAVDR.steering_mode)
}

// required int32 steering_gain = 6;
inline bool PMAVDR::has_steering_gain() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void PMAVDR::set_has_steering_gain() {
  _has_bits_[0] |= 0x00000020u;
}
inline void PMAVDR::clear_has_steering_gain() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void PMAVDR::clear_steering_gain() {
  steering_gain_ = 0;
  clear_has_steering_gain();
}
inline ::google::protobuf::int32 PMAVDR::steering_gain() const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.proto.PMAVDR.steering_gain)
  return steering_gain_;
}
inline void PMAVDR::set_steering_gain(::google::protobuf::int32 value) {
  set_has_steering_gain();
  steering_gain_ = value;
  // @@protoc_insertion_point(field_set:com.zhichenhaixin.proto.PMAVDR.steering_gain)
}

// -------------------------------------------------------------------

// DPPMAData

// required bool gyro_sts = 1;
inline bool DPPMAData::has_gyro_sts() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DPPMAData::set_has_gyro_sts() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DPPMAData::clear_has_gyro_sts() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DPPMAData::clear_gyro_sts() {
  gyro_sts_ = false;
  clear_has_gyro_sts();
}
inline bool DPPMAData::gyro_sts() const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.proto.DPPMAData.gyro_sts)
  return gyro_sts_;
}
inline void DPPMAData::set_gyro_sts(bool value) {
  set_has_gyro_sts();
  gyro_sts_ = value;
  // @@protoc_insertion_point(field_set:com.zhichenhaixin.proto.DPPMAData.gyro_sts)
}

// required bool mru_sts = 2;
inline bool DPPMAData::has_mru_sts() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void DPPMAData::set_has_mru_sts() {
  _has_bits_[0] |= 0x00000002u;
}
inline void DPPMAData::clear_has_mru_sts() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void DPPMAData::clear_mru_sts() {
  mru_sts_ = false;
  clear_has_mru_sts();
}
inline bool DPPMAData::mru_sts() const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.proto.DPPMAData.mru_sts)
  return mru_sts_;
}
inline void DPPMAData::set_mru_sts(bool value) {
  set_has_mru_sts();
  mru_sts_ = value;
  // @@protoc_insertion_point(field_set:com.zhichenhaixin.proto.DPPMAData.mru_sts)
}

// required bool wind_sts = 3;
inline bool DPPMAData::has_wind_sts() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void DPPMAData::set_has_wind_sts() {
  _has_bits_[0] |= 0x00000004u;
}
inline void DPPMAData::clear_has_wind_sts() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void DPPMAData::clear_wind_sts() {
  wind_sts_ = false;
  clear_has_wind_sts();
}
inline bool DPPMAData::wind_sts() const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.proto.DPPMAData.wind_sts)
  return wind_sts_;
}
inline void DPPMAData::set_wind_sts(bool value) {
  set_has_wind_sts();
  wind_sts_ = value;
  // @@protoc_insertion_point(field_set:com.zhichenhaixin.proto.DPPMAData.wind_sts)
}

// required double heading = 4;
inline bool DPPMAData::has_heading() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void DPPMAData::set_has_heading() {
  _has_bits_[0] |= 0x00000008u;
}
inline void DPPMAData::clear_has_heading() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void DPPMAData::clear_heading() {
  heading_ = 0;
  clear_has_heading();
}
inline double DPPMAData::heading() const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.proto.DPPMAData.heading)
  return heading_;
}
inline void DPPMAData::set_heading(double value) {
  set_has_heading();
  heading_ = value;
  // @@protoc_insertion_point(field_set:com.zhichenhaixin.proto.DPPMAData.heading)
}

// required double course = 5;
inline bool DPPMAData::has_course() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void DPPMAData::set_has_course() {
  _has_bits_[0] |= 0x00000010u;
}
inline void DPPMAData::clear_has_course() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void DPPMAData::clear_course() {
  course_ = 0;
  clear_has_course();
}
inline double DPPMAData::course() const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.proto.DPPMAData.course)
  return course_;
}
inline void DPPMAData::set_course(double value) {
  set_has_course();
  course_ = value;
  // @@protoc_insertion_point(field_set:com.zhichenhaixin.proto.DPPMAData.course)
}

// required double sos = 6;
inline bool DPPMAData::has_sos() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void DPPMAData::set_has_sos() {
  _has_bits_[0] |= 0x00000020u;
}
inline void DPPMAData::clear_has_sos() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void DPPMAData::clear_sos() {
  sos_ = 0;
  clear_has_sos();
}
inline double DPPMAData::sos() const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.proto.DPPMAData.sos)
  return sos_;
}
inline void DPPMAData::set_sos(double value) {
  set_has_sos();
  sos_ = value;
  // @@protoc_insertion_point(field_set:com.zhichenhaixin.proto.DPPMAData.sos)
}

// required double sog = 7;
inline bool DPPMAData::has_sog() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void DPPMAData::set_has_sog() {
  _has_bits_[0] |= 0x00000040u;
}
inline void DPPMAData::clear_has_sog() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void DPPMAData::clear_sog() {
  sog_ = 0;
  clear_has_sog();
}
inline double DPPMAData::sog() const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.proto.DPPMAData.sog)
  return sog_;
}
inline void DPPMAData::set_sog(double value) {
  set_has_sog();
  sog_ = value;
  // @@protoc_insertion_point(field_set:com.zhichenhaixin.proto.DPPMAData.sog)
}

// required double pitch = 8;
inline bool DPPMAData::has_pitch() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void DPPMAData::set_has_pitch() {
  _has_bits_[0] |= 0x00000080u;
}
inline void DPPMAData::clear_has_pitch() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void DPPMAData::clear_pitch() {
  pitch_ = 0;
  clear_has_pitch();
}
inline double DPPMAData::pitch() const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.proto.DPPMAData.pitch)
  return pitch_;
}
inline void DPPMAData::set_pitch(double value) {
  set_has_pitch();
  pitch_ = value;
  // @@protoc_insertion_point(field_set:com.zhichenhaixin.proto.DPPMAData.pitch)
}

// required double roll = 9;
inline bool DPPMAData::has_roll() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void DPPMAData::set_has_roll() {
  _has_bits_[0] |= 0x00000100u;
}
inline void DPPMAData::clear_has_roll() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void DPPMAData::clear_roll() {
  roll_ = 0;
  clear_has_roll();
}
inline double DPPMAData::roll() const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.proto.DPPMAData.roll)
  return roll_;
}
inline void DPPMAData::set_roll(double value) {
  set_has_roll();
  roll_ = value;
  // @@protoc_insertion_point(field_set:com.zhichenhaixin.proto.DPPMAData.roll)
}

// required double heave = 10;
inline bool DPPMAData::has_heave() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void DPPMAData::set_has_heave() {
  _has_bits_[0] |= 0x00000200u;
}
inline void DPPMAData::clear_has_heave() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void DPPMAData::clear_heave() {
  heave_ = 0;
  clear_has_heave();
}
inline double DPPMAData::heave() const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.proto.DPPMAData.heave)
  return heave_;
}
inline void DPPMAData::set_heave(double value) {
  set_has_heave();
  heave_ = value;
  // @@protoc_insertion_point(field_set:com.zhichenhaixin.proto.DPPMAData.heave)
}

// required double water_depth = 11;
inline bool DPPMAData::has_water_depth() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void DPPMAData::set_has_water_depth() {
  _has_bits_[0] |= 0x00000400u;
}
inline void DPPMAData::clear_has_water_depth() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void DPPMAData::clear_water_depth() {
  water_depth_ = 0;
  clear_has_water_depth();
}
inline double DPPMAData::water_depth() const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.proto.DPPMAData.water_depth)
  return water_depth_;
}
inline void DPPMAData::set_water_depth(double value) {
  set_has_water_depth();
  water_depth_ = value;
  // @@protoc_insertion_point(field_set:com.zhichenhaixin.proto.DPPMAData.water_depth)
}

// required double wind_dir = 12;
inline bool DPPMAData::has_wind_dir() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void DPPMAData::set_has_wind_dir() {
  _has_bits_[0] |= 0x00000800u;
}
inline void DPPMAData::clear_has_wind_dir() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void DPPMAData::clear_wind_dir() {
  wind_dir_ = 0;
  clear_has_wind_dir();
}
inline double DPPMAData::wind_dir() const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.proto.DPPMAData.wind_dir)
  return wind_dir_;
}
inline void DPPMAData::set_wind_dir(double value) {
  set_has_wind_dir();
  wind_dir_ = value;
  // @@protoc_insertion_point(field_set:com.zhichenhaixin.proto.DPPMAData.wind_dir)
}

// required double wind_speed = 13;
inline bool DPPMAData::has_wind_speed() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void DPPMAData::set_has_wind_speed() {
  _has_bits_[0] |= 0x00001000u;
}
inline void DPPMAData::clear_has_wind_speed() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void DPPMAData::clear_wind_speed() {
  wind_speed_ = 0;
  clear_has_wind_speed();
}
inline double DPPMAData::wind_speed() const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.proto.DPPMAData.wind_speed)
  return wind_speed_;
}
inline void DPPMAData::set_wind_speed(double value) {
  set_has_wind_speed();
  wind_speed_ = value;
  // @@protoc_insertion_point(field_set:com.zhichenhaixin.proto.DPPMAData.wind_speed)
}

// required double surge_demand = 14;
inline bool DPPMAData::has_surge_demand() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void DPPMAData::set_has_surge_demand() {
  _has_bits_[0] |= 0x00002000u;
}
inline void DPPMAData::clear_has_surge_demand() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void DPPMAData::clear_surge_demand() {
  surge_demand_ = 0;
  clear_has_surge_demand();
}
inline double DPPMAData::surge_demand() const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.proto.DPPMAData.surge_demand)
  return surge_demand_;
}
inline void DPPMAData::set_surge_demand(double value) {
  set_has_surge_demand();
  surge_demand_ = value;
  // @@protoc_insertion_point(field_set:com.zhichenhaixin.proto.DPPMAData.surge_demand)
}

// required double surge_feedback = 15;
inline bool DPPMAData::has_surge_feedback() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void DPPMAData::set_has_surge_feedback() {
  _has_bits_[0] |= 0x00004000u;
}
inline void DPPMAData::clear_has_surge_feedback() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void DPPMAData::clear_surge_feedback() {
  surge_feedback_ = 0;
  clear_has_surge_feedback();
}
inline double DPPMAData::surge_feedback() const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.proto.DPPMAData.surge_feedback)
  return surge_feedback_;
}
inline void DPPMAData::set_surge_feedback(double value) {
  set_has_surge_feedback();
  surge_feedback_ = value;
  // @@protoc_insertion_point(field_set:com.zhichenhaixin.proto.DPPMAData.surge_feedback)
}

// required double sway_demand = 16;
inline bool DPPMAData::has_sway_demand() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void DPPMAData::set_has_sway_demand() {
  _has_bits_[0] |= 0x00008000u;
}
inline void DPPMAData::clear_has_sway_demand() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void DPPMAData::clear_sway_demand() {
  sway_demand_ = 0;
  clear_has_sway_demand();
}
inline double DPPMAData::sway_demand() const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.proto.DPPMAData.sway_demand)
  return sway_demand_;
}
inline void DPPMAData::set_sway_demand(double value) {
  set_has_sway_demand();
  sway_demand_ = value;
  // @@protoc_insertion_point(field_set:com.zhichenhaixin.proto.DPPMAData.sway_demand)
}

// required double sway_feedback = 17;
inline bool DPPMAData::has_sway_feedback() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void DPPMAData::set_has_sway_feedback() {
  _has_bits_[0] |= 0x00010000u;
}
inline void DPPMAData::clear_has_sway_feedback() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void DPPMAData::clear_sway_feedback() {
  sway_feedback_ = 0;
  clear_has_sway_feedback();
}
inline double DPPMAData::sway_feedback() const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.proto.DPPMAData.sway_feedback)
  return sway_feedback_;
}
inline void DPPMAData::set_sway_feedback(double value) {
  set_has_sway_feedback();
  sway_feedback_ = value;
  // @@protoc_insertion_point(field_set:com.zhichenhaixin.proto.DPPMAData.sway_feedback)
}

// required double lon = 18;
inline bool DPPMAData::has_lon() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void DPPMAData::set_has_lon() {
  _has_bits_[0] |= 0x00020000u;
}
inline void DPPMAData::clear_has_lon() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void DPPMAData::clear_lon() {
  lon_ = 0;
  clear_has_lon();
}
inline double DPPMAData::lon() const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.proto.DPPMAData.lon)
  return lon_;
}
inline void DPPMAData::set_lon(double value) {
  set_has_lon();
  lon_ = value;
  // @@protoc_insertion_point(field_set:com.zhichenhaixin.proto.DPPMAData.lon)
}

// required string lon_dir = 19;
inline bool DPPMAData::has_lon_dir() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void DPPMAData::set_has_lon_dir() {
  _has_bits_[0] |= 0x00040000u;
}
inline void DPPMAData::clear_has_lon_dir() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void DPPMAData::clear_lon_dir() {
  if (lon_dir_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    lon_dir_->clear();
  }
  clear_has_lon_dir();
}
inline const ::std::string& DPPMAData::lon_dir() const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.proto.DPPMAData.lon_dir)
  return *lon_dir_;
}
inline void DPPMAData::set_lon_dir(const ::std::string& value) {
  set_has_lon_dir();
  if (lon_dir_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    lon_dir_ = new ::std::string;
  }
  lon_dir_->assign(value);
  // @@protoc_insertion_point(field_set:com.zhichenhaixin.proto.DPPMAData.lon_dir)
}
inline void DPPMAData::set_lon_dir(const char* value) {
  set_has_lon_dir();
  if (lon_dir_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    lon_dir_ = new ::std::string;
  }
  lon_dir_->assign(value);
  // @@protoc_insertion_point(field_set_char:com.zhichenhaixin.proto.DPPMAData.lon_dir)
}
inline void DPPMAData::set_lon_dir(const char* value, size_t size) {
  set_has_lon_dir();
  if (lon_dir_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    lon_dir_ = new ::std::string;
  }
  lon_dir_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:com.zhichenhaixin.proto.DPPMAData.lon_dir)
}
inline ::std::string* DPPMAData::mutable_lon_dir() {
  set_has_lon_dir();
  if (lon_dir_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    lon_dir_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:com.zhichenhaixin.proto.DPPMAData.lon_dir)
  return lon_dir_;
}
inline ::std::string* DPPMAData::release_lon_dir() {
  clear_has_lon_dir();
  if (lon_dir_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = lon_dir_;
    lon_dir_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void DPPMAData::set_allocated_lon_dir(::std::string* lon_dir) {
  if (lon_dir_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete lon_dir_;
  }
  if (lon_dir) {
    set_has_lon_dir();
    lon_dir_ = lon_dir;
  } else {
    clear_has_lon_dir();
    lon_dir_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:com.zhichenhaixin.proto.DPPMAData.lon_dir)
}

// required double lat = 20;
inline bool DPPMAData::has_lat() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void DPPMAData::set_has_lat() {
  _has_bits_[0] |= 0x00080000u;
}
inline void DPPMAData::clear_has_lat() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void DPPMAData::clear_lat() {
  lat_ = 0;
  clear_has_lat();
}
inline double DPPMAData::lat() const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.proto.DPPMAData.lat)
  return lat_;
}
inline void DPPMAData::set_lat(double value) {
  set_has_lat();
  lat_ = value;
  // @@protoc_insertion_point(field_set:com.zhichenhaixin.proto.DPPMAData.lat)
}

// required string lat_dir = 21;
inline bool DPPMAData::has_lat_dir() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void DPPMAData::set_has_lat_dir() {
  _has_bits_[0] |= 0x00100000u;
}
inline void DPPMAData::clear_has_lat_dir() {
  _has_bits_[0] &= ~0x00100000u;
}
inline void DPPMAData::clear_lat_dir() {
  if (lat_dir_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    lat_dir_->clear();
  }
  clear_has_lat_dir();
}
inline const ::std::string& DPPMAData::lat_dir() const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.proto.DPPMAData.lat_dir)
  return *lat_dir_;
}
inline void DPPMAData::set_lat_dir(const ::std::string& value) {
  set_has_lat_dir();
  if (lat_dir_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    lat_dir_ = new ::std::string;
  }
  lat_dir_->assign(value);
  // @@protoc_insertion_point(field_set:com.zhichenhaixin.proto.DPPMAData.lat_dir)
}
inline void DPPMAData::set_lat_dir(const char* value) {
  set_has_lat_dir();
  if (lat_dir_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    lat_dir_ = new ::std::string;
  }
  lat_dir_->assign(value);
  // @@protoc_insertion_point(field_set_char:com.zhichenhaixin.proto.DPPMAData.lat_dir)
}
inline void DPPMAData::set_lat_dir(const char* value, size_t size) {
  set_has_lat_dir();
  if (lat_dir_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    lat_dir_ = new ::std::string;
  }
  lat_dir_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:com.zhichenhaixin.proto.DPPMAData.lat_dir)
}
inline ::std::string* DPPMAData::mutable_lat_dir() {
  set_has_lat_dir();
  if (lat_dir_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    lat_dir_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:com.zhichenhaixin.proto.DPPMAData.lat_dir)
  return lat_dir_;
}
inline ::std::string* DPPMAData::release_lat_dir() {
  clear_has_lat_dir();
  if (lat_dir_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = lat_dir_;
    lat_dir_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void DPPMAData::set_allocated_lat_dir(::std::string* lat_dir) {
  if (lat_dir_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete lat_dir_;
  }
  if (lat_dir) {
    set_has_lat_dir();
    lat_dir_ = lat_dir;
  } else {
    clear_has_lat_dir();
    lat_dir_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:com.zhichenhaixin.proto.DPPMAData.lat_dir)
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace zhichenhaixin
}  // namespace com

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_SCCMMSComData_2eproto__INCLUDED
