// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ZCHXAISVessel.proto

#include "ZCHXAISVessel.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_ZCHXAISVessel_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_AIS_ZCHXAISVessel_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ZCHXAISVessel_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AidtoNavigationReport_ZCHXAISVessel_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ZCHXAISVessel_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_BaseStationReport_ZCHXAISVessel_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ZCHXAISVessel_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_VesselInfo_ZCHXAISVessel_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ZCHXAISVessel_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_VesselTrack_ZCHXAISVessel_2eproto;
namespace com {
namespace zhichenhaixin {
namespace proto {
class VesselInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<VesselInfo> _instance;
} _VesselInfo_default_instance_;
class VesselTrackDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<VesselTrack> _instance;
} _VesselTrack_default_instance_;
class BaseStationReportDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<BaseStationReport> _instance;
} _BaseStationReport_default_instance_;
class AidtoNavigationReportDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AidtoNavigationReport> _instance;
} _AidtoNavigationReport_default_instance_;
class AISDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AIS> _instance;
} _AIS_default_instance_;
class AISListDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AISList> _instance;
} _AISList_default_instance_;
class AisChartDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AisChart> _instance;
} _AisChart_default_instance_;
}  // namespace proto
}  // namespace zhichenhaixin
}  // namespace com
static void InitDefaultsscc_info_AIS_ZCHXAISVessel_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::zhichenhaixin::proto::_AIS_default_instance_;
    new (ptr) ::com::zhichenhaixin::proto::AIS();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::zhichenhaixin::proto::AIS::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<4> scc_info_AIS_ZCHXAISVessel_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 4, 0, InitDefaultsscc_info_AIS_ZCHXAISVessel_2eproto}, {
      &scc_info_VesselInfo_ZCHXAISVessel_2eproto.base,
      &scc_info_VesselTrack_ZCHXAISVessel_2eproto.base,
      &scc_info_BaseStationReport_ZCHXAISVessel_2eproto.base,
      &scc_info_AidtoNavigationReport_ZCHXAISVessel_2eproto.base,}};

static void InitDefaultsscc_info_AISList_ZCHXAISVessel_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::zhichenhaixin::proto::_AISList_default_instance_;
    new (ptr) ::com::zhichenhaixin::proto::AISList();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::zhichenhaixin::proto::AISList::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_AISList_ZCHXAISVessel_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_AISList_ZCHXAISVessel_2eproto}, {
      &scc_info_AIS_ZCHXAISVessel_2eproto.base,}};

static void InitDefaultsscc_info_AidtoNavigationReport_ZCHXAISVessel_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::zhichenhaixin::proto::_AidtoNavigationReport_default_instance_;
    new (ptr) ::com::zhichenhaixin::proto::AidtoNavigationReport();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::zhichenhaixin::proto::AidtoNavigationReport::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AidtoNavigationReport_ZCHXAISVessel_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_AidtoNavigationReport_ZCHXAISVessel_2eproto}, {}};

static void InitDefaultsscc_info_AisChart_ZCHXAISVessel_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::zhichenhaixin::proto::_AisChart_default_instance_;
    new (ptr) ::com::zhichenhaixin::proto::AisChart();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::zhichenhaixin::proto::AisChart::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AisChart_ZCHXAISVessel_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_AisChart_ZCHXAISVessel_2eproto}, {}};

static void InitDefaultsscc_info_BaseStationReport_ZCHXAISVessel_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::zhichenhaixin::proto::_BaseStationReport_default_instance_;
    new (ptr) ::com::zhichenhaixin::proto::BaseStationReport();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::zhichenhaixin::proto::BaseStationReport::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_BaseStationReport_ZCHXAISVessel_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_BaseStationReport_ZCHXAISVessel_2eproto}, {}};

static void InitDefaultsscc_info_VesselInfo_ZCHXAISVessel_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::zhichenhaixin::proto::_VesselInfo_default_instance_;
    new (ptr) ::com::zhichenhaixin::proto::VesselInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::zhichenhaixin::proto::VesselInfo::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_VesselInfo_ZCHXAISVessel_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_VesselInfo_ZCHXAISVessel_2eproto}, {}};

static void InitDefaultsscc_info_VesselTrack_ZCHXAISVessel_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::zhichenhaixin::proto::_VesselTrack_default_instance_;
    new (ptr) ::com::zhichenhaixin::proto::VesselTrack();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::zhichenhaixin::proto::VesselTrack::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_VesselTrack_ZCHXAISVessel_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_VesselTrack_ZCHXAISVessel_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_ZCHXAISVessel_2eproto[7];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_ZCHXAISVessel_2eproto[3];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_ZCHXAISVessel_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_ZCHXAISVessel_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::com::zhichenhaixin::proto::VesselInfo, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::com::zhichenhaixin::proto::VesselInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::com::zhichenhaixin::proto::VesselInfo, id_),
  PROTOBUF_FIELD_OFFSET(::com::zhichenhaixin::proto::VesselInfo, mmsi_),
  PROTOBUF_FIELD_OFFSET(::com::zhichenhaixin::proto::VesselInfo, shiptype_),
  PROTOBUF_FIELD_OFFSET(::com::zhichenhaixin::proto::VesselInfo, imo_),
  PROTOBUF_FIELD_OFFSET(::com::zhichenhaixin::proto::VesselInfo, callsign_),
  PROTOBUF_FIELD_OFFSET(::com::zhichenhaixin::proto::VesselInfo, shipname_),
  PROTOBUF_FIELD_OFFSET(::com::zhichenhaixin::proto::VesselInfo, cargotype_),
  PROTOBUF_FIELD_OFFSET(::com::zhichenhaixin::proto::VesselInfo, country_),
  PROTOBUF_FIELD_OFFSET(::com::zhichenhaixin::proto::VesselInfo, vendorid_),
  PROTOBUF_FIELD_OFFSET(::com::zhichenhaixin::proto::VesselInfo, shiplength_),
  PROTOBUF_FIELD_OFFSET(::com::zhichenhaixin::proto::VesselInfo, shipwidth_),
  PROTOBUF_FIELD_OFFSET(::com::zhichenhaixin::proto::VesselInfo, tobow_),
  PROTOBUF_FIELD_OFFSET(::com::zhichenhaixin::proto::VesselInfo, tostern_),
  PROTOBUF_FIELD_OFFSET(::com::zhichenhaixin::proto::VesselInfo, toport_),
  PROTOBUF_FIELD_OFFSET(::com::zhichenhaixin::proto::VesselInfo, tostarboard_),
  PROTOBUF_FIELD_OFFSET(::com::zhichenhaixin::proto::VesselInfo, fixtype_),
  PROTOBUF_FIELD_OFFSET(::com::zhichenhaixin::proto::VesselInfo, eta_),
  PROTOBUF_FIELD_OFFSET(::com::zhichenhaixin::proto::VesselInfo, draught_),
  PROTOBUF_FIELD_OFFSET(::com::zhichenhaixin::proto::VesselInfo, dest_),
  PROTOBUF_FIELD_OFFSET(::com::zhichenhaixin::proto::VesselInfo, utc_),
  0,
  8,
  1,
  9,
  2,
  3,
  10,
  4,
  5,
  11,
  12,
  13,
  14,
  15,
  16,
  17,
  6,
  19,
  7,
  18,
  PROTOBUF_FIELD_OFFSET(::com::zhichenhaixin::proto::VesselTrack, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::com::zhichenhaixin::proto::VesselTrack, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::com::zhichenhaixin::proto::VesselTrack, id_),
  PROTOBUF_FIELD_OFFSET(::com::zhichenhaixin::proto::VesselTrack, mmsi_),
  PROTOBUF_FIELD_OFFSET(::com::zhichenhaixin::proto::VesselTrack, shiptype_),
  PROTOBUF_FIELD_OFFSET(::com::zhichenhaixin::proto::VesselTrack, navstatus_),
  PROTOBUF_FIELD_OFFSET(::com::zhichenhaixin::proto::VesselTrack, rot_),
  PROTOBUF_FIELD_OFFSET(::com::zhichenhaixin::proto::VesselTrack, sog_),
  PROTOBUF_FIELD_OFFSET(::com::zhichenhaixin::proto::VesselTrack, lon_),
  PROTOBUF_FIELD_OFFSET(::com::zhichenhaixin::proto::VesselTrack, lat_),
  PROTOBUF_FIELD_OFFSET(::com::zhichenhaixin::proto::VesselTrack, cog_),
  PROTOBUF_FIELD_OFFSET(::com::zhichenhaixin::proto::VesselTrack, heading_),
  PROTOBUF_FIELD_OFFSET(::com::zhichenhaixin::proto::VesselTrack, utc_),
  PROTOBUF_FIELD_OFFSET(::com::zhichenhaixin::proto::VesselTrack, type_),
  PROTOBUF_FIELD_OFFSET(::com::zhichenhaixin::proto::VesselTrack, tracknumber_),
  0,
  2,
  1,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  10,
  11,
  12,
  PROTOBUF_FIELD_OFFSET(::com::zhichenhaixin::proto::BaseStationReport, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::com::zhichenhaixin::proto::BaseStationReport, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::com::zhichenhaixin::proto::BaseStationReport, id_),
  PROTOBUF_FIELD_OFFSET(::com::zhichenhaixin::proto::BaseStationReport, repeatindicator_),
  PROTOBUF_FIELD_OFFSET(::com::zhichenhaixin::proto::BaseStationReport, mmsi_),
  PROTOBUF_FIELD_OFFSET(::com::zhichenhaixin::proto::BaseStationReport, year_),
  PROTOBUF_FIELD_OFFSET(::com::zhichenhaixin::proto::BaseStationReport, month_),
  PROTOBUF_FIELD_OFFSET(::com::zhichenhaixin::proto::BaseStationReport, day_),
  PROTOBUF_FIELD_OFFSET(::com::zhichenhaixin::proto::BaseStationReport, hour_),
  PROTOBUF_FIELD_OFFSET(::com::zhichenhaixin::proto::BaseStationReport, minute_),
  PROTOBUF_FIELD_OFFSET(::com::zhichenhaixin::proto::BaseStationReport, second_),
  PROTOBUF_FIELD_OFFSET(::com::zhichenhaixin::proto::BaseStationReport, positionaccuracy_),
  PROTOBUF_FIELD_OFFSET(::com::zhichenhaixin::proto::BaseStationReport, lon_),
  PROTOBUF_FIELD_OFFSET(::com::zhichenhaixin::proto::BaseStationReport, lat_),
  PROTOBUF_FIELD_OFFSET(::com::zhichenhaixin::proto::BaseStationReport, fixtype_),
  PROTOBUF_FIELD_OFFSET(::com::zhichenhaixin::proto::BaseStationReport, utc_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  10,
  11,
  13,
  12,
  PROTOBUF_FIELD_OFFSET(::com::zhichenhaixin::proto::AidtoNavigationReport, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::com::zhichenhaixin::proto::AidtoNavigationReport, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::com::zhichenhaixin::proto::AidtoNavigationReport, id_),
  PROTOBUF_FIELD_OFFSET(::com::zhichenhaixin::proto::AidtoNavigationReport, repeatindicator_),
  PROTOBUF_FIELD_OFFSET(::com::zhichenhaixin::proto::AidtoNavigationReport, mmsi_),
  PROTOBUF_FIELD_OFFSET(::com::zhichenhaixin::proto::AidtoNavigationReport, atontype_),
  PROTOBUF_FIELD_OFFSET(::com::zhichenhaixin::proto::AidtoNavigationReport, name_),
  PROTOBUF_FIELD_OFFSET(::com::zhichenhaixin::proto::AidtoNavigationReport, positionaccuracy_),
  PROTOBUF_FIELD_OFFSET(::com::zhichenhaixin::proto::AidtoNavigationReport, lon_),
  PROTOBUF_FIELD_OFFSET(::com::zhichenhaixin::proto::AidtoNavigationReport, lat_),
  PROTOBUF_FIELD_OFFSET(::com::zhichenhaixin::proto::AidtoNavigationReport, tobow_),
  PROTOBUF_FIELD_OFFSET(::com::zhichenhaixin::proto::AidtoNavigationReport, tostern_),
  PROTOBUF_FIELD_OFFSET(::com::zhichenhaixin::proto::AidtoNavigationReport, toport_),
  PROTOBUF_FIELD_OFFSET(::com::zhichenhaixin::proto::AidtoNavigationReport, tostarboard_),
  PROTOBUF_FIELD_OFFSET(::com::zhichenhaixin::proto::AidtoNavigationReport, fixtype_),
  PROTOBUF_FIELD_OFFSET(::com::zhichenhaixin::proto::AidtoNavigationReport, utc_),
  1,
  2,
  3,
  4,
  0,
  6,
  5,
  8,
  7,
  9,
  10,
  11,
  12,
  13,
  PROTOBUF_FIELD_OFFSET(::com::zhichenhaixin::proto::AIS, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::com::zhichenhaixin::proto::AIS, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::com::zhichenhaixin::proto::AIS, flag_),
  PROTOBUF_FIELD_OFFSET(::com::zhichenhaixin::proto::AIS, sourceid_),
  PROTOBUF_FIELD_OFFSET(::com::zhichenhaixin::proto::AIS, vesselinfo_),
  PROTOBUF_FIELD_OFFSET(::com::zhichenhaixin::proto::AIS, vesseltrack_),
  PROTOBUF_FIELD_OFFSET(::com::zhichenhaixin::proto::AIS, basestationreport_),
  PROTOBUF_FIELD_OFFSET(::com::zhichenhaixin::proto::AIS, aidtonavigationreport_),
  5,
  0,
  1,
  2,
  3,
  4,
  PROTOBUF_FIELD_OFFSET(::com::zhichenhaixin::proto::AISList, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::com::zhichenhaixin::proto::AISList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::com::zhichenhaixin::proto::AISList, utc_),
  PROTOBUF_FIELD_OFFSET(::com::zhichenhaixin::proto::AISList, ais_),
  0,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::com::zhichenhaixin::proto::AisChart, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::com::zhichenhaixin::proto::AisChart, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::com::zhichenhaixin::proto::AisChart, id_),
  PROTOBUF_FIELD_OFFSET(::com::zhichenhaixin::proto::AisChart, name_),
  PROTOBUF_FIELD_OFFSET(::com::zhichenhaixin::proto::AisChart, latitude_),
  PROTOBUF_FIELD_OFFSET(::com::zhichenhaixin::proto::AisChart, longitude_),
  PROTOBUF_FIELD_OFFSET(::com::zhichenhaixin::proto::AisChart, utc_),
  PROTOBUF_FIELD_OFFSET(::com::zhichenhaixin::proto::AisChart, imagedata_),
  PROTOBUF_FIELD_OFFSET(::com::zhichenhaixin::proto::AisChart, width_),
  PROTOBUF_FIELD_OFFSET(::com::zhichenhaixin::proto::AisChart, height_),
  PROTOBUF_FIELD_OFFSET(::com::zhichenhaixin::proto::AisChart, radius_),
  PROTOBUF_FIELD_OFFSET(::com::zhichenhaixin::proto::AisChart, format_),
  3,
  0,
  4,
  5,
  6,
  1,
  7,
  8,
  9,
  2,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 25, sizeof(::com::zhichenhaixin::proto::VesselInfo)},
  { 45, 63, sizeof(::com::zhichenhaixin::proto::VesselTrack)},
  { 76, 95, sizeof(::com::zhichenhaixin::proto::BaseStationReport)},
  { 109, 128, sizeof(::com::zhichenhaixin::proto::AidtoNavigationReport)},
  { 142, 153, sizeof(::com::zhichenhaixin::proto::AIS)},
  { 159, 166, sizeof(::com::zhichenhaixin::proto::AISList)},
  { 168, 183, sizeof(::com::zhichenhaixin::proto::AisChart)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::com::zhichenhaixin::proto::_VesselInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::com::zhichenhaixin::proto::_VesselTrack_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::com::zhichenhaixin::proto::_BaseStationReport_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::com::zhichenhaixin::proto::_AidtoNavigationReport_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::com::zhichenhaixin::proto::_AIS_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::com::zhichenhaixin::proto::_AISList_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::com::zhichenhaixin::proto::_AisChart_default_instance_),
};

const char descriptor_table_protodef_ZCHXAISVessel_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\023ZCHXAISVessel.proto\022\027com.zhichenhaixin"
  ".proto\"\364\002\n\nVesselInfo\022\n\n\002id\030\001 \002(\t\022\014\n\004mms"
  "i\030\002 \002(\005\022\020\n\010shipType\030\003 \002(\t\022\013\n\003imo\030\004 \002(\005\022\020"
  "\n\010callSign\030\005 \002(\t\022\020\n\010shipName\030\006 \002(\t\022\021\n\tca"
  "rgoType\030\007 \002(\005\022\017\n\007country\030\010 \002(\t\022\020\n\010vendor"
  "ID\030\t \002(\t\022\022\n\nshipLength\030\n \002(\005\022\021\n\tshipWidt"
  "h\030\013 \002(\005\022\r\n\005toBow\030\014 \002(\005\022\017\n\007toStern\030\r \002(\005\022"
  "\016\n\006toPort\030\016 \002(\005\022\023\n\013toStarboard\030\017 \002(\005\022.\n\007"
  "fixType\030\020 \002(\0162\035.com.zhichenhaixin.proto."
  "EPFD\022\013\n\003eta\030\021 \002(\t\022\017\n\007draught\030\022 \002(\002\022\014\n\004de"
  "st\030\023 \002(\t\022\013\n\003UTC\030\024 \002(\004\"\364\001\n\013VesselTrack\022\n\n"
  "\002id\030\001 \002(\t\022\014\n\004mmsi\030\002 \002(\005\022\020\n\010shiptype\030\003 \002("
  "\t\0227\n\tnavStatus\030\004 \002(\0162$.com.zhichenhaixin"
  ".proto.NAVI_STATUS\022\013\n\003rot\030\005 \002(\002\022\013\n\003sog\030\006"
  " \002(\002\022\013\n\003lon\030\007 \002(\001\022\013\n\003lat\030\010 \002(\001\022\013\n\003cog\030\t "
  "\002(\002\022\017\n\007heading\030\n \002(\002\022\013\n\003UTC\030\013 \002(\004\022\014\n\004typ"
  "e\030\014 \001(\005\022\023\n\013trackNumber\030\r \001(\r\"\360\001\n\021BaseSta"
  "tionReport\022\n\n\002id\030\001 \002(\005\022\027\n\017repeatIndicato"
  "r\030\002 \002(\005\022\014\n\004mmsi\030\003 \002(\005\022\014\n\004year\030\004 \002(\005\022\r\n\005m"
  "onth\030\005 \002(\005\022\013\n\003day\030\006 \002(\005\022\014\n\004hour\030\007 \002(\005\022\016\n"
  "\006minute\030\010 \002(\005\022\016\n\006second\030\t \002(\005\022\030\n\020positio"
  "nAccuracy\030\n \002(\005\022\013\n\003lon\030\013 \002(\001\022\013\n\003lat\030\014 \002("
  "\001\022\017\n\007fixType\030\r \002(\005\022\013\n\003UTC\030\016 \002(\004\"\245\002\n\025Aidt"
  "oNavigationReport\022\n\n\002id\030\001 \002(\005\022\027\n\017repeatI"
  "ndicator\030\002 \002(\005\022\014\n\004mmsi\030\003 \002(\005\0224\n\010atonType"
  "\030\004 \002(\0162\".com.zhichenhaixin.proto.ATON_TY"
  "PE\022\014\n\004name\030\005 \002(\t\022\030\n\020positionAccuracy\030\006 \002"
  "(\005\022\013\n\003lon\030\007 \002(\001\022\013\n\003lat\030\010 \002(\001\022\r\n\005toBow\030\t "
  "\002(\005\022\017\n\007toStern\030\n \002(\005\022\016\n\006toPort\030\013 \002(\005\022\023\n\013"
  "toStarboard\030\014 \002(\005\022\017\n\007fixType\030\r \002(\005\022\013\n\003UT"
  "C\030\016 \002(\004\"\257\002\n\003AIS\022\014\n\004flag\030\001 \002(\005\022\020\n\010sourceI"
  "d\030\002 \002(\t\0227\n\nvesselInfo\030\003 \001(\0132#.com.zhiche"
  "nhaixin.proto.VesselInfo\0229\n\013vesselTrack\030"
  "\004 \001(\0132$.com.zhichenhaixin.proto.VesselTr"
  "ack\022E\n\021baseStationReport\030\005 \001(\0132*.com.zhi"
  "chenhaixin.proto.BaseStationReport\022M\n\025ai"
  "dtoNavigationReport\030\006 \001(\0132..com.zhichenh"
  "aixin.proto.AidtoNavigationReport\"A\n\007AIS"
  "List\022\013\n\003UTC\030\001 \002(\004\022)\n\003ais\030\002 \003(\0132\034.com.zhi"
  "chenhaixin.proto.AIS\"\250\001\n\010AisChart\022\n\n\002id\030"
  "\001 \002(\004\022\014\n\004name\030\002 \002(\t\022\020\n\010latitude\030\003 \002(\001\022\021\n"
  "\tlongitude\030\004 \002(\001\022\013\n\003UTC\030\005 \002(\004\022\021\n\timageDa"
  "ta\030\006 \002(\014\022\r\n\005width\030\007 \002(\r\022\016\n\006height\030\010 \002(\r\022"
  "\016\n\006radius\030\t \002(\001\022\016\n\006format\030\n \002(\t*\237\001\n\004EPFD"
  "\022\r\n\tUNDEFINED\020\000\022\007\n\003GPS\020\001\022\013\n\007GLONASS\020\002\022\034\n"
  "\030COMBINED_GPS_AND_GLONASS\020\003\022\013\n\007LORAN_C\020\004"
  "\022\n\n\006CHAYKA\020\005\022 \n\034INTEGRATED_NAVIGATION_SY"
  "STEM\020\006\022\014\n\010SURVEYED\020\007\022\013\n\007GALILEO\020\010*\260\003\n\013NA"
  "VI_STATUS\022\032\n\026UNDER_WAY_USING_ENGINE\020\000\022\r\n"
  "\tAT_ANCHOR\020\001\022\025\n\021NOT_UNDER_COMMAND\020\002\022\030\n\024R"
  "ESTRICTED_MANOEUVER\020\003\022\032\n\026CONSTRAINED_BY_"
  "DRAUGHT\020\004\022\n\n\006MOORED\020\005\022\013\n\007AGROUND\020\006\022\026\n\022EN"
  "GAGED_IN_FISHING\020\007\022\025\n\021UNDER_WAY_SAILING\020"
  "\010\022)\n%RESERVED_FOR_FUTURE_AMENDMENT_FOR_H"
  "SC\020\t\022)\n%RESERVED_FOR_FUTURE_AMENDMENT_FO"
  "R_WIG\020\n\022\035\n\031RESERVED_FOR_FUTURE_USE_1\020\013\022\035"
  "\n\031RESERVED_FOR_FUTURE_USE_2\020\014\022\035\n\031RESERVE"
  "D_FOR_FUTURE_USE_3\020\r\022\035\n\031RESERVED_FOR_FUT"
  "URE_USE_4\020\016\022\017\n\013NOT_DEFINED\020\017*\220\006\n\tATON_TY"
  "PE\022\013\n\007DEFAULT\020\000\022\023\n\017REFERENCE_POINT\020\001\022\t\n\005"
  "RACON\020\002\022\035\n\031FIXED_STRUCTURE_OFF_SHORE\020\003\022\t"
  "\n\005SPARE\020\004\022\031\n\025LIGHT_WITHOUT_SECTORS\020\005\022\026\n\022"
  "LIGHT_WITH_SECTORS\020\006\022\027\n\023LEADING_LIGHT_FR"
  "ONT\020\007\022\026\n\022LEADING_LIGHT_REAR\020\010\022\025\n\021BEACON_"
  "CARDINAL_N\020\t\022\025\n\021BEACON_CARDINAL_E\020\n\022\025\n\021B"
  "EACON_CARDINAL_S\020\013\022\025\n\021BEACON_CARDINAL_W\020"
  "\014\022\024\n\020BEACON_PORT_HAND\020\r\022\031\n\025BEACON_STARBO"
  "ARD_HAND\020\016\022&\n\"BEACON_PREFERRED_CHANNEL_P"
  "ORT_HAND\020\017\022+\n\'BEACON_PREFERRED_CHANNEL_S"
  "TARBOARD_HAND\020\020\022\032\n\026BEACON_ISOLATED_DANGE"
  "R\020\021\022\025\n\021BEACON_SAFE_WATER\020\022\022\027\n\023BEACON_SPE"
  "CIAL_MARK\020\023\022\023\n\017CARDINAL_MARK_N\020\024\022\023\n\017CARD"
  "INAL_MARK_E\020\025\022\023\n\017CARDINAL_MARK_S\020\026\022\023\n\017CA"
  "RDINAL_MARK_W\020\027\022\022\n\016PORT_HAND_MARK\020\030\022\027\n\023S"
  "TARBOARD_HAND_MARK\020\031\022\037\n\033PREFERRED_CHANNE"
  "L_PORT_HAND\020\032\022$\n PREFERRED_CHANNEL_STARB"
  "OARD_HAND\020\033\022\023\n\017ISOLATED_DANGER\020\034\022\016\n\nSAFE"
  "_WATER\020\035\022\020\n\014SPECIAL_MARK\020\036\022\033\n\027LIGHT_VESS"
  "EL_LANBY_RIGS\020\037"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_ZCHXAISVessel_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_ZCHXAISVessel_2eproto_sccs[7] = {
  &scc_info_AIS_ZCHXAISVessel_2eproto.base,
  &scc_info_AISList_ZCHXAISVessel_2eproto.base,
  &scc_info_AidtoNavigationReport_ZCHXAISVessel_2eproto.base,
  &scc_info_AisChart_ZCHXAISVessel_2eproto.base,
  &scc_info_BaseStationReport_ZCHXAISVessel_2eproto.base,
  &scc_info_VesselInfo_ZCHXAISVessel_2eproto.base,
  &scc_info_VesselTrack_ZCHXAISVessel_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_ZCHXAISVessel_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_ZCHXAISVessel_2eproto = {
  false, false, descriptor_table_protodef_ZCHXAISVessel_2eproto, "ZCHXAISVessel.proto", 3135,
  &descriptor_table_ZCHXAISVessel_2eproto_once, descriptor_table_ZCHXAISVessel_2eproto_sccs, descriptor_table_ZCHXAISVessel_2eproto_deps, 7, 0,
  schemas, file_default_instances, TableStruct_ZCHXAISVessel_2eproto::offsets,
  file_level_metadata_ZCHXAISVessel_2eproto, 7, file_level_enum_descriptors_ZCHXAISVessel_2eproto, file_level_service_descriptors_ZCHXAISVessel_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_ZCHXAISVessel_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_ZCHXAISVessel_2eproto)), true);
namespace com {
namespace zhichenhaixin {
namespace proto {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EPFD_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_ZCHXAISVessel_2eproto);
  return file_level_enum_descriptors_ZCHXAISVessel_2eproto[0];
}
bool EPFD_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* NAVI_STATUS_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_ZCHXAISVessel_2eproto);
  return file_level_enum_descriptors_ZCHXAISVessel_2eproto[1];
}
bool NAVI_STATUS_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ATON_TYPE_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_ZCHXAISVessel_2eproto);
  return file_level_enum_descriptors_ZCHXAISVessel_2eproto[2];
}
bool ATON_TYPE_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
    case 26:
    case 27:
    case 28:
    case 29:
    case 30:
    case 31:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void VesselInfo::InitAsDefaultInstance() {
}
class VesselInfo::_Internal {
 public:
  using HasBits = decltype(std::declval<VesselInfo>()._has_bits_);
  static void set_has_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_mmsi(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_shiptype(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_imo(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_callsign(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_shipname(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_cargotype(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_country(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_vendorid(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_shiplength(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_shipwidth(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_tobow(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_tostern(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static void set_has_toport(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static void set_has_tostarboard(HasBits* has_bits) {
    (*has_bits)[0] |= 65536u;
  }
  static void set_has_fixtype(HasBits* has_bits) {
    (*has_bits)[0] |= 131072u;
  }
  static void set_has_eta(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_draught(HasBits* has_bits) {
    (*has_bits)[0] |= 524288u;
  }
  static void set_has_dest(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_utc(HasBits* has_bits) {
    (*has_bits)[0] |= 262144u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x000fffff) ^ 0x000fffff) != 0;
  }
};

VesselInfo::VesselInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.zhichenhaixin.proto.VesselInfo)
}
VesselInfo::VesselInfo(const VesselInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_id()) {
    id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_id(),
      GetArena());
  }
  shiptype_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_shiptype()) {
    shiptype_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_shiptype(),
      GetArena());
  }
  callsign_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_callsign()) {
    callsign_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_callsign(),
      GetArena());
  }
  shipname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_shipname()) {
    shipname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_shipname(),
      GetArena());
  }
  country_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_country()) {
    country_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_country(),
      GetArena());
  }
  vendorid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_vendorid()) {
    vendorid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_vendorid(),
      GetArena());
  }
  eta_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_eta()) {
    eta_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_eta(),
      GetArena());
  }
  dest_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_dest()) {
    dest_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_dest(),
      GetArena());
  }
  ::memcpy(&mmsi_, &from.mmsi_,
    static_cast<size_t>(reinterpret_cast<char*>(&draught_) -
    reinterpret_cast<char*>(&mmsi_)) + sizeof(draught_));
  // @@protoc_insertion_point(copy_constructor:com.zhichenhaixin.proto.VesselInfo)
}

void VesselInfo::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_VesselInfo_ZCHXAISVessel_2eproto.base);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  shiptype_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  callsign_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  shipname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  country_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  vendorid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  eta_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  dest_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&mmsi_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&draught_) -
      reinterpret_cast<char*>(&mmsi_)) + sizeof(draught_));
}

VesselInfo::~VesselInfo() {
  // @@protoc_insertion_point(destructor:com.zhichenhaixin.proto.VesselInfo)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void VesselInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  shiptype_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  callsign_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  shipname_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  country_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  vendorid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  eta_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  dest_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void VesselInfo::ArenaDtor(void* object) {
  VesselInfo* _this = reinterpret_cast< VesselInfo* >(object);
  (void)_this;
}
void VesselInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void VesselInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const VesselInfo& VesselInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_VesselInfo_ZCHXAISVessel_2eproto.base);
  return *internal_default_instance();
}


void VesselInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:com.zhichenhaixin.proto.VesselInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      id_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      shiptype_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      callsign_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      shipname_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000010u) {
      country_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000020u) {
      vendorid_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000040u) {
      eta_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000080u) {
      dest_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x0000ff00u) {
    ::memset(&mmsi_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&toport_) -
        reinterpret_cast<char*>(&mmsi_)) + sizeof(toport_));
  }
  if (cached_has_bits & 0x000f0000u) {
    ::memset(&tostarboard_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&draught_) -
        reinterpret_cast<char*>(&tostarboard_)) + sizeof(draught_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* VesselInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required string id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "com.zhichenhaixin.proto.VesselInfo.id");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int32 mmsi = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_mmsi(&has_bits);
          mmsi_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required string shipType = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_shiptype();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "com.zhichenhaixin.proto.VesselInfo.shipType");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int32 imo = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_imo(&has_bits);
          imo_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required string callSign = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_callsign();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "com.zhichenhaixin.proto.VesselInfo.callSign");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required string shipName = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_shipname();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "com.zhichenhaixin.proto.VesselInfo.shipName");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int32 cargoType = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_cargotype(&has_bits);
          cargotype_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required string country = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          auto str = _internal_mutable_country();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "com.zhichenhaixin.proto.VesselInfo.country");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required string vendorID = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          auto str = _internal_mutable_vendorid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "com.zhichenhaixin.proto.VesselInfo.vendorID");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int32 shipLength = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          _Internal::set_has_shiplength(&has_bits);
          shiplength_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int32 shipWidth = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          _Internal::set_has_shipwidth(&has_bits);
          shipwidth_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int32 toBow = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          _Internal::set_has_tobow(&has_bits);
          tobow_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int32 toStern = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          _Internal::set_has_tostern(&has_bits);
          tostern_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int32 toPort = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112)) {
          _Internal::set_has_toport(&has_bits);
          toport_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int32 toStarboard = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 120)) {
          _Internal::set_has_tostarboard(&has_bits);
          tostarboard_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .com.zhichenhaixin.proto.EPFD fixType = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 128)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::com::zhichenhaixin::proto::EPFD_IsValid(val))) {
            _internal_set_fixtype(static_cast<::com::zhichenhaixin::proto::EPFD>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(16, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // required string eta = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 138)) {
          auto str = _internal_mutable_eta();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "com.zhichenhaixin.proto.VesselInfo.eta");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required float draught = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 149)) {
          _Internal::set_has_draught(&has_bits);
          draught_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // required string dest = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 154)) {
          auto str = _internal_mutable_dest();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "com.zhichenhaixin.proto.VesselInfo.dest");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint64 UTC = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 160)) {
          _Internal::set_has_utc(&has_bits);
          utc_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* VesselInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.zhichenhaixin.proto.VesselInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "com.zhichenhaixin.proto.VesselInfo.id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_id(), target);
  }

  // required int32 mmsi = 2;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_mmsi(), target);
  }

  // required string shipType = 3;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_shiptype().data(), static_cast<int>(this->_internal_shiptype().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "com.zhichenhaixin.proto.VesselInfo.shipType");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_shiptype(), target);
  }

  // required int32 imo = 4;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_imo(), target);
  }

  // required string callSign = 5;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_callsign().data(), static_cast<int>(this->_internal_callsign().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "com.zhichenhaixin.proto.VesselInfo.callSign");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_callsign(), target);
  }

  // required string shipName = 6;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_shipname().data(), static_cast<int>(this->_internal_shipname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "com.zhichenhaixin.proto.VesselInfo.shipName");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_shipname(), target);
  }

  // required int32 cargoType = 7;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(7, this->_internal_cargotype(), target);
  }

  // required string country = 8;
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_country().data(), static_cast<int>(this->_internal_country().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "com.zhichenhaixin.proto.VesselInfo.country");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_country(), target);
  }

  // required string vendorID = 9;
  if (cached_has_bits & 0x00000020u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_vendorid().data(), static_cast<int>(this->_internal_vendorid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "com.zhichenhaixin.proto.VesselInfo.vendorID");
    target = stream->WriteStringMaybeAliased(
        9, this->_internal_vendorid(), target);
  }

  // required int32 shipLength = 10;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(10, this->_internal_shiplength(), target);
  }

  // required int32 shipWidth = 11;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(11, this->_internal_shipwidth(), target);
  }

  // required int32 toBow = 12;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(12, this->_internal_tobow(), target);
  }

  // required int32 toStern = 13;
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(13, this->_internal_tostern(), target);
  }

  // required int32 toPort = 14;
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(14, this->_internal_toport(), target);
  }

  // required int32 toStarboard = 15;
  if (cached_has_bits & 0x00010000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(15, this->_internal_tostarboard(), target);
  }

  // required .com.zhichenhaixin.proto.EPFD fixType = 16;
  if (cached_has_bits & 0x00020000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      16, this->_internal_fixtype(), target);
  }

  // required string eta = 17;
  if (cached_has_bits & 0x00000040u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_eta().data(), static_cast<int>(this->_internal_eta().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "com.zhichenhaixin.proto.VesselInfo.eta");
    target = stream->WriteStringMaybeAliased(
        17, this->_internal_eta(), target);
  }

  // required float draught = 18;
  if (cached_has_bits & 0x00080000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(18, this->_internal_draught(), target);
  }

  // required string dest = 19;
  if (cached_has_bits & 0x00000080u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_dest().data(), static_cast<int>(this->_internal_dest().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "com.zhichenhaixin.proto.VesselInfo.dest");
    target = stream->WriteStringMaybeAliased(
        19, this->_internal_dest(), target);
  }

  // required uint64 UTC = 20;
  if (cached_has_bits & 0x00040000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(20, this->_internal_utc(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.zhichenhaixin.proto.VesselInfo)
  return target;
}

size_t VesselInfo::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:com.zhichenhaixin.proto.VesselInfo)
  size_t total_size = 0;

  if (_internal_has_id()) {
    // required string id = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  if (_internal_has_shiptype()) {
    // required string shipType = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_shiptype());
  }

  if (_internal_has_callsign()) {
    // required string callSign = 5;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_callsign());
  }

  if (_internal_has_shipname()) {
    // required string shipName = 6;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_shipname());
  }

  if (_internal_has_country()) {
    // required string country = 8;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_country());
  }

  if (_internal_has_vendorid()) {
    // required string vendorID = 9;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_vendorid());
  }

  if (_internal_has_eta()) {
    // required string eta = 17;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_eta());
  }

  if (_internal_has_dest()) {
    // required string dest = 19;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_dest());
  }

  if (_internal_has_mmsi()) {
    // required int32 mmsi = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_mmsi());
  }

  if (_internal_has_imo()) {
    // required int32 imo = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_imo());
  }

  if (_internal_has_cargotype()) {
    // required int32 cargoType = 7;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_cargotype());
  }

  if (_internal_has_shiplength()) {
    // required int32 shipLength = 10;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_shiplength());
  }

  if (_internal_has_shipwidth()) {
    // required int32 shipWidth = 11;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_shipwidth());
  }

  if (_internal_has_tobow()) {
    // required int32 toBow = 12;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_tobow());
  }

  if (_internal_has_tostern()) {
    // required int32 toStern = 13;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_tostern());
  }

  if (_internal_has_toport()) {
    // required int32 toPort = 14;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_toport());
  }

  if (_internal_has_tostarboard()) {
    // required int32 toStarboard = 15;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_tostarboard());
  }

  if (_internal_has_fixtype()) {
    // required .com.zhichenhaixin.proto.EPFD fixType = 16;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_fixtype());
  }

  if (_internal_has_utc()) {
    // required uint64 UTC = 20;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_utc());
  }

  if (_internal_has_draught()) {
    // required float draught = 18;
    total_size += 2 + 4;
  }

  return total_size;
}
size_t VesselInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.zhichenhaixin.proto.VesselInfo)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x000fffff) ^ 0x000fffff) == 0) {  // All required fields are present.
    // required string id = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());

    // required string shipType = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_shiptype());

    // required string callSign = 5;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_callsign());

    // required string shipName = 6;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_shipname());

    // required string country = 8;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_country());

    // required string vendorID = 9;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_vendorid());

    // required string eta = 17;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_eta());

    // required string dest = 19;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_dest());

    // required int32 mmsi = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_mmsi());

    // required int32 imo = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_imo());

    // required int32 cargoType = 7;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_cargotype());

    // required int32 shipLength = 10;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_shiplength());

    // required int32 shipWidth = 11;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_shipwidth());

    // required int32 toBow = 12;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_tobow());

    // required int32 toStern = 13;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_tostern());

    // required int32 toPort = 14;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_toport());

    // required int32 toStarboard = 15;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_tostarboard());

    // required .com.zhichenhaixin.proto.EPFD fixType = 16;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_fixtype());

    // required uint64 UTC = 20;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_utc());

    // required float draught = 18;
    total_size += 2 + 4;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void VesselInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.zhichenhaixin.proto.VesselInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const VesselInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<VesselInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.zhichenhaixin.proto.VesselInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.zhichenhaixin.proto.VesselInfo)
    MergeFrom(*source);
  }
}

void VesselInfo::MergeFrom(const VesselInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.zhichenhaixin.proto.VesselInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_id(from._internal_id());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_shiptype(from._internal_shiptype());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_callsign(from._internal_callsign());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_set_shipname(from._internal_shipname());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_set_country(from._internal_country());
    }
    if (cached_has_bits & 0x00000020u) {
      _internal_set_vendorid(from._internal_vendorid());
    }
    if (cached_has_bits & 0x00000040u) {
      _internal_set_eta(from._internal_eta());
    }
    if (cached_has_bits & 0x00000080u) {
      _internal_set_dest(from._internal_dest());
    }
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      mmsi_ = from.mmsi_;
    }
    if (cached_has_bits & 0x00000200u) {
      imo_ = from.imo_;
    }
    if (cached_has_bits & 0x00000400u) {
      cargotype_ = from.cargotype_;
    }
    if (cached_has_bits & 0x00000800u) {
      shiplength_ = from.shiplength_;
    }
    if (cached_has_bits & 0x00001000u) {
      shipwidth_ = from.shipwidth_;
    }
    if (cached_has_bits & 0x00002000u) {
      tobow_ = from.tobow_;
    }
    if (cached_has_bits & 0x00004000u) {
      tostern_ = from.tostern_;
    }
    if (cached_has_bits & 0x00008000u) {
      toport_ = from.toport_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x000f0000u) {
    if (cached_has_bits & 0x00010000u) {
      tostarboard_ = from.tostarboard_;
    }
    if (cached_has_bits & 0x00020000u) {
      fixtype_ = from.fixtype_;
    }
    if (cached_has_bits & 0x00040000u) {
      utc_ = from.utc_;
    }
    if (cached_has_bits & 0x00080000u) {
      draught_ = from.draught_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void VesselInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.zhichenhaixin.proto.VesselInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VesselInfo::CopyFrom(const VesselInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.zhichenhaixin.proto.VesselInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VesselInfo::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void VesselInfo::InternalSwap(VesselInfo* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  id_.Swap(&other->id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  shiptype_.Swap(&other->shiptype_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  callsign_.Swap(&other->callsign_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  shipname_.Swap(&other->shipname_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  country_.Swap(&other->country_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  vendorid_.Swap(&other->vendorid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  eta_.Swap(&other->eta_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  dest_.Swap(&other->dest_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(VesselInfo, draught_)
      + sizeof(VesselInfo::draught_)
      - PROTOBUF_FIELD_OFFSET(VesselInfo, mmsi_)>(
          reinterpret_cast<char*>(&mmsi_),
          reinterpret_cast<char*>(&other->mmsi_));
}

::PROTOBUF_NAMESPACE_ID::Metadata VesselInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void VesselTrack::InitAsDefaultInstance() {
}
class VesselTrack::_Internal {
 public:
  using HasBits = decltype(std::declval<VesselTrack>()._has_bits_);
  static void set_has_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_mmsi(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_shiptype(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_navstatus(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_rot(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_sog(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_lon(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_lat(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_cog(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_heading(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_utc(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_type(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_tracknumber(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x000007ff) ^ 0x000007ff) != 0;
  }
};

VesselTrack::VesselTrack(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.zhichenhaixin.proto.VesselTrack)
}
VesselTrack::VesselTrack(const VesselTrack& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_id()) {
    id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_id(),
      GetArena());
  }
  shiptype_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_shiptype()) {
    shiptype_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_shiptype(),
      GetArena());
  }
  ::memcpy(&mmsi_, &from.mmsi_,
    static_cast<size_t>(reinterpret_cast<char*>(&tracknumber_) -
    reinterpret_cast<char*>(&mmsi_)) + sizeof(tracknumber_));
  // @@protoc_insertion_point(copy_constructor:com.zhichenhaixin.proto.VesselTrack)
}

void VesselTrack::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_VesselTrack_ZCHXAISVessel_2eproto.base);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  shiptype_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&mmsi_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&tracknumber_) -
      reinterpret_cast<char*>(&mmsi_)) + sizeof(tracknumber_));
}

VesselTrack::~VesselTrack() {
  // @@protoc_insertion_point(destructor:com.zhichenhaixin.proto.VesselTrack)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void VesselTrack::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  shiptype_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void VesselTrack::ArenaDtor(void* object) {
  VesselTrack* _this = reinterpret_cast< VesselTrack* >(object);
  (void)_this;
}
void VesselTrack::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void VesselTrack::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const VesselTrack& VesselTrack::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_VesselTrack_ZCHXAISVessel_2eproto.base);
  return *internal_default_instance();
}


void VesselTrack::Clear() {
// @@protoc_insertion_point(message_clear_start:com.zhichenhaixin.proto.VesselTrack)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      id_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      shiptype_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x000000fcu) {
    ::memset(&mmsi_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&lat_) -
        reinterpret_cast<char*>(&mmsi_)) + sizeof(lat_));
  }
  if (cached_has_bits & 0x00001f00u) {
    ::memset(&cog_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&tracknumber_) -
        reinterpret_cast<char*>(&cog_)) + sizeof(tracknumber_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* VesselTrack::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required string id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "com.zhichenhaixin.proto.VesselTrack.id");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int32 mmsi = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_mmsi(&has_bits);
          mmsi_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required string shiptype = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_shiptype();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "com.zhichenhaixin.proto.VesselTrack.shiptype");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .com.zhichenhaixin.proto.NAVI_STATUS navStatus = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::com::zhichenhaixin::proto::NAVI_STATUS_IsValid(val))) {
            _internal_set_navstatus(static_cast<::com::zhichenhaixin::proto::NAVI_STATUS>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(4, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // required float rot = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 45)) {
          _Internal::set_has_rot(&has_bits);
          rot_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // required float sog = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 53)) {
          _Internal::set_has_sog(&has_bits);
          sog_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // required double lon = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 57)) {
          _Internal::set_has_lon(&has_bits);
          lon_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // required double lat = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 65)) {
          _Internal::set_has_lat(&has_bits);
          lat_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // required float cog = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 77)) {
          _Internal::set_has_cog(&has_bits);
          cog_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // required float heading = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 85)) {
          _Internal::set_has_heading(&has_bits);
          heading_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // required uint64 UTC = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          _Internal::set_has_utc(&has_bits);
          utc_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 type = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          _Internal::set_has_type(&has_bits);
          type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 trackNumber = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          _Internal::set_has_tracknumber(&has_bits);
          tracknumber_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* VesselTrack::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.zhichenhaixin.proto.VesselTrack)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string id = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "com.zhichenhaixin.proto.VesselTrack.id");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_id(), target);
  }

  // required int32 mmsi = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_mmsi(), target);
  }

  // required string shiptype = 3;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_shiptype().data(), static_cast<int>(this->_internal_shiptype().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "com.zhichenhaixin.proto.VesselTrack.shiptype");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_shiptype(), target);
  }

  // required .com.zhichenhaixin.proto.NAVI_STATUS navStatus = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      4, this->_internal_navstatus(), target);
  }

  // required float rot = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(5, this->_internal_rot(), target);
  }

  // required float sog = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(6, this->_internal_sog(), target);
  }

  // required double lon = 7;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(7, this->_internal_lon(), target);
  }

  // required double lat = 8;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(8, this->_internal_lat(), target);
  }

  // required float cog = 9;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(9, this->_internal_cog(), target);
  }

  // required float heading = 10;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(10, this->_internal_heading(), target);
  }

  // required uint64 UTC = 11;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(11, this->_internal_utc(), target);
  }

  // optional int32 type = 12;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(12, this->_internal_type(), target);
  }

  // optional uint32 trackNumber = 13;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(13, this->_internal_tracknumber(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.zhichenhaixin.proto.VesselTrack)
  return target;
}

size_t VesselTrack::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:com.zhichenhaixin.proto.VesselTrack)
  size_t total_size = 0;

  if (_internal_has_id()) {
    // required string id = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  if (_internal_has_shiptype()) {
    // required string shiptype = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_shiptype());
  }

  if (_internal_has_mmsi()) {
    // required int32 mmsi = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_mmsi());
  }

  if (_internal_has_navstatus()) {
    // required .com.zhichenhaixin.proto.NAVI_STATUS navStatus = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_navstatus());
  }

  if (_internal_has_rot()) {
    // required float rot = 5;
    total_size += 1 + 4;
  }

  if (_internal_has_sog()) {
    // required float sog = 6;
    total_size += 1 + 4;
  }

  if (_internal_has_lon()) {
    // required double lon = 7;
    total_size += 1 + 8;
  }

  if (_internal_has_lat()) {
    // required double lat = 8;
    total_size += 1 + 8;
  }

  if (_internal_has_cog()) {
    // required float cog = 9;
    total_size += 1 + 4;
  }

  if (_internal_has_heading()) {
    // required float heading = 10;
    total_size += 1 + 4;
  }

  if (_internal_has_utc()) {
    // required uint64 UTC = 11;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_utc());
  }

  return total_size;
}
size_t VesselTrack::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.zhichenhaixin.proto.VesselTrack)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x000007ff) ^ 0x000007ff) == 0) {  // All required fields are present.
    // required string id = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());

    // required string shiptype = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_shiptype());

    // required int32 mmsi = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_mmsi());

    // required .com.zhichenhaixin.proto.NAVI_STATUS navStatus = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_navstatus());

    // required float rot = 5;
    total_size += 1 + 4;

    // required float sog = 6;
    total_size += 1 + 4;

    // required double lon = 7;
    total_size += 1 + 8;

    // required double lat = 8;
    total_size += 1 + 8;

    // required float cog = 9;
    total_size += 1 + 4;

    // required float heading = 10;
    total_size += 1 + 4;

    // required uint64 UTC = 11;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_utc());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00001800u) {
    // optional int32 type = 12;
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_type());
    }

    // optional uint32 trackNumber = 13;
    if (cached_has_bits & 0x00001000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_tracknumber());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void VesselTrack::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.zhichenhaixin.proto.VesselTrack)
  GOOGLE_DCHECK_NE(&from, this);
  const VesselTrack* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<VesselTrack>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.zhichenhaixin.proto.VesselTrack)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.zhichenhaixin.proto.VesselTrack)
    MergeFrom(*source);
  }
}

void VesselTrack::MergeFrom(const VesselTrack& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.zhichenhaixin.proto.VesselTrack)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_id(from._internal_id());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_shiptype(from._internal_shiptype());
    }
    if (cached_has_bits & 0x00000004u) {
      mmsi_ = from.mmsi_;
    }
    if (cached_has_bits & 0x00000008u) {
      navstatus_ = from.navstatus_;
    }
    if (cached_has_bits & 0x00000010u) {
      rot_ = from.rot_;
    }
    if (cached_has_bits & 0x00000020u) {
      sog_ = from.sog_;
    }
    if (cached_has_bits & 0x00000040u) {
      lon_ = from.lon_;
    }
    if (cached_has_bits & 0x00000080u) {
      lat_ = from.lat_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00001f00u) {
    if (cached_has_bits & 0x00000100u) {
      cog_ = from.cog_;
    }
    if (cached_has_bits & 0x00000200u) {
      heading_ = from.heading_;
    }
    if (cached_has_bits & 0x00000400u) {
      utc_ = from.utc_;
    }
    if (cached_has_bits & 0x00000800u) {
      type_ = from.type_;
    }
    if (cached_has_bits & 0x00001000u) {
      tracknumber_ = from.tracknumber_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void VesselTrack::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.zhichenhaixin.proto.VesselTrack)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VesselTrack::CopyFrom(const VesselTrack& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.zhichenhaixin.proto.VesselTrack)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VesselTrack::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void VesselTrack::InternalSwap(VesselTrack* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  id_.Swap(&other->id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  shiptype_.Swap(&other->shiptype_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(VesselTrack, tracknumber_)
      + sizeof(VesselTrack::tracknumber_)
      - PROTOBUF_FIELD_OFFSET(VesselTrack, mmsi_)>(
          reinterpret_cast<char*>(&mmsi_),
          reinterpret_cast<char*>(&other->mmsi_));
}

::PROTOBUF_NAMESPACE_ID::Metadata VesselTrack::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void BaseStationReport::InitAsDefaultInstance() {
}
class BaseStationReport::_Internal {
 public:
  using HasBits = decltype(std::declval<BaseStationReport>()._has_bits_);
  static void set_has_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_repeatindicator(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_mmsi(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_year(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_month(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_day(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_hour(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_minute(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_second(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_positionaccuracy(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_lon(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_lat(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_fixtype(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_utc(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00003fff) ^ 0x00003fff) != 0;
  }
};

BaseStationReport::BaseStationReport(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.zhichenhaixin.proto.BaseStationReport)
}
BaseStationReport::BaseStationReport(const BaseStationReport& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&fixtype_) -
    reinterpret_cast<char*>(&id_)) + sizeof(fixtype_));
  // @@protoc_insertion_point(copy_constructor:com.zhichenhaixin.proto.BaseStationReport)
}

void BaseStationReport::SharedCtor() {
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&fixtype_) -
      reinterpret_cast<char*>(&id_)) + sizeof(fixtype_));
}

BaseStationReport::~BaseStationReport() {
  // @@protoc_insertion_point(destructor:com.zhichenhaixin.proto.BaseStationReport)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void BaseStationReport::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void BaseStationReport::ArenaDtor(void* object) {
  BaseStationReport* _this = reinterpret_cast< BaseStationReport* >(object);
  (void)_this;
}
void BaseStationReport::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void BaseStationReport::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BaseStationReport& BaseStationReport::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_BaseStationReport_ZCHXAISVessel_2eproto.base);
  return *internal_default_instance();
}


void BaseStationReport::Clear() {
// @@protoc_insertion_point(message_clear_start:com.zhichenhaixin.proto.BaseStationReport)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&minute_) -
        reinterpret_cast<char*>(&id_)) + sizeof(minute_));
  }
  if (cached_has_bits & 0x00003f00u) {
    ::memset(&second_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&fixtype_) -
        reinterpret_cast<char*>(&second_)) + sizeof(fixtype_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BaseStationReport::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required int32 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_id(&has_bits);
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int32 repeatIndicator = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_repeatindicator(&has_bits);
          repeatindicator_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int32 mmsi = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_mmsi(&has_bits);
          mmsi_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int32 year = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_year(&has_bits);
          year_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int32 month = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_month(&has_bits);
          month_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int32 day = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_day(&has_bits);
          day_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int32 hour = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_hour(&has_bits);
          hour_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int32 minute = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_minute(&has_bits);
          minute_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int32 second = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          _Internal::set_has_second(&has_bits);
          second_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int32 positionAccuracy = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          _Internal::set_has_positionaccuracy(&has_bits);
          positionaccuracy_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required double lon = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 89)) {
          _Internal::set_has_lon(&has_bits);
          lon_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // required double lat = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 97)) {
          _Internal::set_has_lat(&has_bits);
          lat_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // required int32 fixType = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          _Internal::set_has_fixtype(&has_bits);
          fixtype_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint64 UTC = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112)) {
          _Internal::set_has_utc(&has_bits);
          utc_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* BaseStationReport::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.zhichenhaixin.proto.BaseStationReport)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 id = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_id(), target);
  }

  // required int32 repeatIndicator = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_repeatindicator(), target);
  }

  // required int32 mmsi = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_mmsi(), target);
  }

  // required int32 year = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_year(), target);
  }

  // required int32 month = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_month(), target);
  }

  // required int32 day = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->_internal_day(), target);
  }

  // required int32 hour = 7;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(7, this->_internal_hour(), target);
  }

  // required int32 minute = 8;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(8, this->_internal_minute(), target);
  }

  // required int32 second = 9;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(9, this->_internal_second(), target);
  }

  // required int32 positionAccuracy = 10;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(10, this->_internal_positionaccuracy(), target);
  }

  // required double lon = 11;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(11, this->_internal_lon(), target);
  }

  // required double lat = 12;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(12, this->_internal_lat(), target);
  }

  // required int32 fixType = 13;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(13, this->_internal_fixtype(), target);
  }

  // required uint64 UTC = 14;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(14, this->_internal_utc(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.zhichenhaixin.proto.BaseStationReport)
  return target;
}

size_t BaseStationReport::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:com.zhichenhaixin.proto.BaseStationReport)
  size_t total_size = 0;

  if (_internal_has_id()) {
    // required int32 id = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_id());
  }

  if (_internal_has_repeatindicator()) {
    // required int32 repeatIndicator = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_repeatindicator());
  }

  if (_internal_has_mmsi()) {
    // required int32 mmsi = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_mmsi());
  }

  if (_internal_has_year()) {
    // required int32 year = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_year());
  }

  if (_internal_has_month()) {
    // required int32 month = 5;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_month());
  }

  if (_internal_has_day()) {
    // required int32 day = 6;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_day());
  }

  if (_internal_has_hour()) {
    // required int32 hour = 7;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_hour());
  }

  if (_internal_has_minute()) {
    // required int32 minute = 8;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_minute());
  }

  if (_internal_has_second()) {
    // required int32 second = 9;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_second());
  }

  if (_internal_has_positionaccuracy()) {
    // required int32 positionAccuracy = 10;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_positionaccuracy());
  }

  if (_internal_has_lon()) {
    // required double lon = 11;
    total_size += 1 + 8;
  }

  if (_internal_has_lat()) {
    // required double lat = 12;
    total_size += 1 + 8;
  }

  if (_internal_has_utc()) {
    // required uint64 UTC = 14;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_utc());
  }

  if (_internal_has_fixtype()) {
    // required int32 fixType = 13;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_fixtype());
  }

  return total_size;
}
size_t BaseStationReport::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.zhichenhaixin.proto.BaseStationReport)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00003fff) ^ 0x00003fff) == 0) {  // All required fields are present.
    // required int32 id = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_id());

    // required int32 repeatIndicator = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_repeatindicator());

    // required int32 mmsi = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_mmsi());

    // required int32 year = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_year());

    // required int32 month = 5;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_month());

    // required int32 day = 6;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_day());

    // required int32 hour = 7;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_hour());

    // required int32 minute = 8;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_minute());

    // required int32 second = 9;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_second());

    // required int32 positionAccuracy = 10;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_positionaccuracy());

    // required double lon = 11;
    total_size += 1 + 8;

    // required double lat = 12;
    total_size += 1 + 8;

    // required uint64 UTC = 14;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_utc());

    // required int32 fixType = 13;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_fixtype());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BaseStationReport::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.zhichenhaixin.proto.BaseStationReport)
  GOOGLE_DCHECK_NE(&from, this);
  const BaseStationReport* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<BaseStationReport>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.zhichenhaixin.proto.BaseStationReport)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.zhichenhaixin.proto.BaseStationReport)
    MergeFrom(*source);
  }
}

void BaseStationReport::MergeFrom(const BaseStationReport& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.zhichenhaixin.proto.BaseStationReport)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      id_ = from.id_;
    }
    if (cached_has_bits & 0x00000002u) {
      repeatindicator_ = from.repeatindicator_;
    }
    if (cached_has_bits & 0x00000004u) {
      mmsi_ = from.mmsi_;
    }
    if (cached_has_bits & 0x00000008u) {
      year_ = from.year_;
    }
    if (cached_has_bits & 0x00000010u) {
      month_ = from.month_;
    }
    if (cached_has_bits & 0x00000020u) {
      day_ = from.day_;
    }
    if (cached_has_bits & 0x00000040u) {
      hour_ = from.hour_;
    }
    if (cached_has_bits & 0x00000080u) {
      minute_ = from.minute_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00003f00u) {
    if (cached_has_bits & 0x00000100u) {
      second_ = from.second_;
    }
    if (cached_has_bits & 0x00000200u) {
      positionaccuracy_ = from.positionaccuracy_;
    }
    if (cached_has_bits & 0x00000400u) {
      lon_ = from.lon_;
    }
    if (cached_has_bits & 0x00000800u) {
      lat_ = from.lat_;
    }
    if (cached_has_bits & 0x00001000u) {
      utc_ = from.utc_;
    }
    if (cached_has_bits & 0x00002000u) {
      fixtype_ = from.fixtype_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void BaseStationReport::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.zhichenhaixin.proto.BaseStationReport)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BaseStationReport::CopyFrom(const BaseStationReport& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.zhichenhaixin.proto.BaseStationReport)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BaseStationReport::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void BaseStationReport::InternalSwap(BaseStationReport* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(BaseStationReport, fixtype_)
      + sizeof(BaseStationReport::fixtype_)
      - PROTOBUF_FIELD_OFFSET(BaseStationReport, id_)>(
          reinterpret_cast<char*>(&id_),
          reinterpret_cast<char*>(&other->id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata BaseStationReport::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void AidtoNavigationReport::InitAsDefaultInstance() {
}
class AidtoNavigationReport::_Internal {
 public:
  using HasBits = decltype(std::declval<AidtoNavigationReport>()._has_bits_);
  static void set_has_id(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_repeatindicator(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_mmsi(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_atontype(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_positionaccuracy(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_lon(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_lat(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_tobow(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_tostern(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_toport(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_tostarboard(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_fixtype(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_utc(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00003fff) ^ 0x00003fff) != 0;
  }
};

AidtoNavigationReport::AidtoNavigationReport(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.zhichenhaixin.proto.AidtoNavigationReport)
}
AidtoNavigationReport::AidtoNavigationReport(const AidtoNavigationReport& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_name()) {
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_name(),
      GetArena());
  }
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&utc_) -
    reinterpret_cast<char*>(&id_)) + sizeof(utc_));
  // @@protoc_insertion_point(copy_constructor:com.zhichenhaixin.proto.AidtoNavigationReport)
}

void AidtoNavigationReport::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AidtoNavigationReport_ZCHXAISVessel_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&utc_) -
      reinterpret_cast<char*>(&id_)) + sizeof(utc_));
}

AidtoNavigationReport::~AidtoNavigationReport() {
  // @@protoc_insertion_point(destructor:com.zhichenhaixin.proto.AidtoNavigationReport)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AidtoNavigationReport::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void AidtoNavigationReport::ArenaDtor(void* object) {
  AidtoNavigationReport* _this = reinterpret_cast< AidtoNavigationReport* >(object);
  (void)_this;
}
void AidtoNavigationReport::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AidtoNavigationReport::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AidtoNavigationReport& AidtoNavigationReport::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AidtoNavigationReport_ZCHXAISVessel_2eproto.base);
  return *internal_default_instance();
}


void AidtoNavigationReport::Clear() {
// @@protoc_insertion_point(message_clear_start:com.zhichenhaixin.proto.AidtoNavigationReport)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    name_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x000000feu) {
    ::memset(&id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&tobow_) -
        reinterpret_cast<char*>(&id_)) + sizeof(tobow_));
  }
  if (cached_has_bits & 0x00003f00u) {
    ::memset(&lat_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&utc_) -
        reinterpret_cast<char*>(&lat_)) + sizeof(utc_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AidtoNavigationReport::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required int32 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_id(&has_bits);
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int32 repeatIndicator = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_repeatindicator(&has_bits);
          repeatindicator_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int32 mmsi = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_mmsi(&has_bits);
          mmsi_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .com.zhichenhaixin.proto.ATON_TYPE atonType = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::com::zhichenhaixin::proto::ATON_TYPE_IsValid(val))) {
            _internal_set_atontype(static_cast<::com::zhichenhaixin::proto::ATON_TYPE>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(4, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // required string name = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "com.zhichenhaixin.proto.AidtoNavigationReport.name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int32 positionAccuracy = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_positionaccuracy(&has_bits);
          positionaccuracy_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required double lon = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 57)) {
          _Internal::set_has_lon(&has_bits);
          lon_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // required double lat = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 65)) {
          _Internal::set_has_lat(&has_bits);
          lat_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // required int32 toBow = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          _Internal::set_has_tobow(&has_bits);
          tobow_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int32 toStern = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          _Internal::set_has_tostern(&has_bits);
          tostern_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int32 toPort = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          _Internal::set_has_toport(&has_bits);
          toport_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int32 toStarboard = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          _Internal::set_has_tostarboard(&has_bits);
          tostarboard_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int32 fixType = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          _Internal::set_has_fixtype(&has_bits);
          fixtype_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint64 UTC = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112)) {
          _Internal::set_has_utc(&has_bits);
          utc_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AidtoNavigationReport::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.zhichenhaixin.proto.AidtoNavigationReport)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 id = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_id(), target);
  }

  // required int32 repeatIndicator = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_repeatindicator(), target);
  }

  // required int32 mmsi = 3;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_mmsi(), target);
  }

  // required .com.zhichenhaixin.proto.ATON_TYPE atonType = 4;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      4, this->_internal_atontype(), target);
  }

  // required string name = 5;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "com.zhichenhaixin.proto.AidtoNavigationReport.name");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_name(), target);
  }

  // required int32 positionAccuracy = 6;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(6, this->_internal_positionaccuracy(), target);
  }

  // required double lon = 7;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(7, this->_internal_lon(), target);
  }

  // required double lat = 8;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(8, this->_internal_lat(), target);
  }

  // required int32 toBow = 9;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(9, this->_internal_tobow(), target);
  }

  // required int32 toStern = 10;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(10, this->_internal_tostern(), target);
  }

  // required int32 toPort = 11;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(11, this->_internal_toport(), target);
  }

  // required int32 toStarboard = 12;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(12, this->_internal_tostarboard(), target);
  }

  // required int32 fixType = 13;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(13, this->_internal_fixtype(), target);
  }

  // required uint64 UTC = 14;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(14, this->_internal_utc(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.zhichenhaixin.proto.AidtoNavigationReport)
  return target;
}

size_t AidtoNavigationReport::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:com.zhichenhaixin.proto.AidtoNavigationReport)
  size_t total_size = 0;

  if (_internal_has_name()) {
    // required string name = 5;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  if (_internal_has_id()) {
    // required int32 id = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_id());
  }

  if (_internal_has_repeatindicator()) {
    // required int32 repeatIndicator = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_repeatindicator());
  }

  if (_internal_has_mmsi()) {
    // required int32 mmsi = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_mmsi());
  }

  if (_internal_has_atontype()) {
    // required .com.zhichenhaixin.proto.ATON_TYPE atonType = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_atontype());
  }

  if (_internal_has_lon()) {
    // required double lon = 7;
    total_size += 1 + 8;
  }

  if (_internal_has_positionaccuracy()) {
    // required int32 positionAccuracy = 6;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_positionaccuracy());
  }

  if (_internal_has_tobow()) {
    // required int32 toBow = 9;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_tobow());
  }

  if (_internal_has_lat()) {
    // required double lat = 8;
    total_size += 1 + 8;
  }

  if (_internal_has_tostern()) {
    // required int32 toStern = 10;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_tostern());
  }

  if (_internal_has_toport()) {
    // required int32 toPort = 11;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_toport());
  }

  if (_internal_has_tostarboard()) {
    // required int32 toStarboard = 12;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_tostarboard());
  }

  if (_internal_has_fixtype()) {
    // required int32 fixType = 13;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_fixtype());
  }

  if (_internal_has_utc()) {
    // required uint64 UTC = 14;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_utc());
  }

  return total_size;
}
size_t AidtoNavigationReport::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.zhichenhaixin.proto.AidtoNavigationReport)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00003fff) ^ 0x00003fff) == 0) {  // All required fields are present.
    // required string name = 5;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());

    // required int32 id = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_id());

    // required int32 repeatIndicator = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_repeatindicator());

    // required int32 mmsi = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_mmsi());

    // required .com.zhichenhaixin.proto.ATON_TYPE atonType = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_atontype());

    // required double lon = 7;
    total_size += 1 + 8;

    // required int32 positionAccuracy = 6;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_positionaccuracy());

    // required int32 toBow = 9;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_tobow());

    // required double lat = 8;
    total_size += 1 + 8;

    // required int32 toStern = 10;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_tostern());

    // required int32 toPort = 11;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_toport());

    // required int32 toStarboard = 12;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_tostarboard());

    // required int32 fixType = 13;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_fixtype());

    // required uint64 UTC = 14;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_utc());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AidtoNavigationReport::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.zhichenhaixin.proto.AidtoNavigationReport)
  GOOGLE_DCHECK_NE(&from, this);
  const AidtoNavigationReport* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AidtoNavigationReport>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.zhichenhaixin.proto.AidtoNavigationReport)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.zhichenhaixin.proto.AidtoNavigationReport)
    MergeFrom(*source);
  }
}

void AidtoNavigationReport::MergeFrom(const AidtoNavigationReport& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.zhichenhaixin.proto.AidtoNavigationReport)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_name(from._internal_name());
    }
    if (cached_has_bits & 0x00000002u) {
      id_ = from.id_;
    }
    if (cached_has_bits & 0x00000004u) {
      repeatindicator_ = from.repeatindicator_;
    }
    if (cached_has_bits & 0x00000008u) {
      mmsi_ = from.mmsi_;
    }
    if (cached_has_bits & 0x00000010u) {
      atontype_ = from.atontype_;
    }
    if (cached_has_bits & 0x00000020u) {
      lon_ = from.lon_;
    }
    if (cached_has_bits & 0x00000040u) {
      positionaccuracy_ = from.positionaccuracy_;
    }
    if (cached_has_bits & 0x00000080u) {
      tobow_ = from.tobow_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00003f00u) {
    if (cached_has_bits & 0x00000100u) {
      lat_ = from.lat_;
    }
    if (cached_has_bits & 0x00000200u) {
      tostern_ = from.tostern_;
    }
    if (cached_has_bits & 0x00000400u) {
      toport_ = from.toport_;
    }
    if (cached_has_bits & 0x00000800u) {
      tostarboard_ = from.tostarboard_;
    }
    if (cached_has_bits & 0x00001000u) {
      fixtype_ = from.fixtype_;
    }
    if (cached_has_bits & 0x00002000u) {
      utc_ = from.utc_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void AidtoNavigationReport::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.zhichenhaixin.proto.AidtoNavigationReport)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AidtoNavigationReport::CopyFrom(const AidtoNavigationReport& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.zhichenhaixin.proto.AidtoNavigationReport)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AidtoNavigationReport::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void AidtoNavigationReport::InternalSwap(AidtoNavigationReport* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AidtoNavigationReport, utc_)
      + sizeof(AidtoNavigationReport::utc_)
      - PROTOBUF_FIELD_OFFSET(AidtoNavigationReport, id_)>(
          reinterpret_cast<char*>(&id_),
          reinterpret_cast<char*>(&other->id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata AidtoNavigationReport::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void AIS::InitAsDefaultInstance() {
  ::com::zhichenhaixin::proto::_AIS_default_instance_._instance.get_mutable()->vesselinfo_ = const_cast< ::com::zhichenhaixin::proto::VesselInfo*>(
      ::com::zhichenhaixin::proto::VesselInfo::internal_default_instance());
  ::com::zhichenhaixin::proto::_AIS_default_instance_._instance.get_mutable()->vesseltrack_ = const_cast< ::com::zhichenhaixin::proto::VesselTrack*>(
      ::com::zhichenhaixin::proto::VesselTrack::internal_default_instance());
  ::com::zhichenhaixin::proto::_AIS_default_instance_._instance.get_mutable()->basestationreport_ = const_cast< ::com::zhichenhaixin::proto::BaseStationReport*>(
      ::com::zhichenhaixin::proto::BaseStationReport::internal_default_instance());
  ::com::zhichenhaixin::proto::_AIS_default_instance_._instance.get_mutable()->aidtonavigationreport_ = const_cast< ::com::zhichenhaixin::proto::AidtoNavigationReport*>(
      ::com::zhichenhaixin::proto::AidtoNavigationReport::internal_default_instance());
}
class AIS::_Internal {
 public:
  using HasBits = decltype(std::declval<AIS>()._has_bits_);
  static void set_has_flag(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_sourceid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::com::zhichenhaixin::proto::VesselInfo& vesselinfo(const AIS* msg);
  static void set_has_vesselinfo(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::com::zhichenhaixin::proto::VesselTrack& vesseltrack(const AIS* msg);
  static void set_has_vesseltrack(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::com::zhichenhaixin::proto::BaseStationReport& basestationreport(const AIS* msg);
  static void set_has_basestationreport(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::com::zhichenhaixin::proto::AidtoNavigationReport& aidtonavigationreport(const AIS* msg);
  static void set_has_aidtonavigationreport(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000021) ^ 0x00000021) != 0;
  }
};

const ::com::zhichenhaixin::proto::VesselInfo&
AIS::_Internal::vesselinfo(const AIS* msg) {
  return *msg->vesselinfo_;
}
const ::com::zhichenhaixin::proto::VesselTrack&
AIS::_Internal::vesseltrack(const AIS* msg) {
  return *msg->vesseltrack_;
}
const ::com::zhichenhaixin::proto::BaseStationReport&
AIS::_Internal::basestationreport(const AIS* msg) {
  return *msg->basestationreport_;
}
const ::com::zhichenhaixin::proto::AidtoNavigationReport&
AIS::_Internal::aidtonavigationreport(const AIS* msg) {
  return *msg->aidtonavigationreport_;
}
AIS::AIS(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.zhichenhaixin.proto.AIS)
}
AIS::AIS(const AIS& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  sourceid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_sourceid()) {
    sourceid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_sourceid(),
      GetArena());
  }
  if (from._internal_has_vesselinfo()) {
    vesselinfo_ = new ::com::zhichenhaixin::proto::VesselInfo(*from.vesselinfo_);
  } else {
    vesselinfo_ = nullptr;
  }
  if (from._internal_has_vesseltrack()) {
    vesseltrack_ = new ::com::zhichenhaixin::proto::VesselTrack(*from.vesseltrack_);
  } else {
    vesseltrack_ = nullptr;
  }
  if (from._internal_has_basestationreport()) {
    basestationreport_ = new ::com::zhichenhaixin::proto::BaseStationReport(*from.basestationreport_);
  } else {
    basestationreport_ = nullptr;
  }
  if (from._internal_has_aidtonavigationreport()) {
    aidtonavigationreport_ = new ::com::zhichenhaixin::proto::AidtoNavigationReport(*from.aidtonavigationreport_);
  } else {
    aidtonavigationreport_ = nullptr;
  }
  flag_ = from.flag_;
  // @@protoc_insertion_point(copy_constructor:com.zhichenhaixin.proto.AIS)
}

void AIS::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AIS_ZCHXAISVessel_2eproto.base);
  sourceid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&vesselinfo_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&flag_) -
      reinterpret_cast<char*>(&vesselinfo_)) + sizeof(flag_));
}

AIS::~AIS() {
  // @@protoc_insertion_point(destructor:com.zhichenhaixin.proto.AIS)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AIS::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  sourceid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete vesselinfo_;
  if (this != internal_default_instance()) delete vesseltrack_;
  if (this != internal_default_instance()) delete basestationreport_;
  if (this != internal_default_instance()) delete aidtonavigationreport_;
}

void AIS::ArenaDtor(void* object) {
  AIS* _this = reinterpret_cast< AIS* >(object);
  (void)_this;
}
void AIS::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AIS::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AIS& AIS::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AIS_ZCHXAISVessel_2eproto.base);
  return *internal_default_instance();
}


void AIS::Clear() {
// @@protoc_insertion_point(message_clear_start:com.zhichenhaixin.proto.AIS)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      sourceid_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(vesselinfo_ != nullptr);
      vesselinfo_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(vesseltrack_ != nullptr);
      vesseltrack_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(basestationreport_ != nullptr);
      basestationreport_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(aidtonavigationreport_ != nullptr);
      aidtonavigationreport_->Clear();
    }
  }
  flag_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AIS::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required int32 flag = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_flag(&has_bits);
          flag_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required string sourceId = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_sourceid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "com.zhichenhaixin.proto.AIS.sourceId");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .com.zhichenhaixin.proto.VesselInfo vesselInfo = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_vesselinfo(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .com.zhichenhaixin.proto.VesselTrack vesselTrack = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_vesseltrack(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .com.zhichenhaixin.proto.BaseStationReport baseStationReport = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_basestationreport(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .com.zhichenhaixin.proto.AidtoNavigationReport aidtoNavigationReport = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_aidtonavigationreport(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AIS::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.zhichenhaixin.proto.AIS)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 flag = 1;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_flag(), target);
  }

  // required string sourceId = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_sourceid().data(), static_cast<int>(this->_internal_sourceid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "com.zhichenhaixin.proto.AIS.sourceId");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_sourceid(), target);
  }

  // optional .com.zhichenhaixin.proto.VesselInfo vesselInfo = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::vesselinfo(this), target, stream);
  }

  // optional .com.zhichenhaixin.proto.VesselTrack vesselTrack = 4;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::vesseltrack(this), target, stream);
  }

  // optional .com.zhichenhaixin.proto.BaseStationReport baseStationReport = 5;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::basestationreport(this), target, stream);
  }

  // optional .com.zhichenhaixin.proto.AidtoNavigationReport aidtoNavigationReport = 6;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::aidtonavigationreport(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.zhichenhaixin.proto.AIS)
  return target;
}

size_t AIS::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:com.zhichenhaixin.proto.AIS)
  size_t total_size = 0;

  if (_internal_has_sourceid()) {
    // required string sourceId = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_sourceid());
  }

  if (_internal_has_flag()) {
    // required int32 flag = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_flag());
  }

  return total_size;
}
size_t AIS::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.zhichenhaixin.proto.AIS)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000021) ^ 0x00000021) == 0) {  // All required fields are present.
    // required string sourceId = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_sourceid());

    // required int32 flag = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_flag());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001eu) {
    // optional .com.zhichenhaixin.proto.VesselInfo vesselInfo = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *vesselinfo_);
    }

    // optional .com.zhichenhaixin.proto.VesselTrack vesselTrack = 4;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *vesseltrack_);
    }

    // optional .com.zhichenhaixin.proto.BaseStationReport baseStationReport = 5;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *basestationreport_);
    }

    // optional .com.zhichenhaixin.proto.AidtoNavigationReport aidtoNavigationReport = 6;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *aidtonavigationreport_);
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AIS::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.zhichenhaixin.proto.AIS)
  GOOGLE_DCHECK_NE(&from, this);
  const AIS* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AIS>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.zhichenhaixin.proto.AIS)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.zhichenhaixin.proto.AIS)
    MergeFrom(*source);
  }
}

void AIS::MergeFrom(const AIS& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.zhichenhaixin.proto.AIS)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_sourceid(from._internal_sourceid());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_vesselinfo()->::com::zhichenhaixin::proto::VesselInfo::MergeFrom(from._internal_vesselinfo());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_vesseltrack()->::com::zhichenhaixin::proto::VesselTrack::MergeFrom(from._internal_vesseltrack());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_basestationreport()->::com::zhichenhaixin::proto::BaseStationReport::MergeFrom(from._internal_basestationreport());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_mutable_aidtonavigationreport()->::com::zhichenhaixin::proto::AidtoNavigationReport::MergeFrom(from._internal_aidtonavigationreport());
    }
    if (cached_has_bits & 0x00000020u) {
      flag_ = from.flag_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void AIS::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.zhichenhaixin.proto.AIS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AIS::CopyFrom(const AIS& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.zhichenhaixin.proto.AIS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AIS::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (_internal_has_vesselinfo()) {
    if (!vesselinfo_->IsInitialized()) return false;
  }
  if (_internal_has_vesseltrack()) {
    if (!vesseltrack_->IsInitialized()) return false;
  }
  if (_internal_has_basestationreport()) {
    if (!basestationreport_->IsInitialized()) return false;
  }
  if (_internal_has_aidtonavigationreport()) {
    if (!aidtonavigationreport_->IsInitialized()) return false;
  }
  return true;
}

void AIS::InternalSwap(AIS* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  sourceid_.Swap(&other->sourceid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AIS, flag_)
      + sizeof(AIS::flag_)
      - PROTOBUF_FIELD_OFFSET(AIS, vesselinfo_)>(
          reinterpret_cast<char*>(&vesselinfo_),
          reinterpret_cast<char*>(&other->vesselinfo_));
}

::PROTOBUF_NAMESPACE_ID::Metadata AIS::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void AISList::InitAsDefaultInstance() {
}
class AISList::_Internal {
 public:
  using HasBits = decltype(std::declval<AISList>()._has_bits_);
  static void set_has_utc(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

AISList::AISList(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  ais_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.zhichenhaixin.proto.AISList)
}
AISList::AISList(const AISList& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      ais_(from.ais_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  utc_ = from.utc_;
  // @@protoc_insertion_point(copy_constructor:com.zhichenhaixin.proto.AISList)
}

void AISList::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AISList_ZCHXAISVessel_2eproto.base);
  utc_ = PROTOBUF_ULONGLONG(0);
}

AISList::~AISList() {
  // @@protoc_insertion_point(destructor:com.zhichenhaixin.proto.AISList)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AISList::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void AISList::ArenaDtor(void* object) {
  AISList* _this = reinterpret_cast< AISList* >(object);
  (void)_this;
}
void AISList::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AISList::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AISList& AISList::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AISList_ZCHXAISVessel_2eproto.base);
  return *internal_default_instance();
}


void AISList::Clear() {
// @@protoc_insertion_point(message_clear_start:com.zhichenhaixin.proto.AISList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ais_.Clear();
  utc_ = PROTOBUF_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AISList::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required uint64 UTC = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_utc(&has_bits);
          utc_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .com.zhichenhaixin.proto.AIS ais = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_ais(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AISList::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.zhichenhaixin.proto.AISList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint64 UTC = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_utc(), target);
  }

  // repeated .com.zhichenhaixin.proto.AIS ais = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_ais_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_ais(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.zhichenhaixin.proto.AISList)
  return target;
}

size_t AISList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.zhichenhaixin.proto.AISList)
  size_t total_size = 0;

  // required uint64 UTC = 1;
  if (_internal_has_utc()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_utc());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .com.zhichenhaixin.proto.AIS ais = 2;
  total_size += 1UL * this->_internal_ais_size();
  for (const auto& msg : this->ais_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AISList::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.zhichenhaixin.proto.AISList)
  GOOGLE_DCHECK_NE(&from, this);
  const AISList* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AISList>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.zhichenhaixin.proto.AISList)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.zhichenhaixin.proto.AISList)
    MergeFrom(*source);
  }
}

void AISList::MergeFrom(const AISList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.zhichenhaixin.proto.AISList)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  ais_.MergeFrom(from.ais_);
  if (from._internal_has_utc()) {
    _internal_set_utc(from._internal_utc());
  }
}

void AISList::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.zhichenhaixin.proto.AISList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AISList::CopyFrom(const AISList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.zhichenhaixin.proto.AISList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AISList::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(ais_)) return false;
  return true;
}

void AISList::InternalSwap(AISList* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ais_.InternalSwap(&other->ais_);
  swap(utc_, other->utc_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AISList::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void AisChart::InitAsDefaultInstance() {
}
class AisChart::_Internal {
 public:
  using HasBits = decltype(std::declval<AisChart>()._has_bits_);
  static void set_has_id(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_name(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_latitude(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_longitude(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_utc(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_imagedata(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_width(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_height(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_radius(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_format(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x000003ff) ^ 0x000003ff) != 0;
  }
};

AisChart::AisChart(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.zhichenhaixin.proto.AisChart)
}
AisChart::AisChart(const AisChart& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_name()) {
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_name(),
      GetArena());
  }
  imagedata_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_imagedata()) {
    imagedata_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_imagedata(),
      GetArena());
  }
  format_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_format()) {
    format_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_format(),
      GetArena());
  }
  ::memcpy(&id_, &from.id_,
    static_cast<size_t>(reinterpret_cast<char*>(&radius_) -
    reinterpret_cast<char*>(&id_)) + sizeof(radius_));
  // @@protoc_insertion_point(copy_constructor:com.zhichenhaixin.proto.AisChart)
}

void AisChart::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AisChart_ZCHXAISVessel_2eproto.base);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  imagedata_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  format_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&radius_) -
      reinterpret_cast<char*>(&id_)) + sizeof(radius_));
}

AisChart::~AisChart() {
  // @@protoc_insertion_point(destructor:com.zhichenhaixin.proto.AisChart)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AisChart::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  imagedata_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  format_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void AisChart::ArenaDtor(void* object) {
  AisChart* _this = reinterpret_cast< AisChart* >(object);
  (void)_this;
}
void AisChart::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AisChart::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AisChart& AisChart::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AisChart_ZCHXAISVessel_2eproto.base);
  return *internal_default_instance();
}


void AisChart::Clear() {
// @@protoc_insertion_point(message_clear_start:com.zhichenhaixin.proto.AisChart)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      name_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      imagedata_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      format_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x000000f8u) {
    ::memset(&id_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&width_) -
        reinterpret_cast<char*>(&id_)) + sizeof(width_));
  }
  if (cached_has_bits & 0x00000300u) {
    ::memset(&height_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&radius_) -
        reinterpret_cast<char*>(&height_)) + sizeof(radius_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AisChart::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required uint64 id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_id(&has_bits);
          id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required string name = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "com.zhichenhaixin.proto.AisChart.name");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required double latitude = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          _Internal::set_has_latitude(&has_bits);
          latitude_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // required double longitude = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 33)) {
          _Internal::set_has_longitude(&has_bits);
          longitude_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // required uint64 UTC = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_utc(&has_bits);
          utc_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required bytes imageData = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_imagedata();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 width = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_width(&has_bits);
          width_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 height = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_height(&has_bits);
          height_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required double radius = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 73)) {
          _Internal::set_has_radius(&has_bits);
          radius_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // required string format = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          auto str = _internal_mutable_format();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "com.zhichenhaixin.proto.AisChart.format");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AisChart::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.zhichenhaixin.proto.AisChart)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint64 id = 1;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_id(), target);
  }

  // required string name = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "com.zhichenhaixin.proto.AisChart.name");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_name(), target);
  }

  // required double latitude = 3;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_latitude(), target);
  }

  // required double longitude = 4;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(4, this->_internal_longitude(), target);
  }

  // required uint64 UTC = 5;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(5, this->_internal_utc(), target);
  }

  // required bytes imageData = 6;
  if (cached_has_bits & 0x00000002u) {
    target = stream->WriteBytesMaybeAliased(
        6, this->_internal_imagedata(), target);
  }

  // required uint32 width = 7;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(7, this->_internal_width(), target);
  }

  // required uint32 height = 8;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(8, this->_internal_height(), target);
  }

  // required double radius = 9;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(9, this->_internal_radius(), target);
  }

  // required string format = 10;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_format().data(), static_cast<int>(this->_internal_format().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "com.zhichenhaixin.proto.AisChart.format");
    target = stream->WriteStringMaybeAliased(
        10, this->_internal_format(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.zhichenhaixin.proto.AisChart)
  return target;
}

size_t AisChart::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:com.zhichenhaixin.proto.AisChart)
  size_t total_size = 0;

  if (_internal_has_name()) {
    // required string name = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  if (_internal_has_imagedata()) {
    // required bytes imageData = 6;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_imagedata());
  }

  if (_internal_has_format()) {
    // required string format = 10;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_format());
  }

  if (_internal_has_id()) {
    // required uint64 id = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_id());
  }

  if (_internal_has_latitude()) {
    // required double latitude = 3;
    total_size += 1 + 8;
  }

  if (_internal_has_longitude()) {
    // required double longitude = 4;
    total_size += 1 + 8;
  }

  if (_internal_has_utc()) {
    // required uint64 UTC = 5;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_utc());
  }

  if (_internal_has_width()) {
    // required uint32 width = 7;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_width());
  }

  if (_internal_has_height()) {
    // required uint32 height = 8;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_height());
  }

  if (_internal_has_radius()) {
    // required double radius = 9;
    total_size += 1 + 8;
  }

  return total_size;
}
size_t AisChart::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.zhichenhaixin.proto.AisChart)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x000003ff) ^ 0x000003ff) == 0) {  // All required fields are present.
    // required string name = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());

    // required bytes imageData = 6;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_imagedata());

    // required string format = 10;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_format());

    // required uint64 id = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_id());

    // required double latitude = 3;
    total_size += 1 + 8;

    // required double longitude = 4;
    total_size += 1 + 8;

    // required uint64 UTC = 5;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_utc());

    // required uint32 width = 7;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_width());

    // required uint32 height = 8;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_height());

    // required double radius = 9;
    total_size += 1 + 8;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AisChart::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.zhichenhaixin.proto.AisChart)
  GOOGLE_DCHECK_NE(&from, this);
  const AisChart* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AisChart>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.zhichenhaixin.proto.AisChart)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.zhichenhaixin.proto.AisChart)
    MergeFrom(*source);
  }
}

void AisChart::MergeFrom(const AisChart& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.zhichenhaixin.proto.AisChart)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_name(from._internal_name());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_imagedata(from._internal_imagedata());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_format(from._internal_format());
    }
    if (cached_has_bits & 0x00000008u) {
      id_ = from.id_;
    }
    if (cached_has_bits & 0x00000010u) {
      latitude_ = from.latitude_;
    }
    if (cached_has_bits & 0x00000020u) {
      longitude_ = from.longitude_;
    }
    if (cached_has_bits & 0x00000040u) {
      utc_ = from.utc_;
    }
    if (cached_has_bits & 0x00000080u) {
      width_ = from.width_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000300u) {
    if (cached_has_bits & 0x00000100u) {
      height_ = from.height_;
    }
    if (cached_has_bits & 0x00000200u) {
      radius_ = from.radius_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void AisChart::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.zhichenhaixin.proto.AisChart)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AisChart::CopyFrom(const AisChart& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.zhichenhaixin.proto.AisChart)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AisChart::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void AisChart::InternalSwap(AisChart* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  name_.Swap(&other->name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  imagedata_.Swap(&other->imagedata_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  format_.Swap(&other->format_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AisChart, radius_)
      + sizeof(AisChart::radius_)
      - PROTOBUF_FIELD_OFFSET(AisChart, id_)>(
          reinterpret_cast<char*>(&id_),
          reinterpret_cast<char*>(&other->id_));
}

::PROTOBUF_NAMESPACE_ID::Metadata AisChart::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace proto
}  // namespace zhichenhaixin
}  // namespace com
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::com::zhichenhaixin::proto::VesselInfo* Arena::CreateMaybeMessage< ::com::zhichenhaixin::proto::VesselInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::zhichenhaixin::proto::VesselInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::com::zhichenhaixin::proto::VesselTrack* Arena::CreateMaybeMessage< ::com::zhichenhaixin::proto::VesselTrack >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::zhichenhaixin::proto::VesselTrack >(arena);
}
template<> PROTOBUF_NOINLINE ::com::zhichenhaixin::proto::BaseStationReport* Arena::CreateMaybeMessage< ::com::zhichenhaixin::proto::BaseStationReport >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::zhichenhaixin::proto::BaseStationReport >(arena);
}
template<> PROTOBUF_NOINLINE ::com::zhichenhaixin::proto::AidtoNavigationReport* Arena::CreateMaybeMessage< ::com::zhichenhaixin::proto::AidtoNavigationReport >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::zhichenhaixin::proto::AidtoNavigationReport >(arena);
}
template<> PROTOBUF_NOINLINE ::com::zhichenhaixin::proto::AIS* Arena::CreateMaybeMessage< ::com::zhichenhaixin::proto::AIS >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::zhichenhaixin::proto::AIS >(arena);
}
template<> PROTOBUF_NOINLINE ::com::zhichenhaixin::proto::AISList* Arena::CreateMaybeMessage< ::com::zhichenhaixin::proto::AISList >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::zhichenhaixin::proto::AISList >(arena);
}
template<> PROTOBUF_NOINLINE ::com::zhichenhaixin::proto::AisChart* Arena::CreateMaybeMessage< ::com::zhichenhaixin::proto::AisChart >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::zhichenhaixin::proto::AisChart >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
