// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ZCHXAISVessel.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_ZCHXAISVessel_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_ZCHXAISVessel_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3012000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3012001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_ZCHXAISVessel_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_ZCHXAISVessel_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[7]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_ZCHXAISVessel_2eproto;
namespace com {
namespace zhichenhaixin {
namespace proto {
class AIS;
class AISDefaultTypeInternal;
extern AISDefaultTypeInternal _AIS_default_instance_;
class AISList;
class AISListDefaultTypeInternal;
extern AISListDefaultTypeInternal _AISList_default_instance_;
class AidtoNavigationReport;
class AidtoNavigationReportDefaultTypeInternal;
extern AidtoNavigationReportDefaultTypeInternal _AidtoNavigationReport_default_instance_;
class AisChart;
class AisChartDefaultTypeInternal;
extern AisChartDefaultTypeInternal _AisChart_default_instance_;
class BaseStationReport;
class BaseStationReportDefaultTypeInternal;
extern BaseStationReportDefaultTypeInternal _BaseStationReport_default_instance_;
class VesselInfo;
class VesselInfoDefaultTypeInternal;
extern VesselInfoDefaultTypeInternal _VesselInfo_default_instance_;
class VesselTrack;
class VesselTrackDefaultTypeInternal;
extern VesselTrackDefaultTypeInternal _VesselTrack_default_instance_;
}  // namespace proto
}  // namespace zhichenhaixin
}  // namespace com
PROTOBUF_NAMESPACE_OPEN
template<> ::com::zhichenhaixin::proto::AIS* Arena::CreateMaybeMessage<::com::zhichenhaixin::proto::AIS>(Arena*);
template<> ::com::zhichenhaixin::proto::AISList* Arena::CreateMaybeMessage<::com::zhichenhaixin::proto::AISList>(Arena*);
template<> ::com::zhichenhaixin::proto::AidtoNavigationReport* Arena::CreateMaybeMessage<::com::zhichenhaixin::proto::AidtoNavigationReport>(Arena*);
template<> ::com::zhichenhaixin::proto::AisChart* Arena::CreateMaybeMessage<::com::zhichenhaixin::proto::AisChart>(Arena*);
template<> ::com::zhichenhaixin::proto::BaseStationReport* Arena::CreateMaybeMessage<::com::zhichenhaixin::proto::BaseStationReport>(Arena*);
template<> ::com::zhichenhaixin::proto::VesselInfo* Arena::CreateMaybeMessage<::com::zhichenhaixin::proto::VesselInfo>(Arena*);
template<> ::com::zhichenhaixin::proto::VesselTrack* Arena::CreateMaybeMessage<::com::zhichenhaixin::proto::VesselTrack>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace com {
namespace zhichenhaixin {
namespace proto {

enum EPFD : int {
  UNDEFINED = 0,
  GPS = 1,
  GLONASS = 2,
  COMBINED_GPS_AND_GLONASS = 3,
  LORAN_C = 4,
  CHAYKA = 5,
  INTEGRATED_NAVIGATION_SYSTEM = 6,
  SURVEYED = 7,
  GALILEO = 8
};
bool EPFD_IsValid(int value);
constexpr EPFD EPFD_MIN = UNDEFINED;
constexpr EPFD EPFD_MAX = GALILEO;
constexpr int EPFD_ARRAYSIZE = EPFD_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* EPFD_descriptor();
template<typename T>
inline const std::string& EPFD_Name(T enum_t_value) {
  static_assert(::std::is_same<T, EPFD>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function EPFD_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    EPFD_descriptor(), enum_t_value);
}
inline bool EPFD_Parse(
    const std::string& name, EPFD* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<EPFD>(
    EPFD_descriptor(), name, value);
}
enum NAVI_STATUS : int {
  UNDER_WAY_USING_ENGINE = 0,
  AT_ANCHOR = 1,
  NOT_UNDER_COMMAND = 2,
  RESTRICTED_MANOEUVER = 3,
  CONSTRAINED_BY_DRAUGHT = 4,
  MOORED = 5,
  AGROUND = 6,
  ENGAGED_IN_FISHING = 7,
  UNDER_WAY_SAILING = 8,
  RESERVED_FOR_FUTURE_AMENDMENT_FOR_HSC = 9,
  RESERVED_FOR_FUTURE_AMENDMENT_FOR_WIG = 10,
  RESERVED_FOR_FUTURE_USE_1 = 11,
  RESERVED_FOR_FUTURE_USE_2 = 12,
  RESERVED_FOR_FUTURE_USE_3 = 13,
  RESERVED_FOR_FUTURE_USE_4 = 14,
  NOT_DEFINED = 15
};
bool NAVI_STATUS_IsValid(int value);
constexpr NAVI_STATUS NAVI_STATUS_MIN = UNDER_WAY_USING_ENGINE;
constexpr NAVI_STATUS NAVI_STATUS_MAX = NOT_DEFINED;
constexpr int NAVI_STATUS_ARRAYSIZE = NAVI_STATUS_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* NAVI_STATUS_descriptor();
template<typename T>
inline const std::string& NAVI_STATUS_Name(T enum_t_value) {
  static_assert(::std::is_same<T, NAVI_STATUS>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function NAVI_STATUS_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    NAVI_STATUS_descriptor(), enum_t_value);
}
inline bool NAVI_STATUS_Parse(
    const std::string& name, NAVI_STATUS* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<NAVI_STATUS>(
    NAVI_STATUS_descriptor(), name, value);
}
enum ATON_TYPE : int {
  DEFAULT = 0,
  REFERENCE_POINT = 1,
  RACON = 2,
  FIXED_STRUCTURE_OFF_SHORE = 3,
  SPARE = 4,
  LIGHT_WITHOUT_SECTORS = 5,
  LIGHT_WITH_SECTORS = 6,
  LEADING_LIGHT_FRONT = 7,
  LEADING_LIGHT_REAR = 8,
  BEACON_CARDINAL_N = 9,
  BEACON_CARDINAL_E = 10,
  BEACON_CARDINAL_S = 11,
  BEACON_CARDINAL_W = 12,
  BEACON_PORT_HAND = 13,
  BEACON_STARBOARD_HAND = 14,
  BEACON_PREFERRED_CHANNEL_PORT_HAND = 15,
  BEACON_PREFERRED_CHANNEL_STARBOARD_HAND = 16,
  BEACON_ISOLATED_DANGER = 17,
  BEACON_SAFE_WATER = 18,
  BEACON_SPECIAL_MARK = 19,
  CARDINAL_MARK_N = 20,
  CARDINAL_MARK_E = 21,
  CARDINAL_MARK_S = 22,
  CARDINAL_MARK_W = 23,
  PORT_HAND_MARK = 24,
  STARBOARD_HAND_MARK = 25,
  PREFERRED_CHANNEL_PORT_HAND = 26,
  PREFERRED_CHANNEL_STARBOARD_HAND = 27,
  ISOLATED_DANGER = 28,
  SAFE_WATER = 29,
  SPECIAL_MARK = 30,
  LIGHT_VESSEL_LANBY_RIGS = 31
};
bool ATON_TYPE_IsValid(int value);
constexpr ATON_TYPE ATON_TYPE_MIN = DEFAULT;
constexpr ATON_TYPE ATON_TYPE_MAX = LIGHT_VESSEL_LANBY_RIGS;
constexpr int ATON_TYPE_ARRAYSIZE = ATON_TYPE_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ATON_TYPE_descriptor();
template<typename T>
inline const std::string& ATON_TYPE_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ATON_TYPE>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ATON_TYPE_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ATON_TYPE_descriptor(), enum_t_value);
}
inline bool ATON_TYPE_Parse(
    const std::string& name, ATON_TYPE* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ATON_TYPE>(
    ATON_TYPE_descriptor(), name, value);
}
// ===================================================================

class VesselInfo PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:com.zhichenhaixin.proto.VesselInfo) */ {
 public:
  inline VesselInfo() : VesselInfo(nullptr) {};
  virtual ~VesselInfo();

  VesselInfo(const VesselInfo& from);
  VesselInfo(VesselInfo&& from) noexcept
    : VesselInfo() {
    *this = ::std::move(from);
  }

  inline VesselInfo& operator=(const VesselInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline VesselInfo& operator=(VesselInfo&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const VesselInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const VesselInfo* internal_default_instance() {
    return reinterpret_cast<const VesselInfo*>(
               &_VesselInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(VesselInfo& a, VesselInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(VesselInfo* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(VesselInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline VesselInfo* New() const final {
    return CreateMaybeMessage<VesselInfo>(nullptr);
  }

  VesselInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<VesselInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const VesselInfo& from);
  void MergeFrom(const VesselInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(VesselInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "com.zhichenhaixin.proto.VesselInfo";
  }
  protected:
  explicit VesselInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ZCHXAISVessel_2eproto);
    return ::descriptor_table_ZCHXAISVessel_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kShipTypeFieldNumber = 3,
    kCallSignFieldNumber = 5,
    kShipNameFieldNumber = 6,
    kCountryFieldNumber = 8,
    kVendorIDFieldNumber = 9,
    kEtaFieldNumber = 17,
    kDestFieldNumber = 19,
    kMmsiFieldNumber = 2,
    kImoFieldNumber = 4,
    kCargoTypeFieldNumber = 7,
    kShipLengthFieldNumber = 10,
    kShipWidthFieldNumber = 11,
    kToBowFieldNumber = 12,
    kToSternFieldNumber = 13,
    kToPortFieldNumber = 14,
    kToStarboardFieldNumber = 15,
    kFixTypeFieldNumber = 16,
    kUTCFieldNumber = 20,
    kDraughtFieldNumber = 18,
  };
  // required string id = 1;
  bool has_id() const;
  private:
  bool _internal_has_id() const;
  public:
  void clear_id();
  const std::string& id() const;
  void set_id(const std::string& value);
  void set_id(std::string&& value);
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  std::string* mutable_id();
  std::string* release_id();
  void set_allocated_id(std::string* id);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_id();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_id(
      std::string* id);
  private:
  const std::string& _internal_id() const;
  void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // required string shipType = 3;
  bool has_shiptype() const;
  private:
  bool _internal_has_shiptype() const;
  public:
  void clear_shiptype();
  const std::string& shiptype() const;
  void set_shiptype(const std::string& value);
  void set_shiptype(std::string&& value);
  void set_shiptype(const char* value);
  void set_shiptype(const char* value, size_t size);
  std::string* mutable_shiptype();
  std::string* release_shiptype();
  void set_allocated_shiptype(std::string* shiptype);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_shiptype();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_shiptype(
      std::string* shiptype);
  private:
  const std::string& _internal_shiptype() const;
  void _internal_set_shiptype(const std::string& value);
  std::string* _internal_mutable_shiptype();
  public:

  // required string callSign = 5;
  bool has_callsign() const;
  private:
  bool _internal_has_callsign() const;
  public:
  void clear_callsign();
  const std::string& callsign() const;
  void set_callsign(const std::string& value);
  void set_callsign(std::string&& value);
  void set_callsign(const char* value);
  void set_callsign(const char* value, size_t size);
  std::string* mutable_callsign();
  std::string* release_callsign();
  void set_allocated_callsign(std::string* callsign);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_callsign();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_callsign(
      std::string* callsign);
  private:
  const std::string& _internal_callsign() const;
  void _internal_set_callsign(const std::string& value);
  std::string* _internal_mutable_callsign();
  public:

  // required string shipName = 6;
  bool has_shipname() const;
  private:
  bool _internal_has_shipname() const;
  public:
  void clear_shipname();
  const std::string& shipname() const;
  void set_shipname(const std::string& value);
  void set_shipname(std::string&& value);
  void set_shipname(const char* value);
  void set_shipname(const char* value, size_t size);
  std::string* mutable_shipname();
  std::string* release_shipname();
  void set_allocated_shipname(std::string* shipname);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_shipname();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_shipname(
      std::string* shipname);
  private:
  const std::string& _internal_shipname() const;
  void _internal_set_shipname(const std::string& value);
  std::string* _internal_mutable_shipname();
  public:

  // required string country = 8;
  bool has_country() const;
  private:
  bool _internal_has_country() const;
  public:
  void clear_country();
  const std::string& country() const;
  void set_country(const std::string& value);
  void set_country(std::string&& value);
  void set_country(const char* value);
  void set_country(const char* value, size_t size);
  std::string* mutable_country();
  std::string* release_country();
  void set_allocated_country(std::string* country);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_country();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_country(
      std::string* country);
  private:
  const std::string& _internal_country() const;
  void _internal_set_country(const std::string& value);
  std::string* _internal_mutable_country();
  public:

  // required string vendorID = 9;
  bool has_vendorid() const;
  private:
  bool _internal_has_vendorid() const;
  public:
  void clear_vendorid();
  const std::string& vendorid() const;
  void set_vendorid(const std::string& value);
  void set_vendorid(std::string&& value);
  void set_vendorid(const char* value);
  void set_vendorid(const char* value, size_t size);
  std::string* mutable_vendorid();
  std::string* release_vendorid();
  void set_allocated_vendorid(std::string* vendorid);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_vendorid();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_vendorid(
      std::string* vendorid);
  private:
  const std::string& _internal_vendorid() const;
  void _internal_set_vendorid(const std::string& value);
  std::string* _internal_mutable_vendorid();
  public:

  // required string eta = 17;
  bool has_eta() const;
  private:
  bool _internal_has_eta() const;
  public:
  void clear_eta();
  const std::string& eta() const;
  void set_eta(const std::string& value);
  void set_eta(std::string&& value);
  void set_eta(const char* value);
  void set_eta(const char* value, size_t size);
  std::string* mutable_eta();
  std::string* release_eta();
  void set_allocated_eta(std::string* eta);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_eta();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_eta(
      std::string* eta);
  private:
  const std::string& _internal_eta() const;
  void _internal_set_eta(const std::string& value);
  std::string* _internal_mutable_eta();
  public:

  // required string dest = 19;
  bool has_dest() const;
  private:
  bool _internal_has_dest() const;
  public:
  void clear_dest();
  const std::string& dest() const;
  void set_dest(const std::string& value);
  void set_dest(std::string&& value);
  void set_dest(const char* value);
  void set_dest(const char* value, size_t size);
  std::string* mutable_dest();
  std::string* release_dest();
  void set_allocated_dest(std::string* dest);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_dest();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_dest(
      std::string* dest);
  private:
  const std::string& _internal_dest() const;
  void _internal_set_dest(const std::string& value);
  std::string* _internal_mutable_dest();
  public:

  // required int32 mmsi = 2;
  bool has_mmsi() const;
  private:
  bool _internal_has_mmsi() const;
  public:
  void clear_mmsi();
  ::PROTOBUF_NAMESPACE_ID::int32 mmsi() const;
  void set_mmsi(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_mmsi() const;
  void _internal_set_mmsi(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // required int32 imo = 4;
  bool has_imo() const;
  private:
  bool _internal_has_imo() const;
  public:
  void clear_imo();
  ::PROTOBUF_NAMESPACE_ID::int32 imo() const;
  void set_imo(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_imo() const;
  void _internal_set_imo(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // required int32 cargoType = 7;
  bool has_cargotype() const;
  private:
  bool _internal_has_cargotype() const;
  public:
  void clear_cargotype();
  ::PROTOBUF_NAMESPACE_ID::int32 cargotype() const;
  void set_cargotype(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_cargotype() const;
  void _internal_set_cargotype(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // required int32 shipLength = 10;
  bool has_shiplength() const;
  private:
  bool _internal_has_shiplength() const;
  public:
  void clear_shiplength();
  ::PROTOBUF_NAMESPACE_ID::int32 shiplength() const;
  void set_shiplength(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_shiplength() const;
  void _internal_set_shiplength(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // required int32 shipWidth = 11;
  bool has_shipwidth() const;
  private:
  bool _internal_has_shipwidth() const;
  public:
  void clear_shipwidth();
  ::PROTOBUF_NAMESPACE_ID::int32 shipwidth() const;
  void set_shipwidth(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_shipwidth() const;
  void _internal_set_shipwidth(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // required int32 toBow = 12;
  bool has_tobow() const;
  private:
  bool _internal_has_tobow() const;
  public:
  void clear_tobow();
  ::PROTOBUF_NAMESPACE_ID::int32 tobow() const;
  void set_tobow(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_tobow() const;
  void _internal_set_tobow(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // required int32 toStern = 13;
  bool has_tostern() const;
  private:
  bool _internal_has_tostern() const;
  public:
  void clear_tostern();
  ::PROTOBUF_NAMESPACE_ID::int32 tostern() const;
  void set_tostern(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_tostern() const;
  void _internal_set_tostern(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // required int32 toPort = 14;
  bool has_toport() const;
  private:
  bool _internal_has_toport() const;
  public:
  void clear_toport();
  ::PROTOBUF_NAMESPACE_ID::int32 toport() const;
  void set_toport(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_toport() const;
  void _internal_set_toport(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // required int32 toStarboard = 15;
  bool has_tostarboard() const;
  private:
  bool _internal_has_tostarboard() const;
  public:
  void clear_tostarboard();
  ::PROTOBUF_NAMESPACE_ID::int32 tostarboard() const;
  void set_tostarboard(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_tostarboard() const;
  void _internal_set_tostarboard(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // required .com.zhichenhaixin.proto.EPFD fixType = 16;
  bool has_fixtype() const;
  private:
  bool _internal_has_fixtype() const;
  public:
  void clear_fixtype();
  ::com::zhichenhaixin::proto::EPFD fixtype() const;
  void set_fixtype(::com::zhichenhaixin::proto::EPFD value);
  private:
  ::com::zhichenhaixin::proto::EPFD _internal_fixtype() const;
  void _internal_set_fixtype(::com::zhichenhaixin::proto::EPFD value);
  public:

  // required uint64 UTC = 20;
  bool has_utc() const;
  private:
  bool _internal_has_utc() const;
  public:
  void clear_utc();
  ::PROTOBUF_NAMESPACE_ID::uint64 utc() const;
  void set_utc(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_utc() const;
  void _internal_set_utc(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // required float draught = 18;
  bool has_draught() const;
  private:
  bool _internal_has_draught() const;
  public:
  void clear_draught();
  float draught() const;
  void set_draught(float value);
  private:
  float _internal_draught() const;
  void _internal_set_draught(float value);
  public:

  // @@protoc_insertion_point(class_scope:com.zhichenhaixin.proto.VesselInfo)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr shiptype_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr callsign_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr shipname_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr country_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr vendorid_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr eta_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr dest_;
  ::PROTOBUF_NAMESPACE_ID::int32 mmsi_;
  ::PROTOBUF_NAMESPACE_ID::int32 imo_;
  ::PROTOBUF_NAMESPACE_ID::int32 cargotype_;
  ::PROTOBUF_NAMESPACE_ID::int32 shiplength_;
  ::PROTOBUF_NAMESPACE_ID::int32 shipwidth_;
  ::PROTOBUF_NAMESPACE_ID::int32 tobow_;
  ::PROTOBUF_NAMESPACE_ID::int32 tostern_;
  ::PROTOBUF_NAMESPACE_ID::int32 toport_;
  ::PROTOBUF_NAMESPACE_ID::int32 tostarboard_;
  int fixtype_;
  ::PROTOBUF_NAMESPACE_ID::uint64 utc_;
  float draught_;
  friend struct ::TableStruct_ZCHXAISVessel_2eproto;
};
// -------------------------------------------------------------------

class VesselTrack PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:com.zhichenhaixin.proto.VesselTrack) */ {
 public:
  inline VesselTrack() : VesselTrack(nullptr) {};
  virtual ~VesselTrack();

  VesselTrack(const VesselTrack& from);
  VesselTrack(VesselTrack&& from) noexcept
    : VesselTrack() {
    *this = ::std::move(from);
  }

  inline VesselTrack& operator=(const VesselTrack& from) {
    CopyFrom(from);
    return *this;
  }
  inline VesselTrack& operator=(VesselTrack&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const VesselTrack& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const VesselTrack* internal_default_instance() {
    return reinterpret_cast<const VesselTrack*>(
               &_VesselTrack_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(VesselTrack& a, VesselTrack& b) {
    a.Swap(&b);
  }
  inline void Swap(VesselTrack* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(VesselTrack* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline VesselTrack* New() const final {
    return CreateMaybeMessage<VesselTrack>(nullptr);
  }

  VesselTrack* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<VesselTrack>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const VesselTrack& from);
  void MergeFrom(const VesselTrack& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(VesselTrack* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "com.zhichenhaixin.proto.VesselTrack";
  }
  protected:
  explicit VesselTrack(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ZCHXAISVessel_2eproto);
    return ::descriptor_table_ZCHXAISVessel_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kShiptypeFieldNumber = 3,
    kMmsiFieldNumber = 2,
    kNavStatusFieldNumber = 4,
    kRotFieldNumber = 5,
    kSogFieldNumber = 6,
    kLonFieldNumber = 7,
    kLatFieldNumber = 8,
    kCogFieldNumber = 9,
    kHeadingFieldNumber = 10,
    kUTCFieldNumber = 11,
    kTypeFieldNumber = 12,
    kTrackNumberFieldNumber = 13,
  };
  // required string id = 1;
  bool has_id() const;
  private:
  bool _internal_has_id() const;
  public:
  void clear_id();
  const std::string& id() const;
  void set_id(const std::string& value);
  void set_id(std::string&& value);
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  std::string* mutable_id();
  std::string* release_id();
  void set_allocated_id(std::string* id);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_id();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_id(
      std::string* id);
  private:
  const std::string& _internal_id() const;
  void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // required string shiptype = 3;
  bool has_shiptype() const;
  private:
  bool _internal_has_shiptype() const;
  public:
  void clear_shiptype();
  const std::string& shiptype() const;
  void set_shiptype(const std::string& value);
  void set_shiptype(std::string&& value);
  void set_shiptype(const char* value);
  void set_shiptype(const char* value, size_t size);
  std::string* mutable_shiptype();
  std::string* release_shiptype();
  void set_allocated_shiptype(std::string* shiptype);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_shiptype();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_shiptype(
      std::string* shiptype);
  private:
  const std::string& _internal_shiptype() const;
  void _internal_set_shiptype(const std::string& value);
  std::string* _internal_mutable_shiptype();
  public:

  // required int32 mmsi = 2;
  bool has_mmsi() const;
  private:
  bool _internal_has_mmsi() const;
  public:
  void clear_mmsi();
  ::PROTOBUF_NAMESPACE_ID::int32 mmsi() const;
  void set_mmsi(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_mmsi() const;
  void _internal_set_mmsi(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // required .com.zhichenhaixin.proto.NAVI_STATUS navStatus = 4;
  bool has_navstatus() const;
  private:
  bool _internal_has_navstatus() const;
  public:
  void clear_navstatus();
  ::com::zhichenhaixin::proto::NAVI_STATUS navstatus() const;
  void set_navstatus(::com::zhichenhaixin::proto::NAVI_STATUS value);
  private:
  ::com::zhichenhaixin::proto::NAVI_STATUS _internal_navstatus() const;
  void _internal_set_navstatus(::com::zhichenhaixin::proto::NAVI_STATUS value);
  public:

  // required float rot = 5;
  bool has_rot() const;
  private:
  bool _internal_has_rot() const;
  public:
  void clear_rot();
  float rot() const;
  void set_rot(float value);
  private:
  float _internal_rot() const;
  void _internal_set_rot(float value);
  public:

  // required float sog = 6;
  bool has_sog() const;
  private:
  bool _internal_has_sog() const;
  public:
  void clear_sog();
  float sog() const;
  void set_sog(float value);
  private:
  float _internal_sog() const;
  void _internal_set_sog(float value);
  public:

  // required double lon = 7;
  bool has_lon() const;
  private:
  bool _internal_has_lon() const;
  public:
  void clear_lon();
  double lon() const;
  void set_lon(double value);
  private:
  double _internal_lon() const;
  void _internal_set_lon(double value);
  public:

  // required double lat = 8;
  bool has_lat() const;
  private:
  bool _internal_has_lat() const;
  public:
  void clear_lat();
  double lat() const;
  void set_lat(double value);
  private:
  double _internal_lat() const;
  void _internal_set_lat(double value);
  public:

  // required float cog = 9;
  bool has_cog() const;
  private:
  bool _internal_has_cog() const;
  public:
  void clear_cog();
  float cog() const;
  void set_cog(float value);
  private:
  float _internal_cog() const;
  void _internal_set_cog(float value);
  public:

  // required float heading = 10;
  bool has_heading() const;
  private:
  bool _internal_has_heading() const;
  public:
  void clear_heading();
  float heading() const;
  void set_heading(float value);
  private:
  float _internal_heading() const;
  void _internal_set_heading(float value);
  public:

  // required uint64 UTC = 11;
  bool has_utc() const;
  private:
  bool _internal_has_utc() const;
  public:
  void clear_utc();
  ::PROTOBUF_NAMESPACE_ID::uint64 utc() const;
  void set_utc(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_utc() const;
  void _internal_set_utc(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // optional int32 type = 12;
  bool has_type() const;
  private:
  bool _internal_has_type() const;
  public:
  void clear_type();
  ::PROTOBUF_NAMESPACE_ID::int32 type() const;
  void set_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_type() const;
  void _internal_set_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional uint32 trackNumber = 13;
  bool has_tracknumber() const;
  private:
  bool _internal_has_tracknumber() const;
  public:
  void clear_tracknumber();
  ::PROTOBUF_NAMESPACE_ID::uint32 tracknumber() const;
  void set_tracknumber(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_tracknumber() const;
  void _internal_set_tracknumber(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:com.zhichenhaixin.proto.VesselTrack)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr shiptype_;
  ::PROTOBUF_NAMESPACE_ID::int32 mmsi_;
  int navstatus_;
  float rot_;
  float sog_;
  double lon_;
  double lat_;
  float cog_;
  float heading_;
  ::PROTOBUF_NAMESPACE_ID::uint64 utc_;
  ::PROTOBUF_NAMESPACE_ID::int32 type_;
  ::PROTOBUF_NAMESPACE_ID::uint32 tracknumber_;
  friend struct ::TableStruct_ZCHXAISVessel_2eproto;
};
// -------------------------------------------------------------------

class BaseStationReport PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:com.zhichenhaixin.proto.BaseStationReport) */ {
 public:
  inline BaseStationReport() : BaseStationReport(nullptr) {};
  virtual ~BaseStationReport();

  BaseStationReport(const BaseStationReport& from);
  BaseStationReport(BaseStationReport&& from) noexcept
    : BaseStationReport() {
    *this = ::std::move(from);
  }

  inline BaseStationReport& operator=(const BaseStationReport& from) {
    CopyFrom(from);
    return *this;
  }
  inline BaseStationReport& operator=(BaseStationReport&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const BaseStationReport& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BaseStationReport* internal_default_instance() {
    return reinterpret_cast<const BaseStationReport*>(
               &_BaseStationReport_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(BaseStationReport& a, BaseStationReport& b) {
    a.Swap(&b);
  }
  inline void Swap(BaseStationReport* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BaseStationReport* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BaseStationReport* New() const final {
    return CreateMaybeMessage<BaseStationReport>(nullptr);
  }

  BaseStationReport* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BaseStationReport>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const BaseStationReport& from);
  void MergeFrom(const BaseStationReport& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BaseStationReport* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "com.zhichenhaixin.proto.BaseStationReport";
  }
  protected:
  explicit BaseStationReport(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ZCHXAISVessel_2eproto);
    return ::descriptor_table_ZCHXAISVessel_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 1,
    kRepeatIndicatorFieldNumber = 2,
    kMmsiFieldNumber = 3,
    kYearFieldNumber = 4,
    kMonthFieldNumber = 5,
    kDayFieldNumber = 6,
    kHourFieldNumber = 7,
    kMinuteFieldNumber = 8,
    kSecondFieldNumber = 9,
    kPositionAccuracyFieldNumber = 10,
    kLonFieldNumber = 11,
    kLatFieldNumber = 12,
    kUTCFieldNumber = 14,
    kFixTypeFieldNumber = 13,
  };
  // required int32 id = 1;
  bool has_id() const;
  private:
  bool _internal_has_id() const;
  public:
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::int32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // required int32 repeatIndicator = 2;
  bool has_repeatindicator() const;
  private:
  bool _internal_has_repeatindicator() const;
  public:
  void clear_repeatindicator();
  ::PROTOBUF_NAMESPACE_ID::int32 repeatindicator() const;
  void set_repeatindicator(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_repeatindicator() const;
  void _internal_set_repeatindicator(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // required int32 mmsi = 3;
  bool has_mmsi() const;
  private:
  bool _internal_has_mmsi() const;
  public:
  void clear_mmsi();
  ::PROTOBUF_NAMESPACE_ID::int32 mmsi() const;
  void set_mmsi(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_mmsi() const;
  void _internal_set_mmsi(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // required int32 year = 4;
  bool has_year() const;
  private:
  bool _internal_has_year() const;
  public:
  void clear_year();
  ::PROTOBUF_NAMESPACE_ID::int32 year() const;
  void set_year(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_year() const;
  void _internal_set_year(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // required int32 month = 5;
  bool has_month() const;
  private:
  bool _internal_has_month() const;
  public:
  void clear_month();
  ::PROTOBUF_NAMESPACE_ID::int32 month() const;
  void set_month(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_month() const;
  void _internal_set_month(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // required int32 day = 6;
  bool has_day() const;
  private:
  bool _internal_has_day() const;
  public:
  void clear_day();
  ::PROTOBUF_NAMESPACE_ID::int32 day() const;
  void set_day(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_day() const;
  void _internal_set_day(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // required int32 hour = 7;
  bool has_hour() const;
  private:
  bool _internal_has_hour() const;
  public:
  void clear_hour();
  ::PROTOBUF_NAMESPACE_ID::int32 hour() const;
  void set_hour(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_hour() const;
  void _internal_set_hour(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // required int32 minute = 8;
  bool has_minute() const;
  private:
  bool _internal_has_minute() const;
  public:
  void clear_minute();
  ::PROTOBUF_NAMESPACE_ID::int32 minute() const;
  void set_minute(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_minute() const;
  void _internal_set_minute(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // required int32 second = 9;
  bool has_second() const;
  private:
  bool _internal_has_second() const;
  public:
  void clear_second();
  ::PROTOBUF_NAMESPACE_ID::int32 second() const;
  void set_second(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_second() const;
  void _internal_set_second(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // required int32 positionAccuracy = 10;
  bool has_positionaccuracy() const;
  private:
  bool _internal_has_positionaccuracy() const;
  public:
  void clear_positionaccuracy();
  ::PROTOBUF_NAMESPACE_ID::int32 positionaccuracy() const;
  void set_positionaccuracy(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_positionaccuracy() const;
  void _internal_set_positionaccuracy(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // required double lon = 11;
  bool has_lon() const;
  private:
  bool _internal_has_lon() const;
  public:
  void clear_lon();
  double lon() const;
  void set_lon(double value);
  private:
  double _internal_lon() const;
  void _internal_set_lon(double value);
  public:

  // required double lat = 12;
  bool has_lat() const;
  private:
  bool _internal_has_lat() const;
  public:
  void clear_lat();
  double lat() const;
  void set_lat(double value);
  private:
  double _internal_lat() const;
  void _internal_set_lat(double value);
  public:

  // required uint64 UTC = 14;
  bool has_utc() const;
  private:
  bool _internal_has_utc() const;
  public:
  void clear_utc();
  ::PROTOBUF_NAMESPACE_ID::uint64 utc() const;
  void set_utc(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_utc() const;
  void _internal_set_utc(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // required int32 fixType = 13;
  bool has_fixtype() const;
  private:
  bool _internal_has_fixtype() const;
  public:
  void clear_fixtype();
  ::PROTOBUF_NAMESPACE_ID::int32 fixtype() const;
  void set_fixtype(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_fixtype() const;
  void _internal_set_fixtype(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:com.zhichenhaixin.proto.BaseStationReport)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::int32 id_;
  ::PROTOBUF_NAMESPACE_ID::int32 repeatindicator_;
  ::PROTOBUF_NAMESPACE_ID::int32 mmsi_;
  ::PROTOBUF_NAMESPACE_ID::int32 year_;
  ::PROTOBUF_NAMESPACE_ID::int32 month_;
  ::PROTOBUF_NAMESPACE_ID::int32 day_;
  ::PROTOBUF_NAMESPACE_ID::int32 hour_;
  ::PROTOBUF_NAMESPACE_ID::int32 minute_;
  ::PROTOBUF_NAMESPACE_ID::int32 second_;
  ::PROTOBUF_NAMESPACE_ID::int32 positionaccuracy_;
  double lon_;
  double lat_;
  ::PROTOBUF_NAMESPACE_ID::uint64 utc_;
  ::PROTOBUF_NAMESPACE_ID::int32 fixtype_;
  friend struct ::TableStruct_ZCHXAISVessel_2eproto;
};
// -------------------------------------------------------------------

class AidtoNavigationReport PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:com.zhichenhaixin.proto.AidtoNavigationReport) */ {
 public:
  inline AidtoNavigationReport() : AidtoNavigationReport(nullptr) {};
  virtual ~AidtoNavigationReport();

  AidtoNavigationReport(const AidtoNavigationReport& from);
  AidtoNavigationReport(AidtoNavigationReport&& from) noexcept
    : AidtoNavigationReport() {
    *this = ::std::move(from);
  }

  inline AidtoNavigationReport& operator=(const AidtoNavigationReport& from) {
    CopyFrom(from);
    return *this;
  }
  inline AidtoNavigationReport& operator=(AidtoNavigationReport&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AidtoNavigationReport& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AidtoNavigationReport* internal_default_instance() {
    return reinterpret_cast<const AidtoNavigationReport*>(
               &_AidtoNavigationReport_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(AidtoNavigationReport& a, AidtoNavigationReport& b) {
    a.Swap(&b);
  }
  inline void Swap(AidtoNavigationReport* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AidtoNavigationReport* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AidtoNavigationReport* New() const final {
    return CreateMaybeMessage<AidtoNavigationReport>(nullptr);
  }

  AidtoNavigationReport* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AidtoNavigationReport>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AidtoNavigationReport& from);
  void MergeFrom(const AidtoNavigationReport& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AidtoNavigationReport* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "com.zhichenhaixin.proto.AidtoNavigationReport";
  }
  protected:
  explicit AidtoNavigationReport(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ZCHXAISVessel_2eproto);
    return ::descriptor_table_ZCHXAISVessel_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 5,
    kIdFieldNumber = 1,
    kRepeatIndicatorFieldNumber = 2,
    kMmsiFieldNumber = 3,
    kAtonTypeFieldNumber = 4,
    kLonFieldNumber = 7,
    kPositionAccuracyFieldNumber = 6,
    kToBowFieldNumber = 9,
    kLatFieldNumber = 8,
    kToSternFieldNumber = 10,
    kToPortFieldNumber = 11,
    kToStarboardFieldNumber = 12,
    kFixTypeFieldNumber = 13,
    kUTCFieldNumber = 14,
  };
  // required string name = 5;
  bool has_name() const;
  private:
  bool _internal_has_name() const;
  public:
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_name();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_name(
      std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // required int32 id = 1;
  bool has_id() const;
  private:
  bool _internal_has_id() const;
  public:
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::int32 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // required int32 repeatIndicator = 2;
  bool has_repeatindicator() const;
  private:
  bool _internal_has_repeatindicator() const;
  public:
  void clear_repeatindicator();
  ::PROTOBUF_NAMESPACE_ID::int32 repeatindicator() const;
  void set_repeatindicator(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_repeatindicator() const;
  void _internal_set_repeatindicator(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // required int32 mmsi = 3;
  bool has_mmsi() const;
  private:
  bool _internal_has_mmsi() const;
  public:
  void clear_mmsi();
  ::PROTOBUF_NAMESPACE_ID::int32 mmsi() const;
  void set_mmsi(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_mmsi() const;
  void _internal_set_mmsi(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // required .com.zhichenhaixin.proto.ATON_TYPE atonType = 4;
  bool has_atontype() const;
  private:
  bool _internal_has_atontype() const;
  public:
  void clear_atontype();
  ::com::zhichenhaixin::proto::ATON_TYPE atontype() const;
  void set_atontype(::com::zhichenhaixin::proto::ATON_TYPE value);
  private:
  ::com::zhichenhaixin::proto::ATON_TYPE _internal_atontype() const;
  void _internal_set_atontype(::com::zhichenhaixin::proto::ATON_TYPE value);
  public:

  // required double lon = 7;
  bool has_lon() const;
  private:
  bool _internal_has_lon() const;
  public:
  void clear_lon();
  double lon() const;
  void set_lon(double value);
  private:
  double _internal_lon() const;
  void _internal_set_lon(double value);
  public:

  // required int32 positionAccuracy = 6;
  bool has_positionaccuracy() const;
  private:
  bool _internal_has_positionaccuracy() const;
  public:
  void clear_positionaccuracy();
  ::PROTOBUF_NAMESPACE_ID::int32 positionaccuracy() const;
  void set_positionaccuracy(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_positionaccuracy() const;
  void _internal_set_positionaccuracy(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // required int32 toBow = 9;
  bool has_tobow() const;
  private:
  bool _internal_has_tobow() const;
  public:
  void clear_tobow();
  ::PROTOBUF_NAMESPACE_ID::int32 tobow() const;
  void set_tobow(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_tobow() const;
  void _internal_set_tobow(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // required double lat = 8;
  bool has_lat() const;
  private:
  bool _internal_has_lat() const;
  public:
  void clear_lat();
  double lat() const;
  void set_lat(double value);
  private:
  double _internal_lat() const;
  void _internal_set_lat(double value);
  public:

  // required int32 toStern = 10;
  bool has_tostern() const;
  private:
  bool _internal_has_tostern() const;
  public:
  void clear_tostern();
  ::PROTOBUF_NAMESPACE_ID::int32 tostern() const;
  void set_tostern(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_tostern() const;
  void _internal_set_tostern(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // required int32 toPort = 11;
  bool has_toport() const;
  private:
  bool _internal_has_toport() const;
  public:
  void clear_toport();
  ::PROTOBUF_NAMESPACE_ID::int32 toport() const;
  void set_toport(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_toport() const;
  void _internal_set_toport(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // required int32 toStarboard = 12;
  bool has_tostarboard() const;
  private:
  bool _internal_has_tostarboard() const;
  public:
  void clear_tostarboard();
  ::PROTOBUF_NAMESPACE_ID::int32 tostarboard() const;
  void set_tostarboard(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_tostarboard() const;
  void _internal_set_tostarboard(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // required int32 fixType = 13;
  bool has_fixtype() const;
  private:
  bool _internal_has_fixtype() const;
  public:
  void clear_fixtype();
  ::PROTOBUF_NAMESPACE_ID::int32 fixtype() const;
  void set_fixtype(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_fixtype() const;
  void _internal_set_fixtype(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // required uint64 UTC = 14;
  bool has_utc() const;
  private:
  bool _internal_has_utc() const;
  public:
  void clear_utc();
  ::PROTOBUF_NAMESPACE_ID::uint64 utc() const;
  void set_utc(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_utc() const;
  void _internal_set_utc(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:com.zhichenhaixin.proto.AidtoNavigationReport)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::int32 id_;
  ::PROTOBUF_NAMESPACE_ID::int32 repeatindicator_;
  ::PROTOBUF_NAMESPACE_ID::int32 mmsi_;
  int atontype_;
  double lon_;
  ::PROTOBUF_NAMESPACE_ID::int32 positionaccuracy_;
  ::PROTOBUF_NAMESPACE_ID::int32 tobow_;
  double lat_;
  ::PROTOBUF_NAMESPACE_ID::int32 tostern_;
  ::PROTOBUF_NAMESPACE_ID::int32 toport_;
  ::PROTOBUF_NAMESPACE_ID::int32 tostarboard_;
  ::PROTOBUF_NAMESPACE_ID::int32 fixtype_;
  ::PROTOBUF_NAMESPACE_ID::uint64 utc_;
  friend struct ::TableStruct_ZCHXAISVessel_2eproto;
};
// -------------------------------------------------------------------

class AIS PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:com.zhichenhaixin.proto.AIS) */ {
 public:
  inline AIS() : AIS(nullptr) {};
  virtual ~AIS();

  AIS(const AIS& from);
  AIS(AIS&& from) noexcept
    : AIS() {
    *this = ::std::move(from);
  }

  inline AIS& operator=(const AIS& from) {
    CopyFrom(from);
    return *this;
  }
  inline AIS& operator=(AIS&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AIS& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AIS* internal_default_instance() {
    return reinterpret_cast<const AIS*>(
               &_AIS_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(AIS& a, AIS& b) {
    a.Swap(&b);
  }
  inline void Swap(AIS* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AIS* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AIS* New() const final {
    return CreateMaybeMessage<AIS>(nullptr);
  }

  AIS* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AIS>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AIS& from);
  void MergeFrom(const AIS& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AIS* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "com.zhichenhaixin.proto.AIS";
  }
  protected:
  explicit AIS(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ZCHXAISVessel_2eproto);
    return ::descriptor_table_ZCHXAISVessel_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSourceIdFieldNumber = 2,
    kVesselInfoFieldNumber = 3,
    kVesselTrackFieldNumber = 4,
    kBaseStationReportFieldNumber = 5,
    kAidtoNavigationReportFieldNumber = 6,
    kFlagFieldNumber = 1,
  };
  // required string sourceId = 2;
  bool has_sourceid() const;
  private:
  bool _internal_has_sourceid() const;
  public:
  void clear_sourceid();
  const std::string& sourceid() const;
  void set_sourceid(const std::string& value);
  void set_sourceid(std::string&& value);
  void set_sourceid(const char* value);
  void set_sourceid(const char* value, size_t size);
  std::string* mutable_sourceid();
  std::string* release_sourceid();
  void set_allocated_sourceid(std::string* sourceid);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_sourceid();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_sourceid(
      std::string* sourceid);
  private:
  const std::string& _internal_sourceid() const;
  void _internal_set_sourceid(const std::string& value);
  std::string* _internal_mutable_sourceid();
  public:

  // optional .com.zhichenhaixin.proto.VesselInfo vesselInfo = 3;
  bool has_vesselinfo() const;
  private:
  bool _internal_has_vesselinfo() const;
  public:
  void clear_vesselinfo();
  const ::com::zhichenhaixin::proto::VesselInfo& vesselinfo() const;
  ::com::zhichenhaixin::proto::VesselInfo* release_vesselinfo();
  ::com::zhichenhaixin::proto::VesselInfo* mutable_vesselinfo();
  void set_allocated_vesselinfo(::com::zhichenhaixin::proto::VesselInfo* vesselinfo);
  private:
  const ::com::zhichenhaixin::proto::VesselInfo& _internal_vesselinfo() const;
  ::com::zhichenhaixin::proto::VesselInfo* _internal_mutable_vesselinfo();
  public:
  void unsafe_arena_set_allocated_vesselinfo(
      ::com::zhichenhaixin::proto::VesselInfo* vesselinfo);
  ::com::zhichenhaixin::proto::VesselInfo* unsafe_arena_release_vesselinfo();

  // optional .com.zhichenhaixin.proto.VesselTrack vesselTrack = 4;
  bool has_vesseltrack() const;
  private:
  bool _internal_has_vesseltrack() const;
  public:
  void clear_vesseltrack();
  const ::com::zhichenhaixin::proto::VesselTrack& vesseltrack() const;
  ::com::zhichenhaixin::proto::VesselTrack* release_vesseltrack();
  ::com::zhichenhaixin::proto::VesselTrack* mutable_vesseltrack();
  void set_allocated_vesseltrack(::com::zhichenhaixin::proto::VesselTrack* vesseltrack);
  private:
  const ::com::zhichenhaixin::proto::VesselTrack& _internal_vesseltrack() const;
  ::com::zhichenhaixin::proto::VesselTrack* _internal_mutable_vesseltrack();
  public:
  void unsafe_arena_set_allocated_vesseltrack(
      ::com::zhichenhaixin::proto::VesselTrack* vesseltrack);
  ::com::zhichenhaixin::proto::VesselTrack* unsafe_arena_release_vesseltrack();

  // optional .com.zhichenhaixin.proto.BaseStationReport baseStationReport = 5;
  bool has_basestationreport() const;
  private:
  bool _internal_has_basestationreport() const;
  public:
  void clear_basestationreport();
  const ::com::zhichenhaixin::proto::BaseStationReport& basestationreport() const;
  ::com::zhichenhaixin::proto::BaseStationReport* release_basestationreport();
  ::com::zhichenhaixin::proto::BaseStationReport* mutable_basestationreport();
  void set_allocated_basestationreport(::com::zhichenhaixin::proto::BaseStationReport* basestationreport);
  private:
  const ::com::zhichenhaixin::proto::BaseStationReport& _internal_basestationreport() const;
  ::com::zhichenhaixin::proto::BaseStationReport* _internal_mutable_basestationreport();
  public:
  void unsafe_arena_set_allocated_basestationreport(
      ::com::zhichenhaixin::proto::BaseStationReport* basestationreport);
  ::com::zhichenhaixin::proto::BaseStationReport* unsafe_arena_release_basestationreport();

  // optional .com.zhichenhaixin.proto.AidtoNavigationReport aidtoNavigationReport = 6;
  bool has_aidtonavigationreport() const;
  private:
  bool _internal_has_aidtonavigationreport() const;
  public:
  void clear_aidtonavigationreport();
  const ::com::zhichenhaixin::proto::AidtoNavigationReport& aidtonavigationreport() const;
  ::com::zhichenhaixin::proto::AidtoNavigationReport* release_aidtonavigationreport();
  ::com::zhichenhaixin::proto::AidtoNavigationReport* mutable_aidtonavigationreport();
  void set_allocated_aidtonavigationreport(::com::zhichenhaixin::proto::AidtoNavigationReport* aidtonavigationreport);
  private:
  const ::com::zhichenhaixin::proto::AidtoNavigationReport& _internal_aidtonavigationreport() const;
  ::com::zhichenhaixin::proto::AidtoNavigationReport* _internal_mutable_aidtonavigationreport();
  public:
  void unsafe_arena_set_allocated_aidtonavigationreport(
      ::com::zhichenhaixin::proto::AidtoNavigationReport* aidtonavigationreport);
  ::com::zhichenhaixin::proto::AidtoNavigationReport* unsafe_arena_release_aidtonavigationreport();

  // required int32 flag = 1;
  bool has_flag() const;
  private:
  bool _internal_has_flag() const;
  public:
  void clear_flag();
  ::PROTOBUF_NAMESPACE_ID::int32 flag() const;
  void set_flag(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_flag() const;
  void _internal_set_flag(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:com.zhichenhaixin.proto.AIS)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sourceid_;
  ::com::zhichenhaixin::proto::VesselInfo* vesselinfo_;
  ::com::zhichenhaixin::proto::VesselTrack* vesseltrack_;
  ::com::zhichenhaixin::proto::BaseStationReport* basestationreport_;
  ::com::zhichenhaixin::proto::AidtoNavigationReport* aidtonavigationreport_;
  ::PROTOBUF_NAMESPACE_ID::int32 flag_;
  friend struct ::TableStruct_ZCHXAISVessel_2eproto;
};
// -------------------------------------------------------------------

class AISList PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:com.zhichenhaixin.proto.AISList) */ {
 public:
  inline AISList() : AISList(nullptr) {};
  virtual ~AISList();

  AISList(const AISList& from);
  AISList(AISList&& from) noexcept
    : AISList() {
    *this = ::std::move(from);
  }

  inline AISList& operator=(const AISList& from) {
    CopyFrom(from);
    return *this;
  }
  inline AISList& operator=(AISList&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AISList& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AISList* internal_default_instance() {
    return reinterpret_cast<const AISList*>(
               &_AISList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(AISList& a, AISList& b) {
    a.Swap(&b);
  }
  inline void Swap(AISList* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AISList* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AISList* New() const final {
    return CreateMaybeMessage<AISList>(nullptr);
  }

  AISList* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AISList>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AISList& from);
  void MergeFrom(const AISList& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AISList* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "com.zhichenhaixin.proto.AISList";
  }
  protected:
  explicit AISList(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ZCHXAISVessel_2eproto);
    return ::descriptor_table_ZCHXAISVessel_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAisFieldNumber = 2,
    kUTCFieldNumber = 1,
  };
  // repeated .com.zhichenhaixin.proto.AIS ais = 2;
  int ais_size() const;
  private:
  int _internal_ais_size() const;
  public:
  void clear_ais();
  ::com::zhichenhaixin::proto::AIS* mutable_ais(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::zhichenhaixin::proto::AIS >*
      mutable_ais();
  private:
  const ::com::zhichenhaixin::proto::AIS& _internal_ais(int index) const;
  ::com::zhichenhaixin::proto::AIS* _internal_add_ais();
  public:
  const ::com::zhichenhaixin::proto::AIS& ais(int index) const;
  ::com::zhichenhaixin::proto::AIS* add_ais();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::zhichenhaixin::proto::AIS >&
      ais() const;

  // required uint64 UTC = 1;
  bool has_utc() const;
  private:
  bool _internal_has_utc() const;
  public:
  void clear_utc();
  ::PROTOBUF_NAMESPACE_ID::uint64 utc() const;
  void set_utc(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_utc() const;
  void _internal_set_utc(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:com.zhichenhaixin.proto.AISList)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::zhichenhaixin::proto::AIS > ais_;
  ::PROTOBUF_NAMESPACE_ID::uint64 utc_;
  friend struct ::TableStruct_ZCHXAISVessel_2eproto;
};
// -------------------------------------------------------------------

class AisChart PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:com.zhichenhaixin.proto.AisChart) */ {
 public:
  inline AisChart() : AisChart(nullptr) {};
  virtual ~AisChart();

  AisChart(const AisChart& from);
  AisChart(AisChart&& from) noexcept
    : AisChart() {
    *this = ::std::move(from);
  }

  inline AisChart& operator=(const AisChart& from) {
    CopyFrom(from);
    return *this;
  }
  inline AisChart& operator=(AisChart&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AisChart& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AisChart* internal_default_instance() {
    return reinterpret_cast<const AisChart*>(
               &_AisChart_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(AisChart& a, AisChart& b) {
    a.Swap(&b);
  }
  inline void Swap(AisChart* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AisChart* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AisChart* New() const final {
    return CreateMaybeMessage<AisChart>(nullptr);
  }

  AisChart* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AisChart>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AisChart& from);
  void MergeFrom(const AisChart& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AisChart* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "com.zhichenhaixin.proto.AisChart";
  }
  protected:
  explicit AisChart(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ZCHXAISVessel_2eproto);
    return ::descriptor_table_ZCHXAISVessel_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 2,
    kImageDataFieldNumber = 6,
    kFormatFieldNumber = 10,
    kIdFieldNumber = 1,
    kLatitudeFieldNumber = 3,
    kLongitudeFieldNumber = 4,
    kUTCFieldNumber = 5,
    kWidthFieldNumber = 7,
    kHeightFieldNumber = 8,
    kRadiusFieldNumber = 9,
  };
  // required string name = 2;
  bool has_name() const;
  private:
  bool _internal_has_name() const;
  public:
  void clear_name();
  const std::string& name() const;
  void set_name(const std::string& value);
  void set_name(std::string&& value);
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  std::string* mutable_name();
  std::string* release_name();
  void set_allocated_name(std::string* name);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_name();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_name(
      std::string* name);
  private:
  const std::string& _internal_name() const;
  void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // required bytes imageData = 6;
  bool has_imagedata() const;
  private:
  bool _internal_has_imagedata() const;
  public:
  void clear_imagedata();
  const std::string& imagedata() const;
  void set_imagedata(const std::string& value);
  void set_imagedata(std::string&& value);
  void set_imagedata(const char* value);
  void set_imagedata(const void* value, size_t size);
  std::string* mutable_imagedata();
  std::string* release_imagedata();
  void set_allocated_imagedata(std::string* imagedata);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_imagedata();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_imagedata(
      std::string* imagedata);
  private:
  const std::string& _internal_imagedata() const;
  void _internal_set_imagedata(const std::string& value);
  std::string* _internal_mutable_imagedata();
  public:

  // required string format = 10;
  bool has_format() const;
  private:
  bool _internal_has_format() const;
  public:
  void clear_format();
  const std::string& format() const;
  void set_format(const std::string& value);
  void set_format(std::string&& value);
  void set_format(const char* value);
  void set_format(const char* value, size_t size);
  std::string* mutable_format();
  std::string* release_format();
  void set_allocated_format(std::string* format);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_format();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_format(
      std::string* format);
  private:
  const std::string& _internal_format() const;
  void _internal_set_format(const std::string& value);
  std::string* _internal_mutable_format();
  public:

  // required uint64 id = 1;
  bool has_id() const;
  private:
  bool _internal_has_id() const;
  public:
  void clear_id();
  ::PROTOBUF_NAMESPACE_ID::uint64 id() const;
  void set_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_id() const;
  void _internal_set_id(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // required double latitude = 3;
  bool has_latitude() const;
  private:
  bool _internal_has_latitude() const;
  public:
  void clear_latitude();
  double latitude() const;
  void set_latitude(double value);
  private:
  double _internal_latitude() const;
  void _internal_set_latitude(double value);
  public:

  // required double longitude = 4;
  bool has_longitude() const;
  private:
  bool _internal_has_longitude() const;
  public:
  void clear_longitude();
  double longitude() const;
  void set_longitude(double value);
  private:
  double _internal_longitude() const;
  void _internal_set_longitude(double value);
  public:

  // required uint64 UTC = 5;
  bool has_utc() const;
  private:
  bool _internal_has_utc() const;
  public:
  void clear_utc();
  ::PROTOBUF_NAMESPACE_ID::uint64 utc() const;
  void set_utc(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_utc() const;
  void _internal_set_utc(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // required uint32 width = 7;
  bool has_width() const;
  private:
  bool _internal_has_width() const;
  public:
  void clear_width();
  ::PROTOBUF_NAMESPACE_ID::uint32 width() const;
  void set_width(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_width() const;
  void _internal_set_width(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // required uint32 height = 8;
  bool has_height() const;
  private:
  bool _internal_has_height() const;
  public:
  void clear_height();
  ::PROTOBUF_NAMESPACE_ID::uint32 height() const;
  void set_height(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_height() const;
  void _internal_set_height(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // required double radius = 9;
  bool has_radius() const;
  private:
  bool _internal_has_radius() const;
  public:
  void clear_radius();
  double radius() const;
  void set_radius(double value);
  private:
  double _internal_radius() const;
  void _internal_set_radius(double value);
  public:

  // @@protoc_insertion_point(class_scope:com.zhichenhaixin.proto.AisChart)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr imagedata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr format_;
  ::PROTOBUF_NAMESPACE_ID::uint64 id_;
  double latitude_;
  double longitude_;
  ::PROTOBUF_NAMESPACE_ID::uint64 utc_;
  ::PROTOBUF_NAMESPACE_ID::uint32 width_;
  ::PROTOBUF_NAMESPACE_ID::uint32 height_;
  double radius_;
  friend struct ::TableStruct_ZCHXAISVessel_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// VesselInfo

// required string id = 1;
inline bool VesselInfo::_internal_has_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool VesselInfo::has_id() const {
  return _internal_has_id();
}
inline void VesselInfo::clear_id() {
  id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& VesselInfo::id() const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.proto.VesselInfo.id)
  return _internal_id();
}
inline void VesselInfo::set_id(const std::string& value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:com.zhichenhaixin.proto.VesselInfo.id)
}
inline std::string* VesselInfo::mutable_id() {
  // @@protoc_insertion_point(field_mutable:com.zhichenhaixin.proto.VesselInfo.id)
  return _internal_mutable_id();
}
inline const std::string& VesselInfo::_internal_id() const {
  return id_.Get();
}
inline void VesselInfo::_internal_set_id(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void VesselInfo::set_id(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:com.zhichenhaixin.proto.VesselInfo.id)
}
inline void VesselInfo::set_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:com.zhichenhaixin.proto.VesselInfo.id)
}
inline void VesselInfo::set_id(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:com.zhichenhaixin.proto.VesselInfo.id)
}
inline std::string* VesselInfo::_internal_mutable_id() {
  _has_bits_[0] |= 0x00000001u;
  return id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* VesselInfo::release_id() {
  // @@protoc_insertion_point(field_release:com.zhichenhaixin.proto.VesselInfo.id)
  if (!_internal_has_id()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return id_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void VesselInfo::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:com.zhichenhaixin.proto.VesselInfo.id)
}
inline std::string* VesselInfo::unsafe_arena_release_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.zhichenhaixin.proto.VesselInfo.id)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000001u;
  return id_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void VesselInfo::unsafe_arena_set_allocated_id(
    std::string* id) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (id != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  id_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      id, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.zhichenhaixin.proto.VesselInfo.id)
}

// required int32 mmsi = 2;
inline bool VesselInfo::_internal_has_mmsi() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool VesselInfo::has_mmsi() const {
  return _internal_has_mmsi();
}
inline void VesselInfo::clear_mmsi() {
  mmsi_ = 0;
  _has_bits_[0] &= ~0x00000100u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 VesselInfo::_internal_mmsi() const {
  return mmsi_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 VesselInfo::mmsi() const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.proto.VesselInfo.mmsi)
  return _internal_mmsi();
}
inline void VesselInfo::_internal_set_mmsi(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000100u;
  mmsi_ = value;
}
inline void VesselInfo::set_mmsi(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_mmsi(value);
  // @@protoc_insertion_point(field_set:com.zhichenhaixin.proto.VesselInfo.mmsi)
}

// required string shipType = 3;
inline bool VesselInfo::_internal_has_shiptype() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool VesselInfo::has_shiptype() const {
  return _internal_has_shiptype();
}
inline void VesselInfo::clear_shiptype() {
  shiptype_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& VesselInfo::shiptype() const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.proto.VesselInfo.shipType)
  return _internal_shiptype();
}
inline void VesselInfo::set_shiptype(const std::string& value) {
  _internal_set_shiptype(value);
  // @@protoc_insertion_point(field_set:com.zhichenhaixin.proto.VesselInfo.shipType)
}
inline std::string* VesselInfo::mutable_shiptype() {
  // @@protoc_insertion_point(field_mutable:com.zhichenhaixin.proto.VesselInfo.shipType)
  return _internal_mutable_shiptype();
}
inline const std::string& VesselInfo::_internal_shiptype() const {
  return shiptype_.Get();
}
inline void VesselInfo::_internal_set_shiptype(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  shiptype_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void VesselInfo::set_shiptype(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  shiptype_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:com.zhichenhaixin.proto.VesselInfo.shipType)
}
inline void VesselInfo::set_shiptype(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  shiptype_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:com.zhichenhaixin.proto.VesselInfo.shipType)
}
inline void VesselInfo::set_shiptype(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000002u;
  shiptype_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:com.zhichenhaixin.proto.VesselInfo.shipType)
}
inline std::string* VesselInfo::_internal_mutable_shiptype() {
  _has_bits_[0] |= 0x00000002u;
  return shiptype_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* VesselInfo::release_shiptype() {
  // @@protoc_insertion_point(field_release:com.zhichenhaixin.proto.VesselInfo.shipType)
  if (!_internal_has_shiptype()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return shiptype_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void VesselInfo::set_allocated_shiptype(std::string* shiptype) {
  if (shiptype != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  shiptype_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), shiptype,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:com.zhichenhaixin.proto.VesselInfo.shipType)
}
inline std::string* VesselInfo::unsafe_arena_release_shiptype() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.zhichenhaixin.proto.VesselInfo.shipType)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000002u;
  return shiptype_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void VesselInfo::unsafe_arena_set_allocated_shiptype(
    std::string* shiptype) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (shiptype != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  shiptype_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      shiptype, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.zhichenhaixin.proto.VesselInfo.shipType)
}

// required int32 imo = 4;
inline bool VesselInfo::_internal_has_imo() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool VesselInfo::has_imo() const {
  return _internal_has_imo();
}
inline void VesselInfo::clear_imo() {
  imo_ = 0;
  _has_bits_[0] &= ~0x00000200u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 VesselInfo::_internal_imo() const {
  return imo_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 VesselInfo::imo() const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.proto.VesselInfo.imo)
  return _internal_imo();
}
inline void VesselInfo::_internal_set_imo(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000200u;
  imo_ = value;
}
inline void VesselInfo::set_imo(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_imo(value);
  // @@protoc_insertion_point(field_set:com.zhichenhaixin.proto.VesselInfo.imo)
}

// required string callSign = 5;
inline bool VesselInfo::_internal_has_callsign() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool VesselInfo::has_callsign() const {
  return _internal_has_callsign();
}
inline void VesselInfo::clear_callsign() {
  callsign_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& VesselInfo::callsign() const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.proto.VesselInfo.callSign)
  return _internal_callsign();
}
inline void VesselInfo::set_callsign(const std::string& value) {
  _internal_set_callsign(value);
  // @@protoc_insertion_point(field_set:com.zhichenhaixin.proto.VesselInfo.callSign)
}
inline std::string* VesselInfo::mutable_callsign() {
  // @@protoc_insertion_point(field_mutable:com.zhichenhaixin.proto.VesselInfo.callSign)
  return _internal_mutable_callsign();
}
inline const std::string& VesselInfo::_internal_callsign() const {
  return callsign_.Get();
}
inline void VesselInfo::_internal_set_callsign(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  callsign_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void VesselInfo::set_callsign(std::string&& value) {
  _has_bits_[0] |= 0x00000004u;
  callsign_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:com.zhichenhaixin.proto.VesselInfo.callSign)
}
inline void VesselInfo::set_callsign(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000004u;
  callsign_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:com.zhichenhaixin.proto.VesselInfo.callSign)
}
inline void VesselInfo::set_callsign(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000004u;
  callsign_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:com.zhichenhaixin.proto.VesselInfo.callSign)
}
inline std::string* VesselInfo::_internal_mutable_callsign() {
  _has_bits_[0] |= 0x00000004u;
  return callsign_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* VesselInfo::release_callsign() {
  // @@protoc_insertion_point(field_release:com.zhichenhaixin.proto.VesselInfo.callSign)
  if (!_internal_has_callsign()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return callsign_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void VesselInfo::set_allocated_callsign(std::string* callsign) {
  if (callsign != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  callsign_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), callsign,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:com.zhichenhaixin.proto.VesselInfo.callSign)
}
inline std::string* VesselInfo::unsafe_arena_release_callsign() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.zhichenhaixin.proto.VesselInfo.callSign)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000004u;
  return callsign_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void VesselInfo::unsafe_arena_set_allocated_callsign(
    std::string* callsign) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (callsign != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  callsign_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      callsign, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.zhichenhaixin.proto.VesselInfo.callSign)
}

// required string shipName = 6;
inline bool VesselInfo::_internal_has_shipname() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool VesselInfo::has_shipname() const {
  return _internal_has_shipname();
}
inline void VesselInfo::clear_shipname() {
  shipname_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000008u;
}
inline const std::string& VesselInfo::shipname() const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.proto.VesselInfo.shipName)
  return _internal_shipname();
}
inline void VesselInfo::set_shipname(const std::string& value) {
  _internal_set_shipname(value);
  // @@protoc_insertion_point(field_set:com.zhichenhaixin.proto.VesselInfo.shipName)
}
inline std::string* VesselInfo::mutable_shipname() {
  // @@protoc_insertion_point(field_mutable:com.zhichenhaixin.proto.VesselInfo.shipName)
  return _internal_mutable_shipname();
}
inline const std::string& VesselInfo::_internal_shipname() const {
  return shipname_.Get();
}
inline void VesselInfo::_internal_set_shipname(const std::string& value) {
  _has_bits_[0] |= 0x00000008u;
  shipname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void VesselInfo::set_shipname(std::string&& value) {
  _has_bits_[0] |= 0x00000008u;
  shipname_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:com.zhichenhaixin.proto.VesselInfo.shipName)
}
inline void VesselInfo::set_shipname(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000008u;
  shipname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:com.zhichenhaixin.proto.VesselInfo.shipName)
}
inline void VesselInfo::set_shipname(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000008u;
  shipname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:com.zhichenhaixin.proto.VesselInfo.shipName)
}
inline std::string* VesselInfo::_internal_mutable_shipname() {
  _has_bits_[0] |= 0x00000008u;
  return shipname_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* VesselInfo::release_shipname() {
  // @@protoc_insertion_point(field_release:com.zhichenhaixin.proto.VesselInfo.shipName)
  if (!_internal_has_shipname()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000008u;
  return shipname_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void VesselInfo::set_allocated_shipname(std::string* shipname) {
  if (shipname != nullptr) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  shipname_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), shipname,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:com.zhichenhaixin.proto.VesselInfo.shipName)
}
inline std::string* VesselInfo::unsafe_arena_release_shipname() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.zhichenhaixin.proto.VesselInfo.shipName)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000008u;
  return shipname_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void VesselInfo::unsafe_arena_set_allocated_shipname(
    std::string* shipname) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (shipname != nullptr) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  shipname_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      shipname, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.zhichenhaixin.proto.VesselInfo.shipName)
}

// required int32 cargoType = 7;
inline bool VesselInfo::_internal_has_cargotype() const {
  bool value = (_has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool VesselInfo::has_cargotype() const {
  return _internal_has_cargotype();
}
inline void VesselInfo::clear_cargotype() {
  cargotype_ = 0;
  _has_bits_[0] &= ~0x00000400u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 VesselInfo::_internal_cargotype() const {
  return cargotype_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 VesselInfo::cargotype() const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.proto.VesselInfo.cargoType)
  return _internal_cargotype();
}
inline void VesselInfo::_internal_set_cargotype(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000400u;
  cargotype_ = value;
}
inline void VesselInfo::set_cargotype(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_cargotype(value);
  // @@protoc_insertion_point(field_set:com.zhichenhaixin.proto.VesselInfo.cargoType)
}

// required string country = 8;
inline bool VesselInfo::_internal_has_country() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool VesselInfo::has_country() const {
  return _internal_has_country();
}
inline void VesselInfo::clear_country() {
  country_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000010u;
}
inline const std::string& VesselInfo::country() const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.proto.VesselInfo.country)
  return _internal_country();
}
inline void VesselInfo::set_country(const std::string& value) {
  _internal_set_country(value);
  // @@protoc_insertion_point(field_set:com.zhichenhaixin.proto.VesselInfo.country)
}
inline std::string* VesselInfo::mutable_country() {
  // @@protoc_insertion_point(field_mutable:com.zhichenhaixin.proto.VesselInfo.country)
  return _internal_mutable_country();
}
inline const std::string& VesselInfo::_internal_country() const {
  return country_.Get();
}
inline void VesselInfo::_internal_set_country(const std::string& value) {
  _has_bits_[0] |= 0x00000010u;
  country_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void VesselInfo::set_country(std::string&& value) {
  _has_bits_[0] |= 0x00000010u;
  country_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:com.zhichenhaixin.proto.VesselInfo.country)
}
inline void VesselInfo::set_country(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000010u;
  country_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:com.zhichenhaixin.proto.VesselInfo.country)
}
inline void VesselInfo::set_country(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000010u;
  country_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:com.zhichenhaixin.proto.VesselInfo.country)
}
inline std::string* VesselInfo::_internal_mutable_country() {
  _has_bits_[0] |= 0x00000010u;
  return country_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* VesselInfo::release_country() {
  // @@protoc_insertion_point(field_release:com.zhichenhaixin.proto.VesselInfo.country)
  if (!_internal_has_country()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000010u;
  return country_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void VesselInfo::set_allocated_country(std::string* country) {
  if (country != nullptr) {
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  country_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), country,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:com.zhichenhaixin.proto.VesselInfo.country)
}
inline std::string* VesselInfo::unsafe_arena_release_country() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.zhichenhaixin.proto.VesselInfo.country)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000010u;
  return country_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void VesselInfo::unsafe_arena_set_allocated_country(
    std::string* country) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (country != nullptr) {
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  country_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      country, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.zhichenhaixin.proto.VesselInfo.country)
}

// required string vendorID = 9;
inline bool VesselInfo::_internal_has_vendorid() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool VesselInfo::has_vendorid() const {
  return _internal_has_vendorid();
}
inline void VesselInfo::clear_vendorid() {
  vendorid_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000020u;
}
inline const std::string& VesselInfo::vendorid() const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.proto.VesselInfo.vendorID)
  return _internal_vendorid();
}
inline void VesselInfo::set_vendorid(const std::string& value) {
  _internal_set_vendorid(value);
  // @@protoc_insertion_point(field_set:com.zhichenhaixin.proto.VesselInfo.vendorID)
}
inline std::string* VesselInfo::mutable_vendorid() {
  // @@protoc_insertion_point(field_mutable:com.zhichenhaixin.proto.VesselInfo.vendorID)
  return _internal_mutable_vendorid();
}
inline const std::string& VesselInfo::_internal_vendorid() const {
  return vendorid_.Get();
}
inline void VesselInfo::_internal_set_vendorid(const std::string& value) {
  _has_bits_[0] |= 0x00000020u;
  vendorid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void VesselInfo::set_vendorid(std::string&& value) {
  _has_bits_[0] |= 0x00000020u;
  vendorid_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:com.zhichenhaixin.proto.VesselInfo.vendorID)
}
inline void VesselInfo::set_vendorid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000020u;
  vendorid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:com.zhichenhaixin.proto.VesselInfo.vendorID)
}
inline void VesselInfo::set_vendorid(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000020u;
  vendorid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:com.zhichenhaixin.proto.VesselInfo.vendorID)
}
inline std::string* VesselInfo::_internal_mutable_vendorid() {
  _has_bits_[0] |= 0x00000020u;
  return vendorid_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* VesselInfo::release_vendorid() {
  // @@protoc_insertion_point(field_release:com.zhichenhaixin.proto.VesselInfo.vendorID)
  if (!_internal_has_vendorid()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000020u;
  return vendorid_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void VesselInfo::set_allocated_vendorid(std::string* vendorid) {
  if (vendorid != nullptr) {
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  vendorid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), vendorid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:com.zhichenhaixin.proto.VesselInfo.vendorID)
}
inline std::string* VesselInfo::unsafe_arena_release_vendorid() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.zhichenhaixin.proto.VesselInfo.vendorID)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000020u;
  return vendorid_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void VesselInfo::unsafe_arena_set_allocated_vendorid(
    std::string* vendorid) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (vendorid != nullptr) {
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  vendorid_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      vendorid, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.zhichenhaixin.proto.VesselInfo.vendorID)
}

// required int32 shipLength = 10;
inline bool VesselInfo::_internal_has_shiplength() const {
  bool value = (_has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline bool VesselInfo::has_shiplength() const {
  return _internal_has_shiplength();
}
inline void VesselInfo::clear_shiplength() {
  shiplength_ = 0;
  _has_bits_[0] &= ~0x00000800u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 VesselInfo::_internal_shiplength() const {
  return shiplength_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 VesselInfo::shiplength() const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.proto.VesselInfo.shipLength)
  return _internal_shiplength();
}
inline void VesselInfo::_internal_set_shiplength(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000800u;
  shiplength_ = value;
}
inline void VesselInfo::set_shiplength(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_shiplength(value);
  // @@protoc_insertion_point(field_set:com.zhichenhaixin.proto.VesselInfo.shipLength)
}

// required int32 shipWidth = 11;
inline bool VesselInfo::_internal_has_shipwidth() const {
  bool value = (_has_bits_[0] & 0x00001000u) != 0;
  return value;
}
inline bool VesselInfo::has_shipwidth() const {
  return _internal_has_shipwidth();
}
inline void VesselInfo::clear_shipwidth() {
  shipwidth_ = 0;
  _has_bits_[0] &= ~0x00001000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 VesselInfo::_internal_shipwidth() const {
  return shipwidth_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 VesselInfo::shipwidth() const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.proto.VesselInfo.shipWidth)
  return _internal_shipwidth();
}
inline void VesselInfo::_internal_set_shipwidth(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00001000u;
  shipwidth_ = value;
}
inline void VesselInfo::set_shipwidth(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_shipwidth(value);
  // @@protoc_insertion_point(field_set:com.zhichenhaixin.proto.VesselInfo.shipWidth)
}

// required int32 toBow = 12;
inline bool VesselInfo::_internal_has_tobow() const {
  bool value = (_has_bits_[0] & 0x00002000u) != 0;
  return value;
}
inline bool VesselInfo::has_tobow() const {
  return _internal_has_tobow();
}
inline void VesselInfo::clear_tobow() {
  tobow_ = 0;
  _has_bits_[0] &= ~0x00002000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 VesselInfo::_internal_tobow() const {
  return tobow_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 VesselInfo::tobow() const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.proto.VesselInfo.toBow)
  return _internal_tobow();
}
inline void VesselInfo::_internal_set_tobow(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00002000u;
  tobow_ = value;
}
inline void VesselInfo::set_tobow(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_tobow(value);
  // @@protoc_insertion_point(field_set:com.zhichenhaixin.proto.VesselInfo.toBow)
}

// required int32 toStern = 13;
inline bool VesselInfo::_internal_has_tostern() const {
  bool value = (_has_bits_[0] & 0x00004000u) != 0;
  return value;
}
inline bool VesselInfo::has_tostern() const {
  return _internal_has_tostern();
}
inline void VesselInfo::clear_tostern() {
  tostern_ = 0;
  _has_bits_[0] &= ~0x00004000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 VesselInfo::_internal_tostern() const {
  return tostern_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 VesselInfo::tostern() const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.proto.VesselInfo.toStern)
  return _internal_tostern();
}
inline void VesselInfo::_internal_set_tostern(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00004000u;
  tostern_ = value;
}
inline void VesselInfo::set_tostern(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_tostern(value);
  // @@protoc_insertion_point(field_set:com.zhichenhaixin.proto.VesselInfo.toStern)
}

// required int32 toPort = 14;
inline bool VesselInfo::_internal_has_toport() const {
  bool value = (_has_bits_[0] & 0x00008000u) != 0;
  return value;
}
inline bool VesselInfo::has_toport() const {
  return _internal_has_toport();
}
inline void VesselInfo::clear_toport() {
  toport_ = 0;
  _has_bits_[0] &= ~0x00008000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 VesselInfo::_internal_toport() const {
  return toport_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 VesselInfo::toport() const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.proto.VesselInfo.toPort)
  return _internal_toport();
}
inline void VesselInfo::_internal_set_toport(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00008000u;
  toport_ = value;
}
inline void VesselInfo::set_toport(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_toport(value);
  // @@protoc_insertion_point(field_set:com.zhichenhaixin.proto.VesselInfo.toPort)
}

// required int32 toStarboard = 15;
inline bool VesselInfo::_internal_has_tostarboard() const {
  bool value = (_has_bits_[0] & 0x00010000u) != 0;
  return value;
}
inline bool VesselInfo::has_tostarboard() const {
  return _internal_has_tostarboard();
}
inline void VesselInfo::clear_tostarboard() {
  tostarboard_ = 0;
  _has_bits_[0] &= ~0x00010000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 VesselInfo::_internal_tostarboard() const {
  return tostarboard_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 VesselInfo::tostarboard() const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.proto.VesselInfo.toStarboard)
  return _internal_tostarboard();
}
inline void VesselInfo::_internal_set_tostarboard(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00010000u;
  tostarboard_ = value;
}
inline void VesselInfo::set_tostarboard(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_tostarboard(value);
  // @@protoc_insertion_point(field_set:com.zhichenhaixin.proto.VesselInfo.toStarboard)
}

// required .com.zhichenhaixin.proto.EPFD fixType = 16;
inline bool VesselInfo::_internal_has_fixtype() const {
  bool value = (_has_bits_[0] & 0x00020000u) != 0;
  return value;
}
inline bool VesselInfo::has_fixtype() const {
  return _internal_has_fixtype();
}
inline void VesselInfo::clear_fixtype() {
  fixtype_ = 0;
  _has_bits_[0] &= ~0x00020000u;
}
inline ::com::zhichenhaixin::proto::EPFD VesselInfo::_internal_fixtype() const {
  return static_cast< ::com::zhichenhaixin::proto::EPFD >(fixtype_);
}
inline ::com::zhichenhaixin::proto::EPFD VesselInfo::fixtype() const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.proto.VesselInfo.fixType)
  return _internal_fixtype();
}
inline void VesselInfo::_internal_set_fixtype(::com::zhichenhaixin::proto::EPFD value) {
  assert(::com::zhichenhaixin::proto::EPFD_IsValid(value));
  _has_bits_[0] |= 0x00020000u;
  fixtype_ = value;
}
inline void VesselInfo::set_fixtype(::com::zhichenhaixin::proto::EPFD value) {
  _internal_set_fixtype(value);
  // @@protoc_insertion_point(field_set:com.zhichenhaixin.proto.VesselInfo.fixType)
}

// required string eta = 17;
inline bool VesselInfo::_internal_has_eta() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool VesselInfo::has_eta() const {
  return _internal_has_eta();
}
inline void VesselInfo::clear_eta() {
  eta_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000040u;
}
inline const std::string& VesselInfo::eta() const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.proto.VesselInfo.eta)
  return _internal_eta();
}
inline void VesselInfo::set_eta(const std::string& value) {
  _internal_set_eta(value);
  // @@protoc_insertion_point(field_set:com.zhichenhaixin.proto.VesselInfo.eta)
}
inline std::string* VesselInfo::mutable_eta() {
  // @@protoc_insertion_point(field_mutable:com.zhichenhaixin.proto.VesselInfo.eta)
  return _internal_mutable_eta();
}
inline const std::string& VesselInfo::_internal_eta() const {
  return eta_.Get();
}
inline void VesselInfo::_internal_set_eta(const std::string& value) {
  _has_bits_[0] |= 0x00000040u;
  eta_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void VesselInfo::set_eta(std::string&& value) {
  _has_bits_[0] |= 0x00000040u;
  eta_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:com.zhichenhaixin.proto.VesselInfo.eta)
}
inline void VesselInfo::set_eta(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000040u;
  eta_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:com.zhichenhaixin.proto.VesselInfo.eta)
}
inline void VesselInfo::set_eta(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000040u;
  eta_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:com.zhichenhaixin.proto.VesselInfo.eta)
}
inline std::string* VesselInfo::_internal_mutable_eta() {
  _has_bits_[0] |= 0x00000040u;
  return eta_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* VesselInfo::release_eta() {
  // @@protoc_insertion_point(field_release:com.zhichenhaixin.proto.VesselInfo.eta)
  if (!_internal_has_eta()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000040u;
  return eta_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void VesselInfo::set_allocated_eta(std::string* eta) {
  if (eta != nullptr) {
    _has_bits_[0] |= 0x00000040u;
  } else {
    _has_bits_[0] &= ~0x00000040u;
  }
  eta_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), eta,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:com.zhichenhaixin.proto.VesselInfo.eta)
}
inline std::string* VesselInfo::unsafe_arena_release_eta() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.zhichenhaixin.proto.VesselInfo.eta)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000040u;
  return eta_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void VesselInfo::unsafe_arena_set_allocated_eta(
    std::string* eta) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (eta != nullptr) {
    _has_bits_[0] |= 0x00000040u;
  } else {
    _has_bits_[0] &= ~0x00000040u;
  }
  eta_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      eta, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.zhichenhaixin.proto.VesselInfo.eta)
}

// required float draught = 18;
inline bool VesselInfo::_internal_has_draught() const {
  bool value = (_has_bits_[0] & 0x00080000u) != 0;
  return value;
}
inline bool VesselInfo::has_draught() const {
  return _internal_has_draught();
}
inline void VesselInfo::clear_draught() {
  draught_ = 0;
  _has_bits_[0] &= ~0x00080000u;
}
inline float VesselInfo::_internal_draught() const {
  return draught_;
}
inline float VesselInfo::draught() const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.proto.VesselInfo.draught)
  return _internal_draught();
}
inline void VesselInfo::_internal_set_draught(float value) {
  _has_bits_[0] |= 0x00080000u;
  draught_ = value;
}
inline void VesselInfo::set_draught(float value) {
  _internal_set_draught(value);
  // @@protoc_insertion_point(field_set:com.zhichenhaixin.proto.VesselInfo.draught)
}

// required string dest = 19;
inline bool VesselInfo::_internal_has_dest() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool VesselInfo::has_dest() const {
  return _internal_has_dest();
}
inline void VesselInfo::clear_dest() {
  dest_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000080u;
}
inline const std::string& VesselInfo::dest() const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.proto.VesselInfo.dest)
  return _internal_dest();
}
inline void VesselInfo::set_dest(const std::string& value) {
  _internal_set_dest(value);
  // @@protoc_insertion_point(field_set:com.zhichenhaixin.proto.VesselInfo.dest)
}
inline std::string* VesselInfo::mutable_dest() {
  // @@protoc_insertion_point(field_mutable:com.zhichenhaixin.proto.VesselInfo.dest)
  return _internal_mutable_dest();
}
inline const std::string& VesselInfo::_internal_dest() const {
  return dest_.Get();
}
inline void VesselInfo::_internal_set_dest(const std::string& value) {
  _has_bits_[0] |= 0x00000080u;
  dest_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void VesselInfo::set_dest(std::string&& value) {
  _has_bits_[0] |= 0x00000080u;
  dest_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:com.zhichenhaixin.proto.VesselInfo.dest)
}
inline void VesselInfo::set_dest(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000080u;
  dest_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:com.zhichenhaixin.proto.VesselInfo.dest)
}
inline void VesselInfo::set_dest(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000080u;
  dest_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:com.zhichenhaixin.proto.VesselInfo.dest)
}
inline std::string* VesselInfo::_internal_mutable_dest() {
  _has_bits_[0] |= 0x00000080u;
  return dest_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* VesselInfo::release_dest() {
  // @@protoc_insertion_point(field_release:com.zhichenhaixin.proto.VesselInfo.dest)
  if (!_internal_has_dest()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000080u;
  return dest_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void VesselInfo::set_allocated_dest(std::string* dest) {
  if (dest != nullptr) {
    _has_bits_[0] |= 0x00000080u;
  } else {
    _has_bits_[0] &= ~0x00000080u;
  }
  dest_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), dest,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:com.zhichenhaixin.proto.VesselInfo.dest)
}
inline std::string* VesselInfo::unsafe_arena_release_dest() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.zhichenhaixin.proto.VesselInfo.dest)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000080u;
  return dest_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void VesselInfo::unsafe_arena_set_allocated_dest(
    std::string* dest) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (dest != nullptr) {
    _has_bits_[0] |= 0x00000080u;
  } else {
    _has_bits_[0] &= ~0x00000080u;
  }
  dest_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      dest, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.zhichenhaixin.proto.VesselInfo.dest)
}

// required uint64 UTC = 20;
inline bool VesselInfo::_internal_has_utc() const {
  bool value = (_has_bits_[0] & 0x00040000u) != 0;
  return value;
}
inline bool VesselInfo::has_utc() const {
  return _internal_has_utc();
}
inline void VesselInfo::clear_utc() {
  utc_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00040000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 VesselInfo::_internal_utc() const {
  return utc_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 VesselInfo::utc() const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.proto.VesselInfo.UTC)
  return _internal_utc();
}
inline void VesselInfo::_internal_set_utc(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00040000u;
  utc_ = value;
}
inline void VesselInfo::set_utc(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_utc(value);
  // @@protoc_insertion_point(field_set:com.zhichenhaixin.proto.VesselInfo.UTC)
}

// -------------------------------------------------------------------

// VesselTrack

// required string id = 1;
inline bool VesselTrack::_internal_has_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool VesselTrack::has_id() const {
  return _internal_has_id();
}
inline void VesselTrack::clear_id() {
  id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& VesselTrack::id() const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.proto.VesselTrack.id)
  return _internal_id();
}
inline void VesselTrack::set_id(const std::string& value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:com.zhichenhaixin.proto.VesselTrack.id)
}
inline std::string* VesselTrack::mutable_id() {
  // @@protoc_insertion_point(field_mutable:com.zhichenhaixin.proto.VesselTrack.id)
  return _internal_mutable_id();
}
inline const std::string& VesselTrack::_internal_id() const {
  return id_.Get();
}
inline void VesselTrack::_internal_set_id(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void VesselTrack::set_id(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:com.zhichenhaixin.proto.VesselTrack.id)
}
inline void VesselTrack::set_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:com.zhichenhaixin.proto.VesselTrack.id)
}
inline void VesselTrack::set_id(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:com.zhichenhaixin.proto.VesselTrack.id)
}
inline std::string* VesselTrack::_internal_mutable_id() {
  _has_bits_[0] |= 0x00000001u;
  return id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* VesselTrack::release_id() {
  // @@protoc_insertion_point(field_release:com.zhichenhaixin.proto.VesselTrack.id)
  if (!_internal_has_id()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return id_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void VesselTrack::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:com.zhichenhaixin.proto.VesselTrack.id)
}
inline std::string* VesselTrack::unsafe_arena_release_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.zhichenhaixin.proto.VesselTrack.id)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000001u;
  return id_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void VesselTrack::unsafe_arena_set_allocated_id(
    std::string* id) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (id != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  id_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      id, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.zhichenhaixin.proto.VesselTrack.id)
}

// required int32 mmsi = 2;
inline bool VesselTrack::_internal_has_mmsi() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool VesselTrack::has_mmsi() const {
  return _internal_has_mmsi();
}
inline void VesselTrack::clear_mmsi() {
  mmsi_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 VesselTrack::_internal_mmsi() const {
  return mmsi_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 VesselTrack::mmsi() const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.proto.VesselTrack.mmsi)
  return _internal_mmsi();
}
inline void VesselTrack::_internal_set_mmsi(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000004u;
  mmsi_ = value;
}
inline void VesselTrack::set_mmsi(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_mmsi(value);
  // @@protoc_insertion_point(field_set:com.zhichenhaixin.proto.VesselTrack.mmsi)
}

// required string shiptype = 3;
inline bool VesselTrack::_internal_has_shiptype() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool VesselTrack::has_shiptype() const {
  return _internal_has_shiptype();
}
inline void VesselTrack::clear_shiptype() {
  shiptype_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& VesselTrack::shiptype() const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.proto.VesselTrack.shiptype)
  return _internal_shiptype();
}
inline void VesselTrack::set_shiptype(const std::string& value) {
  _internal_set_shiptype(value);
  // @@protoc_insertion_point(field_set:com.zhichenhaixin.proto.VesselTrack.shiptype)
}
inline std::string* VesselTrack::mutable_shiptype() {
  // @@protoc_insertion_point(field_mutable:com.zhichenhaixin.proto.VesselTrack.shiptype)
  return _internal_mutable_shiptype();
}
inline const std::string& VesselTrack::_internal_shiptype() const {
  return shiptype_.Get();
}
inline void VesselTrack::_internal_set_shiptype(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  shiptype_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void VesselTrack::set_shiptype(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  shiptype_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:com.zhichenhaixin.proto.VesselTrack.shiptype)
}
inline void VesselTrack::set_shiptype(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  shiptype_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:com.zhichenhaixin.proto.VesselTrack.shiptype)
}
inline void VesselTrack::set_shiptype(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000002u;
  shiptype_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:com.zhichenhaixin.proto.VesselTrack.shiptype)
}
inline std::string* VesselTrack::_internal_mutable_shiptype() {
  _has_bits_[0] |= 0x00000002u;
  return shiptype_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* VesselTrack::release_shiptype() {
  // @@protoc_insertion_point(field_release:com.zhichenhaixin.proto.VesselTrack.shiptype)
  if (!_internal_has_shiptype()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return shiptype_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void VesselTrack::set_allocated_shiptype(std::string* shiptype) {
  if (shiptype != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  shiptype_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), shiptype,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:com.zhichenhaixin.proto.VesselTrack.shiptype)
}
inline std::string* VesselTrack::unsafe_arena_release_shiptype() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.zhichenhaixin.proto.VesselTrack.shiptype)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000002u;
  return shiptype_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void VesselTrack::unsafe_arena_set_allocated_shiptype(
    std::string* shiptype) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (shiptype != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  shiptype_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      shiptype, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.zhichenhaixin.proto.VesselTrack.shiptype)
}

// required .com.zhichenhaixin.proto.NAVI_STATUS navStatus = 4;
inline bool VesselTrack::_internal_has_navstatus() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool VesselTrack::has_navstatus() const {
  return _internal_has_navstatus();
}
inline void VesselTrack::clear_navstatus() {
  navstatus_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::com::zhichenhaixin::proto::NAVI_STATUS VesselTrack::_internal_navstatus() const {
  return static_cast< ::com::zhichenhaixin::proto::NAVI_STATUS >(navstatus_);
}
inline ::com::zhichenhaixin::proto::NAVI_STATUS VesselTrack::navstatus() const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.proto.VesselTrack.navStatus)
  return _internal_navstatus();
}
inline void VesselTrack::_internal_set_navstatus(::com::zhichenhaixin::proto::NAVI_STATUS value) {
  assert(::com::zhichenhaixin::proto::NAVI_STATUS_IsValid(value));
  _has_bits_[0] |= 0x00000008u;
  navstatus_ = value;
}
inline void VesselTrack::set_navstatus(::com::zhichenhaixin::proto::NAVI_STATUS value) {
  _internal_set_navstatus(value);
  // @@protoc_insertion_point(field_set:com.zhichenhaixin.proto.VesselTrack.navStatus)
}

// required float rot = 5;
inline bool VesselTrack::_internal_has_rot() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool VesselTrack::has_rot() const {
  return _internal_has_rot();
}
inline void VesselTrack::clear_rot() {
  rot_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline float VesselTrack::_internal_rot() const {
  return rot_;
}
inline float VesselTrack::rot() const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.proto.VesselTrack.rot)
  return _internal_rot();
}
inline void VesselTrack::_internal_set_rot(float value) {
  _has_bits_[0] |= 0x00000010u;
  rot_ = value;
}
inline void VesselTrack::set_rot(float value) {
  _internal_set_rot(value);
  // @@protoc_insertion_point(field_set:com.zhichenhaixin.proto.VesselTrack.rot)
}

// required float sog = 6;
inline bool VesselTrack::_internal_has_sog() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool VesselTrack::has_sog() const {
  return _internal_has_sog();
}
inline void VesselTrack::clear_sog() {
  sog_ = 0;
  _has_bits_[0] &= ~0x00000020u;
}
inline float VesselTrack::_internal_sog() const {
  return sog_;
}
inline float VesselTrack::sog() const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.proto.VesselTrack.sog)
  return _internal_sog();
}
inline void VesselTrack::_internal_set_sog(float value) {
  _has_bits_[0] |= 0x00000020u;
  sog_ = value;
}
inline void VesselTrack::set_sog(float value) {
  _internal_set_sog(value);
  // @@protoc_insertion_point(field_set:com.zhichenhaixin.proto.VesselTrack.sog)
}

// required double lon = 7;
inline bool VesselTrack::_internal_has_lon() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool VesselTrack::has_lon() const {
  return _internal_has_lon();
}
inline void VesselTrack::clear_lon() {
  lon_ = 0;
  _has_bits_[0] &= ~0x00000040u;
}
inline double VesselTrack::_internal_lon() const {
  return lon_;
}
inline double VesselTrack::lon() const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.proto.VesselTrack.lon)
  return _internal_lon();
}
inline void VesselTrack::_internal_set_lon(double value) {
  _has_bits_[0] |= 0x00000040u;
  lon_ = value;
}
inline void VesselTrack::set_lon(double value) {
  _internal_set_lon(value);
  // @@protoc_insertion_point(field_set:com.zhichenhaixin.proto.VesselTrack.lon)
}

// required double lat = 8;
inline bool VesselTrack::_internal_has_lat() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool VesselTrack::has_lat() const {
  return _internal_has_lat();
}
inline void VesselTrack::clear_lat() {
  lat_ = 0;
  _has_bits_[0] &= ~0x00000080u;
}
inline double VesselTrack::_internal_lat() const {
  return lat_;
}
inline double VesselTrack::lat() const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.proto.VesselTrack.lat)
  return _internal_lat();
}
inline void VesselTrack::_internal_set_lat(double value) {
  _has_bits_[0] |= 0x00000080u;
  lat_ = value;
}
inline void VesselTrack::set_lat(double value) {
  _internal_set_lat(value);
  // @@protoc_insertion_point(field_set:com.zhichenhaixin.proto.VesselTrack.lat)
}

// required float cog = 9;
inline bool VesselTrack::_internal_has_cog() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool VesselTrack::has_cog() const {
  return _internal_has_cog();
}
inline void VesselTrack::clear_cog() {
  cog_ = 0;
  _has_bits_[0] &= ~0x00000100u;
}
inline float VesselTrack::_internal_cog() const {
  return cog_;
}
inline float VesselTrack::cog() const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.proto.VesselTrack.cog)
  return _internal_cog();
}
inline void VesselTrack::_internal_set_cog(float value) {
  _has_bits_[0] |= 0x00000100u;
  cog_ = value;
}
inline void VesselTrack::set_cog(float value) {
  _internal_set_cog(value);
  // @@protoc_insertion_point(field_set:com.zhichenhaixin.proto.VesselTrack.cog)
}

// required float heading = 10;
inline bool VesselTrack::_internal_has_heading() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool VesselTrack::has_heading() const {
  return _internal_has_heading();
}
inline void VesselTrack::clear_heading() {
  heading_ = 0;
  _has_bits_[0] &= ~0x00000200u;
}
inline float VesselTrack::_internal_heading() const {
  return heading_;
}
inline float VesselTrack::heading() const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.proto.VesselTrack.heading)
  return _internal_heading();
}
inline void VesselTrack::_internal_set_heading(float value) {
  _has_bits_[0] |= 0x00000200u;
  heading_ = value;
}
inline void VesselTrack::set_heading(float value) {
  _internal_set_heading(value);
  // @@protoc_insertion_point(field_set:com.zhichenhaixin.proto.VesselTrack.heading)
}

// required uint64 UTC = 11;
inline bool VesselTrack::_internal_has_utc() const {
  bool value = (_has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool VesselTrack::has_utc() const {
  return _internal_has_utc();
}
inline void VesselTrack::clear_utc() {
  utc_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000400u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 VesselTrack::_internal_utc() const {
  return utc_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 VesselTrack::utc() const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.proto.VesselTrack.UTC)
  return _internal_utc();
}
inline void VesselTrack::_internal_set_utc(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000400u;
  utc_ = value;
}
inline void VesselTrack::set_utc(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_utc(value);
  // @@protoc_insertion_point(field_set:com.zhichenhaixin.proto.VesselTrack.UTC)
}

// optional int32 type = 12;
inline bool VesselTrack::_internal_has_type() const {
  bool value = (_has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline bool VesselTrack::has_type() const {
  return _internal_has_type();
}
inline void VesselTrack::clear_type() {
  type_ = 0;
  _has_bits_[0] &= ~0x00000800u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 VesselTrack::_internal_type() const {
  return type_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 VesselTrack::type() const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.proto.VesselTrack.type)
  return _internal_type();
}
inline void VesselTrack::_internal_set_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000800u;
  type_ = value;
}
inline void VesselTrack::set_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:com.zhichenhaixin.proto.VesselTrack.type)
}

// optional uint32 trackNumber = 13;
inline bool VesselTrack::_internal_has_tracknumber() const {
  bool value = (_has_bits_[0] & 0x00001000u) != 0;
  return value;
}
inline bool VesselTrack::has_tracknumber() const {
  return _internal_has_tracknumber();
}
inline void VesselTrack::clear_tracknumber() {
  tracknumber_ = 0u;
  _has_bits_[0] &= ~0x00001000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 VesselTrack::_internal_tracknumber() const {
  return tracknumber_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 VesselTrack::tracknumber() const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.proto.VesselTrack.trackNumber)
  return _internal_tracknumber();
}
inline void VesselTrack::_internal_set_tracknumber(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00001000u;
  tracknumber_ = value;
}
inline void VesselTrack::set_tracknumber(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_tracknumber(value);
  // @@protoc_insertion_point(field_set:com.zhichenhaixin.proto.VesselTrack.trackNumber)
}

// -------------------------------------------------------------------

// BaseStationReport

// required int32 id = 1;
inline bool BaseStationReport::_internal_has_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool BaseStationReport::has_id() const {
  return _internal_has_id();
}
inline void BaseStationReport::clear_id() {
  id_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BaseStationReport::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BaseStationReport::id() const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.proto.BaseStationReport.id)
  return _internal_id();
}
inline void BaseStationReport::_internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000001u;
  id_ = value;
}
inline void BaseStationReport::set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:com.zhichenhaixin.proto.BaseStationReport.id)
}

// required int32 repeatIndicator = 2;
inline bool BaseStationReport::_internal_has_repeatindicator() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool BaseStationReport::has_repeatindicator() const {
  return _internal_has_repeatindicator();
}
inline void BaseStationReport::clear_repeatindicator() {
  repeatindicator_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BaseStationReport::_internal_repeatindicator() const {
  return repeatindicator_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BaseStationReport::repeatindicator() const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.proto.BaseStationReport.repeatIndicator)
  return _internal_repeatindicator();
}
inline void BaseStationReport::_internal_set_repeatindicator(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  repeatindicator_ = value;
}
inline void BaseStationReport::set_repeatindicator(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_repeatindicator(value);
  // @@protoc_insertion_point(field_set:com.zhichenhaixin.proto.BaseStationReport.repeatIndicator)
}

// required int32 mmsi = 3;
inline bool BaseStationReport::_internal_has_mmsi() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool BaseStationReport::has_mmsi() const {
  return _internal_has_mmsi();
}
inline void BaseStationReport::clear_mmsi() {
  mmsi_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BaseStationReport::_internal_mmsi() const {
  return mmsi_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BaseStationReport::mmsi() const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.proto.BaseStationReport.mmsi)
  return _internal_mmsi();
}
inline void BaseStationReport::_internal_set_mmsi(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000004u;
  mmsi_ = value;
}
inline void BaseStationReport::set_mmsi(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_mmsi(value);
  // @@protoc_insertion_point(field_set:com.zhichenhaixin.proto.BaseStationReport.mmsi)
}

// required int32 year = 4;
inline bool BaseStationReport::_internal_has_year() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool BaseStationReport::has_year() const {
  return _internal_has_year();
}
inline void BaseStationReport::clear_year() {
  year_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BaseStationReport::_internal_year() const {
  return year_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BaseStationReport::year() const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.proto.BaseStationReport.year)
  return _internal_year();
}
inline void BaseStationReport::_internal_set_year(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000008u;
  year_ = value;
}
inline void BaseStationReport::set_year(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_year(value);
  // @@protoc_insertion_point(field_set:com.zhichenhaixin.proto.BaseStationReport.year)
}

// required int32 month = 5;
inline bool BaseStationReport::_internal_has_month() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool BaseStationReport::has_month() const {
  return _internal_has_month();
}
inline void BaseStationReport::clear_month() {
  month_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BaseStationReport::_internal_month() const {
  return month_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BaseStationReport::month() const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.proto.BaseStationReport.month)
  return _internal_month();
}
inline void BaseStationReport::_internal_set_month(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000010u;
  month_ = value;
}
inline void BaseStationReport::set_month(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_month(value);
  // @@protoc_insertion_point(field_set:com.zhichenhaixin.proto.BaseStationReport.month)
}

// required int32 day = 6;
inline bool BaseStationReport::_internal_has_day() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool BaseStationReport::has_day() const {
  return _internal_has_day();
}
inline void BaseStationReport::clear_day() {
  day_ = 0;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BaseStationReport::_internal_day() const {
  return day_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BaseStationReport::day() const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.proto.BaseStationReport.day)
  return _internal_day();
}
inline void BaseStationReport::_internal_set_day(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000020u;
  day_ = value;
}
inline void BaseStationReport::set_day(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_day(value);
  // @@protoc_insertion_point(field_set:com.zhichenhaixin.proto.BaseStationReport.day)
}

// required int32 hour = 7;
inline bool BaseStationReport::_internal_has_hour() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool BaseStationReport::has_hour() const {
  return _internal_has_hour();
}
inline void BaseStationReport::clear_hour() {
  hour_ = 0;
  _has_bits_[0] &= ~0x00000040u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BaseStationReport::_internal_hour() const {
  return hour_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BaseStationReport::hour() const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.proto.BaseStationReport.hour)
  return _internal_hour();
}
inline void BaseStationReport::_internal_set_hour(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000040u;
  hour_ = value;
}
inline void BaseStationReport::set_hour(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_hour(value);
  // @@protoc_insertion_point(field_set:com.zhichenhaixin.proto.BaseStationReport.hour)
}

// required int32 minute = 8;
inline bool BaseStationReport::_internal_has_minute() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool BaseStationReport::has_minute() const {
  return _internal_has_minute();
}
inline void BaseStationReport::clear_minute() {
  minute_ = 0;
  _has_bits_[0] &= ~0x00000080u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BaseStationReport::_internal_minute() const {
  return minute_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BaseStationReport::minute() const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.proto.BaseStationReport.minute)
  return _internal_minute();
}
inline void BaseStationReport::_internal_set_minute(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000080u;
  minute_ = value;
}
inline void BaseStationReport::set_minute(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_minute(value);
  // @@protoc_insertion_point(field_set:com.zhichenhaixin.proto.BaseStationReport.minute)
}

// required int32 second = 9;
inline bool BaseStationReport::_internal_has_second() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool BaseStationReport::has_second() const {
  return _internal_has_second();
}
inline void BaseStationReport::clear_second() {
  second_ = 0;
  _has_bits_[0] &= ~0x00000100u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BaseStationReport::_internal_second() const {
  return second_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BaseStationReport::second() const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.proto.BaseStationReport.second)
  return _internal_second();
}
inline void BaseStationReport::_internal_set_second(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000100u;
  second_ = value;
}
inline void BaseStationReport::set_second(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_second(value);
  // @@protoc_insertion_point(field_set:com.zhichenhaixin.proto.BaseStationReport.second)
}

// required int32 positionAccuracy = 10;
inline bool BaseStationReport::_internal_has_positionaccuracy() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool BaseStationReport::has_positionaccuracy() const {
  return _internal_has_positionaccuracy();
}
inline void BaseStationReport::clear_positionaccuracy() {
  positionaccuracy_ = 0;
  _has_bits_[0] &= ~0x00000200u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BaseStationReport::_internal_positionaccuracy() const {
  return positionaccuracy_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BaseStationReport::positionaccuracy() const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.proto.BaseStationReport.positionAccuracy)
  return _internal_positionaccuracy();
}
inline void BaseStationReport::_internal_set_positionaccuracy(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000200u;
  positionaccuracy_ = value;
}
inline void BaseStationReport::set_positionaccuracy(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_positionaccuracy(value);
  // @@protoc_insertion_point(field_set:com.zhichenhaixin.proto.BaseStationReport.positionAccuracy)
}

// required double lon = 11;
inline bool BaseStationReport::_internal_has_lon() const {
  bool value = (_has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool BaseStationReport::has_lon() const {
  return _internal_has_lon();
}
inline void BaseStationReport::clear_lon() {
  lon_ = 0;
  _has_bits_[0] &= ~0x00000400u;
}
inline double BaseStationReport::_internal_lon() const {
  return lon_;
}
inline double BaseStationReport::lon() const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.proto.BaseStationReport.lon)
  return _internal_lon();
}
inline void BaseStationReport::_internal_set_lon(double value) {
  _has_bits_[0] |= 0x00000400u;
  lon_ = value;
}
inline void BaseStationReport::set_lon(double value) {
  _internal_set_lon(value);
  // @@protoc_insertion_point(field_set:com.zhichenhaixin.proto.BaseStationReport.lon)
}

// required double lat = 12;
inline bool BaseStationReport::_internal_has_lat() const {
  bool value = (_has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline bool BaseStationReport::has_lat() const {
  return _internal_has_lat();
}
inline void BaseStationReport::clear_lat() {
  lat_ = 0;
  _has_bits_[0] &= ~0x00000800u;
}
inline double BaseStationReport::_internal_lat() const {
  return lat_;
}
inline double BaseStationReport::lat() const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.proto.BaseStationReport.lat)
  return _internal_lat();
}
inline void BaseStationReport::_internal_set_lat(double value) {
  _has_bits_[0] |= 0x00000800u;
  lat_ = value;
}
inline void BaseStationReport::set_lat(double value) {
  _internal_set_lat(value);
  // @@protoc_insertion_point(field_set:com.zhichenhaixin.proto.BaseStationReport.lat)
}

// required int32 fixType = 13;
inline bool BaseStationReport::_internal_has_fixtype() const {
  bool value = (_has_bits_[0] & 0x00002000u) != 0;
  return value;
}
inline bool BaseStationReport::has_fixtype() const {
  return _internal_has_fixtype();
}
inline void BaseStationReport::clear_fixtype() {
  fixtype_ = 0;
  _has_bits_[0] &= ~0x00002000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BaseStationReport::_internal_fixtype() const {
  return fixtype_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BaseStationReport::fixtype() const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.proto.BaseStationReport.fixType)
  return _internal_fixtype();
}
inline void BaseStationReport::_internal_set_fixtype(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00002000u;
  fixtype_ = value;
}
inline void BaseStationReport::set_fixtype(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_fixtype(value);
  // @@protoc_insertion_point(field_set:com.zhichenhaixin.proto.BaseStationReport.fixType)
}

// required uint64 UTC = 14;
inline bool BaseStationReport::_internal_has_utc() const {
  bool value = (_has_bits_[0] & 0x00001000u) != 0;
  return value;
}
inline bool BaseStationReport::has_utc() const {
  return _internal_has_utc();
}
inline void BaseStationReport::clear_utc() {
  utc_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00001000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 BaseStationReport::_internal_utc() const {
  return utc_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 BaseStationReport::utc() const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.proto.BaseStationReport.UTC)
  return _internal_utc();
}
inline void BaseStationReport::_internal_set_utc(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00001000u;
  utc_ = value;
}
inline void BaseStationReport::set_utc(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_utc(value);
  // @@protoc_insertion_point(field_set:com.zhichenhaixin.proto.BaseStationReport.UTC)
}

// -------------------------------------------------------------------

// AidtoNavigationReport

// required int32 id = 1;
inline bool AidtoNavigationReport::_internal_has_id() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool AidtoNavigationReport::has_id() const {
  return _internal_has_id();
}
inline void AidtoNavigationReport::clear_id() {
  id_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AidtoNavigationReport::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AidtoNavigationReport::id() const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.proto.AidtoNavigationReport.id)
  return _internal_id();
}
inline void AidtoNavigationReport::_internal_set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  id_ = value;
}
inline void AidtoNavigationReport::set_id(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:com.zhichenhaixin.proto.AidtoNavigationReport.id)
}

// required int32 repeatIndicator = 2;
inline bool AidtoNavigationReport::_internal_has_repeatindicator() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool AidtoNavigationReport::has_repeatindicator() const {
  return _internal_has_repeatindicator();
}
inline void AidtoNavigationReport::clear_repeatindicator() {
  repeatindicator_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AidtoNavigationReport::_internal_repeatindicator() const {
  return repeatindicator_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AidtoNavigationReport::repeatindicator() const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.proto.AidtoNavigationReport.repeatIndicator)
  return _internal_repeatindicator();
}
inline void AidtoNavigationReport::_internal_set_repeatindicator(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000004u;
  repeatindicator_ = value;
}
inline void AidtoNavigationReport::set_repeatindicator(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_repeatindicator(value);
  // @@protoc_insertion_point(field_set:com.zhichenhaixin.proto.AidtoNavigationReport.repeatIndicator)
}

// required int32 mmsi = 3;
inline bool AidtoNavigationReport::_internal_has_mmsi() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool AidtoNavigationReport::has_mmsi() const {
  return _internal_has_mmsi();
}
inline void AidtoNavigationReport::clear_mmsi() {
  mmsi_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AidtoNavigationReport::_internal_mmsi() const {
  return mmsi_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AidtoNavigationReport::mmsi() const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.proto.AidtoNavigationReport.mmsi)
  return _internal_mmsi();
}
inline void AidtoNavigationReport::_internal_set_mmsi(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000008u;
  mmsi_ = value;
}
inline void AidtoNavigationReport::set_mmsi(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_mmsi(value);
  // @@protoc_insertion_point(field_set:com.zhichenhaixin.proto.AidtoNavigationReport.mmsi)
}

// required .com.zhichenhaixin.proto.ATON_TYPE atonType = 4;
inline bool AidtoNavigationReport::_internal_has_atontype() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool AidtoNavigationReport::has_atontype() const {
  return _internal_has_atontype();
}
inline void AidtoNavigationReport::clear_atontype() {
  atontype_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::com::zhichenhaixin::proto::ATON_TYPE AidtoNavigationReport::_internal_atontype() const {
  return static_cast< ::com::zhichenhaixin::proto::ATON_TYPE >(atontype_);
}
inline ::com::zhichenhaixin::proto::ATON_TYPE AidtoNavigationReport::atontype() const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.proto.AidtoNavigationReport.atonType)
  return _internal_atontype();
}
inline void AidtoNavigationReport::_internal_set_atontype(::com::zhichenhaixin::proto::ATON_TYPE value) {
  assert(::com::zhichenhaixin::proto::ATON_TYPE_IsValid(value));
  _has_bits_[0] |= 0x00000010u;
  atontype_ = value;
}
inline void AidtoNavigationReport::set_atontype(::com::zhichenhaixin::proto::ATON_TYPE value) {
  _internal_set_atontype(value);
  // @@protoc_insertion_point(field_set:com.zhichenhaixin.proto.AidtoNavigationReport.atonType)
}

// required string name = 5;
inline bool AidtoNavigationReport::_internal_has_name() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool AidtoNavigationReport::has_name() const {
  return _internal_has_name();
}
inline void AidtoNavigationReport::clear_name() {
  name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& AidtoNavigationReport::name() const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.proto.AidtoNavigationReport.name)
  return _internal_name();
}
inline void AidtoNavigationReport::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:com.zhichenhaixin.proto.AidtoNavigationReport.name)
}
inline std::string* AidtoNavigationReport::mutable_name() {
  // @@protoc_insertion_point(field_mutable:com.zhichenhaixin.proto.AidtoNavigationReport.name)
  return _internal_mutable_name();
}
inline const std::string& AidtoNavigationReport::_internal_name() const {
  return name_.Get();
}
inline void AidtoNavigationReport::_internal_set_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void AidtoNavigationReport::set_name(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:com.zhichenhaixin.proto.AidtoNavigationReport.name)
}
inline void AidtoNavigationReport::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:com.zhichenhaixin.proto.AidtoNavigationReport.name)
}
inline void AidtoNavigationReport::set_name(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:com.zhichenhaixin.proto.AidtoNavigationReport.name)
}
inline std::string* AidtoNavigationReport::_internal_mutable_name() {
  _has_bits_[0] |= 0x00000001u;
  return name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* AidtoNavigationReport::release_name() {
  // @@protoc_insertion_point(field_release:com.zhichenhaixin.proto.AidtoNavigationReport.name)
  if (!_internal_has_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return name_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void AidtoNavigationReport::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:com.zhichenhaixin.proto.AidtoNavigationReport.name)
}
inline std::string* AidtoNavigationReport::unsafe_arena_release_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.zhichenhaixin.proto.AidtoNavigationReport.name)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000001u;
  return name_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void AidtoNavigationReport::unsafe_arena_set_allocated_name(
    std::string* name) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  name_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      name, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.zhichenhaixin.proto.AidtoNavigationReport.name)
}

// required int32 positionAccuracy = 6;
inline bool AidtoNavigationReport::_internal_has_positionaccuracy() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool AidtoNavigationReport::has_positionaccuracy() const {
  return _internal_has_positionaccuracy();
}
inline void AidtoNavigationReport::clear_positionaccuracy() {
  positionaccuracy_ = 0;
  _has_bits_[0] &= ~0x00000040u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AidtoNavigationReport::_internal_positionaccuracy() const {
  return positionaccuracy_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AidtoNavigationReport::positionaccuracy() const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.proto.AidtoNavigationReport.positionAccuracy)
  return _internal_positionaccuracy();
}
inline void AidtoNavigationReport::_internal_set_positionaccuracy(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000040u;
  positionaccuracy_ = value;
}
inline void AidtoNavigationReport::set_positionaccuracy(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_positionaccuracy(value);
  // @@protoc_insertion_point(field_set:com.zhichenhaixin.proto.AidtoNavigationReport.positionAccuracy)
}

// required double lon = 7;
inline bool AidtoNavigationReport::_internal_has_lon() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool AidtoNavigationReport::has_lon() const {
  return _internal_has_lon();
}
inline void AidtoNavigationReport::clear_lon() {
  lon_ = 0;
  _has_bits_[0] &= ~0x00000020u;
}
inline double AidtoNavigationReport::_internal_lon() const {
  return lon_;
}
inline double AidtoNavigationReport::lon() const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.proto.AidtoNavigationReport.lon)
  return _internal_lon();
}
inline void AidtoNavigationReport::_internal_set_lon(double value) {
  _has_bits_[0] |= 0x00000020u;
  lon_ = value;
}
inline void AidtoNavigationReport::set_lon(double value) {
  _internal_set_lon(value);
  // @@protoc_insertion_point(field_set:com.zhichenhaixin.proto.AidtoNavigationReport.lon)
}

// required double lat = 8;
inline bool AidtoNavigationReport::_internal_has_lat() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool AidtoNavigationReport::has_lat() const {
  return _internal_has_lat();
}
inline void AidtoNavigationReport::clear_lat() {
  lat_ = 0;
  _has_bits_[0] &= ~0x00000100u;
}
inline double AidtoNavigationReport::_internal_lat() const {
  return lat_;
}
inline double AidtoNavigationReport::lat() const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.proto.AidtoNavigationReport.lat)
  return _internal_lat();
}
inline void AidtoNavigationReport::_internal_set_lat(double value) {
  _has_bits_[0] |= 0x00000100u;
  lat_ = value;
}
inline void AidtoNavigationReport::set_lat(double value) {
  _internal_set_lat(value);
  // @@protoc_insertion_point(field_set:com.zhichenhaixin.proto.AidtoNavigationReport.lat)
}

// required int32 toBow = 9;
inline bool AidtoNavigationReport::_internal_has_tobow() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool AidtoNavigationReport::has_tobow() const {
  return _internal_has_tobow();
}
inline void AidtoNavigationReport::clear_tobow() {
  tobow_ = 0;
  _has_bits_[0] &= ~0x00000080u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AidtoNavigationReport::_internal_tobow() const {
  return tobow_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AidtoNavigationReport::tobow() const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.proto.AidtoNavigationReport.toBow)
  return _internal_tobow();
}
inline void AidtoNavigationReport::_internal_set_tobow(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000080u;
  tobow_ = value;
}
inline void AidtoNavigationReport::set_tobow(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_tobow(value);
  // @@protoc_insertion_point(field_set:com.zhichenhaixin.proto.AidtoNavigationReport.toBow)
}

// required int32 toStern = 10;
inline bool AidtoNavigationReport::_internal_has_tostern() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool AidtoNavigationReport::has_tostern() const {
  return _internal_has_tostern();
}
inline void AidtoNavigationReport::clear_tostern() {
  tostern_ = 0;
  _has_bits_[0] &= ~0x00000200u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AidtoNavigationReport::_internal_tostern() const {
  return tostern_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AidtoNavigationReport::tostern() const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.proto.AidtoNavigationReport.toStern)
  return _internal_tostern();
}
inline void AidtoNavigationReport::_internal_set_tostern(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000200u;
  tostern_ = value;
}
inline void AidtoNavigationReport::set_tostern(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_tostern(value);
  // @@protoc_insertion_point(field_set:com.zhichenhaixin.proto.AidtoNavigationReport.toStern)
}

// required int32 toPort = 11;
inline bool AidtoNavigationReport::_internal_has_toport() const {
  bool value = (_has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool AidtoNavigationReport::has_toport() const {
  return _internal_has_toport();
}
inline void AidtoNavigationReport::clear_toport() {
  toport_ = 0;
  _has_bits_[0] &= ~0x00000400u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AidtoNavigationReport::_internal_toport() const {
  return toport_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AidtoNavigationReport::toport() const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.proto.AidtoNavigationReport.toPort)
  return _internal_toport();
}
inline void AidtoNavigationReport::_internal_set_toport(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000400u;
  toport_ = value;
}
inline void AidtoNavigationReport::set_toport(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_toport(value);
  // @@protoc_insertion_point(field_set:com.zhichenhaixin.proto.AidtoNavigationReport.toPort)
}

// required int32 toStarboard = 12;
inline bool AidtoNavigationReport::_internal_has_tostarboard() const {
  bool value = (_has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline bool AidtoNavigationReport::has_tostarboard() const {
  return _internal_has_tostarboard();
}
inline void AidtoNavigationReport::clear_tostarboard() {
  tostarboard_ = 0;
  _has_bits_[0] &= ~0x00000800u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AidtoNavigationReport::_internal_tostarboard() const {
  return tostarboard_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AidtoNavigationReport::tostarboard() const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.proto.AidtoNavigationReport.toStarboard)
  return _internal_tostarboard();
}
inline void AidtoNavigationReport::_internal_set_tostarboard(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000800u;
  tostarboard_ = value;
}
inline void AidtoNavigationReport::set_tostarboard(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_tostarboard(value);
  // @@protoc_insertion_point(field_set:com.zhichenhaixin.proto.AidtoNavigationReport.toStarboard)
}

// required int32 fixType = 13;
inline bool AidtoNavigationReport::_internal_has_fixtype() const {
  bool value = (_has_bits_[0] & 0x00001000u) != 0;
  return value;
}
inline bool AidtoNavigationReport::has_fixtype() const {
  return _internal_has_fixtype();
}
inline void AidtoNavigationReport::clear_fixtype() {
  fixtype_ = 0;
  _has_bits_[0] &= ~0x00001000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AidtoNavigationReport::_internal_fixtype() const {
  return fixtype_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AidtoNavigationReport::fixtype() const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.proto.AidtoNavigationReport.fixType)
  return _internal_fixtype();
}
inline void AidtoNavigationReport::_internal_set_fixtype(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00001000u;
  fixtype_ = value;
}
inline void AidtoNavigationReport::set_fixtype(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_fixtype(value);
  // @@protoc_insertion_point(field_set:com.zhichenhaixin.proto.AidtoNavigationReport.fixType)
}

// required uint64 UTC = 14;
inline bool AidtoNavigationReport::_internal_has_utc() const {
  bool value = (_has_bits_[0] & 0x00002000u) != 0;
  return value;
}
inline bool AidtoNavigationReport::has_utc() const {
  return _internal_has_utc();
}
inline void AidtoNavigationReport::clear_utc() {
  utc_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00002000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 AidtoNavigationReport::_internal_utc() const {
  return utc_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 AidtoNavigationReport::utc() const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.proto.AidtoNavigationReport.UTC)
  return _internal_utc();
}
inline void AidtoNavigationReport::_internal_set_utc(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00002000u;
  utc_ = value;
}
inline void AidtoNavigationReport::set_utc(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_utc(value);
  // @@protoc_insertion_point(field_set:com.zhichenhaixin.proto.AidtoNavigationReport.UTC)
}

// -------------------------------------------------------------------

// AIS

// required int32 flag = 1;
inline bool AIS::_internal_has_flag() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool AIS::has_flag() const {
  return _internal_has_flag();
}
inline void AIS::clear_flag() {
  flag_ = 0;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AIS::_internal_flag() const {
  return flag_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 AIS::flag() const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.proto.AIS.flag)
  return _internal_flag();
}
inline void AIS::_internal_set_flag(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000020u;
  flag_ = value;
}
inline void AIS::set_flag(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_flag(value);
  // @@protoc_insertion_point(field_set:com.zhichenhaixin.proto.AIS.flag)
}

// required string sourceId = 2;
inline bool AIS::_internal_has_sourceid() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool AIS::has_sourceid() const {
  return _internal_has_sourceid();
}
inline void AIS::clear_sourceid() {
  sourceid_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& AIS::sourceid() const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.proto.AIS.sourceId)
  return _internal_sourceid();
}
inline void AIS::set_sourceid(const std::string& value) {
  _internal_set_sourceid(value);
  // @@protoc_insertion_point(field_set:com.zhichenhaixin.proto.AIS.sourceId)
}
inline std::string* AIS::mutable_sourceid() {
  // @@protoc_insertion_point(field_mutable:com.zhichenhaixin.proto.AIS.sourceId)
  return _internal_mutable_sourceid();
}
inline const std::string& AIS::_internal_sourceid() const {
  return sourceid_.Get();
}
inline void AIS::_internal_set_sourceid(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  sourceid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void AIS::set_sourceid(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  sourceid_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:com.zhichenhaixin.proto.AIS.sourceId)
}
inline void AIS::set_sourceid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  sourceid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:com.zhichenhaixin.proto.AIS.sourceId)
}
inline void AIS::set_sourceid(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  sourceid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:com.zhichenhaixin.proto.AIS.sourceId)
}
inline std::string* AIS::_internal_mutable_sourceid() {
  _has_bits_[0] |= 0x00000001u;
  return sourceid_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* AIS::release_sourceid() {
  // @@protoc_insertion_point(field_release:com.zhichenhaixin.proto.AIS.sourceId)
  if (!_internal_has_sourceid()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return sourceid_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void AIS::set_allocated_sourceid(std::string* sourceid) {
  if (sourceid != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  sourceid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), sourceid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:com.zhichenhaixin.proto.AIS.sourceId)
}
inline std::string* AIS::unsafe_arena_release_sourceid() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.zhichenhaixin.proto.AIS.sourceId)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000001u;
  return sourceid_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void AIS::unsafe_arena_set_allocated_sourceid(
    std::string* sourceid) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (sourceid != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  sourceid_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      sourceid, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.zhichenhaixin.proto.AIS.sourceId)
}

// optional .com.zhichenhaixin.proto.VesselInfo vesselInfo = 3;
inline bool AIS::_internal_has_vesselinfo() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || vesselinfo_ != nullptr);
  return value;
}
inline bool AIS::has_vesselinfo() const {
  return _internal_has_vesselinfo();
}
inline void AIS::clear_vesselinfo() {
  if (vesselinfo_ != nullptr) vesselinfo_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::com::zhichenhaixin::proto::VesselInfo& AIS::_internal_vesselinfo() const {
  const ::com::zhichenhaixin::proto::VesselInfo* p = vesselinfo_;
  return p != nullptr ? *p : *reinterpret_cast<const ::com::zhichenhaixin::proto::VesselInfo*>(
      &::com::zhichenhaixin::proto::_VesselInfo_default_instance_);
}
inline const ::com::zhichenhaixin::proto::VesselInfo& AIS::vesselinfo() const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.proto.AIS.vesselInfo)
  return _internal_vesselinfo();
}
inline void AIS::unsafe_arena_set_allocated_vesselinfo(
    ::com::zhichenhaixin::proto::VesselInfo* vesselinfo) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(vesselinfo_);
  }
  vesselinfo_ = vesselinfo;
  if (vesselinfo) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.zhichenhaixin.proto.AIS.vesselInfo)
}
inline ::com::zhichenhaixin::proto::VesselInfo* AIS::release_vesselinfo() {
  auto temp = unsafe_arena_release_vesselinfo();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::com::zhichenhaixin::proto::VesselInfo* AIS::unsafe_arena_release_vesselinfo() {
  // @@protoc_insertion_point(field_release:com.zhichenhaixin.proto.AIS.vesselInfo)
  _has_bits_[0] &= ~0x00000002u;
  ::com::zhichenhaixin::proto::VesselInfo* temp = vesselinfo_;
  vesselinfo_ = nullptr;
  return temp;
}
inline ::com::zhichenhaixin::proto::VesselInfo* AIS::_internal_mutable_vesselinfo() {
  _has_bits_[0] |= 0x00000002u;
  if (vesselinfo_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::zhichenhaixin::proto::VesselInfo>(GetArena());
    vesselinfo_ = p;
  }
  return vesselinfo_;
}
inline ::com::zhichenhaixin::proto::VesselInfo* AIS::mutable_vesselinfo() {
  // @@protoc_insertion_point(field_mutable:com.zhichenhaixin.proto.AIS.vesselInfo)
  return _internal_mutable_vesselinfo();
}
inline void AIS::set_allocated_vesselinfo(::com::zhichenhaixin::proto::VesselInfo* vesselinfo) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete vesselinfo_;
  }
  if (vesselinfo) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(vesselinfo);
    if (message_arena != submessage_arena) {
      vesselinfo = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, vesselinfo, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  vesselinfo_ = vesselinfo;
  // @@protoc_insertion_point(field_set_allocated:com.zhichenhaixin.proto.AIS.vesselInfo)
}

// optional .com.zhichenhaixin.proto.VesselTrack vesselTrack = 4;
inline bool AIS::_internal_has_vesseltrack() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || vesseltrack_ != nullptr);
  return value;
}
inline bool AIS::has_vesseltrack() const {
  return _internal_has_vesseltrack();
}
inline void AIS::clear_vesseltrack() {
  if (vesseltrack_ != nullptr) vesseltrack_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
inline const ::com::zhichenhaixin::proto::VesselTrack& AIS::_internal_vesseltrack() const {
  const ::com::zhichenhaixin::proto::VesselTrack* p = vesseltrack_;
  return p != nullptr ? *p : *reinterpret_cast<const ::com::zhichenhaixin::proto::VesselTrack*>(
      &::com::zhichenhaixin::proto::_VesselTrack_default_instance_);
}
inline const ::com::zhichenhaixin::proto::VesselTrack& AIS::vesseltrack() const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.proto.AIS.vesselTrack)
  return _internal_vesseltrack();
}
inline void AIS::unsafe_arena_set_allocated_vesseltrack(
    ::com::zhichenhaixin::proto::VesselTrack* vesseltrack) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(vesseltrack_);
  }
  vesseltrack_ = vesseltrack;
  if (vesseltrack) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.zhichenhaixin.proto.AIS.vesselTrack)
}
inline ::com::zhichenhaixin::proto::VesselTrack* AIS::release_vesseltrack() {
  auto temp = unsafe_arena_release_vesseltrack();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::com::zhichenhaixin::proto::VesselTrack* AIS::unsafe_arena_release_vesseltrack() {
  // @@protoc_insertion_point(field_release:com.zhichenhaixin.proto.AIS.vesselTrack)
  _has_bits_[0] &= ~0x00000004u;
  ::com::zhichenhaixin::proto::VesselTrack* temp = vesseltrack_;
  vesseltrack_ = nullptr;
  return temp;
}
inline ::com::zhichenhaixin::proto::VesselTrack* AIS::_internal_mutable_vesseltrack() {
  _has_bits_[0] |= 0x00000004u;
  if (vesseltrack_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::zhichenhaixin::proto::VesselTrack>(GetArena());
    vesseltrack_ = p;
  }
  return vesseltrack_;
}
inline ::com::zhichenhaixin::proto::VesselTrack* AIS::mutable_vesseltrack() {
  // @@protoc_insertion_point(field_mutable:com.zhichenhaixin.proto.AIS.vesselTrack)
  return _internal_mutable_vesseltrack();
}
inline void AIS::set_allocated_vesseltrack(::com::zhichenhaixin::proto::VesselTrack* vesseltrack) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete vesseltrack_;
  }
  if (vesseltrack) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(vesseltrack);
    if (message_arena != submessage_arena) {
      vesseltrack = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, vesseltrack, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  vesseltrack_ = vesseltrack;
  // @@protoc_insertion_point(field_set_allocated:com.zhichenhaixin.proto.AIS.vesselTrack)
}

// optional .com.zhichenhaixin.proto.BaseStationReport baseStationReport = 5;
inline bool AIS::_internal_has_basestationreport() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || basestationreport_ != nullptr);
  return value;
}
inline bool AIS::has_basestationreport() const {
  return _internal_has_basestationreport();
}
inline void AIS::clear_basestationreport() {
  if (basestationreport_ != nullptr) basestationreport_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
inline const ::com::zhichenhaixin::proto::BaseStationReport& AIS::_internal_basestationreport() const {
  const ::com::zhichenhaixin::proto::BaseStationReport* p = basestationreport_;
  return p != nullptr ? *p : *reinterpret_cast<const ::com::zhichenhaixin::proto::BaseStationReport*>(
      &::com::zhichenhaixin::proto::_BaseStationReport_default_instance_);
}
inline const ::com::zhichenhaixin::proto::BaseStationReport& AIS::basestationreport() const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.proto.AIS.baseStationReport)
  return _internal_basestationreport();
}
inline void AIS::unsafe_arena_set_allocated_basestationreport(
    ::com::zhichenhaixin::proto::BaseStationReport* basestationreport) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(basestationreport_);
  }
  basestationreport_ = basestationreport;
  if (basestationreport) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.zhichenhaixin.proto.AIS.baseStationReport)
}
inline ::com::zhichenhaixin::proto::BaseStationReport* AIS::release_basestationreport() {
  auto temp = unsafe_arena_release_basestationreport();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::com::zhichenhaixin::proto::BaseStationReport* AIS::unsafe_arena_release_basestationreport() {
  // @@protoc_insertion_point(field_release:com.zhichenhaixin.proto.AIS.baseStationReport)
  _has_bits_[0] &= ~0x00000008u;
  ::com::zhichenhaixin::proto::BaseStationReport* temp = basestationreport_;
  basestationreport_ = nullptr;
  return temp;
}
inline ::com::zhichenhaixin::proto::BaseStationReport* AIS::_internal_mutable_basestationreport() {
  _has_bits_[0] |= 0x00000008u;
  if (basestationreport_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::zhichenhaixin::proto::BaseStationReport>(GetArena());
    basestationreport_ = p;
  }
  return basestationreport_;
}
inline ::com::zhichenhaixin::proto::BaseStationReport* AIS::mutable_basestationreport() {
  // @@protoc_insertion_point(field_mutable:com.zhichenhaixin.proto.AIS.baseStationReport)
  return _internal_mutable_basestationreport();
}
inline void AIS::set_allocated_basestationreport(::com::zhichenhaixin::proto::BaseStationReport* basestationreport) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete basestationreport_;
  }
  if (basestationreport) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(basestationreport);
    if (message_arena != submessage_arena) {
      basestationreport = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, basestationreport, submessage_arena);
    }
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  basestationreport_ = basestationreport;
  // @@protoc_insertion_point(field_set_allocated:com.zhichenhaixin.proto.AIS.baseStationReport)
}

// optional .com.zhichenhaixin.proto.AidtoNavigationReport aidtoNavigationReport = 6;
inline bool AIS::_internal_has_aidtonavigationreport() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  PROTOBUF_ASSUME(!value || aidtonavigationreport_ != nullptr);
  return value;
}
inline bool AIS::has_aidtonavigationreport() const {
  return _internal_has_aidtonavigationreport();
}
inline void AIS::clear_aidtonavigationreport() {
  if (aidtonavigationreport_ != nullptr) aidtonavigationreport_->Clear();
  _has_bits_[0] &= ~0x00000010u;
}
inline const ::com::zhichenhaixin::proto::AidtoNavigationReport& AIS::_internal_aidtonavigationreport() const {
  const ::com::zhichenhaixin::proto::AidtoNavigationReport* p = aidtonavigationreport_;
  return p != nullptr ? *p : *reinterpret_cast<const ::com::zhichenhaixin::proto::AidtoNavigationReport*>(
      &::com::zhichenhaixin::proto::_AidtoNavigationReport_default_instance_);
}
inline const ::com::zhichenhaixin::proto::AidtoNavigationReport& AIS::aidtonavigationreport() const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.proto.AIS.aidtoNavigationReport)
  return _internal_aidtonavigationreport();
}
inline void AIS::unsafe_arena_set_allocated_aidtonavigationreport(
    ::com::zhichenhaixin::proto::AidtoNavigationReport* aidtonavigationreport) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(aidtonavigationreport_);
  }
  aidtonavigationreport_ = aidtonavigationreport;
  if (aidtonavigationreport) {
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.zhichenhaixin.proto.AIS.aidtoNavigationReport)
}
inline ::com::zhichenhaixin::proto::AidtoNavigationReport* AIS::release_aidtonavigationreport() {
  auto temp = unsafe_arena_release_aidtonavigationreport();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::com::zhichenhaixin::proto::AidtoNavigationReport* AIS::unsafe_arena_release_aidtonavigationreport() {
  // @@protoc_insertion_point(field_release:com.zhichenhaixin.proto.AIS.aidtoNavigationReport)
  _has_bits_[0] &= ~0x00000010u;
  ::com::zhichenhaixin::proto::AidtoNavigationReport* temp = aidtonavigationreport_;
  aidtonavigationreport_ = nullptr;
  return temp;
}
inline ::com::zhichenhaixin::proto::AidtoNavigationReport* AIS::_internal_mutable_aidtonavigationreport() {
  _has_bits_[0] |= 0x00000010u;
  if (aidtonavigationreport_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::zhichenhaixin::proto::AidtoNavigationReport>(GetArena());
    aidtonavigationreport_ = p;
  }
  return aidtonavigationreport_;
}
inline ::com::zhichenhaixin::proto::AidtoNavigationReport* AIS::mutable_aidtonavigationreport() {
  // @@protoc_insertion_point(field_mutable:com.zhichenhaixin.proto.AIS.aidtoNavigationReport)
  return _internal_mutable_aidtonavigationreport();
}
inline void AIS::set_allocated_aidtonavigationreport(::com::zhichenhaixin::proto::AidtoNavigationReport* aidtonavigationreport) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete aidtonavigationreport_;
  }
  if (aidtonavigationreport) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(aidtonavigationreport);
    if (message_arena != submessage_arena) {
      aidtonavigationreport = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, aidtonavigationreport, submessage_arena);
    }
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  aidtonavigationreport_ = aidtonavigationreport;
  // @@protoc_insertion_point(field_set_allocated:com.zhichenhaixin.proto.AIS.aidtoNavigationReport)
}

// -------------------------------------------------------------------

// AISList

// required uint64 UTC = 1;
inline bool AISList::_internal_has_utc() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool AISList::has_utc() const {
  return _internal_has_utc();
}
inline void AISList::clear_utc() {
  utc_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 AISList::_internal_utc() const {
  return utc_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 AISList::utc() const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.proto.AISList.UTC)
  return _internal_utc();
}
inline void AISList::_internal_set_utc(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000001u;
  utc_ = value;
}
inline void AISList::set_utc(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_utc(value);
  // @@protoc_insertion_point(field_set:com.zhichenhaixin.proto.AISList.UTC)
}

// repeated .com.zhichenhaixin.proto.AIS ais = 2;
inline int AISList::_internal_ais_size() const {
  return ais_.size();
}
inline int AISList::ais_size() const {
  return _internal_ais_size();
}
inline void AISList::clear_ais() {
  ais_.Clear();
}
inline ::com::zhichenhaixin::proto::AIS* AISList::mutable_ais(int index) {
  // @@protoc_insertion_point(field_mutable:com.zhichenhaixin.proto.AISList.ais)
  return ais_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::zhichenhaixin::proto::AIS >*
AISList::mutable_ais() {
  // @@protoc_insertion_point(field_mutable_list:com.zhichenhaixin.proto.AISList.ais)
  return &ais_;
}
inline const ::com::zhichenhaixin::proto::AIS& AISList::_internal_ais(int index) const {
  return ais_.Get(index);
}
inline const ::com::zhichenhaixin::proto::AIS& AISList::ais(int index) const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.proto.AISList.ais)
  return _internal_ais(index);
}
inline ::com::zhichenhaixin::proto::AIS* AISList::_internal_add_ais() {
  return ais_.Add();
}
inline ::com::zhichenhaixin::proto::AIS* AISList::add_ais() {
  // @@protoc_insertion_point(field_add:com.zhichenhaixin.proto.AISList.ais)
  return _internal_add_ais();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::zhichenhaixin::proto::AIS >&
AISList::ais() const {
  // @@protoc_insertion_point(field_list:com.zhichenhaixin.proto.AISList.ais)
  return ais_;
}

// -------------------------------------------------------------------

// AisChart

// required uint64 id = 1;
inline bool AisChart::_internal_has_id() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool AisChart::has_id() const {
  return _internal_has_id();
}
inline void AisChart::clear_id() {
  id_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 AisChart::_internal_id() const {
  return id_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 AisChart::id() const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.proto.AisChart.id)
  return _internal_id();
}
inline void AisChart::_internal_set_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000008u;
  id_ = value;
}
inline void AisChart::set_id(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:com.zhichenhaixin.proto.AisChart.id)
}

// required string name = 2;
inline bool AisChart::_internal_has_name() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool AisChart::has_name() const {
  return _internal_has_name();
}
inline void AisChart::clear_name() {
  name_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& AisChart::name() const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.proto.AisChart.name)
  return _internal_name();
}
inline void AisChart::set_name(const std::string& value) {
  _internal_set_name(value);
  // @@protoc_insertion_point(field_set:com.zhichenhaixin.proto.AisChart.name)
}
inline std::string* AisChart::mutable_name() {
  // @@protoc_insertion_point(field_mutable:com.zhichenhaixin.proto.AisChart.name)
  return _internal_mutable_name();
}
inline const std::string& AisChart::_internal_name() const {
  return name_.Get();
}
inline void AisChart::_internal_set_name(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void AisChart::set_name(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  name_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:com.zhichenhaixin.proto.AisChart.name)
}
inline void AisChart::set_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:com.zhichenhaixin.proto.AisChart.name)
}
inline void AisChart::set_name(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:com.zhichenhaixin.proto.AisChart.name)
}
inline std::string* AisChart::_internal_mutable_name() {
  _has_bits_[0] |= 0x00000001u;
  return name_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* AisChart::release_name() {
  // @@protoc_insertion_point(field_release:com.zhichenhaixin.proto.AisChart.name)
  if (!_internal_has_name()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return name_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void AisChart::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:com.zhichenhaixin.proto.AisChart.name)
}
inline std::string* AisChart::unsafe_arena_release_name() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.zhichenhaixin.proto.AisChart.name)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000001u;
  return name_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void AisChart::unsafe_arena_set_allocated_name(
    std::string* name) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (name != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  name_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      name, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.zhichenhaixin.proto.AisChart.name)
}

// required double latitude = 3;
inline bool AisChart::_internal_has_latitude() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool AisChart::has_latitude() const {
  return _internal_has_latitude();
}
inline void AisChart::clear_latitude() {
  latitude_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline double AisChart::_internal_latitude() const {
  return latitude_;
}
inline double AisChart::latitude() const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.proto.AisChart.latitude)
  return _internal_latitude();
}
inline void AisChart::_internal_set_latitude(double value) {
  _has_bits_[0] |= 0x00000010u;
  latitude_ = value;
}
inline void AisChart::set_latitude(double value) {
  _internal_set_latitude(value);
  // @@protoc_insertion_point(field_set:com.zhichenhaixin.proto.AisChart.latitude)
}

// required double longitude = 4;
inline bool AisChart::_internal_has_longitude() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool AisChart::has_longitude() const {
  return _internal_has_longitude();
}
inline void AisChart::clear_longitude() {
  longitude_ = 0;
  _has_bits_[0] &= ~0x00000020u;
}
inline double AisChart::_internal_longitude() const {
  return longitude_;
}
inline double AisChart::longitude() const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.proto.AisChart.longitude)
  return _internal_longitude();
}
inline void AisChart::_internal_set_longitude(double value) {
  _has_bits_[0] |= 0x00000020u;
  longitude_ = value;
}
inline void AisChart::set_longitude(double value) {
  _internal_set_longitude(value);
  // @@protoc_insertion_point(field_set:com.zhichenhaixin.proto.AisChart.longitude)
}

// required uint64 UTC = 5;
inline bool AisChart::_internal_has_utc() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool AisChart::has_utc() const {
  return _internal_has_utc();
}
inline void AisChart::clear_utc() {
  utc_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000040u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 AisChart::_internal_utc() const {
  return utc_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 AisChart::utc() const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.proto.AisChart.UTC)
  return _internal_utc();
}
inline void AisChart::_internal_set_utc(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000040u;
  utc_ = value;
}
inline void AisChart::set_utc(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_utc(value);
  // @@protoc_insertion_point(field_set:com.zhichenhaixin.proto.AisChart.UTC)
}

// required bytes imageData = 6;
inline bool AisChart::_internal_has_imagedata() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool AisChart::has_imagedata() const {
  return _internal_has_imagedata();
}
inline void AisChart::clear_imagedata() {
  imagedata_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& AisChart::imagedata() const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.proto.AisChart.imageData)
  return _internal_imagedata();
}
inline void AisChart::set_imagedata(const std::string& value) {
  _internal_set_imagedata(value);
  // @@protoc_insertion_point(field_set:com.zhichenhaixin.proto.AisChart.imageData)
}
inline std::string* AisChart::mutable_imagedata() {
  // @@protoc_insertion_point(field_mutable:com.zhichenhaixin.proto.AisChart.imageData)
  return _internal_mutable_imagedata();
}
inline const std::string& AisChart::_internal_imagedata() const {
  return imagedata_.Get();
}
inline void AisChart::_internal_set_imagedata(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  imagedata_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void AisChart::set_imagedata(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  imagedata_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:com.zhichenhaixin.proto.AisChart.imageData)
}
inline void AisChart::set_imagedata(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  imagedata_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:com.zhichenhaixin.proto.AisChart.imageData)
}
inline void AisChart::set_imagedata(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x00000002u;
  imagedata_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:com.zhichenhaixin.proto.AisChart.imageData)
}
inline std::string* AisChart::_internal_mutable_imagedata() {
  _has_bits_[0] |= 0x00000002u;
  return imagedata_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* AisChart::release_imagedata() {
  // @@protoc_insertion_point(field_release:com.zhichenhaixin.proto.AisChart.imageData)
  if (!_internal_has_imagedata()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return imagedata_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void AisChart::set_allocated_imagedata(std::string* imagedata) {
  if (imagedata != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  imagedata_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), imagedata,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:com.zhichenhaixin.proto.AisChart.imageData)
}
inline std::string* AisChart::unsafe_arena_release_imagedata() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.zhichenhaixin.proto.AisChart.imageData)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000002u;
  return imagedata_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void AisChart::unsafe_arena_set_allocated_imagedata(
    std::string* imagedata) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (imagedata != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  imagedata_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      imagedata, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.zhichenhaixin.proto.AisChart.imageData)
}

// required uint32 width = 7;
inline bool AisChart::_internal_has_width() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool AisChart::has_width() const {
  return _internal_has_width();
}
inline void AisChart::clear_width() {
  width_ = 0u;
  _has_bits_[0] &= ~0x00000080u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 AisChart::_internal_width() const {
  return width_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 AisChart::width() const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.proto.AisChart.width)
  return _internal_width();
}
inline void AisChart::_internal_set_width(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000080u;
  width_ = value;
}
inline void AisChart::set_width(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_width(value);
  // @@protoc_insertion_point(field_set:com.zhichenhaixin.proto.AisChart.width)
}

// required uint32 height = 8;
inline bool AisChart::_internal_has_height() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool AisChart::has_height() const {
  return _internal_has_height();
}
inline void AisChart::clear_height() {
  height_ = 0u;
  _has_bits_[0] &= ~0x00000100u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 AisChart::_internal_height() const {
  return height_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 AisChart::height() const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.proto.AisChart.height)
  return _internal_height();
}
inline void AisChart::_internal_set_height(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000100u;
  height_ = value;
}
inline void AisChart::set_height(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_height(value);
  // @@protoc_insertion_point(field_set:com.zhichenhaixin.proto.AisChart.height)
}

// required double radius = 9;
inline bool AisChart::_internal_has_radius() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool AisChart::has_radius() const {
  return _internal_has_radius();
}
inline void AisChart::clear_radius() {
  radius_ = 0;
  _has_bits_[0] &= ~0x00000200u;
}
inline double AisChart::_internal_radius() const {
  return radius_;
}
inline double AisChart::radius() const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.proto.AisChart.radius)
  return _internal_radius();
}
inline void AisChart::_internal_set_radius(double value) {
  _has_bits_[0] |= 0x00000200u;
  radius_ = value;
}
inline void AisChart::set_radius(double value) {
  _internal_set_radius(value);
  // @@protoc_insertion_point(field_set:com.zhichenhaixin.proto.AisChart.radius)
}

// required string format = 10;
inline bool AisChart::_internal_has_format() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool AisChart::has_format() const {
  return _internal_has_format();
}
inline void AisChart::clear_format() {
  format_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& AisChart::format() const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.proto.AisChart.format)
  return _internal_format();
}
inline void AisChart::set_format(const std::string& value) {
  _internal_set_format(value);
  // @@protoc_insertion_point(field_set:com.zhichenhaixin.proto.AisChart.format)
}
inline std::string* AisChart::mutable_format() {
  // @@protoc_insertion_point(field_mutable:com.zhichenhaixin.proto.AisChart.format)
  return _internal_mutable_format();
}
inline const std::string& AisChart::_internal_format() const {
  return format_.Get();
}
inline void AisChart::_internal_set_format(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  format_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void AisChart::set_format(std::string&& value) {
  _has_bits_[0] |= 0x00000004u;
  format_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:com.zhichenhaixin.proto.AisChart.format)
}
inline void AisChart::set_format(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000004u;
  format_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:com.zhichenhaixin.proto.AisChart.format)
}
inline void AisChart::set_format(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000004u;
  format_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:com.zhichenhaixin.proto.AisChart.format)
}
inline std::string* AisChart::_internal_mutable_format() {
  _has_bits_[0] |= 0x00000004u;
  return format_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* AisChart::release_format() {
  // @@protoc_insertion_point(field_release:com.zhichenhaixin.proto.AisChart.format)
  if (!_internal_has_format()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return format_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void AisChart::set_allocated_format(std::string* format) {
  if (format != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  format_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), format,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:com.zhichenhaixin.proto.AisChart.format)
}
inline std::string* AisChart::unsafe_arena_release_format() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.zhichenhaixin.proto.AisChart.format)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000004u;
  return format_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void AisChart::unsafe_arena_set_allocated_format(
    std::string* format) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (format != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  format_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      format, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.zhichenhaixin.proto.AisChart.format)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace zhichenhaixin
}  // namespace com

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::com::zhichenhaixin::proto::EPFD> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::com::zhichenhaixin::proto::EPFD>() {
  return ::com::zhichenhaixin::proto::EPFD_descriptor();
}
template <> struct is_proto_enum< ::com::zhichenhaixin::proto::NAVI_STATUS> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::com::zhichenhaixin::proto::NAVI_STATUS>() {
  return ::com::zhichenhaixin::proto::NAVI_STATUS_descriptor();
}
template <> struct is_proto_enum< ::com::zhichenhaixin::proto::ATON_TYPE> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::com::zhichenhaixin::proto::ATON_TYPE>() {
  return ::com::zhichenhaixin::proto::ATON_TYPE_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_ZCHXAISVessel_2eproto
