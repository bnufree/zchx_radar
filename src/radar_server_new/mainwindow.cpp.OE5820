#include "mainwindow.h"
#include "ui_mainwindow.h"
#include "dataserverutils.h"
#include <QThread>
#include <QDateTime>
#include <QProcess>
#include <QDebug>
#include "profiles.h"
#include "Log.h"
#include <QLabel>
#include <QFileDialog>
#include "zmq.h"
#include "zmq_utils.h"
#include "zmq.hpp"
#include "ais_radar/zchxaisdataserver.h"
#include "ais_radar/zchxradardataserver.h"
#include "ais_radar/zchxradarechodatachange.h"
#include "ais_radar/zxhcprocessechodata.h"
#include "ais_radar/zchxanalysisandsendradar.h"
#include "ais_radar/zchxaisdataprocessor.h"
#include "dialog_set.h"
#include <QFileDialog>
#include <QDataStream>
#include <QThread>
#include <QRect>
#include <QPainter>
#include <QPointF>
#include "myLabel.h"
#include <Windows.h>
#include <DbgHelp.h>
#include "mainwindow.h"
#include "ui_mainwindow.h"
#include <QThread>
#include <QDateTime>
#include <QDebug>
#include "profiles.h"
#include <QLabel>
#include <QFileDialog>
#include "common.h"
#include <QMessageBox>
#include "protobuf/protobufdataprocessor.h"
#include "ais_setting.h"
#include <QHostInfo>
#include <QNetworkInterface>
#include <QList>
#include <QNetworkAddressEntry>
#include <QRegExp>

#define         LOG_LINE_COUNT          50

#define cout qDebug()<< "在文件"<<__FILE__ << "第"<< __LINE__<< "行"
class HqTableWidgetItem : public QTableWidgetItem
{
public:
    HqTableWidgetItem(const QString& text, Qt::AlignmentFlag flg = Qt::AlignCenter)
        :QTableWidgetItem(text)
    {
        setTextAlignment(flg);
    }

    ~HqTableWidgetItem()
    {

    }

};

MainWindow::MainWindow(QWidget *parent) :
    QMainWindow(parent),
    mpRadarEchoDataChange(0),
    mAisDataProc(0),
    mProcessEchoData(0),
    ui(new Ui::MainWindow)
{
    ui->setupUi(this);
    setAttribute(Qt::WA_DeleteOnClose);
    this->setWindowTitle(QStringLiteral("采集器 5.3.7_测试目标延迟,CPU占用过高,间隔一段时间无法接收回波等问题"));
    //this->resize(800, 600);
    this->resize(1367, 784);
    this->setMinimumSize(1367, 784);
    initUI();
    m_drawpic = true;//采集器绘制回波标志
    zeor_flag = 0;//雷达是否正常接收回波标志
    //Utils::Profiles::instance()->setValue("Radar_1","draw_pic", m_drawpic);
    //reset = true;
    txt = Utils::Profiles::instance()->value("Radar_1","Limit_zhou").toBool();//1_初始化打印回波标志
    t_2 = false;//1_初始化打印AIS标志
    t_3= false;//1_初始化打印回波标志
    //index = Utils::Profiles::instance()->value("Radar","AIS_Num").toInt();//1_初始化打印回波标志

    ui->lineEdit_2->setText(Utils::Profiles::instance()->value("Radar_1","ClearTrack_Time").toString());
    ui->radius_lineEdit->setText(Utils::Profiles::instance()->value("Radar_1","Radius").toString());
    ui->lineEdit->setText(Utils::Profiles::instance()->value("Radar_1","Time").toString());

    ui->lineEdit_3->setText(QString::number(0));
    ui->lineEdit_4->setText(QString::number(0));
    Utils::Profiles::instance()->setDefault("Echo", "Enable", false);
    //从张邦伟采集器接回波数据
//    if(Utils::Profiles::instance()->value("Echo", "Enable", false).toBool())
//    {
//        mpRadarEchoDataChange = new ZCHXRadarEchoDataChange();
//        mpRadarEchoDataChange->updateRadarEchoData();
//        mProcessEchoData = new ZXHCProcessEchoData();
//        connect(mpRadarEchoDataChange, SIGNAL(sendMsg(Map_RadarVideo)),
//                mProcessEchoData, SIGNAL(signalProcess(Map_RadarVideo)));
//        connect(mProcessEchoData, SIGNAL(signalSendRecvedContent(qint64,QString,QString)),
//                this, SLOT(receiveContent(qint64,QString,QString)));
//    }
    //从串口接收GPS数据 ****************************************************************************
    //初始化COM数据接收和解析
//    mComConfigWidget = new ComConfigWidget;
//    mComDataMgr = new ComDataMgr;
//    connect(mComDataMgr, SIGNAL(signalSendRecvedContent(qint64,QString,QString)), \
//            this, SLOT(receiveContent(qint64,QString,QString)));
//    connect(mComDataMgr, SIGNAL(signalSendLogMsg(QString)), this, SLOT(slotRecvWorkerMsg(QString)));
//    //界面参数配置和数据接收线程连接在一起)),
//    connect(mComConfigWidget, SIGNAL(updateSerialPort(QMap<QString,COMDEVPARAM>)),
//            this, SLOT(slotSetComDevParams(QMap<QString,COMDEVPARAM>)));

//    //发送出去
//    PROFILES_INSTANCE->setDefault(SERVER_SETTING_SEC, "GPS_Topic", "GPSData");
//    PROFILES_INSTANCE->setDefault(SERVER_SETTING_SEC, "GPS_Send_Port", 5656);
//    mOutWorker = new ComDataPubWorker();
//    connect(PROTOBUF_DATA, SIGNAL(signalSendComData(QByteArray)), mOutWorker, SLOT(slotRecvPubData(QByteArray)));
//    connect(PROTOBUF_DATA, SIGNAL(signalSendGpsData(double, double)), ui->settingWidget, SLOT(slotGetGpsData(double,double)));

//    mOutWorker->setServerIP(PROFILES_INSTANCE->value(SERVER_SETTING_SEC, SERVER_SETTING_SERVER_IP).toString());

//    mOutWorker->setServerPort(PROFILES_INSTANCE->value(SERVER_SETTING_SEC, SERVER_SETTING_SERVER_PORT).toInt());
//    mOutWorker->setTimerInterval(PROFILES_INSTANCE->value(SERVER_SETTING_SEC, SERVER_SETTING_OPLOAD_FREQUENCY).toInt());
//    mOutWorker->setTrackSendPort(PROFILES_INSTANCE->value(SERVER_SETTING_SEC, "GPS_Send_Port").toInt());
//    mOutWorker->setTrackTopic(PROFILES_INSTANCE->value(SERVER_SETTING_SEC, "GPS_Topic").toString());
//    connect(mComConfigWidget,SIGNAL(signalUpdataZmq(QString,QString)),this,SLOT(slotUpdateZmq(QString,QString)));
//    //开始数据接收
//    slotSetComDevParams(mComConfigWidget->getComDevParams());
//    PROTOBUF_DATA->startPublish();

    initRadarCfgInfo();
    mRadarDataServerList.clear();
    int i = 0;
    foreach(int id, mRadarConfigMap.keys())
    {

        //接收雷达数据
        ZCHXRadarDataServer *pRadarDataServer = new ZCHXRadarDataServer(mRadarConfigMap[id], 0);
        //处理雷达数据并发送
        //ZCHXAnalysisAndSendRadar *pAnalysisAndSendRadar = new ZCHXAnalysisAndSendRadar(i+1,0);
        pAnalysisAndSendRadar = new ZCHXAnalysisAndSendRadar(mRadarConfigMap[id],0);
        emit pRadarDataServer->startProcessSignal();//开启接收
        mRadarDataServerList.append(pRadarDataServer);
        mAnalysisAndSendRadarList.append(pAnalysisAndSendRadar);
        connect(pRadarDataServer, SIGNAL(analysisLowranceRadar(QByteArray,int,int,int)),
                pAnalysisAndSendRadar, SIGNAL(analysisLowranceRadarSignal(QByteArray,int,int,int)));
        connect(pRadarDataServer, SIGNAL(analysisCatRadar(QByteArray,int,int,int,QString)),
                pAnalysisAndSendRadar, SIGNAL(analysisCatRadarSignal(QByteArray,int,int,int,QString)));
        connect(pAnalysisAndSendRadar, SIGNAL(signalSendRecvedContent(qint64,QString,QString)), this, SLOT(receiveContent(qint64,QString,QString)));
        connect(pRadarDataServer, SIGNAL(signalSendRecvedContent(qint64,QString,QString)), this, SLOT(receiveContent(qint64,QString,QString)));
        connect(pRadarDataServer, SIGNAL(signalClientInout(QString,QString,int,int)), this, SLOT(slotUpdateClientTable(QString,QString,int,int)));
        connect(pAnalysisAndSendRadar, SIGNAL(signalClientInout(QString,QString,int,int)), this, SLOT(slotUpdateClientTable(QString,QString,int,int)));
        connect(this, SIGNAL(signalOpenRadar()), pRadarDataServer, SLOT(openRadar()));
        connect(this, SIGNAL(signalcloseRadar()), pRadarDataServer, SLOT(closeRadar()));
        connect(pRadarDataServer, SIGNAL(signalRadarStatusChanged(QList<RadarStatus>, int)), ui->settingWidget, SLOT(slotRecvRadarReportInfo(QList<RadarStatus>,int)));
        connect(pAnalysisAndSendRadar, SIGNAL(signalRadiusFactorUpdated(double,double)), ui->settingWidget, SLOT(slotUpdateRealRangeFactor(double,double)));
        connect(pAnalysisAndSendRadar, SIGNAL(signalRadiusFactorUpdated(double,double)), this, SLOT(show_range_slot(double,double)));

        connect(pRadarDataServer, SIGNAL(joinGropsignal(QString)), this, SLOT(joinGropslot(QString)));
        connect(pAnalysisAndSendRadar->getVideoProcessor(), SIGNAL(sendProcessTrackInfo(int,int,int)), this, SLOT(slotRecvRadarProcessNum(int,int,int)));

        //实时更新GPS传入的经纬度坐标
        connect(PROTOBUF_DATA, SIGNAL(signalSendGpsData(double, double)),pAnalysisAndSendRadar, SLOT(slotGetGpsData(double,double)));

        //弹窗显示-------雷达配置
        mSet = new Dialog_set;
        connect(PROTOBUF_DATA, SIGNAL(signalSendGpsData(double, double)),mSet, SIGNAL(signalGetGpsData(double,double)));
        connect(pAnalysisAndSendRadar, SIGNAL(signalRadiusFactorUpdated(double,double)), mSet, SLOT(slotUpdateRealRangeFactor(double,double)));
        connect(mSet, SIGNAL(signalRangeFactorChanged_1(double)), this, SLOT(slotRecvRangeFactorChanged(double)));
        //调用pRadarDataServer析构函数

        connect(mSet, SIGNAL(set_change_signal_1()), this, SLOT(reset_window()));
        connect(this, SIGNAL(send_video_signal(QByteArray,QString,int,int,int)),pRadarDataServer,SLOT(analysisRadar(QByteArray,QString,int,int,int)));

        if(i == 0)
        {
            //显示分析页面
            connect(pAnalysisAndSendRadar, SIGNAL(show_video(int,int)), this, SLOT(show_video_slot(int,int)));//打印目标个数
            connect(pAnalysisAndSendRadar, SIGNAL(show_statistics(int,int,int,int,int)), this, SLOT(show_statistics_slot(int,int,int,int,int)));//打印丢包率
            connect(pAnalysisAndSendRadar, SIGNAL(show_info(QString)),this,SLOT(show_info_slot(QString)));//打印传入周老师库数据
            //设置回波图像素点大小
            connect(this, SIGNAL(signal_set_penwidth(int)), pAnalysisAndSendRadar, SIGNAL(set_pen_width(int)));
            //实时打印接收到的雷达状态信息
            connect(pRadarDataServer, SIGNAL(signalRadarStatusChanged(QList<RadarStatus>, int)),this,SLOT(slotRecvRadarReportInfo_1(QList<RadarStatus>,int)));
            //采集器显示回波图片
            connect(pAnalysisAndSendRadar,SIGNAL(signalRadarVideoAndTargetPixmap(QPixmap,Afterglow)),this,SLOT(setRadarVideoAndTargetPixmap(QPixmap,Afterglow)));
            //打印回波数据
            connect(this, SIGNAL(prtVideoSignal(bool)),pRadarDataServer,SIGNAL(prtVideoSignal_1(bool)));
            //打印回波块识别出来的目标个数
            connect(pAnalysisAndSendRadar,SIGNAL(historySignal(int)),this,SLOT(show_newtrack_count(int)));
            //是否显示雷达目标编号
            connect(this,SIGNAL(showTrackNumSignal(bool)),pAnalysisAndSendRadar,SIGNAL(showTrackNumSignal(bool)));
        }
        i++;
    }
    //ui->frame->setVisible(false);
    //隐藏前3个分页
    int count = ui->tabWidget->count();
    for(int i = 0; i < count - 1; i++)
        {
            ui->tabWidget->removeTab(0);
        }
    QAction *radar = new QAction(QIcon(":/image/app.png"), "设置雷达个数",this);
    ui->Radar_menu->addAction(radar);
    QAction *ais = new QAction(QIcon(":/image/app.png"), "添加AIS个数",this);
    ui->Ais_menu->addAction(ais);
    QAction *log = new QAction(QIcon(":/image/app.png"), "显示日志",this);
    ui->Log_menu->addAction(log);
    QAction *cli = new QAction(QIcon(":/image/app.png"), "显示客户端",this);
    ui->Cli_menu->addAction(cli);
    QAction *help = new QAction(QIcon(":/image/app.png"), "查看帮助",this);
    ui->Help_menu->addAction(help);

    connect(ui->tabWidget->tabBar(),SIGNAL(tabCloseRequested(int)),this,SLOT(removeSubTab(int)));

    //显示距离因子和半径
    connect(ui->settingWidget, SIGNAL(signalRangeFactorChanged(double)), this, SLOT(slotRecvRangeFactorChanged(double)));
    //connect(ui->settingWidget, SIGNAL(set_change_signal()), this, SLOT(reset_window()));

    //弹窗显示数据日志
    mLog = new Dialog_log;
    connect(this, SIGNAL(receiveLogSignal(qint64,QString,QString)),mLog,SLOT(receiveLogSlot(qint64,QString,QString)));
    //弹窗显示客户端
    mCli = new Dialog_cli;
    connect(this, SIGNAL(updateCliSignal(QString,QString,int,int)),mCli,SLOT(slotUpdateClientTable(QString,QString,int,int)));
    //弹窗显示帮助
    mHelo = new dialog_help;

    connect(log,SIGNAL(triggered()),this,SLOT(logButton()));
    connect(cli,SIGNAL(triggered()),this,SLOT(setButton_2()));
    connect(radar,SIGNAL(triggered()),this,SLOT(radar_clicked()));
    connect(ais,SIGNAL(triggered()),this,SLOT(ais_clicked()));
    connect(help,SIGNAL(triggered()),this,SLOT(help_clicked()));
    //默认生成一个AIS界面
    ais_clicked();//aisInit();
    //雷达控制界面
    mControl = new radar_control();
    //获取所有网络接口的列表
    foreach (QNetworkInterface netInterface, QNetworkInterface::allInterfaces())
    {
        //设备名
        qDebug() << "设备名:" << netInterface.name()<<"是否激活:"<<netInterface.flags();

        //MAC地址
        qDebug() << "MAC地址:" << netInterface.hardwareAddress();

        QList<QNetworkAddressEntry> entryList = netInterface.addressEntries();

        //遍历每一个IP地址(每个包含一个IP地址，一个子网掩码和一个广播地址)
        foreach(QNetworkAddressEntry entry, entryList)
        {
            //IP地址
            qDebug() << "IP地址:" << entry.ip().toString();
            ui->mac_comboBox->addItem(entry.ip().toString());

       }
    }
    ui->mac_comboBox->setCurrentText( Utils::Profiles::instance()->value("Radar_Control","Mac_IP").toString());
    //通过代码设置控件的属性
    ui->mac_pushButton->setMinimumSize(ui->draw_pushButton->width(),0);
    ui->mac_pushButton->setMaximumSize(ui->draw_pushButton->width(),ui->draw_pushButton->height());
    //
    ui->label_17->setVisible(false);
    ui->label_18->setVisible(false);
    ui->targe_ini_duration_cnt->setVisible(false);
    ui->target_coast_duration_cnt->setVisible(false);
}

void MainWindow::initRadarCfgInfo()
{
    int  uRadarNum = Utils::Profiles::instance()->value("Radar","Num", 0).toInt();
    if(uRadarNum == 0) return;
    for(int i=1; i<=uRadarNum; i++)
    {
        //从配置文件读取
        QString str_radar = QString("Radar_%1").arg(i);
        ZCHX::Messages::RadarConfig* cfg = new ZCHX::Messages::RadarConfig;
        {
            //添加雷达解析的默认配置
            Utils::Profiles::instance()->setDefault(str_radar, RADAR_ROTATE_RATE_RPM, 30);  //每分钟30转
            Utils::Profiles::instance()->setDefault(str_radar, RADAR_PARSE_MODE, 2); //默认使用开源库解析
            Utils::Profiles::instance()->setDefault(str_radar, RADAR_CONST_THRESHOLD, 100);
            Utils::Profiles::instance()->setDefault(str_radar, RADAR_THRESHOLD_MODE, 1);
            Utils::Profiles::instance()->setDefault(str_radar, RADAR_OSCFAR_ALPHA, 1.5);
            Utils::Profiles::instance()->setDefault(str_radar, RADAR_OSCFAR_REFER_INDEX, 50);
            Utils::Profiles::instance()->setDefault(str_radar, RADAR_OSCFAR_WINDOW_SIZE, 64);
            Utils::Profiles::instance()->setDefault(str_radar, RADAR_MAX_EXTRACTION_SIZE, 7000);
            Utils::Profiles::instance()->setDefault(str_radar, RADAR_MAX_EXTRACTION_AMZ, 0.3);
            Utils::Profiles::instance()->setDefault(str_radar, RADAR_DISCARD_EXTRACTION_AMZ, 3.1415926);
            Utils::Profiles::instance()->setDefault(str_radar, RADAR_DISCARD_EXTRACTION_SIZE, 120000);
            Utils::Profiles::instance()->setDefault(str_radar, RADAR_CORRECTION_SEARCH_RADIUS, 5);
            Utils::Profiles::instance()->setDefault(str_radar, RADAR_CORRECTION_SCAN_COUNT, 2);
            Utils::Profiles::instance()->setDefault(str_radar, RADAR_TRACK_SEARCH_RADIUS, 10);
        }
        cfg->setID(i);
        cfg->setName(str_radar);
        cfg->getTSPIConfig()->SetHost(Utils::Profiles::instance()->value(str_radar,"Track_IP").toString().toStdString());
        cfg->getTSPIConfig()->SetPort(Utils::Profiles::instance()->value(str_radar,"Track_Port").toInt());
        cfg->getVideoConfig()->SetHost(Utils::Profiles::instance()->value(str_radar,"Video_IP").toString().toStdString());
        cfg->getVideoConfig()->SetPort(Utils::Profiles::instance()->value(str_radar,"Video_Port").toInt());
        cfg->setSiteLat(Utils::Profiles::instance()->value(str_radar,"Centre_Lat").toDouble());
        cfg->setSiteLon(Utils::Profiles::instance()->value(str_radar,"Centre_Lon").toDouble());
        cfg->setRadarType(Utils::Profiles::instance()->value(str_radar,"Video_Type").toString());
        cfg->setGateCountMax(Utils::Profiles::instance()->value(str_radar,"Cell_Num").toInt());
        cfg->setShaftEncodingMax(Utils::Profiles::instance()->value(str_radar,"Line_Num").toInt() - 1);
        cfg->setLimit(Utils::Profiles::instance()->value(str_radar,"Limit").toBool());
        cfg->setLoopNum(Utils::Profiles::instance()->value(str_radar,"Loop_Num").toInt());
        cfg->setHead(Utils::Profiles::instance()->value(str_radar,"Heading").toInt());
        cfg->setHeartTimeInterval(Utils::Profiles::instance()->value(str_radar,"Heart_Time").toInt());
        cfg->setCmdIP(Utils::Profiles::instance()->value(str_radar,"Heart_IP").toString());
        cfg->setCmdPort(Utils::Profiles::instance()->value(str_radar,"Heart_Port").toInt());
        cfg->setDistance(Utils::Profiles::instance()->value(str_radar,"Distance").toInt());
        cfg->setTrackClearTime(Utils::Profiles::instance()->value(str_radar,"ClearTrack_Time").toInt());
        cfg->setReportIP(Utils::Profiles::instance()->value(str_radar,"Report_IP").toString());
        cfg->setReportPort(Utils::Profiles::instance()->value(str_radar,"Report_Port").toInt());
        cfg->setReportOpen(Utils::Profiles::instance()->value(str_radar,"Report_Open").toBool());
        cfg->setRotationRate(Utils::Profiles::instance()->value(str_radar, RADAR_ROTATE_RATE_RPM).toDouble());
        cfg->setParseMode(Utils::Profiles::instance()->value(str_radar, RADAR_PARSE_MODE).toInt());
        cfg->setThresholdMode(Utils::Profiles::instance()->value(str_radar, RADAR_THRESHOLD_MODE).toInt());
        cfg->setConstantHoldValue(Utils::Profiles::instance()->value(str_radar, RADAR_CONST_THRESHOLD).toInt());
        cfg->setOscfarAlphaCoeff(Utils::Profiles::instance()->value(str_radar, RADAR_OSCFAR_ALPHA).toDouble());
        cfg->setOscfarThresHoldIndex(Utils::Profiles::instance()->value(str_radar, RADAR_OSCFAR_REFER_INDEX).toInt());
        cfg->setOscfarWidowSize(Utils::Profiles::instance()->value(str_radar, RADAR_OSCFAR_WINDOW_SIZE).toInt());
        cfg->setExtractionMaxBin(Utils::Profiles::instance()->value(str_radar, RADAR_MAX_EXTRACTION_SIZE).toInt());
        cfg->setExtractionMaxAmz(Utils::Profiles::instance()->value(str_radar, RADAR_MAX_EXTRACTION_AMZ).toDouble());
        cfg->setDiscardExtractionMaxAmz(Utils::Profiles::instance()->value(str_radar, RADAR_DISCARD_EXTRACTION_AMZ).toDouble());
        cfg->setDiscardExtractionMaxBin(Utils::Profiles::instance()->value(str_radar, RADAR_DISCARD_EXTRACTION_SIZE).toInt());
        cfg->setCorratedRadius(Utils::Profiles::instance()->value(str_radar, RADAR_CORRECTION_SEARCH_RADIUS).toDouble());
        cfg->setCorratedScansNum(Utils::Profiles::instance()->value(str_radar, RADAR_CORRECTION_SCAN_COUNT).toInt());
        cfg->setTargetSearchRadius(Utils::Profiles::instance()->value(str_radar, RADAR_TRACK_SEARCH_RADIUS).toDouble());


        mRadarConfigMap[cfg->getID()] = cfg;
        qDebug()<<cfg->getSiteLat()<<cfg->getSiteLong();
        //初始化界面的雷达解析配置
        ui->const_threahole_val->setText(QString::number(cfg->getConstantHoldValue()));
        ui->oscfar_alpha->setText(QString::number(cfg->getOscfarAlphaCoeff()));
        ui->oscfar_refer_index->setText(QString::number(cfg->getOscfarThresHoldIndex()));
        ui->oscfar_window_size->setText(QString::number(cfg->getOscfarWidowSize()));
        ui->radar_duration->setText(QString::number(cfg->getRotationDuration()));
        ui->max_extraction_bin->setText(QString::number(cfg->getExtractionMaxBin()));
        ui->max_extraction_amz->setText(QString::number(cfg->getExtractionMaxAmz()));
        ui->discard_extraction_amz->setText(QString::number(cfg->getDiscardExtractionMaxAmz()));
        ui->discard_extraction_bin->setText(QString::number(cfg->getDiscardExtractionMaxBin()));
        ui->correct_extraction_radius_txt->setText(QString::number(cfg->getCorratedRadius()));
        ui->correct_scans_num->setText(QString::number(cfg->getCorratedScansNum()));
        ui->target_search_radius->setText(QString::number(cfg->getTargetSearchRadius()));
        ui->threshold_type->setCurrentIndex(1);
    }
}


void MainWindow::initUI()
{

    QIcon icon = QIcon(":/image/app.png");
    if(icon.isNull())
    {
        cout<<"icon image not found!!!!!!!!!!!!!!!!!!";
    } else
    {
        cout<<"$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$"<<endl;
    }
    this->setWindowIcon(icon);
    ui->tabWidget->setCurrentIndex(0);//显示的页面
    ui->tableWidget->horizontalHeader()->setDefaultSectionSize(120);//设置列的宽度
    //ui->tableWidget->setColumnWidth(1, 60);//第一列的宽度
    ui->tableWidget->setColumnWidth(2, 60);
    ui->tableWidget->setColumnWidth(3, 60);
    ui->tableWidget->setColumnWidth(4, 150);
    ui->tableWidget->setColumnWidth(5, 150);
    ui->tableWidget->setColumnHidden(0, true);
    //ui->tableWidget->horizontalHeader()->setSectionResizeMode(QHeaderView::Stretch);
    mTimeLable = new QLabel(this);
    mVirtualIpWorkingLbl = new QLabel(this);
    mVirtualIpWorkingLbl->setStyleSheet("color:red;font-weight:bold;font-size:18;");
//    ui->horizontalLayout->addItem(new QSpacerItem(40,20, QSizePolicy::Expanding, QSizePolicy::Preferred));
//    ui->horizontalLayout->addWidget(mVirtualIpWorkingLbl);
//    ui->horizontalLayout->addItem(new QSpacerItem(40,20, QSizePolicy::Expanding, QSizePolicy::Preferred));
//    ui->horizontalLayout->addWidget(mTimeLable);
//    QTimer *updateTimer = new QTimer(this);
//    updateTimer->setInterval(1);
//    connect(updateTimer, SIGNAL(timeout()), this, SLOT(slotDisplaycurTime()));
//    updateTimer->start();
    connect(ui->settingWidget, SIGNAL(signalRadarConfigChanged(int,int,int)), this, SLOT(slotRadarConfigChanged(int,int,int)));

    connect(this, SIGNAL(signalRadarConfigChanged(int,int,int)), this, SLOT(slotRadarConfigChanged(int,int,int)));
    //ui->doubleSpinBox->setValue(13.0);
}

void MainWindow::closeEvent(QCloseEvent *)
{
    mAnalysisAndSendRadarList[0]->closeTT();
    QProcess p(0);
    p.start("cmd", QStringList()<<"/c"<<"taskkill /f /im data_collect_server.exe");
    p.waitForStarted();
    p.waitForFinished();

}

void MainWindow::slotDisplaycurTime()
{
    mTimeLable->setText(DataServerUtils::currentTimeString());
}

void MainWindow::toolAction(QMenu *menu, QToolBar *toolBar)
{

}

void MainWindow::onPower()
{

}

void MainWindow::onConfig()
{

}

void MainWindow::onOutInter()
{

}

void MainWindow::onProtocal()
{
}

void MainWindow::slotRecvWorkerMsg(const QString &msg)
{
    slotRecvHearMsg(msg);
}

void MainWindow::slotRecvHearMsg(QString msg)
{
//    slotInsertLogInfo(msg);
    receiveContent(QDateTime::currentMSecsSinceEpoch(), "NETWORK", msg);
}

void MainWindow::slotInsertLogInfo(const QString &msg)
{

}

void MainWindow::slotUpdateVirtualIpString(const QString &msg)
{
    mVirtualIpWorkingLbl->setText(msg);
    mVirtualIpWorkingLbl->setStyleSheet("color:red;font-weight:bold;font-size:18;");
}

MainWindow::~MainWindow()
{
    if(mAisSetting)
    {
        delete mAisSetting;
        mAisSetting = NULL;
    }
    if(pRadarDataServer)
    {
        delete pRadarDataServer;
        pRadarDataServer = NULL;
    }
    if(pAnalysisAndSendRadar)
    {
        delete pAnalysisAndSendRadar;
        pAnalysisAndSendRadar = NULL;
    }
    if(mpRadarEchoDataChange)
    {
        delete mpRadarEchoDataChange;
        mpRadarEchoDataChange = NULL;
    }
    if(mAisDataServer)
    {
        delete mAisDataServer;
        mAisDataServer = NULL;
    }
    if(mAisDataProc)
    {
        delete mAisDataProc;
        mAisDataProc = 0;
    }
    if(mRadarDataServerList.size()>0)
    {
        for(int i = 0;i<mRadarDataServerList.size();i++)
        {
            if(mRadarDataServerList[i] != NULL)
            {
                delete mRadarDataServerList[i];
                mRadarDataServerList[i] = NULL;
            }
        }
        mRadarDataServerList.clear();
    }
    if(mAnalysisAndSendRadarList.size()>0)
    {
        for(int i = 0;i<mAnalysisAndSendRadarList.size();i++)
        {
            if(mAnalysisAndSendRadarList[i] != NULL)
            {
                delete mAnalysisAndSendRadarList[i];
                mAnalysisAndSendRadarList[i] = NULL;
            }
        }
        mAnalysisAndSendRadarList.clear();
    }
    delete mLog;//日志弹窗
    delete mSet;//雷达配置
    delete mCli;
    delete ui;
}

void MainWindow::receiveContent(qint64 time, const QString& name, const QString& content)
{
    ui->listWidget->insertItem(0, QString("%1---%2---%3").arg(DataServerUtils::time2String(time, true)).arg(name).arg(content));
    if(ui->listWidget->count() > 100)
    {
        QListWidgetItem* item = ui->listWidget->takeItem(99);
        delete item;
    }
    emit receiveLogSignal(time, name, content);
}

void MainWindow::slotUpdateClientTable(const QString& ip, const QString& name, int port, int inout)
{
    QString sIpPort = ip+QString::number(port);
    if(inout == 1)
    {
        //客户端连上
        if(!mClientList.contains(sIpPort))
        {
            cout<<"连接"<<sIpPort;
            mClientList.append(sIpPort);
            //添加到第一行
            ui->tableWidget->insertRow(0);
            ui->tableWidget->setItem(0, 0, new HqTableWidgetItem(name));
            ui->tableWidget->setItem(0, 1, new HqTableWidgetItem(ip));
            ui->tableWidget->setItem(0, 2, new HqTableWidgetItem(QString::number(port)));
            ui->tableWidget->setItem(0, 3, new HqTableWidgetItem(QStringLiteral("已连接")));
            ui->tableWidget->setItem(0, 4, new HqTableWidgetItem(DataServerUtils::currentTimeString()));
            ui->tableWidget->setItem(0, 5, new HqTableWidgetItem("-"));
        }
    } else
    {
        //客户端离开
        if(mClientList.contains(sIpPort))
        {
            mClientList.removeOne(sIpPort);
            //从表格删除
            cout<<"断开"<<sIpPort;
            for(int i=0; i<ui->tableWidget->rowCount(); i++)
            {
                QTableWidgetItem *item = ui->tableWidget->item(i, 1);
                QTableWidgetItem *portItem = ui->tableWidget->item(i, 2);

                if(item && portItem)
                {
                    QString str = item->text()+portItem->text();
                    if(sIpPort == str)
                    {
                        ui->tableWidget->item(i,3)->setText(QStringLiteral("已断开"));
                        ui->tableWidget->item(i,5)->setText(DataServerUtils::currentTimeString());
                    }
                }
            }
        }
    }
    emit updateCliSignal(ip, name, port, inout);//更新客户端信号
}
//打开雷达
void MainWindow::on_openRadarBtn_clicked()
{
    emit signalOpenRadar();
}
//关闭雷达
void MainWindow::on_closeRadarBtn_clicked()
{
    emit signalcloseRadar();
}

void MainWindow::on_saveRadarBtn_clicked()
{
}

void MainWindow::on_uploadRadarBtn_clicked()
{
    int radarID = 1;
    bool ok;

    // 雷达电源
    int type = INFOTYPE::POWER;
    int value = ui->Power_lineEdit->text().toInt(&ok);
    if (ok)
    {
        emit signalRadarConfigChanged(radarID, type, value);
    }

    // 扫描速度
    type = INFOTYPE::SCAN_SPEED;
    value = ui->speed_lineEdit->text().toInt(&ok);
    if (ok)
    {
        emit signalRadarConfigChanged(radarID, type, value);
    }

    // 天线高度
    type = INFOTYPE::ANTENNA_HEIGHT;
    value = ui->Antenna_lineEdit->text().toInt(&ok);
    if (ok)
    {
        emit signalRadarConfigChanged(radarID, type, value);
    }

    // 方位校准
    type = INFOTYPE::BEARING_ALIGNMENT;
    value = ui->Bearing_lineEdit->text().toInt(&ok);
    if (ok)
    {
        emit signalRadarConfigChanged(radarID, type, value);
    }

    // 半径
    type = INFOTYPE::RANG;
    value = ui->Rang_lineEdit->text().toInt(&ok);
    if (ok)
    {
        emit signalRadarConfigChanged(radarID, type, value);
    }

    // 增益
    type = INFOTYPE::GAIN;
    value = ui->Gain_lineEdit->text().toInt(&ok);
    if (ok)
    {
        emit signalRadarConfigChanged(radarID, type, value);
    }

    // 海杂波
    type = INFOTYPE::SEA_CLUTTER;
    value = ui->Sea_lineEdit->text().toInt(&ok);
    if (ok)
    {
        emit signalRadarConfigChanged(radarID, type, value);
    }

    // 雨杂波
    type = INFOTYPE::RAIN_CLUTTER;
    value = ui->Rain_lineEdit->text().toInt(&ok);
    if (ok)
    {
        emit signalRadarConfigChanged(radarID, type, value);
    }

    // 噪声抑制
    type = INFOTYPE::NOISE_REJECTION;
    value = ui->Noise_lineEdit->text().toInt(&ok);
    if (ok)
    {
        emit signalRadarConfigChanged(radarID, type, value);
    }

    // 旁瓣抑制
    type = INFOTYPE::SIDE_LOBE_SUPPRESSION;
    value = ui->Side_lineEdit->text().toInt(&ok);
    if (ok)
    {
        emit signalRadarConfigChanged(radarID, type, value);
    }

    // 抗干扰
    type = INFOTYPE::INTERFERENCE_REJECTION;
    value = ui->Interference_lineEdit->text().toInt(&ok);
    if (ok)
    {
        emit signalRadarConfigChanged(radarID, type, value);
    }

    // 本地抗干扰
    type = INFOTYPE::LOCAL_INTERFERENCE_REJECTION;
    value = ui->Local_lineEdit->text().toInt(&ok);
    if (ok)
    {
        emit signalRadarConfigChanged(radarID, type, value);
    }

    // 目标分离
    type = INFOTYPE::TARGET_SEPARATION;
    value = ui->separation_lineEdit->text().toInt(&ok);
    if (ok)
    {
        emit signalRadarConfigChanged(radarID, type, value);
    }

    // 目标扩展
    type = INFOTYPE::TARGET_EXPANSION;
    value = ui->expansion_lineEdit->text().toInt(&ok);
    if (ok)
    {
        emit signalRadarConfigChanged(radarID, type, value);
    }

    // 目标推进
    type = INFOTYPE::TARGET_BOOST;
    value = ui->boost_lineEdit->text().toInt(&ok);
    if (ok)
    {
        emit signalRadarConfigChanged(radarID, type, value);
    }
}

void MainWindow::slotRadarConfigChanged(int radarID, int type, int value)
{
    foreach (ZCHXRadarDataServer* server, mRadarDataServerList) {
        if(radarID == server->sourceID()){
            server->setControlValue((INFOTYPE)type, value);
        }
    }
}
//1_打印统计丢包率
void MainWindow::show_statistics_slot(int a, int b, int c, int d, int e)
{
    if(zeor_flag == a)
    {
        cout<<"需要打开雷达";
    }
    else
    {
        cout<<"雷达接收正常";
        cout<<"丢包率"<<a<<c;
    }
    zeor_flag = a;
    QString str_packets = QString("%1/%2").arg(a).arg(b);
    ui->lineEdit_5->setText(str_packets);
    QString str_spoles = QString("%1/%2/%3").arg(c).arg(d).arg(e);
    ui->lineEdit_6->setText(str_spoles);
    zeor_flag = a;
}
//界面显示目标个数
void MainWindow::show_video_slot(int a, int b)
{
    ui->lineEdit_3->setText(QString::number(a));
    ui->lineEdit_4->setText(QString::number(b));
}
//打印传入周老师库的数据
void MainWindow::show_info_slot(QString str)
{
        QString info_r =  str+"\n";
        static int name_num = 1;
        //cout<<"标志打印"<<prt;
        if(txt == true)
        {
            QDir dir;
            dir.cd("../");  //进入某文件夹
            if(!dir.exists("传入周老师库的数据"))//判断需要创建的文件夹是否存在
            {
                dir.mkdir("传入周老师库的数据"); //创建文件夹
            }
            QString file_name ="../传入周老师库的数据/传入周老师库的数据_" + QString::number(name_num) + ".txt";
            QFile file(file_name);//创建文件对象
            bool isOk = file.open(QIODevice::Text |QIODevice::WriteOnly |QIODevice::Append);
            int a = file.size()/1024;
            if(a > 30720) //当文本大于30M时 新建另一个文本写入数据
            {
                name_num++;
            }
            if(false == isOk)
            {
                cout <<"打开文件失败";
                return;
            }
            if(true == isOk)
            {
                file.write(info_r.toStdString().data());
            }
            file.close();
        }
}
//打印传入周老师库数据
void MainWindow::on_pushButton_clicked()
{

}
//打印AIS数据
void MainWindow::on_pushButton_3_clicked()
{
    t_2 = true;
    emit prtAisSignal(t_2);
}
void MainWindow::on_pushButton_4_clicked()
{
    t_2 = false;
    emit prtAisSignal(t_2);
}
//打印回波数据
void MainWindow::on_pushButton_5_clicked()
{
    t_3 = true;
    emit prtVideoSignal(t_3);
}
void MainWindow::on_pushButton_6_clicked()
{
    t_3 = false;
    emit prtVideoSignal(t_3);
}
//设置画笔宽度信号
void MainWindow::on_pushButton_7_clicked()
{
    int penwidth = ui->lineEdit_7->text().toInt();
    emit signal_set_penwidth(penwidth);
}
//1_实时打印接收到的雷达状态信息
void MainWindow::slotRecvRadarReportInfo_1(QList<RadarStatus> radarStatusList,int val)
{
   // cout<<"显示当前雷达状态";
    foreach (RadarStatus element, radarStatusList) {
        int elelmentID = element.id;// 消息类型
        int min = element.min;// value可设置的最小值
        int max = element.max;// value可设置的最大值
        int value = element.value;// 当前值
        int unit = element.unit; // 值类型
        QString str = RadarStatus::getTypeString(element.id);
//        cout<<"elelmentID"<<elelmentID;
//        cout<<"min"<<min;
//        cout<<"max"<<max;
//        cout<<"value"<<value;
//        cout<<"unit"<<unit;
//        cout<<"str"<<str;
        if(elelmentID == 1)
            ui->Power_lineEdit->setText(QString::number(value));
        if(elelmentID == 2)
            ui->speed_lineEdit->setText(QString::number(value));
        if(elelmentID == 3)
            ui->Antenna_lineEdit->setText(QString::number(value));
        if(elelmentID == 4)
            ui->Bearing_lineEdit->setText(QString::number(value));
        if(elelmentID == 5)
            ui->Rang_lineEdit->setText(QString::number(value));
        if(elelmentID == 6)
            ui->Gain_lineEdit->setText(QString::number(value));
        if(elelmentID == 7)
            ui->Sea_lineEdit->setText(QString::number(value));
        if(elelmentID == 8)
            ui->Rain_lineEdit->setText(QString::number(value));
        if(elelmentID == 9)
            ui->Noise_lineEdit->setText(QString::number(value));
        if(elelmentID == 10)
            ui->Side_lineEdit->setText(QString::number(value));
        if(elelmentID == 11)
            ui->Interference_lineEdit->setText(QString::number(value));
        if(elelmentID == 12)
            ui->Local_lineEdit->setText(QString::number(value));
        if(elelmentID == 13)
            ui->expansion_lineEdit->setText(QString::number(value));
        if(elelmentID == 14)
            ui->boost_lineEdit->setText(QString::number(value));
        if(elelmentID == 15)
            ui->separation_lineEdit->setText(QString::number(value));
    }
}

void MainWindow::slotRecvRangeFactorChanged(double factor)
{
    cout<<"距离因子改变了"<<factor;
//    foreach (ZCHXAnalysisAndSendRadar * server, mAnalysisAndSendRadarList) {
//        if(server) server->setRangeFactor(factor);
//    }
}

void MainWindow::setRadarVideoAndTargetPixmap(const QPixmap &videoPixmap,const Afterglow &dataAfterglow)
{
    //cout<<"主界面开始画图";
    QPixmap pixmap = videoPixmap;
    //cout<<"pixmap.scaled"<<pixmap.size();
    if(pixmap.size() == QSize(0,0))
    {
        cout<<"图片太小了";
        return;
    }
    QPixmap pixmap_1 = pixmap.scaled(ui->videoImageLabel->width(), ui->videoImageLabel->height(), Qt::KeepAspectRatio);
    //cout<<"是否为空";
    if(m_drawpic == false)
        ui->videoImageLabel->clear();
    else
        ui->videoImageLabel->setPixmap(pixmap_1);
}
//雷达菜单按下
void MainWindow::radar_clicked()
{
//    QWidget *p = new ZCHXRadarAisSetting;
//    index++;
//    ui->tabWidget->addTab(p,"雷达-"+QString::number(index));
}
//AIS菜单按下
void MainWindow::ais_clicked()
{
    mAisSetting = new AIS_Setting(0);
    ui->tabWidget->addTab(mAisSetting,"AIS-"+QString::number(1));
    //加载AIS文件
    connect(mAisSetting,SIGNAL(send_ais_signal(QByteArray)),this,SIGNAL(send_ais_signal(QByteArray)));
    //接收模拟器上ais数据
    mAisDataServer = new ZCHXAisDataServer(0);
    mAisDataProc = new zchxAisDataProcessor(0);
    connect(mAisDataServer, SIGNAL(signalSendRecvedContent(qint64,QString,QString)),
            this, SLOT(receiveContent(qint64,QString,QString)));
    connect(mAisDataServer, SIGNAL(signalSocketMsg(QString)),\
            this, SLOT(slotRecvHearMsg(QString)));
    connect(mAisDataServer, SIGNAL(signalSendAisData(QByteArray)), \
            mAisDataProc, SIGNAL(signalRecvAisData(QByteArray)));
    connect(mAisDataProc, SIGNAL(signalClientInout(QString,QString,int,int)),
            this, SLOT(slotUpdateClientTable(QString,QString,int,int)));
    connect(mAisDataProc, SIGNAL(signalSendRecvedContent(qint64,QString,QString)), \
            this, SLOT(receiveContent(qint64,QString,QString)));
    emit mAisDataServer->startProcessSignal();
    emit mAisDataProc->signalInitZmq();
    //加载AIS文件
    connect(this,SIGNAL(send_ais_signal(QByteArray)),mAisDataProc,SLOT(slotProcessAisData(QByteArray)));
    //打印AIS数据
    connect(this, SIGNAL(prtAisSignal(bool)),mAisDataProc,SLOT(prtAisSlot(bool)));
    //重新生成AIS解析对象
    connect(mAisSetting,SIGNAL(newAisClassSignal()),this,SLOT(newAisClassSlot()));
    //显示AIS目标
    connect(mAisDataProc, SIGNAL(signalAisTrackData(int,double,double)),mAisSetting,SLOT(slotDrawAisTrack(int,double,double)));
    //输出AIS自定义模拟数据
    connect(mAisSetting, SIGNAL(signalSendAislist(ITF_AISList)), mAisDataProc, SLOT(slotSendAis(ITF_AISList)));
//    index++;
//    Utils::Profiles::instance()->setValue("Radar","AIS_Num",index);
}
//帮助菜单按下
void MainWindow::help_clicked()
{
    mHelo->show();
}
//弹窗显示日志
void MainWindow::logButton()
{
    mLog->exec();
}
//弹窗显示雷达配置
void MainWindow::on_setButton_clicked()
{
    mSet->exec();
}
//弹窗显示客户端信息
void MainWindow::setButton_2()
{
    mCli->exec();
}
//重新启动采集器
void MainWindow::reset_window()
{
    cout<<"重新启动采集器";
    QString program = QApplication::applicationFilePath();
        QStringList arguments = QApplication::arguments();
        QString workingDirectory = QDir::currentPath();
        QProcess::startDetached(program, arguments, workingDirectory);
        QApplication::exit();

}
//导入回波文件
void MainWindow::on_logButton_3_clicked()
{
    QString file_name = QFileDialog::getOpenFileName(NULL,"导入回波文件","../回波数据/","*");
    ui->videoDataPath_lineEdit->setText(file_name);
    //delete up_video;
    up_video = new up_video_pthread("video",file_name,0);
    up_video->start();
    connect(up_video,SIGNAL(send_video_signal(QByteArray,QString,int,int,int)),this,SIGNAL(send_video_signal(QByteArray,QString,int,int,int)));
}
//打开绘图
void MainWindow::on_draw_pushButton_clicked()
{
    switch(m_drawpic)
    {
        case true:
            cout<<"关闭";
            m_drawpic = false;
            ui->draw_pushButton->setText("打开绘图");
            Utils::Profiles::instance()->setValue("Radar_1","draw_pic", m_drawpic);
            ui->videoImageLabel->clear();
            break;
        case false:
            m_drawpic = true;
            cout<<"打开";
            ui->draw_pushButton->setText("关闭绘图");
            Utils::Profiles::instance()->setValue("Radar_1","draw_pic", m_drawpic);
            break;
    }
}
//设置目标距离
void MainWindow::on_pushButton_9_clicked()
{
    cout<<"设置目标距离"<<ui->radius_lineEdit->text().toInt();
    Utils::Profiles::instance()->setValue("Radar_1","Radius", ui->radius_lineEdit->text().toInt());

}
//显示历史目标个数
void MainWindow::show_newtrack_count(int a)
{
    ui->lineEdit_9->setText(QString::number(a));
}
//显示串口通讯
void MainWindow::on_serial_pushButton_clicked()
{
    //mComConfigWidget->show();
}
//开始接收串口数据
void MainWindow::slotSetComDevParams(const QMap<QString, COMDEVPARAM> &param)
{
    //开始接收串口数据
    mComDataMgr->setComDevParams(param);
}
//配置GPS输出zmq
void MainWindow::slotUpdateZmq(QString port, QString topic)
{
    PROFILES_INSTANCE->setValue(SERVER_SETTING_SEC, "GPS_Send_Port", port.toInt());
    PROFILES_INSTANCE->setValue(SERVER_SETTING_SEC, "GPS_Topic", topic);

    mOutWorker->setTrackSendPort( port.toInt());
    mOutWorker->setTrackTopic(topic);
}
//删除显示页
void MainWindow::removeSubTab(int dex)
{
    cout<<"页面编号index"<<dex;
    QString result = ui->tabWidget->tabText(dex);
    ui->tabWidget->removeTab(dex);
    cout<<result;
    QRegExp na("(\\w)"); //初始化名称结果
    QString name("");
    if(na.indexIn(result) != -1)
    {
        //匹配成功
        name = na.cap(0);
    }
    cout<<"name"<<name;
    if(name == "A")
    {
        index--;
        Utils::Profiles::instance()->setValue("Radar","AIS_Num",index);
    }
}
//保存析构老对象新生成AIS解析对象
void MainWindow::newAisClassSlot()
{
   cout<<"重新启动采集器";
    QString program = QApplication::applicationFilePath();
        QStringList arguments = QApplication::arguments();
        QString workingDirectory = QDir::currentPath();
        QProcess::startDetached(program, arguments, workingDirectory);
        QApplication::exit();
}

void MainWindow::on_xinke_pushButton_clicked()
{
    QString file_name = QFileDialog::getOpenFileName(NULL,"导入目标文件","../回波数据/","*");
    ui->videoDataPath_lineEdit->setText(file_name);
    //delete up_video;
    up_video = new up_video_pthread("track",file_name,0);
    up_video->start();
    connect(up_video,SIGNAL(send_video_signal(QByteArray,QString,int,int,int)),
            this,SIGNAL(send_video_signal(QByteArray,QString,int,int,int)));
}

void MainWindow::on_control_pushButton_clicked()
{
    mControl->exec();
}

void MainWindow::joinGropslot(QString str)//判断加入组播是否成功
{
    if(str == "s")
    {
        QMessageBox::information(0,QStringLiteral("信息"),QStringLiteral("加入组播成功"));
    }
    if(str == "f")
    {
        QMessageBox::information(0,QStringLiteral("信息"),QStringLiteral("加入组播失败"));
    }
}

void MainWindow::on_mac_pushButton_clicked()
{
    Utils::Profiles::instance()->setValue("Radar_Control","Mac_IP",ui->mac_comboBox->currentText());
    QMessageBox::information(0,QStringLiteral("信息"),QStringLiteral("保存成功"));
    cout<<"重新启动采集器";
    QString program = QApplication::applicationFilePath();
        QStringList arguments = QApplication::arguments();
        QString workingDirectory = QDir::currentPath();
        QProcess::startDetached(program, arguments, workingDirectory);
        QApplication::exit();
}
//设置距离因子
//void MainWindow::on_doubleSpinBox_valueChanged(double arg1)
//{
//    slotRecvRangeFactorChanged(arg1);
//}

void MainWindow::aisInit()
{
//    for(int i = 1; i<index; i++)
//    {
//        mAisSetting = new AIS_Setting(0);
//        ui->tabWidget->addTab(mAisSetting,"AIS-"+QString::number(i));
//        //加载AIS文件
//        connect(mAisSetting,SIGNAL(send_ais_signal(QByteArray)),this,SIGNAL(send_ais_signal(QByteArray)));
//        //接收模拟器上ais数据
//        mAisDataServer = new ZCHXAisDataServer(0);
//        mAisDataProc = new zchxAisDataProcessor(0);
//        connect(mAisDataServer, SIGNAL(signalSendRecvedContent(qint64,QString,QString)),
//                this, SLOT(receiveContent(qint64,QString,QString)));
//        connect(mAisDataServer, SIGNAL(signalSocketMsg(QString)),
//                this, SLOT(slotRecvHearMsg(QString)));
//        connect(mAisDataServer, SIGNAL(signalSendAisData(QByteArray)),
//                mAisDataProc, SIGNAL(signalRecvAisData(QByteArray)));
//        connect(mAisDataProc, SIGNAL(signalClientInout(QString,QString,int,int)),
//                this, SLOT(slotUpdateClientTable(QString,QString,int,int)));
//        connect(mAisDataProc, SIGNAL(signalSendRecvedContent(qint64,QString,QString)),
//                this, SLOT(receiveContent(qint64,QString,QString)));
//        emit mAisDataServer->startProcessSignal();
//        emit mAisDataProc->signalInitZmq();
//        //加载AIS文件
//        connect(this,SIGNAL(send_ais_signal(QByteArray)),mAisDataProc,SLOT(slotProcessAisData(QByteArray)));
//        //打印AIS数据
//        connect(this, SIGNAL(prtAisSignal(bool)),mAisDataProc,SLOT(prtAisSlot(bool)));
//        //重新生成AIS解析对象
//        connect(mAisSetting,SIGNAL(newAisClassSignal()),this,SLOT(newAisClassSlot()));
//        //显示AIS目标
//        connect(mAisDataProc, SIGNAL(signalAisTrackData(int,double,double)),mAisSetting,SLOT(slotDrawAisTrack(int,double,double)));
//        //输出AIS自定义模拟数据
//        connect(mAisSetting, SIGNAL(signalSendAislist(ITF_AISList)), mAisDataProc, SLOT(slotSendAis(ITF_AISList)));

//    }

}

void MainWindow::on_radar_parse_setting_clicked()
{
    //保存到配置文件
    int  uRadarNum = PROFILES_INSTANCE->value("Radar","Num", 0).toInt();
    if(uRadarNum == 0) return;
    for(int i=1; i<=uRadarNum; i++)
    {
        //从配置文件读取
        QString str_radar = QString("Radar_%1").arg(i);
        PROFILES_INSTANCE->setValue(str_radar, RADAR_THRESHOLD_MODE, ui->threshold_type->currentIndex());
        PROFILES_INSTANCE->setValue(str_radar, RADAR_CONST_THRESHOLD, ui->const_threahole_val->text().toInt());
        PROFILES_INSTANCE->setValue(str_radar, RADAR_OSCFAR_ALPHA, ui->oscfar_alpha->text().toDouble());
        PROFILES_INSTANCE->setValue(str_radar, RADAR_OSCFAR_REFER_INDEX, ui->oscfar_refer_index->text().toInt());
        PROFILES_INSTANCE->setValue(str_radar, RADAR_OSCFAR_WINDOW_SIZE, ui->oscfar_window_size->text().toInt());
        PROFILES_INSTANCE->setValue(str_radar, RADAR_ROTATE_RATE_RPM, 60.0 / ui->radar_duration->text().toDouble());
        PROFILES_INSTANCE->setValue(str_radar, RADAR_MAX_EXTRACTION_SIZE, ui->max_extraction_bin->text().toInt());
        PROFILES_INSTANCE->setValue(str_radar, RADAR_MAX_EXTRACTION_AMZ, ui->max_extraction_amz->text().toDouble());
        PROFILES_INSTANCE->setValue(str_radar, RADAR_DISCARD_EXTRACTION_SIZE, ui->discard_extraction_bin->text().toInt());
        PROFILES_INSTANCE->setValue(str_radar, RADAR_DISCARD_EXTRACTION_AMZ, ui->discard_extraction_amz->text().toDouble());
        PROFILES_INSTANCE->setValue(str_radar, RADAR_CORRECTION_SEARCH_RADIUS, ui->correct_extraction_radius_txt->text().toDouble());
        PROFILES_INSTANCE->setValue(str_radar, RADAR_CORRECTION_SCAN_COUNT, ui->correct_scans_num->text().toInt());
        PROFILES_INSTANCE->setValue(str_radar, RADAR_TRACK_SEARCH_RADIUS, ui->target_search_radius->text().toDouble());
        RadarConfig* cfg = mRadarConfigMap[i];
        cfg->setRotationRate(Utils::Profiles::instance()->value(str_radar, RADAR_ROTATE_RATE_RPM).toDouble());
        cfg->setParseMode(Utils::Profiles::instance()->value(str_radar, RADAR_PARSE_MODE).toInt());
        cfg->setThresholdMode(Utils::Profiles::instance()->value(str_radar, RADAR_THRESHOLD_MODE).toInt());
        cfg->setConstantHoldValue(Utils::Profiles::instance()->value(str_radar, RADAR_CONST_THRESHOLD).toInt());
        cfg->setOscfarAlphaCoeff(Utils::Profiles::instance()->value(str_radar, RADAR_OSCFAR_ALPHA).toDouble());
        cfg->setOscfarThresHoldIndex(Utils::Profiles::instance()->value(str_radar, RADAR_OSCFAR_REFER_INDEX).toInt());
        cfg->setOscfarWidowSize(Utils::Profiles::instance()->value(str_radar, RADAR_OSCFAR_WINDOW_SIZE).toInt());
        cfg->setExtractionMaxBin(Utils::Profiles::instance()->value(str_radar, RADAR_MAX_EXTRACTION_SIZE).toInt());
        cfg->setExtractionMaxAmz(Utils::Profiles::instance()->value(str_radar, RADAR_MAX_EXTRACTION_AMZ).toDouble());
        cfg->setDiscardExtractionMaxAmz(Utils::Profiles::instance()->value(str_radar, RADAR_DISCARD_EXTRACTION_AMZ).toDouble());
        cfg->setDiscardExtractionMaxBin(Utils::Profiles::instance()->value(str_radar, RADAR_DISCARD_EXTRACTION_SIZE).toInt());
        cfg->setCorratedRadius(Utils::Profiles::instance()->value(str_radar, RADAR_CORRECTION_SEARCH_RADIUS).toDouble());
        cfg->setCorratedScansNum(Utils::Profiles::instance()->value(str_radar, RADAR_CORRECTION_SCAN_COUNT).toInt());
        cfg->setTargetSearchRadius(Utils::Profiles::instance()->value(str_radar, RADAR_TRACK_SEARCH_RADIUS).toDouble());
    }

    //启动第三方库解析
    foreach (ZCHXAnalysisAndSendRadar* worker, mAnalysisAndSendRadarList) {
        ZCHXGetTrackProcess* processor = worker->getVideoProcessor();
        if(!processor) continue;
        processor->setParseParamsUpdated(true);
//        processor->setVideoThresholdMode(ui->threshold_type->currentIndex());
//        if(ui->threshold_type->currentIndex() == 0 && !ui->const_threahole_val->text().isEmpty())
//        {
//            processor->setVideoConstantThresholdVal(ui->const_threahole_val->text().toInt());
//        }
//        if(ui->threshold_type->currentIndex() == 1)
//        {
//            if(ui->oscfar_alpha->text().length() > 0 &&
//                    ui->oscfar_window_size->text().length() > 0 &&
//                    ui->oscfar_refer_index->text().length() > 0 )
//            {
//                processor->setOscfarParams(ui->oscfar_window_size->text().toInt(), ui->oscfar_refer_index->text().toInt(), ui->oscfar_alpha->text().toDouble());
//            }
//        }
    }
}

void MainWindow::on_threshold_type_currentIndexChanged(int index)
{
    if(index == 0){
        ui->label_20->setVisible(false);
        ui->label_21->setVisible(false);
        ui->label_22->setVisible(false);
        ui->oscfar_window_size->setVisible(false);
        ui->oscfar_alpha->setVisible(false);
        ui->oscfar_refer_index->setVisible(false);
        ui->label_19->setVisible(true);
        ui->const_threahole_val->setVisible(true);
    } else if(index == 1)
    {
        ui->label_20->setVisible(true);
        ui->label_21->setVisible(true);
        ui->label_22->setVisible(true);
        ui->oscfar_window_size->setVisible(true);
        ui->oscfar_alpha->setVisible(true);
        ui->oscfar_refer_index->setVisible(true);
        ui->label_19->setVisible(false);
        ui->const_threahole_val->setVisible(false);
    }

}

void MainWindow::slotRecvRadarProcessNum(int extract, int correct, int track)
{
    ui->track_num->setText(QString::number(track));
    ui->extraction_num->setText(QString::number(extract + ui->extraction_num->text().toInt()));
    ui->correct_num->setText(QString::number(correct  + ui->correct_num->text().toInt()));
}
//设置时间
void MainWindow::on_pushButton_2_clicked()
{
    cout<<"设置目标时间"<<ui->lineEdit->text().toInt();
    Utils::Profiles::instance()->setValue("Radar_1","Time", ui->lineEdit->text().toInt());
}

void MainWindow::on_push_Button_clicked()
{
    cout<<"打印传入周老师库数据";
    int time_1 = ui->lineEdit_2->text().toInt();
    Utils::Profiles::instance()->setValue("Radar_1","ClearTrack_Time", time_1);
}

void MainWindow::show_range_slot(double r, double factor)
{

    ui->label->setText(tr("半径:%1  距离因子:%2").arg(r).arg(factor, 0, 'f', 2));
}

void MainWindow::on_shownum_pushButton_clicked()
{
    QString str = ui->shownum_pushButton->text();
    if(str == "显示编号")
    {
        ui->shownum_pushButton->setText("隐藏编号");
        emit showTrackNumSignal(true);
    }
    else
    {
        ui->shownum_pushButton->setText("显示编号");
        emit showTrackNumSignal(false);
    }
}
