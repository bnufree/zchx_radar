// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: TWQMSComData.proto

#include "TWQMSComData.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_TWQMSComData_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DDM_TWQMSComData_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_TWQMSComData_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<7> scc_info_DevInfo_TWQMSComData_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_TWQMSComData_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GPS_TWQMSComData_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_TWQMSComData_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_NHN_TWQMSComData_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_TWQMSComData_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ORP_TWQMSComData_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_TWQMSComData_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RDO_TWQMSComData_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_TWQMSComData_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_WL_TWQMSComData_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_TWQMSComData_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ZS_TWQMSComData_2eproto;
namespace com {
namespace zhichenhaixin {
namespace gps {
namespace proto {
class GPSDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GPS> _instance;
} _GPS_default_instance_;
class ZSDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ZS> _instance;
} _ZS_default_instance_;
class RDODefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RDO> _instance;
} _RDO_default_instance_;
class ORPDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ORP> _instance;
} _ORP_default_instance_;
class DDMDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DDM> _instance;
} _DDM_default_instance_;
class NHNDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<NHN> _instance;
} _NHN_default_instance_;
class WLDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<WL> _instance;
} _WL_default_instance_;
class DevInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DevInfo> _instance;
} _DevInfo_default_instance_;
class DevInfoListDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DevInfoList> _instance;
} _DevInfoList_default_instance_;
}  // namespace proto
}  // namespace gps
}  // namespace zhichenhaixin
}  // namespace com
static void InitDefaultsscc_info_DDM_TWQMSComData_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::zhichenhaixin::gps::proto::_DDM_default_instance_;
    new (ptr) ::com::zhichenhaixin::gps::proto::DDM();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::zhichenhaixin::gps::proto::DDM::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DDM_TWQMSComData_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_DDM_TWQMSComData_2eproto}, {}};

static void InitDefaultsscc_info_DevInfo_TWQMSComData_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::zhichenhaixin::gps::proto::_DevInfo_default_instance_;
    new (ptr) ::com::zhichenhaixin::gps::proto::DevInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::zhichenhaixin::gps::proto::DevInfo::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<7> scc_info_DevInfo_TWQMSComData_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 7, 0, InitDefaultsscc_info_DevInfo_TWQMSComData_2eproto}, {
      &scc_info_GPS_TWQMSComData_2eproto.base,
      &scc_info_ZS_TWQMSComData_2eproto.base,
      &scc_info_RDO_TWQMSComData_2eproto.base,
      &scc_info_ORP_TWQMSComData_2eproto.base,
      &scc_info_DDM_TWQMSComData_2eproto.base,
      &scc_info_NHN_TWQMSComData_2eproto.base,
      &scc_info_WL_TWQMSComData_2eproto.base,}};

static void InitDefaultsscc_info_DevInfoList_TWQMSComData_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::zhichenhaixin::gps::proto::_DevInfoList_default_instance_;
    new (ptr) ::com::zhichenhaixin::gps::proto::DevInfoList();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::zhichenhaixin::gps::proto::DevInfoList::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_DevInfoList_TWQMSComData_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_DevInfoList_TWQMSComData_2eproto}, {
      &scc_info_DevInfo_TWQMSComData_2eproto.base,}};

static void InitDefaultsscc_info_GPS_TWQMSComData_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::zhichenhaixin::gps::proto::_GPS_default_instance_;
    new (ptr) ::com::zhichenhaixin::gps::proto::GPS();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::zhichenhaixin::gps::proto::GPS::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_GPS_TWQMSComData_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_GPS_TWQMSComData_2eproto}, {}};

static void InitDefaultsscc_info_NHN_TWQMSComData_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::zhichenhaixin::gps::proto::_NHN_default_instance_;
    new (ptr) ::com::zhichenhaixin::gps::proto::NHN();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::zhichenhaixin::gps::proto::NHN::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_NHN_TWQMSComData_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_NHN_TWQMSComData_2eproto}, {}};

static void InitDefaultsscc_info_ORP_TWQMSComData_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::zhichenhaixin::gps::proto::_ORP_default_instance_;
    new (ptr) ::com::zhichenhaixin::gps::proto::ORP();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::zhichenhaixin::gps::proto::ORP::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ORP_TWQMSComData_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ORP_TWQMSComData_2eproto}, {}};

static void InitDefaultsscc_info_RDO_TWQMSComData_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::zhichenhaixin::gps::proto::_RDO_default_instance_;
    new (ptr) ::com::zhichenhaixin::gps::proto::RDO();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::zhichenhaixin::gps::proto::RDO::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RDO_TWQMSComData_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_RDO_TWQMSComData_2eproto}, {}};

static void InitDefaultsscc_info_WL_TWQMSComData_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::zhichenhaixin::gps::proto::_WL_default_instance_;
    new (ptr) ::com::zhichenhaixin::gps::proto::WL();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::zhichenhaixin::gps::proto::WL::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_WL_TWQMSComData_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_WL_TWQMSComData_2eproto}, {}};

static void InitDefaultsscc_info_ZS_TWQMSComData_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::zhichenhaixin::gps::proto::_ZS_default_instance_;
    new (ptr) ::com::zhichenhaixin::gps::proto::ZS();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::zhichenhaixin::gps::proto::ZS::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ZS_TWQMSComData_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ZS_TWQMSComData_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_TWQMSComData_2eproto[9];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_TWQMSComData_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_TWQMSComData_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_TWQMSComData_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::com::zhichenhaixin::gps::proto::GPS, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::com::zhichenhaixin::gps::proto::GPS, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::com::zhichenhaixin::gps::proto::GPS, ship_update_time_),
  PROTOBUF_FIELD_OFFSET(::com::zhichenhaixin::gps::proto::GPS, ship_lat_),
  PROTOBUF_FIELD_OFFSET(::com::zhichenhaixin::gps::proto::GPS, ship_lon_),
  PROTOBUF_FIELD_OFFSET(::com::zhichenhaixin::gps::proto::GPS, ship_speed_),
  PROTOBUF_FIELD_OFFSET(::com::zhichenhaixin::gps::proto::GPS, ship_head_),
  PROTOBUF_FIELD_OFFSET(::com::zhichenhaixin::gps::proto::GPS, ship_course_),
  PROTOBUF_FIELD_OFFSET(::com::zhichenhaixin::gps::proto::GPS, sts_),
  PROTOBUF_FIELD_OFFSET(::com::zhichenhaixin::gps::proto::GPS, ship_id_),
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  0,
  PROTOBUF_FIELD_OFFSET(::com::zhichenhaixin::gps::proto::ZS, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::com::zhichenhaixin::gps::proto::ZS, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::com::zhichenhaixin::gps::proto::ZS, zs_),
  PROTOBUF_FIELD_OFFSET(::com::zhichenhaixin::gps::proto::ZS, temp_),
  PROTOBUF_FIELD_OFFSET(::com::zhichenhaixin::gps::proto::ZS, time_),
  PROTOBUF_FIELD_OFFSET(::com::zhichenhaixin::gps::proto::ZS, sts_),
  0,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::com::zhichenhaixin::gps::proto::RDO, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::com::zhichenhaixin::gps::proto::RDO, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::com::zhichenhaixin::gps::proto::RDO, rdo_),
  PROTOBUF_FIELD_OFFSET(::com::zhichenhaixin::gps::proto::RDO, temp_),
  PROTOBUF_FIELD_OFFSET(::com::zhichenhaixin::gps::proto::RDO, time_),
  PROTOBUF_FIELD_OFFSET(::com::zhichenhaixin::gps::proto::RDO, sts_),
  0,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::com::zhichenhaixin::gps::proto::ORP, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::com::zhichenhaixin::gps::proto::ORP, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::com::zhichenhaixin::gps::proto::ORP, orp_),
  PROTOBUF_FIELD_OFFSET(::com::zhichenhaixin::gps::proto::ORP, time_),
  PROTOBUF_FIELD_OFFSET(::com::zhichenhaixin::gps::proto::ORP, sts_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::com::zhichenhaixin::gps::proto::DDM, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::com::zhichenhaixin::gps::proto::DDM, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::com::zhichenhaixin::gps::proto::DDM, ddm_),
  PROTOBUF_FIELD_OFFSET(::com::zhichenhaixin::gps::proto::DDM, temp_),
  PROTOBUF_FIELD_OFFSET(::com::zhichenhaixin::gps::proto::DDM, time_),
  PROTOBUF_FIELD_OFFSET(::com::zhichenhaixin::gps::proto::DDM, sts_),
  0,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::com::zhichenhaixin::gps::proto::NHN, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::com::zhichenhaixin::gps::proto::NHN, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::com::zhichenhaixin::gps::proto::NHN, nhn_),
  PROTOBUF_FIELD_OFFSET(::com::zhichenhaixin::gps::proto::NHN, temp_),
  PROTOBUF_FIELD_OFFSET(::com::zhichenhaixin::gps::proto::NHN, time_),
  PROTOBUF_FIELD_OFFSET(::com::zhichenhaixin::gps::proto::NHN, sts_),
  0,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::com::zhichenhaixin::gps::proto::WL, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::com::zhichenhaixin::gps::proto::WL, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::com::zhichenhaixin::gps::proto::WL, press_),
  PROTOBUF_FIELD_OFFSET(::com::zhichenhaixin::gps::proto::WL, temp_),
  PROTOBUF_FIELD_OFFSET(::com::zhichenhaixin::gps::proto::WL, lvl_),
  PROTOBUF_FIELD_OFFSET(::com::zhichenhaixin::gps::proto::WL, time_),
  PROTOBUF_FIELD_OFFSET(::com::zhichenhaixin::gps::proto::WL, sts_),
  0,
  1,
  2,
  3,
  4,
  PROTOBUF_FIELD_OFFSET(::com::zhichenhaixin::gps::proto::DevInfo, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::com::zhichenhaixin::gps::proto::DevInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::com::zhichenhaixin::gps::proto::DevInfo, gps_info_),
  PROTOBUF_FIELD_OFFSET(::com::zhichenhaixin::gps::proto::DevInfo, zs_info_),
  PROTOBUF_FIELD_OFFSET(::com::zhichenhaixin::gps::proto::DevInfo, rdo_info_),
  PROTOBUF_FIELD_OFFSET(::com::zhichenhaixin::gps::proto::DevInfo, orp_info_),
  PROTOBUF_FIELD_OFFSET(::com::zhichenhaixin::gps::proto::DevInfo, ddm_info_),
  PROTOBUF_FIELD_OFFSET(::com::zhichenhaixin::gps::proto::DevInfo, nhn_info_),
  PROTOBUF_FIELD_OFFSET(::com::zhichenhaixin::gps::proto::DevInfo, wl_info_),
  PROTOBUF_FIELD_OFFSET(::com::zhichenhaixin::gps::proto::DevInfo, site_id_),
  PROTOBUF_FIELD_OFFSET(::com::zhichenhaixin::gps::proto::DevInfo, cur_utc_time_),
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  0,
  8,
  PROTOBUF_FIELD_OFFSET(::com::zhichenhaixin::gps::proto::DevInfoList, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::com::zhichenhaixin::gps::proto::DevInfoList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::com::zhichenhaixin::gps::proto::DevInfoList, devinfo_),
  PROTOBUF_FIELD_OFFSET(::com::zhichenhaixin::gps::proto::DevInfoList, length_),
  ~0u,
  0,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 13, sizeof(::com::zhichenhaixin::gps::proto::GPS)},
  { 21, 30, sizeof(::com::zhichenhaixin::gps::proto::ZS)},
  { 34, 43, sizeof(::com::zhichenhaixin::gps::proto::RDO)},
  { 47, 55, sizeof(::com::zhichenhaixin::gps::proto::ORP)},
  { 58, 67, sizeof(::com::zhichenhaixin::gps::proto::DDM)},
  { 71, 80, sizeof(::com::zhichenhaixin::gps::proto::NHN)},
  { 84, 94, sizeof(::com::zhichenhaixin::gps::proto::WL)},
  { 99, 113, sizeof(::com::zhichenhaixin::gps::proto::DevInfo)},
  { 122, 129, sizeof(::com::zhichenhaixin::gps::proto::DevInfoList)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::com::zhichenhaixin::gps::proto::_GPS_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::com::zhichenhaixin::gps::proto::_ZS_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::com::zhichenhaixin::gps::proto::_RDO_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::com::zhichenhaixin::gps::proto::_ORP_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::com::zhichenhaixin::gps::proto::_DDM_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::com::zhichenhaixin::gps::proto::_NHN_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::com::zhichenhaixin::gps::proto::_WL_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::com::zhichenhaixin::gps::proto::_DevInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::com::zhichenhaixin::gps::proto::_DevInfoList_default_instance_),
};

const char descriptor_table_protodef_TWQMSComData_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\022TWQMSComData.proto\022\033com.zhichenhaixin."
  "gps.proto\"\235\001\n\003GPS\022\030\n\020ship_update_time\030\001 "
  "\002(\003\022\020\n\010ship_lat\030\002 \002(\001\022\020\n\010ship_lon\030\003 \002(\001\022"
  "\022\n\nship_speed\030\004 \002(\001\022\021\n\tship_head\030\005 \002(\001\022\023"
  "\n\013ship_course\030\006 \002(\001\022\013\n\003sts\030\007 \002(\010\022\017\n\007ship"
  "_id\030\010 \002(\t\"9\n\002ZS\022\n\n\002ZS\030\001 \002(\001\022\014\n\004TEMP\030\002 \002("
  "\001\022\014\n\004time\030\003 \002(\003\022\013\n\003sts\030\004 \002(\010\";\n\003RDO\022\013\n\003R"
  "DO\030\001 \002(\001\022\014\n\004TEMP\030\002 \002(\001\022\014\n\004time\030\003 \002(\003\022\013\n\003"
  "sts\030\004 \002(\010\"-\n\003ORP\022\013\n\003ORP\030\001 \002(\001\022\014\n\004time\030\002 "
  "\002(\003\022\013\n\003sts\030\003 \002(\010\";\n\003DDM\022\013\n\003DDM\030\001 \002(\001\022\014\n\004"
  "TEMP\030\002 \002(\001\022\014\n\004time\030\003 \002(\003\022\013\n\003sts\030\004 \002(\010\";\n"
  "\003NHN\022\013\n\003NHN\030\001 \002(\001\022\014\n\004TEMP\030\002 \002(\001\022\014\n\004time\030"
  "\003 \002(\003\022\013\n\003sts\030\004 \002(\010\"I\n\002WL\022\r\n\005PRESS\030\001 \002(\001\022"
  "\014\n\004TEMP\030\002 \002(\001\022\013\n\003LVL\030\003 \002(\001\022\014\n\004time\030\004 \002(\003"
  "\022\013\n\003sts\030\005 \002(\010\"\230\003\n\007DevInfo\0222\n\010gps_info\030\001 "
  "\002(\0132 .com.zhichenhaixin.gps.proto.GPS\0220\n"
  "\007zs_info\030\002 \002(\0132\037.com.zhichenhaixin.gps.p"
  "roto.ZS\0222\n\010rdo_info\030\003 \002(\0132 .com.zhichenh"
  "aixin.gps.proto.RDO\0222\n\010orp_info\030\004 \002(\0132 ."
  "com.zhichenhaixin.gps.proto.ORP\0222\n\010ddm_i"
  "nfo\030\005 \002(\0132 .com.zhichenhaixin.gps.proto."
  "DDM\0222\n\010nhn_info\030\007 \002(\0132 .com.zhichenhaixi"
  "n.gps.proto.NHN\0220\n\007wl_info\030\010 \002(\0132\037.com.z"
  "hichenhaixin.gps.proto.WL\022\017\n\007site_id\030\t \002"
  "(\t\022\024\n\014cur_utc_time\030\n \002(\003\"T\n\013DevInfoList\022"
  "5\n\007devInfo\030\001 \003(\0132$.com.zhichenhaixin.gps"
  ".proto.DevInfo\022\016\n\006length\030\002 \001(\005"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_TWQMSComData_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_TWQMSComData_2eproto_sccs[9] = {
  &scc_info_DDM_TWQMSComData_2eproto.base,
  &scc_info_DevInfo_TWQMSComData_2eproto.base,
  &scc_info_DevInfoList_TWQMSComData_2eproto.base,
  &scc_info_GPS_TWQMSComData_2eproto.base,
  &scc_info_NHN_TWQMSComData_2eproto.base,
  &scc_info_ORP_TWQMSComData_2eproto.base,
  &scc_info_RDO_TWQMSComData_2eproto.base,
  &scc_info_WL_TWQMSComData_2eproto.base,
  &scc_info_ZS_TWQMSComData_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_TWQMSComData_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_TWQMSComData_2eproto = {
  false, false, descriptor_table_protodef_TWQMSComData_2eproto, "TWQMSComData.proto", 1070,
  &descriptor_table_TWQMSComData_2eproto_once, descriptor_table_TWQMSComData_2eproto_sccs, descriptor_table_TWQMSComData_2eproto_deps, 9, 0,
  schemas, file_default_instances, TableStruct_TWQMSComData_2eproto::offsets,
  file_level_metadata_TWQMSComData_2eproto, 9, file_level_enum_descriptors_TWQMSComData_2eproto, file_level_service_descriptors_TWQMSComData_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_TWQMSComData_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_TWQMSComData_2eproto)), true);
namespace com {
namespace zhichenhaixin {
namespace gps {
namespace proto {

// ===================================================================

void GPS::InitAsDefaultInstance() {
}
class GPS::_Internal {
 public:
  using HasBits = decltype(std::declval<GPS>()._has_bits_);
  static void set_has_ship_update_time(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_ship_lat(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_ship_lon(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_ship_speed(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_ship_head(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_ship_course(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_sts(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_ship_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x000000ff) ^ 0x000000ff) != 0;
  }
};

GPS::GPS(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.zhichenhaixin.gps.proto.GPS)
}
GPS::GPS(const GPS& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ship_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_ship_id()) {
    ship_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_ship_id(),
      GetArena());
  }
  ::memcpy(&ship_update_time_, &from.ship_update_time_,
    static_cast<size_t>(reinterpret_cast<char*>(&sts_) -
    reinterpret_cast<char*>(&ship_update_time_)) + sizeof(sts_));
  // @@protoc_insertion_point(copy_constructor:com.zhichenhaixin.gps.proto.GPS)
}

void GPS::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GPS_TWQMSComData_2eproto.base);
  ship_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&ship_update_time_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&sts_) -
      reinterpret_cast<char*>(&ship_update_time_)) + sizeof(sts_));
}

GPS::~GPS() {
  // @@protoc_insertion_point(destructor:com.zhichenhaixin.gps.proto.GPS)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GPS::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  ship_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void GPS::ArenaDtor(void* object) {
  GPS* _this = reinterpret_cast< GPS* >(object);
  (void)_this;
}
void GPS::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GPS::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GPS& GPS::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GPS_TWQMSComData_2eproto.base);
  return *internal_default_instance();
}


void GPS::Clear() {
// @@protoc_insertion_point(message_clear_start:com.zhichenhaixin.gps.proto.GPS)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ship_id_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x000000feu) {
    ::memset(&ship_update_time_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&sts_) -
        reinterpret_cast<char*>(&ship_update_time_)) + sizeof(sts_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GPS::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required int64 ship_update_time = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_ship_update_time(&has_bits);
          ship_update_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required double ship_lat = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          _Internal::set_has_ship_lat(&has_bits);
          ship_lat_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // required double ship_lon = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          _Internal::set_has_ship_lon(&has_bits);
          ship_lon_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // required double ship_speed = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 33)) {
          _Internal::set_has_ship_speed(&has_bits);
          ship_speed_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // required double ship_head = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 41)) {
          _Internal::set_has_ship_head(&has_bits);
          ship_head_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // required double ship_course = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 49)) {
          _Internal::set_has_ship_course(&has_bits);
          ship_course_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // required bool sts = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_sts(&has_bits);
          sts_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required string ship_id = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          auto str = _internal_mutable_ship_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "com.zhichenhaixin.gps.proto.GPS.ship_id");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GPS::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.zhichenhaixin.gps.proto.GPS)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int64 ship_update_time = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_ship_update_time(), target);
  }

  // required double ship_lat = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_ship_lat(), target);
  }

  // required double ship_lon = 3;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_ship_lon(), target);
  }

  // required double ship_speed = 4;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(4, this->_internal_ship_speed(), target);
  }

  // required double ship_head = 5;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(5, this->_internal_ship_head(), target);
  }

  // required double ship_course = 6;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(6, this->_internal_ship_course(), target);
  }

  // required bool sts = 7;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(7, this->_internal_sts(), target);
  }

  // required string ship_id = 8;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_ship_id().data(), static_cast<int>(this->_internal_ship_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "com.zhichenhaixin.gps.proto.GPS.ship_id");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_ship_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.zhichenhaixin.gps.proto.GPS)
  return target;
}

size_t GPS::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:com.zhichenhaixin.gps.proto.GPS)
  size_t total_size = 0;

  if (_internal_has_ship_id()) {
    // required string ship_id = 8;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_ship_id());
  }

  if (_internal_has_ship_update_time()) {
    // required int64 ship_update_time = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_ship_update_time());
  }

  if (_internal_has_ship_lat()) {
    // required double ship_lat = 2;
    total_size += 1 + 8;
  }

  if (_internal_has_ship_lon()) {
    // required double ship_lon = 3;
    total_size += 1 + 8;
  }

  if (_internal_has_ship_speed()) {
    // required double ship_speed = 4;
    total_size += 1 + 8;
  }

  if (_internal_has_ship_head()) {
    // required double ship_head = 5;
    total_size += 1 + 8;
  }

  if (_internal_has_ship_course()) {
    // required double ship_course = 6;
    total_size += 1 + 8;
  }

  if (_internal_has_sts()) {
    // required bool sts = 7;
    total_size += 1 + 1;
  }

  return total_size;
}
size_t GPS::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.zhichenhaixin.gps.proto.GPS)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x000000ff) ^ 0x000000ff) == 0) {  // All required fields are present.
    // required string ship_id = 8;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_ship_id());

    // required int64 ship_update_time = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_ship_update_time());

    // required double ship_lat = 2;
    total_size += 1 + 8;

    // required double ship_lon = 3;
    total_size += 1 + 8;

    // required double ship_speed = 4;
    total_size += 1 + 8;

    // required double ship_head = 5;
    total_size += 1 + 8;

    // required double ship_course = 6;
    total_size += 1 + 8;

    // required bool sts = 7;
    total_size += 1 + 1;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GPS::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.zhichenhaixin.gps.proto.GPS)
  GOOGLE_DCHECK_NE(&from, this);
  const GPS* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GPS>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.zhichenhaixin.gps.proto.GPS)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.zhichenhaixin.gps.proto.GPS)
    MergeFrom(*source);
  }
}

void GPS::MergeFrom(const GPS& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.zhichenhaixin.gps.proto.GPS)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_ship_id(from._internal_ship_id());
    }
    if (cached_has_bits & 0x00000002u) {
      ship_update_time_ = from.ship_update_time_;
    }
    if (cached_has_bits & 0x00000004u) {
      ship_lat_ = from.ship_lat_;
    }
    if (cached_has_bits & 0x00000008u) {
      ship_lon_ = from.ship_lon_;
    }
    if (cached_has_bits & 0x00000010u) {
      ship_speed_ = from.ship_speed_;
    }
    if (cached_has_bits & 0x00000020u) {
      ship_head_ = from.ship_head_;
    }
    if (cached_has_bits & 0x00000040u) {
      ship_course_ = from.ship_course_;
    }
    if (cached_has_bits & 0x00000080u) {
      sts_ = from.sts_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void GPS::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.zhichenhaixin.gps.proto.GPS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GPS::CopyFrom(const GPS& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.zhichenhaixin.gps.proto.GPS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GPS::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void GPS::InternalSwap(GPS* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ship_id_.Swap(&other->ship_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GPS, sts_)
      + sizeof(GPS::sts_)
      - PROTOBUF_FIELD_OFFSET(GPS, ship_update_time_)>(
          reinterpret_cast<char*>(&ship_update_time_),
          reinterpret_cast<char*>(&other->ship_update_time_));
}

::PROTOBUF_NAMESPACE_ID::Metadata GPS::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ZS::InitAsDefaultInstance() {
}
class ZS::_Internal {
 public:
  using HasBits = decltype(std::declval<ZS>()._has_bits_);
  static void set_has_zs(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_temp(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_time(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_sts(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x0000000f) ^ 0x0000000f) != 0;
  }
};

ZS::ZS(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.zhichenhaixin.gps.proto.ZS)
}
ZS::ZS(const ZS& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&zs_, &from.zs_,
    static_cast<size_t>(reinterpret_cast<char*>(&sts_) -
    reinterpret_cast<char*>(&zs_)) + sizeof(sts_));
  // @@protoc_insertion_point(copy_constructor:com.zhichenhaixin.gps.proto.ZS)
}

void ZS::SharedCtor() {
  ::memset(&zs_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&sts_) -
      reinterpret_cast<char*>(&zs_)) + sizeof(sts_));
}

ZS::~ZS() {
  // @@protoc_insertion_point(destructor:com.zhichenhaixin.gps.proto.ZS)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ZS::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void ZS::ArenaDtor(void* object) {
  ZS* _this = reinterpret_cast< ZS* >(object);
  (void)_this;
}
void ZS::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ZS::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ZS& ZS::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ZS_TWQMSComData_2eproto.base);
  return *internal_default_instance();
}


void ZS::Clear() {
// @@protoc_insertion_point(message_clear_start:com.zhichenhaixin.gps.proto.ZS)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    ::memset(&zs_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&sts_) -
        reinterpret_cast<char*>(&zs_)) + sizeof(sts_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ZS::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required double ZS = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          _Internal::set_has_zs(&has_bits);
          zs_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // required double TEMP = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          _Internal::set_has_temp(&has_bits);
          temp_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // required int64 time = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_time(&has_bits);
          time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required bool sts = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_sts(&has_bits);
          sts_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ZS::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.zhichenhaixin.gps.proto.ZS)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required double ZS = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_zs(), target);
  }

  // required double TEMP = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_temp(), target);
  }

  // required int64 time = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(3, this->_internal_time(), target);
  }

  // required bool sts = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_sts(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.zhichenhaixin.gps.proto.ZS)
  return target;
}

size_t ZS::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:com.zhichenhaixin.gps.proto.ZS)
  size_t total_size = 0;

  if (_internal_has_zs()) {
    // required double ZS = 1;
    total_size += 1 + 8;
  }

  if (_internal_has_temp()) {
    // required double TEMP = 2;
    total_size += 1 + 8;
  }

  if (_internal_has_time()) {
    // required int64 time = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_time());
  }

  if (_internal_has_sts()) {
    // required bool sts = 4;
    total_size += 1 + 1;
  }

  return total_size;
}
size_t ZS::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.zhichenhaixin.gps.proto.ZS)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x0000000f) ^ 0x0000000f) == 0) {  // All required fields are present.
    // required double ZS = 1;
    total_size += 1 + 8;

    // required double TEMP = 2;
    total_size += 1 + 8;

    // required int64 time = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_time());

    // required bool sts = 4;
    total_size += 1 + 1;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ZS::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.zhichenhaixin.gps.proto.ZS)
  GOOGLE_DCHECK_NE(&from, this);
  const ZS* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ZS>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.zhichenhaixin.gps.proto.ZS)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.zhichenhaixin.gps.proto.ZS)
    MergeFrom(*source);
  }
}

void ZS::MergeFrom(const ZS& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.zhichenhaixin.gps.proto.ZS)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      zs_ = from.zs_;
    }
    if (cached_has_bits & 0x00000002u) {
      temp_ = from.temp_;
    }
    if (cached_has_bits & 0x00000004u) {
      time_ = from.time_;
    }
    if (cached_has_bits & 0x00000008u) {
      sts_ = from.sts_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ZS::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.zhichenhaixin.gps.proto.ZS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ZS::CopyFrom(const ZS& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.zhichenhaixin.gps.proto.ZS)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ZS::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void ZS::InternalSwap(ZS* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ZS, sts_)
      + sizeof(ZS::sts_)
      - PROTOBUF_FIELD_OFFSET(ZS, zs_)>(
          reinterpret_cast<char*>(&zs_),
          reinterpret_cast<char*>(&other->zs_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ZS::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RDO::InitAsDefaultInstance() {
}
class RDO::_Internal {
 public:
  using HasBits = decltype(std::declval<RDO>()._has_bits_);
  static void set_has_rdo(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_temp(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_time(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_sts(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x0000000f) ^ 0x0000000f) != 0;
  }
};

RDO::RDO(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.zhichenhaixin.gps.proto.RDO)
}
RDO::RDO(const RDO& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&rdo_, &from.rdo_,
    static_cast<size_t>(reinterpret_cast<char*>(&sts_) -
    reinterpret_cast<char*>(&rdo_)) + sizeof(sts_));
  // @@protoc_insertion_point(copy_constructor:com.zhichenhaixin.gps.proto.RDO)
}

void RDO::SharedCtor() {
  ::memset(&rdo_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&sts_) -
      reinterpret_cast<char*>(&rdo_)) + sizeof(sts_));
}

RDO::~RDO() {
  // @@protoc_insertion_point(destructor:com.zhichenhaixin.gps.proto.RDO)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void RDO::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void RDO::ArenaDtor(void* object) {
  RDO* _this = reinterpret_cast< RDO* >(object);
  (void)_this;
}
void RDO::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RDO::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RDO& RDO::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RDO_TWQMSComData_2eproto.base);
  return *internal_default_instance();
}


void RDO::Clear() {
// @@protoc_insertion_point(message_clear_start:com.zhichenhaixin.gps.proto.RDO)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    ::memset(&rdo_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&sts_) -
        reinterpret_cast<char*>(&rdo_)) + sizeof(sts_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RDO::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required double RDO = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          _Internal::set_has_rdo(&has_bits);
          rdo_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // required double TEMP = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          _Internal::set_has_temp(&has_bits);
          temp_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // required int64 time = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_time(&has_bits);
          time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required bool sts = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_sts(&has_bits);
          sts_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RDO::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.zhichenhaixin.gps.proto.RDO)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required double RDO = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_rdo(), target);
  }

  // required double TEMP = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_temp(), target);
  }

  // required int64 time = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(3, this->_internal_time(), target);
  }

  // required bool sts = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_sts(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.zhichenhaixin.gps.proto.RDO)
  return target;
}

size_t RDO::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:com.zhichenhaixin.gps.proto.RDO)
  size_t total_size = 0;

  if (_internal_has_rdo()) {
    // required double RDO = 1;
    total_size += 1 + 8;
  }

  if (_internal_has_temp()) {
    // required double TEMP = 2;
    total_size += 1 + 8;
  }

  if (_internal_has_time()) {
    // required int64 time = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_time());
  }

  if (_internal_has_sts()) {
    // required bool sts = 4;
    total_size += 1 + 1;
  }

  return total_size;
}
size_t RDO::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.zhichenhaixin.gps.proto.RDO)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x0000000f) ^ 0x0000000f) == 0) {  // All required fields are present.
    // required double RDO = 1;
    total_size += 1 + 8;

    // required double TEMP = 2;
    total_size += 1 + 8;

    // required int64 time = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_time());

    // required bool sts = 4;
    total_size += 1 + 1;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RDO::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.zhichenhaixin.gps.proto.RDO)
  GOOGLE_DCHECK_NE(&from, this);
  const RDO* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RDO>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.zhichenhaixin.gps.proto.RDO)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.zhichenhaixin.gps.proto.RDO)
    MergeFrom(*source);
  }
}

void RDO::MergeFrom(const RDO& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.zhichenhaixin.gps.proto.RDO)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      rdo_ = from.rdo_;
    }
    if (cached_has_bits & 0x00000002u) {
      temp_ = from.temp_;
    }
    if (cached_has_bits & 0x00000004u) {
      time_ = from.time_;
    }
    if (cached_has_bits & 0x00000008u) {
      sts_ = from.sts_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void RDO::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.zhichenhaixin.gps.proto.RDO)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RDO::CopyFrom(const RDO& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.zhichenhaixin.gps.proto.RDO)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RDO::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void RDO::InternalSwap(RDO* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RDO, sts_)
      + sizeof(RDO::sts_)
      - PROTOBUF_FIELD_OFFSET(RDO, rdo_)>(
          reinterpret_cast<char*>(&rdo_),
          reinterpret_cast<char*>(&other->rdo_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RDO::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ORP::InitAsDefaultInstance() {
}
class ORP::_Internal {
 public:
  using HasBits = decltype(std::declval<ORP>()._has_bits_);
  static void set_has_orp(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_time(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_sts(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000007) ^ 0x00000007) != 0;
  }
};

ORP::ORP(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.zhichenhaixin.gps.proto.ORP)
}
ORP::ORP(const ORP& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&orp_, &from.orp_,
    static_cast<size_t>(reinterpret_cast<char*>(&sts_) -
    reinterpret_cast<char*>(&orp_)) + sizeof(sts_));
  // @@protoc_insertion_point(copy_constructor:com.zhichenhaixin.gps.proto.ORP)
}

void ORP::SharedCtor() {
  ::memset(&orp_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&sts_) -
      reinterpret_cast<char*>(&orp_)) + sizeof(sts_));
}

ORP::~ORP() {
  // @@protoc_insertion_point(destructor:com.zhichenhaixin.gps.proto.ORP)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ORP::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void ORP::ArenaDtor(void* object) {
  ORP* _this = reinterpret_cast< ORP* >(object);
  (void)_this;
}
void ORP::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ORP::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ORP& ORP::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ORP_TWQMSComData_2eproto.base);
  return *internal_default_instance();
}


void ORP::Clear() {
// @@protoc_insertion_point(message_clear_start:com.zhichenhaixin.gps.proto.ORP)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&orp_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&sts_) -
        reinterpret_cast<char*>(&orp_)) + sizeof(sts_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ORP::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required double ORP = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          _Internal::set_has_orp(&has_bits);
          orp_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // required int64 time = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_time(&has_bits);
          time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required bool sts = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_sts(&has_bits);
          sts_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ORP::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.zhichenhaixin.gps.proto.ORP)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required double ORP = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_orp(), target);
  }

  // required int64 time = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(2, this->_internal_time(), target);
  }

  // required bool sts = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_sts(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.zhichenhaixin.gps.proto.ORP)
  return target;
}

size_t ORP::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:com.zhichenhaixin.gps.proto.ORP)
  size_t total_size = 0;

  if (_internal_has_orp()) {
    // required double ORP = 1;
    total_size += 1 + 8;
  }

  if (_internal_has_time()) {
    // required int64 time = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_time());
  }

  if (_internal_has_sts()) {
    // required bool sts = 3;
    total_size += 1 + 1;
  }

  return total_size;
}
size_t ORP::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.zhichenhaixin.gps.proto.ORP)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required double ORP = 1;
    total_size += 1 + 8;

    // required int64 time = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_time());

    // required bool sts = 3;
    total_size += 1 + 1;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ORP::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.zhichenhaixin.gps.proto.ORP)
  GOOGLE_DCHECK_NE(&from, this);
  const ORP* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ORP>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.zhichenhaixin.gps.proto.ORP)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.zhichenhaixin.gps.proto.ORP)
    MergeFrom(*source);
  }
}

void ORP::MergeFrom(const ORP& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.zhichenhaixin.gps.proto.ORP)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      orp_ = from.orp_;
    }
    if (cached_has_bits & 0x00000002u) {
      time_ = from.time_;
    }
    if (cached_has_bits & 0x00000004u) {
      sts_ = from.sts_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ORP::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.zhichenhaixin.gps.proto.ORP)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ORP::CopyFrom(const ORP& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.zhichenhaixin.gps.proto.ORP)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ORP::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void ORP::InternalSwap(ORP* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ORP, sts_)
      + sizeof(ORP::sts_)
      - PROTOBUF_FIELD_OFFSET(ORP, orp_)>(
          reinterpret_cast<char*>(&orp_),
          reinterpret_cast<char*>(&other->orp_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ORP::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void DDM::InitAsDefaultInstance() {
}
class DDM::_Internal {
 public:
  using HasBits = decltype(std::declval<DDM>()._has_bits_);
  static void set_has_ddm(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_temp(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_time(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_sts(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x0000000f) ^ 0x0000000f) != 0;
  }
};

DDM::DDM(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.zhichenhaixin.gps.proto.DDM)
}
DDM::DDM(const DDM& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&ddm_, &from.ddm_,
    static_cast<size_t>(reinterpret_cast<char*>(&sts_) -
    reinterpret_cast<char*>(&ddm_)) + sizeof(sts_));
  // @@protoc_insertion_point(copy_constructor:com.zhichenhaixin.gps.proto.DDM)
}

void DDM::SharedCtor() {
  ::memset(&ddm_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&sts_) -
      reinterpret_cast<char*>(&ddm_)) + sizeof(sts_));
}

DDM::~DDM() {
  // @@protoc_insertion_point(destructor:com.zhichenhaixin.gps.proto.DDM)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void DDM::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void DDM::ArenaDtor(void* object) {
  DDM* _this = reinterpret_cast< DDM* >(object);
  (void)_this;
}
void DDM::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DDM::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DDM& DDM::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DDM_TWQMSComData_2eproto.base);
  return *internal_default_instance();
}


void DDM::Clear() {
// @@protoc_insertion_point(message_clear_start:com.zhichenhaixin.gps.proto.DDM)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    ::memset(&ddm_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&sts_) -
        reinterpret_cast<char*>(&ddm_)) + sizeof(sts_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DDM::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required double DDM = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          _Internal::set_has_ddm(&has_bits);
          ddm_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // required double TEMP = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          _Internal::set_has_temp(&has_bits);
          temp_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // required int64 time = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_time(&has_bits);
          time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required bool sts = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_sts(&has_bits);
          sts_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DDM::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.zhichenhaixin.gps.proto.DDM)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required double DDM = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_ddm(), target);
  }

  // required double TEMP = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_temp(), target);
  }

  // required int64 time = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(3, this->_internal_time(), target);
  }

  // required bool sts = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_sts(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.zhichenhaixin.gps.proto.DDM)
  return target;
}

size_t DDM::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:com.zhichenhaixin.gps.proto.DDM)
  size_t total_size = 0;

  if (_internal_has_ddm()) {
    // required double DDM = 1;
    total_size += 1 + 8;
  }

  if (_internal_has_temp()) {
    // required double TEMP = 2;
    total_size += 1 + 8;
  }

  if (_internal_has_time()) {
    // required int64 time = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_time());
  }

  if (_internal_has_sts()) {
    // required bool sts = 4;
    total_size += 1 + 1;
  }

  return total_size;
}
size_t DDM::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.zhichenhaixin.gps.proto.DDM)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x0000000f) ^ 0x0000000f) == 0) {  // All required fields are present.
    // required double DDM = 1;
    total_size += 1 + 8;

    // required double TEMP = 2;
    total_size += 1 + 8;

    // required int64 time = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_time());

    // required bool sts = 4;
    total_size += 1 + 1;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DDM::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.zhichenhaixin.gps.proto.DDM)
  GOOGLE_DCHECK_NE(&from, this);
  const DDM* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DDM>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.zhichenhaixin.gps.proto.DDM)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.zhichenhaixin.gps.proto.DDM)
    MergeFrom(*source);
  }
}

void DDM::MergeFrom(const DDM& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.zhichenhaixin.gps.proto.DDM)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      ddm_ = from.ddm_;
    }
    if (cached_has_bits & 0x00000002u) {
      temp_ = from.temp_;
    }
    if (cached_has_bits & 0x00000004u) {
      time_ = from.time_;
    }
    if (cached_has_bits & 0x00000008u) {
      sts_ = from.sts_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void DDM::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.zhichenhaixin.gps.proto.DDM)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DDM::CopyFrom(const DDM& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.zhichenhaixin.gps.proto.DDM)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DDM::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void DDM::InternalSwap(DDM* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DDM, sts_)
      + sizeof(DDM::sts_)
      - PROTOBUF_FIELD_OFFSET(DDM, ddm_)>(
          reinterpret_cast<char*>(&ddm_),
          reinterpret_cast<char*>(&other->ddm_));
}

::PROTOBUF_NAMESPACE_ID::Metadata DDM::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void NHN::InitAsDefaultInstance() {
}
class NHN::_Internal {
 public:
  using HasBits = decltype(std::declval<NHN>()._has_bits_);
  static void set_has_nhn(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_temp(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_time(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_sts(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x0000000f) ^ 0x0000000f) != 0;
  }
};

NHN::NHN(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.zhichenhaixin.gps.proto.NHN)
}
NHN::NHN(const NHN& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&nhn_, &from.nhn_,
    static_cast<size_t>(reinterpret_cast<char*>(&sts_) -
    reinterpret_cast<char*>(&nhn_)) + sizeof(sts_));
  // @@protoc_insertion_point(copy_constructor:com.zhichenhaixin.gps.proto.NHN)
}

void NHN::SharedCtor() {
  ::memset(&nhn_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&sts_) -
      reinterpret_cast<char*>(&nhn_)) + sizeof(sts_));
}

NHN::~NHN() {
  // @@protoc_insertion_point(destructor:com.zhichenhaixin.gps.proto.NHN)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void NHN::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void NHN::ArenaDtor(void* object) {
  NHN* _this = reinterpret_cast< NHN* >(object);
  (void)_this;
}
void NHN::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void NHN::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const NHN& NHN::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_NHN_TWQMSComData_2eproto.base);
  return *internal_default_instance();
}


void NHN::Clear() {
// @@protoc_insertion_point(message_clear_start:com.zhichenhaixin.gps.proto.NHN)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    ::memset(&nhn_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&sts_) -
        reinterpret_cast<char*>(&nhn_)) + sizeof(sts_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* NHN::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required double NHN = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          _Internal::set_has_nhn(&has_bits);
          nhn_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // required double TEMP = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          _Internal::set_has_temp(&has_bits);
          temp_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // required int64 time = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_time(&has_bits);
          time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required bool sts = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_sts(&has_bits);
          sts_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* NHN::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.zhichenhaixin.gps.proto.NHN)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required double NHN = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_nhn(), target);
  }

  // required double TEMP = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_temp(), target);
  }

  // required int64 time = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(3, this->_internal_time(), target);
  }

  // required bool sts = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_sts(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.zhichenhaixin.gps.proto.NHN)
  return target;
}

size_t NHN::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:com.zhichenhaixin.gps.proto.NHN)
  size_t total_size = 0;

  if (_internal_has_nhn()) {
    // required double NHN = 1;
    total_size += 1 + 8;
  }

  if (_internal_has_temp()) {
    // required double TEMP = 2;
    total_size += 1 + 8;
  }

  if (_internal_has_time()) {
    // required int64 time = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_time());
  }

  if (_internal_has_sts()) {
    // required bool sts = 4;
    total_size += 1 + 1;
  }

  return total_size;
}
size_t NHN::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.zhichenhaixin.gps.proto.NHN)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x0000000f) ^ 0x0000000f) == 0) {  // All required fields are present.
    // required double NHN = 1;
    total_size += 1 + 8;

    // required double TEMP = 2;
    total_size += 1 + 8;

    // required int64 time = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_time());

    // required bool sts = 4;
    total_size += 1 + 1;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void NHN::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.zhichenhaixin.gps.proto.NHN)
  GOOGLE_DCHECK_NE(&from, this);
  const NHN* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<NHN>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.zhichenhaixin.gps.proto.NHN)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.zhichenhaixin.gps.proto.NHN)
    MergeFrom(*source);
  }
}

void NHN::MergeFrom(const NHN& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.zhichenhaixin.gps.proto.NHN)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      nhn_ = from.nhn_;
    }
    if (cached_has_bits & 0x00000002u) {
      temp_ = from.temp_;
    }
    if (cached_has_bits & 0x00000004u) {
      time_ = from.time_;
    }
    if (cached_has_bits & 0x00000008u) {
      sts_ = from.sts_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void NHN::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.zhichenhaixin.gps.proto.NHN)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NHN::CopyFrom(const NHN& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.zhichenhaixin.gps.proto.NHN)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NHN::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void NHN::InternalSwap(NHN* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(NHN, sts_)
      + sizeof(NHN::sts_)
      - PROTOBUF_FIELD_OFFSET(NHN, nhn_)>(
          reinterpret_cast<char*>(&nhn_),
          reinterpret_cast<char*>(&other->nhn_));
}

::PROTOBUF_NAMESPACE_ID::Metadata NHN::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void WL::InitAsDefaultInstance() {
}
class WL::_Internal {
 public:
  using HasBits = decltype(std::declval<WL>()._has_bits_);
  static void set_has_press(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_temp(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_lvl(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_time(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_sts(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x0000001f) ^ 0x0000001f) != 0;
  }
};

WL::WL(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.zhichenhaixin.gps.proto.WL)
}
WL::WL(const WL& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&press_, &from.press_,
    static_cast<size_t>(reinterpret_cast<char*>(&sts_) -
    reinterpret_cast<char*>(&press_)) + sizeof(sts_));
  // @@protoc_insertion_point(copy_constructor:com.zhichenhaixin.gps.proto.WL)
}

void WL::SharedCtor() {
  ::memset(&press_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&sts_) -
      reinterpret_cast<char*>(&press_)) + sizeof(sts_));
}

WL::~WL() {
  // @@protoc_insertion_point(destructor:com.zhichenhaixin.gps.proto.WL)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void WL::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void WL::ArenaDtor(void* object) {
  WL* _this = reinterpret_cast< WL* >(object);
  (void)_this;
}
void WL::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void WL::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const WL& WL::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_WL_TWQMSComData_2eproto.base);
  return *internal_default_instance();
}


void WL::Clear() {
// @@protoc_insertion_point(message_clear_start:com.zhichenhaixin.gps.proto.WL)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    ::memset(&press_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&sts_) -
        reinterpret_cast<char*>(&press_)) + sizeof(sts_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* WL::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required double PRESS = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          _Internal::set_has_press(&has_bits);
          press_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // required double TEMP = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          _Internal::set_has_temp(&has_bits);
          temp_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // required double LVL = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          _Internal::set_has_lvl(&has_bits);
          lvl_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // required int64 time = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_time(&has_bits);
          time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required bool sts = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_sts(&has_bits);
          sts_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* WL::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.zhichenhaixin.gps.proto.WL)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required double PRESS = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_press(), target);
  }

  // required double TEMP = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_temp(), target);
  }

  // required double LVL = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_lvl(), target);
  }

  // required int64 time = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(4, this->_internal_time(), target);
  }

  // required bool sts = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->_internal_sts(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.zhichenhaixin.gps.proto.WL)
  return target;
}

size_t WL::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:com.zhichenhaixin.gps.proto.WL)
  size_t total_size = 0;

  if (_internal_has_press()) {
    // required double PRESS = 1;
    total_size += 1 + 8;
  }

  if (_internal_has_temp()) {
    // required double TEMP = 2;
    total_size += 1 + 8;
  }

  if (_internal_has_lvl()) {
    // required double LVL = 3;
    total_size += 1 + 8;
  }

  if (_internal_has_time()) {
    // required int64 time = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_time());
  }

  if (_internal_has_sts()) {
    // required bool sts = 5;
    total_size += 1 + 1;
  }

  return total_size;
}
size_t WL::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.zhichenhaixin.gps.proto.WL)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x0000001f) ^ 0x0000001f) == 0) {  // All required fields are present.
    // required double PRESS = 1;
    total_size += 1 + 8;

    // required double TEMP = 2;
    total_size += 1 + 8;

    // required double LVL = 3;
    total_size += 1 + 8;

    // required int64 time = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_time());

    // required bool sts = 5;
    total_size += 1 + 1;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void WL::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.zhichenhaixin.gps.proto.WL)
  GOOGLE_DCHECK_NE(&from, this);
  const WL* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<WL>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.zhichenhaixin.gps.proto.WL)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.zhichenhaixin.gps.proto.WL)
    MergeFrom(*source);
  }
}

void WL::MergeFrom(const WL& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.zhichenhaixin.gps.proto.WL)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      press_ = from.press_;
    }
    if (cached_has_bits & 0x00000002u) {
      temp_ = from.temp_;
    }
    if (cached_has_bits & 0x00000004u) {
      lvl_ = from.lvl_;
    }
    if (cached_has_bits & 0x00000008u) {
      time_ = from.time_;
    }
    if (cached_has_bits & 0x00000010u) {
      sts_ = from.sts_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void WL::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.zhichenhaixin.gps.proto.WL)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WL::CopyFrom(const WL& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.zhichenhaixin.gps.proto.WL)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WL::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void WL::InternalSwap(WL* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(WL, sts_)
      + sizeof(WL::sts_)
      - PROTOBUF_FIELD_OFFSET(WL, press_)>(
          reinterpret_cast<char*>(&press_),
          reinterpret_cast<char*>(&other->press_));
}

::PROTOBUF_NAMESPACE_ID::Metadata WL::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void DevInfo::InitAsDefaultInstance() {
  ::com::zhichenhaixin::gps::proto::_DevInfo_default_instance_._instance.get_mutable()->gps_info_ = const_cast< ::com::zhichenhaixin::gps::proto::GPS*>(
      ::com::zhichenhaixin::gps::proto::GPS::internal_default_instance());
  ::com::zhichenhaixin::gps::proto::_DevInfo_default_instance_._instance.get_mutable()->zs_info_ = const_cast< ::com::zhichenhaixin::gps::proto::ZS*>(
      ::com::zhichenhaixin::gps::proto::ZS::internal_default_instance());
  ::com::zhichenhaixin::gps::proto::_DevInfo_default_instance_._instance.get_mutable()->rdo_info_ = const_cast< ::com::zhichenhaixin::gps::proto::RDO*>(
      ::com::zhichenhaixin::gps::proto::RDO::internal_default_instance());
  ::com::zhichenhaixin::gps::proto::_DevInfo_default_instance_._instance.get_mutable()->orp_info_ = const_cast< ::com::zhichenhaixin::gps::proto::ORP*>(
      ::com::zhichenhaixin::gps::proto::ORP::internal_default_instance());
  ::com::zhichenhaixin::gps::proto::_DevInfo_default_instance_._instance.get_mutable()->ddm_info_ = const_cast< ::com::zhichenhaixin::gps::proto::DDM*>(
      ::com::zhichenhaixin::gps::proto::DDM::internal_default_instance());
  ::com::zhichenhaixin::gps::proto::_DevInfo_default_instance_._instance.get_mutable()->nhn_info_ = const_cast< ::com::zhichenhaixin::gps::proto::NHN*>(
      ::com::zhichenhaixin::gps::proto::NHN::internal_default_instance());
  ::com::zhichenhaixin::gps::proto::_DevInfo_default_instance_._instance.get_mutable()->wl_info_ = const_cast< ::com::zhichenhaixin::gps::proto::WL*>(
      ::com::zhichenhaixin::gps::proto::WL::internal_default_instance());
}
class DevInfo::_Internal {
 public:
  using HasBits = decltype(std::declval<DevInfo>()._has_bits_);
  static const ::com::zhichenhaixin::gps::proto::GPS& gps_info(const DevInfo* msg);
  static void set_has_gps_info(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::com::zhichenhaixin::gps::proto::ZS& zs_info(const DevInfo* msg);
  static void set_has_zs_info(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::com::zhichenhaixin::gps::proto::RDO& rdo_info(const DevInfo* msg);
  static void set_has_rdo_info(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::com::zhichenhaixin::gps::proto::ORP& orp_info(const DevInfo* msg);
  static void set_has_orp_info(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static const ::com::zhichenhaixin::gps::proto::DDM& ddm_info(const DevInfo* msg);
  static void set_has_ddm_info(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static const ::com::zhichenhaixin::gps::proto::NHN& nhn_info(const DevInfo* msg);
  static void set_has_nhn_info(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static const ::com::zhichenhaixin::gps::proto::WL& wl_info(const DevInfo* msg);
  static void set_has_wl_info(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_site_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_cur_utc_time(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x000001ff) ^ 0x000001ff) != 0;
  }
};

const ::com::zhichenhaixin::gps::proto::GPS&
DevInfo::_Internal::gps_info(const DevInfo* msg) {
  return *msg->gps_info_;
}
const ::com::zhichenhaixin::gps::proto::ZS&
DevInfo::_Internal::zs_info(const DevInfo* msg) {
  return *msg->zs_info_;
}
const ::com::zhichenhaixin::gps::proto::RDO&
DevInfo::_Internal::rdo_info(const DevInfo* msg) {
  return *msg->rdo_info_;
}
const ::com::zhichenhaixin::gps::proto::ORP&
DevInfo::_Internal::orp_info(const DevInfo* msg) {
  return *msg->orp_info_;
}
const ::com::zhichenhaixin::gps::proto::DDM&
DevInfo::_Internal::ddm_info(const DevInfo* msg) {
  return *msg->ddm_info_;
}
const ::com::zhichenhaixin::gps::proto::NHN&
DevInfo::_Internal::nhn_info(const DevInfo* msg) {
  return *msg->nhn_info_;
}
const ::com::zhichenhaixin::gps::proto::WL&
DevInfo::_Internal::wl_info(const DevInfo* msg) {
  return *msg->wl_info_;
}
DevInfo::DevInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.zhichenhaixin.gps.proto.DevInfo)
}
DevInfo::DevInfo(const DevInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  site_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_site_id()) {
    site_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_site_id(),
      GetArena());
  }
  if (from._internal_has_gps_info()) {
    gps_info_ = new ::com::zhichenhaixin::gps::proto::GPS(*from.gps_info_);
  } else {
    gps_info_ = nullptr;
  }
  if (from._internal_has_zs_info()) {
    zs_info_ = new ::com::zhichenhaixin::gps::proto::ZS(*from.zs_info_);
  } else {
    zs_info_ = nullptr;
  }
  if (from._internal_has_rdo_info()) {
    rdo_info_ = new ::com::zhichenhaixin::gps::proto::RDO(*from.rdo_info_);
  } else {
    rdo_info_ = nullptr;
  }
  if (from._internal_has_orp_info()) {
    orp_info_ = new ::com::zhichenhaixin::gps::proto::ORP(*from.orp_info_);
  } else {
    orp_info_ = nullptr;
  }
  if (from._internal_has_ddm_info()) {
    ddm_info_ = new ::com::zhichenhaixin::gps::proto::DDM(*from.ddm_info_);
  } else {
    ddm_info_ = nullptr;
  }
  if (from._internal_has_nhn_info()) {
    nhn_info_ = new ::com::zhichenhaixin::gps::proto::NHN(*from.nhn_info_);
  } else {
    nhn_info_ = nullptr;
  }
  if (from._internal_has_wl_info()) {
    wl_info_ = new ::com::zhichenhaixin::gps::proto::WL(*from.wl_info_);
  } else {
    wl_info_ = nullptr;
  }
  cur_utc_time_ = from.cur_utc_time_;
  // @@protoc_insertion_point(copy_constructor:com.zhichenhaixin.gps.proto.DevInfo)
}

void DevInfo::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DevInfo_TWQMSComData_2eproto.base);
  site_id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&gps_info_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&cur_utc_time_) -
      reinterpret_cast<char*>(&gps_info_)) + sizeof(cur_utc_time_));
}

DevInfo::~DevInfo() {
  // @@protoc_insertion_point(destructor:com.zhichenhaixin.gps.proto.DevInfo)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void DevInfo::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  site_id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete gps_info_;
  if (this != internal_default_instance()) delete zs_info_;
  if (this != internal_default_instance()) delete rdo_info_;
  if (this != internal_default_instance()) delete orp_info_;
  if (this != internal_default_instance()) delete ddm_info_;
  if (this != internal_default_instance()) delete nhn_info_;
  if (this != internal_default_instance()) delete wl_info_;
}

void DevInfo::ArenaDtor(void* object) {
  DevInfo* _this = reinterpret_cast< DevInfo* >(object);
  (void)_this;
}
void DevInfo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DevInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DevInfo& DevInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DevInfo_TWQMSComData_2eproto.base);
  return *internal_default_instance();
}


void DevInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:com.zhichenhaixin.gps.proto.DevInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      site_id_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(gps_info_ != nullptr);
      gps_info_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(zs_info_ != nullptr);
      zs_info_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(rdo_info_ != nullptr);
      rdo_info_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(orp_info_ != nullptr);
      orp_info_->Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      GOOGLE_DCHECK(ddm_info_ != nullptr);
      ddm_info_->Clear();
    }
    if (cached_has_bits & 0x00000040u) {
      GOOGLE_DCHECK(nhn_info_ != nullptr);
      nhn_info_->Clear();
    }
    if (cached_has_bits & 0x00000080u) {
      GOOGLE_DCHECK(wl_info_ != nullptr);
      wl_info_->Clear();
    }
  }
  cur_utc_time_ = PROTOBUF_LONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DevInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required .com.zhichenhaixin.gps.proto.GPS gps_info = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_gps_info(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .com.zhichenhaixin.gps.proto.ZS zs_info = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_zs_info(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .com.zhichenhaixin.gps.proto.RDO rdo_info = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_rdo_info(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .com.zhichenhaixin.gps.proto.ORP orp_info = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_orp_info(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .com.zhichenhaixin.gps.proto.DDM ddm_info = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_ddm_info(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .com.zhichenhaixin.gps.proto.NHN nhn_info = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_nhn_info(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .com.zhichenhaixin.gps.proto.WL wl_info = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_wl_info(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required string site_id = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          auto str = _internal_mutable_site_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "com.zhichenhaixin.gps.proto.DevInfo.site_id");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int64 cur_utc_time = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          _Internal::set_has_cur_utc_time(&has_bits);
          cur_utc_time_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DevInfo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.zhichenhaixin.gps.proto.DevInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .com.zhichenhaixin.gps.proto.GPS gps_info = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::gps_info(this), target, stream);
  }

  // required .com.zhichenhaixin.gps.proto.ZS zs_info = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::zs_info(this), target, stream);
  }

  // required .com.zhichenhaixin.gps.proto.RDO rdo_info = 3;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::rdo_info(this), target, stream);
  }

  // required .com.zhichenhaixin.gps.proto.ORP orp_info = 4;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::orp_info(this), target, stream);
  }

  // required .com.zhichenhaixin.gps.proto.DDM ddm_info = 5;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::ddm_info(this), target, stream);
  }

  // required .com.zhichenhaixin.gps.proto.NHN nhn_info = 7;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::nhn_info(this), target, stream);
  }

  // required .com.zhichenhaixin.gps.proto.WL wl_info = 8;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        8, _Internal::wl_info(this), target, stream);
  }

  // required string site_id = 9;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_site_id().data(), static_cast<int>(this->_internal_site_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "com.zhichenhaixin.gps.proto.DevInfo.site_id");
    target = stream->WriteStringMaybeAliased(
        9, this->_internal_site_id(), target);
  }

  // required int64 cur_utc_time = 10;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(10, this->_internal_cur_utc_time(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.zhichenhaixin.gps.proto.DevInfo)
  return target;
}

size_t DevInfo::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:com.zhichenhaixin.gps.proto.DevInfo)
  size_t total_size = 0;

  if (_internal_has_site_id()) {
    // required string site_id = 9;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_site_id());
  }

  if (_internal_has_gps_info()) {
    // required .com.zhichenhaixin.gps.proto.GPS gps_info = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *gps_info_);
  }

  if (_internal_has_zs_info()) {
    // required .com.zhichenhaixin.gps.proto.ZS zs_info = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *zs_info_);
  }

  if (_internal_has_rdo_info()) {
    // required .com.zhichenhaixin.gps.proto.RDO rdo_info = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *rdo_info_);
  }

  if (_internal_has_orp_info()) {
    // required .com.zhichenhaixin.gps.proto.ORP orp_info = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *orp_info_);
  }

  if (_internal_has_ddm_info()) {
    // required .com.zhichenhaixin.gps.proto.DDM ddm_info = 5;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *ddm_info_);
  }

  if (_internal_has_nhn_info()) {
    // required .com.zhichenhaixin.gps.proto.NHN nhn_info = 7;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *nhn_info_);
  }

  if (_internal_has_wl_info()) {
    // required .com.zhichenhaixin.gps.proto.WL wl_info = 8;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *wl_info_);
  }

  if (_internal_has_cur_utc_time()) {
    // required int64 cur_utc_time = 10;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_cur_utc_time());
  }

  return total_size;
}
size_t DevInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.zhichenhaixin.gps.proto.DevInfo)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x000001ff) ^ 0x000001ff) == 0) {  // All required fields are present.
    // required string site_id = 9;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_site_id());

    // required .com.zhichenhaixin.gps.proto.GPS gps_info = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *gps_info_);

    // required .com.zhichenhaixin.gps.proto.ZS zs_info = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *zs_info_);

    // required .com.zhichenhaixin.gps.proto.RDO rdo_info = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *rdo_info_);

    // required .com.zhichenhaixin.gps.proto.ORP orp_info = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *orp_info_);

    // required .com.zhichenhaixin.gps.proto.DDM ddm_info = 5;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *ddm_info_);

    // required .com.zhichenhaixin.gps.proto.NHN nhn_info = 7;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *nhn_info_);

    // required .com.zhichenhaixin.gps.proto.WL wl_info = 8;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *wl_info_);

    // required int64 cur_utc_time = 10;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_cur_utc_time());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DevInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.zhichenhaixin.gps.proto.DevInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const DevInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DevInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.zhichenhaixin.gps.proto.DevInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.zhichenhaixin.gps.proto.DevInfo)
    MergeFrom(*source);
  }
}

void DevInfo::MergeFrom(const DevInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.zhichenhaixin.gps.proto.DevInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_site_id(from._internal_site_id());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_mutable_gps_info()->::com::zhichenhaixin::gps::proto::GPS::MergeFrom(from._internal_gps_info());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_mutable_zs_info()->::com::zhichenhaixin::gps::proto::ZS::MergeFrom(from._internal_zs_info());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_rdo_info()->::com::zhichenhaixin::gps::proto::RDO::MergeFrom(from._internal_rdo_info());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_mutable_orp_info()->::com::zhichenhaixin::gps::proto::ORP::MergeFrom(from._internal_orp_info());
    }
    if (cached_has_bits & 0x00000020u) {
      _internal_mutable_ddm_info()->::com::zhichenhaixin::gps::proto::DDM::MergeFrom(from._internal_ddm_info());
    }
    if (cached_has_bits & 0x00000040u) {
      _internal_mutable_nhn_info()->::com::zhichenhaixin::gps::proto::NHN::MergeFrom(from._internal_nhn_info());
    }
    if (cached_has_bits & 0x00000080u) {
      _internal_mutable_wl_info()->::com::zhichenhaixin::gps::proto::WL::MergeFrom(from._internal_wl_info());
    }
  }
  if (cached_has_bits & 0x00000100u) {
    _internal_set_cur_utc_time(from._internal_cur_utc_time());
  }
}

void DevInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.zhichenhaixin.gps.proto.DevInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DevInfo::CopyFrom(const DevInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.zhichenhaixin.gps.proto.DevInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DevInfo::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (_internal_has_gps_info()) {
    if (!gps_info_->IsInitialized()) return false;
  }
  if (_internal_has_zs_info()) {
    if (!zs_info_->IsInitialized()) return false;
  }
  if (_internal_has_rdo_info()) {
    if (!rdo_info_->IsInitialized()) return false;
  }
  if (_internal_has_orp_info()) {
    if (!orp_info_->IsInitialized()) return false;
  }
  if (_internal_has_ddm_info()) {
    if (!ddm_info_->IsInitialized()) return false;
  }
  if (_internal_has_nhn_info()) {
    if (!nhn_info_->IsInitialized()) return false;
  }
  if (_internal_has_wl_info()) {
    if (!wl_info_->IsInitialized()) return false;
  }
  return true;
}

void DevInfo::InternalSwap(DevInfo* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  site_id_.Swap(&other->site_id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DevInfo, cur_utc_time_)
      + sizeof(DevInfo::cur_utc_time_)
      - PROTOBUF_FIELD_OFFSET(DevInfo, gps_info_)>(
          reinterpret_cast<char*>(&gps_info_),
          reinterpret_cast<char*>(&other->gps_info_));
}

::PROTOBUF_NAMESPACE_ID::Metadata DevInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void DevInfoList::InitAsDefaultInstance() {
}
class DevInfoList::_Internal {
 public:
  using HasBits = decltype(std::declval<DevInfoList>()._has_bits_);
  static void set_has_length(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
};

DevInfoList::DevInfoList(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  devinfo_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.zhichenhaixin.gps.proto.DevInfoList)
}
DevInfoList::DevInfoList(const DevInfoList& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      devinfo_(from.devinfo_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  length_ = from.length_;
  // @@protoc_insertion_point(copy_constructor:com.zhichenhaixin.gps.proto.DevInfoList)
}

void DevInfoList::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DevInfoList_TWQMSComData_2eproto.base);
  length_ = 0;
}

DevInfoList::~DevInfoList() {
  // @@protoc_insertion_point(destructor:com.zhichenhaixin.gps.proto.DevInfoList)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void DevInfoList::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void DevInfoList::ArenaDtor(void* object) {
  DevInfoList* _this = reinterpret_cast< DevInfoList* >(object);
  (void)_this;
}
void DevInfoList::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DevInfoList::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DevInfoList& DevInfoList::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DevInfoList_TWQMSComData_2eproto.base);
  return *internal_default_instance();
}


void DevInfoList::Clear() {
// @@protoc_insertion_point(message_clear_start:com.zhichenhaixin.gps.proto.DevInfoList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  devinfo_.Clear();
  length_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DevInfoList::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .com.zhichenhaixin.gps.proto.DevInfo devInfo = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_devinfo(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // optional int32 length = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_length(&has_bits);
          length_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DevInfoList::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.zhichenhaixin.gps.proto.DevInfoList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .com.zhichenhaixin.gps.proto.DevInfo devInfo = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_devinfo_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_devinfo(i), target, stream);
  }

  cached_has_bits = _has_bits_[0];
  // optional int32 length = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_length(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.zhichenhaixin.gps.proto.DevInfoList)
  return target;
}

size_t DevInfoList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.zhichenhaixin.gps.proto.DevInfoList)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .com.zhichenhaixin.gps.proto.DevInfo devInfo = 1;
  total_size += 1UL * this->_internal_devinfo_size();
  for (const auto& msg : this->devinfo_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // optional int32 length = 2;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_length());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DevInfoList::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.zhichenhaixin.gps.proto.DevInfoList)
  GOOGLE_DCHECK_NE(&from, this);
  const DevInfoList* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DevInfoList>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.zhichenhaixin.gps.proto.DevInfoList)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.zhichenhaixin.gps.proto.DevInfoList)
    MergeFrom(*source);
  }
}

void DevInfoList::MergeFrom(const DevInfoList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.zhichenhaixin.gps.proto.DevInfoList)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  devinfo_.MergeFrom(from.devinfo_);
  if (from._internal_has_length()) {
    _internal_set_length(from._internal_length());
  }
}

void DevInfoList::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.zhichenhaixin.gps.proto.DevInfoList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DevInfoList::CopyFrom(const DevInfoList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.zhichenhaixin.gps.proto.DevInfoList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DevInfoList::IsInitialized() const {
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(devinfo_)) return false;
  return true;
}

void DevInfoList::InternalSwap(DevInfoList* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  devinfo_.InternalSwap(&other->devinfo_);
  swap(length_, other->length_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DevInfoList::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace proto
}  // namespace gps
}  // namespace zhichenhaixin
}  // namespace com
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::com::zhichenhaixin::gps::proto::GPS* Arena::CreateMaybeMessage< ::com::zhichenhaixin::gps::proto::GPS >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::zhichenhaixin::gps::proto::GPS >(arena);
}
template<> PROTOBUF_NOINLINE ::com::zhichenhaixin::gps::proto::ZS* Arena::CreateMaybeMessage< ::com::zhichenhaixin::gps::proto::ZS >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::zhichenhaixin::gps::proto::ZS >(arena);
}
template<> PROTOBUF_NOINLINE ::com::zhichenhaixin::gps::proto::RDO* Arena::CreateMaybeMessage< ::com::zhichenhaixin::gps::proto::RDO >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::zhichenhaixin::gps::proto::RDO >(arena);
}
template<> PROTOBUF_NOINLINE ::com::zhichenhaixin::gps::proto::ORP* Arena::CreateMaybeMessage< ::com::zhichenhaixin::gps::proto::ORP >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::zhichenhaixin::gps::proto::ORP >(arena);
}
template<> PROTOBUF_NOINLINE ::com::zhichenhaixin::gps::proto::DDM* Arena::CreateMaybeMessage< ::com::zhichenhaixin::gps::proto::DDM >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::zhichenhaixin::gps::proto::DDM >(arena);
}
template<> PROTOBUF_NOINLINE ::com::zhichenhaixin::gps::proto::NHN* Arena::CreateMaybeMessage< ::com::zhichenhaixin::gps::proto::NHN >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::zhichenhaixin::gps::proto::NHN >(arena);
}
template<> PROTOBUF_NOINLINE ::com::zhichenhaixin::gps::proto::WL* Arena::CreateMaybeMessage< ::com::zhichenhaixin::gps::proto::WL >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::zhichenhaixin::gps::proto::WL >(arena);
}
template<> PROTOBUF_NOINLINE ::com::zhichenhaixin::gps::proto::DevInfo* Arena::CreateMaybeMessage< ::com::zhichenhaixin::gps::proto::DevInfo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::zhichenhaixin::gps::proto::DevInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::com::zhichenhaixin::gps::proto::DevInfoList* Arena::CreateMaybeMessage< ::com::zhichenhaixin::gps::proto::DevInfoList >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::zhichenhaixin::gps::proto::DevInfoList >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
