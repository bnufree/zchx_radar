// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ZCHXBd.proto

#include "ZCHXBd.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_ZCHXBd_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_BD_ZCHXBd_2eproto;
namespace com {
namespace zhichenhaixin {
namespace proto {
class BDDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<BD> _instance;
} _BD_default_instance_;
class BDListDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<BDList> _instance;
} _BDList_default_instance_;
}  // namespace proto
}  // namespace zhichenhaixin
}  // namespace com
static void InitDefaultsscc_info_BD_ZCHXBd_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::zhichenhaixin::proto::_BD_default_instance_;
    new (ptr) ::com::zhichenhaixin::proto::BD();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::zhichenhaixin::proto::BD::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_BD_ZCHXBd_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_BD_ZCHXBd_2eproto}, {}};

static void InitDefaultsscc_info_BDList_ZCHXBd_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::zhichenhaixin::proto::_BDList_default_instance_;
    new (ptr) ::com::zhichenhaixin::proto::BDList();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::zhichenhaixin::proto::BDList::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_BDList_ZCHXBd_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_BDList_ZCHXBd_2eproto}, {
      &scc_info_BD_ZCHXBd_2eproto.base,}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_ZCHXBd_2eproto[2];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_ZCHXBd_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_ZCHXBd_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_ZCHXBd_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::com::zhichenhaixin::proto::BD, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::com::zhichenhaixin::proto::BD, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::com::zhichenhaixin::proto::BD, hour_),
  PROTOBUF_FIELD_OFFSET(::com::zhichenhaixin::proto::BD, minute_),
  PROTOBUF_FIELD_OFFSET(::com::zhichenhaixin::proto::BD, second_),
  PROTOBUF_FIELD_OFFSET(::com::zhichenhaixin::proto::BD, millisecond_),
  PROTOBUF_FIELD_OFFSET(::com::zhichenhaixin::proto::BD, lon_),
  PROTOBUF_FIELD_OFFSET(::com::zhichenhaixin::proto::BD, lat_),
  PROTOBUF_FIELD_OFFSET(::com::zhichenhaixin::proto::BD, id_),
  1,
  2,
  3,
  4,
  5,
  6,
  0,
  PROTOBUF_FIELD_OFFSET(::com::zhichenhaixin::proto::BDList, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::com::zhichenhaixin::proto::BDList, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::com::zhichenhaixin::proto::BDList, utc_),
  PROTOBUF_FIELD_OFFSET(::com::zhichenhaixin::proto::BDList, bd_),
  0,
  ~0u,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 12, sizeof(::com::zhichenhaixin::proto::BD)},
  { 19, 26, sizeof(::com::zhichenhaixin::proto::BDList)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::com::zhichenhaixin::proto::_BD_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::com::zhichenhaixin::proto::_BDList_default_instance_),
};

const char descriptor_table_protodef_ZCHXBd_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\014ZCHXBd.proto\022\027com.zhichenhaixin.proto\""
  "m\n\002BD\022\014\n\004hour\030\001 \002(\005\022\016\n\006minute\030\002 \002(\005\022\016\n\006s"
  "econd\030\003 \002(\005\022\023\n\013millisecond\030\004 \002(\005\022\013\n\003lon\030"
  "\005 \002(\001\022\013\n\003lat\030\006 \002(\001\022\n\n\002id\030\007 \002(\t\">\n\006BDList"
  "\022\013\n\003UTC\030\001 \002(\004\022\'\n\002bd\030\002 \003(\0132\033.com.zhichenh"
  "aixin.proto.BD"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_ZCHXBd_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_ZCHXBd_2eproto_sccs[2] = {
  &scc_info_BD_ZCHXBd_2eproto.base,
  &scc_info_BDList_ZCHXBd_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_ZCHXBd_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_ZCHXBd_2eproto = {
  false, false, descriptor_table_protodef_ZCHXBd_2eproto, "ZCHXBd.proto", 214,
  &descriptor_table_ZCHXBd_2eproto_once, descriptor_table_ZCHXBd_2eproto_sccs, descriptor_table_ZCHXBd_2eproto_deps, 2, 0,
  schemas, file_default_instances, TableStruct_ZCHXBd_2eproto::offsets,
  file_level_metadata_ZCHXBd_2eproto, 2, file_level_enum_descriptors_ZCHXBd_2eproto, file_level_service_descriptors_ZCHXBd_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_ZCHXBd_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_ZCHXBd_2eproto)), true);
namespace com {
namespace zhichenhaixin {
namespace proto {

// ===================================================================

void BD::InitAsDefaultInstance() {
}
class BD::_Internal {
 public:
  using HasBits = decltype(std::declval<BD>()._has_bits_);
  static void set_has_hour(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_minute(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_second(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_millisecond(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_lon(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_lat(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_id(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x0000007f) ^ 0x0000007f) != 0;
  }
};

BD::BD(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.zhichenhaixin.proto.BD)
}
BD::BD(const BD& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_id()) {
    id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_id(),
      GetArena());
  }
  ::memcpy(&hour_, &from.hour_,
    static_cast<size_t>(reinterpret_cast<char*>(&lat_) -
    reinterpret_cast<char*>(&hour_)) + sizeof(lat_));
  // @@protoc_insertion_point(copy_constructor:com.zhichenhaixin.proto.BD)
}

void BD::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_BD_ZCHXBd_2eproto.base);
  id_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&hour_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&lat_) -
      reinterpret_cast<char*>(&hour_)) + sizeof(lat_));
}

BD::~BD() {
  // @@protoc_insertion_point(destructor:com.zhichenhaixin.proto.BD)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void BD::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  id_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void BD::ArenaDtor(void* object) {
  BD* _this = reinterpret_cast< BD* >(object);
  (void)_this;
}
void BD::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void BD::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BD& BD::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_BD_ZCHXBd_2eproto.base);
  return *internal_default_instance();
}


void BD::Clear() {
// @@protoc_insertion_point(message_clear_start:com.zhichenhaixin.proto.BD)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    id_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x0000007eu) {
    ::memset(&hour_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&lat_) -
        reinterpret_cast<char*>(&hour_)) + sizeof(lat_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BD::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required int32 hour = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_hour(&has_bits);
          hour_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int32 minute = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_minute(&has_bits);
          minute_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int32 second = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_second(&has_bits);
          second_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int32 millisecond = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_millisecond(&has_bits);
          millisecond_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required double lon = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 41)) {
          _Internal::set_has_lon(&has_bits);
          lon_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // required double lat = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 49)) {
          _Internal::set_has_lat(&has_bits);
          lat_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // required string id = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          auto str = _internal_mutable_id();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "com.zhichenhaixin.proto.BD.id");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* BD::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.zhichenhaixin.proto.BD)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 hour = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_hour(), target);
  }

  // required int32 minute = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_minute(), target);
  }

  // required int32 second = 3;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_second(), target);
  }

  // required int32 millisecond = 4;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_millisecond(), target);
  }

  // required double lon = 5;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(5, this->_internal_lon(), target);
  }

  // required double lat = 6;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(6, this->_internal_lat(), target);
  }

  // required string id = 7;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_id().data(), static_cast<int>(this->_internal_id().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "com.zhichenhaixin.proto.BD.id");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.zhichenhaixin.proto.BD)
  return target;
}

size_t BD::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:com.zhichenhaixin.proto.BD)
  size_t total_size = 0;

  if (_internal_has_id()) {
    // required string id = 7;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());
  }

  if (_internal_has_hour()) {
    // required int32 hour = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_hour());
  }

  if (_internal_has_minute()) {
    // required int32 minute = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_minute());
  }

  if (_internal_has_second()) {
    // required int32 second = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_second());
  }

  if (_internal_has_millisecond()) {
    // required int32 millisecond = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_millisecond());
  }

  if (_internal_has_lon()) {
    // required double lon = 5;
    total_size += 1 + 8;
  }

  if (_internal_has_lat()) {
    // required double lat = 6;
    total_size += 1 + 8;
  }

  return total_size;
}
size_t BD::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.zhichenhaixin.proto.BD)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x0000007f) ^ 0x0000007f) == 0) {  // All required fields are present.
    // required string id = 7;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_id());

    // required int32 hour = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_hour());

    // required int32 minute = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_minute());

    // required int32 second = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_second());

    // required int32 millisecond = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_millisecond());

    // required double lon = 5;
    total_size += 1 + 8;

    // required double lat = 6;
    total_size += 1 + 8;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BD::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.zhichenhaixin.proto.BD)
  GOOGLE_DCHECK_NE(&from, this);
  const BD* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<BD>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.zhichenhaixin.proto.BD)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.zhichenhaixin.proto.BD)
    MergeFrom(*source);
  }
}

void BD::MergeFrom(const BD& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.zhichenhaixin.proto.BD)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_id(from._internal_id());
    }
    if (cached_has_bits & 0x00000002u) {
      hour_ = from.hour_;
    }
    if (cached_has_bits & 0x00000004u) {
      minute_ = from.minute_;
    }
    if (cached_has_bits & 0x00000008u) {
      second_ = from.second_;
    }
    if (cached_has_bits & 0x00000010u) {
      millisecond_ = from.millisecond_;
    }
    if (cached_has_bits & 0x00000020u) {
      lon_ = from.lon_;
    }
    if (cached_has_bits & 0x00000040u) {
      lat_ = from.lat_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void BD::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.zhichenhaixin.proto.BD)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BD::CopyFrom(const BD& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.zhichenhaixin.proto.BD)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BD::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void BD::InternalSwap(BD* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  id_.Swap(&other->id_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(BD, lat_)
      + sizeof(BD::lat_)
      - PROTOBUF_FIELD_OFFSET(BD, hour_)>(
          reinterpret_cast<char*>(&hour_),
          reinterpret_cast<char*>(&other->hour_));
}

::PROTOBUF_NAMESPACE_ID::Metadata BD::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void BDList::InitAsDefaultInstance() {
}
class BDList::_Internal {
 public:
  using HasBits = decltype(std::declval<BDList>()._has_bits_);
  static void set_has_utc(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

BDList::BDList(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  bd_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.zhichenhaixin.proto.BDList)
}
BDList::BDList(const BDList& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      bd_(from.bd_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  utc_ = from.utc_;
  // @@protoc_insertion_point(copy_constructor:com.zhichenhaixin.proto.BDList)
}

void BDList::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_BDList_ZCHXBd_2eproto.base);
  utc_ = PROTOBUF_ULONGLONG(0);
}

BDList::~BDList() {
  // @@protoc_insertion_point(destructor:com.zhichenhaixin.proto.BDList)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void BDList::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void BDList::ArenaDtor(void* object) {
  BDList* _this = reinterpret_cast< BDList* >(object);
  (void)_this;
}
void BDList::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void BDList::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BDList& BDList::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_BDList_ZCHXBd_2eproto.base);
  return *internal_default_instance();
}


void BDList::Clear() {
// @@protoc_insertion_point(message_clear_start:com.zhichenhaixin.proto.BDList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  bd_.Clear();
  utc_ = PROTOBUF_ULONGLONG(0);
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BDList::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required uint64 UTC = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_utc(&has_bits);
          utc_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .com.zhichenhaixin.proto.BD bd = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_bd(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* BDList::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.zhichenhaixin.proto.BDList)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint64 UTC = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_utc(), target);
  }

  // repeated .com.zhichenhaixin.proto.BD bd = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_bd_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_bd(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.zhichenhaixin.proto.BDList)
  return target;
}

size_t BDList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.zhichenhaixin.proto.BDList)
  size_t total_size = 0;

  // required uint64 UTC = 1;
  if (_internal_has_utc()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_utc());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .com.zhichenhaixin.proto.BD bd = 2;
  total_size += 1UL * this->_internal_bd_size();
  for (const auto& msg : this->bd_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BDList::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.zhichenhaixin.proto.BDList)
  GOOGLE_DCHECK_NE(&from, this);
  const BDList* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<BDList>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.zhichenhaixin.proto.BDList)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.zhichenhaixin.proto.BDList)
    MergeFrom(*source);
  }
}

void BDList::MergeFrom(const BDList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.zhichenhaixin.proto.BDList)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  bd_.MergeFrom(from.bd_);
  if (from._internal_has_utc()) {
    _internal_set_utc(from._internal_utc());
  }
}

void BDList::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.zhichenhaixin.proto.BDList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BDList::CopyFrom(const BDList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.zhichenhaixin.proto.BDList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BDList::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(bd_)) return false;
  return true;
}

void BDList::InternalSwap(BDList* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  bd_.InternalSwap(&other->bd_);
  swap(utc_, other->utc_);
}

::PROTOBUF_NAMESPACE_ID::Metadata BDList::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace proto
}  // namespace zhichenhaixin
}  // namespace com
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::com::zhichenhaixin::proto::BD* Arena::CreateMaybeMessage< ::com::zhichenhaixin::proto::BD >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::zhichenhaixin::proto::BD >(arena);
}
template<> PROTOBUF_NOINLINE ::com::zhichenhaixin::proto::BDList* Arena::CreateMaybeMessage< ::com::zhichenhaixin::proto::BDList >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::zhichenhaixin::proto::BDList >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
