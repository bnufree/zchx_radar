// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ZCHXBd.proto

#ifndef PROTOBUF_ZCHXBd_2eproto__INCLUDED
#define PROTOBUF_ZCHXBd_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace com {
namespace zhichenhaixin {
namespace proto {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_ZCHXBd_2eproto();
void protobuf_AssignDesc_ZCHXBd_2eproto();
void protobuf_ShutdownFile_ZCHXBd_2eproto();

class BD;
class BDList;

// ===================================================================

class BD : public ::google::protobuf::Message {
 public:
  BD();
  virtual ~BD();

  BD(const BD& from);

  inline BD& operator=(const BD& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BD& default_instance();

  void Swap(BD* other);

  // implements Message ----------------------------------------------

  BD* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BD& from);
  void MergeFrom(const BD& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 hour = 1;
  inline bool has_hour() const;
  inline void clear_hour();
  static const int kHourFieldNumber = 1;
  inline ::google::protobuf::int32 hour() const;
  inline void set_hour(::google::protobuf::int32 value);

  // required int32 minute = 2;
  inline bool has_minute() const;
  inline void clear_minute();
  static const int kMinuteFieldNumber = 2;
  inline ::google::protobuf::int32 minute() const;
  inline void set_minute(::google::protobuf::int32 value);

  // required int32 second = 3;
  inline bool has_second() const;
  inline void clear_second();
  static const int kSecondFieldNumber = 3;
  inline ::google::protobuf::int32 second() const;
  inline void set_second(::google::protobuf::int32 value);

  // required int32 millisecond = 4;
  inline bool has_millisecond() const;
  inline void clear_millisecond();
  static const int kMillisecondFieldNumber = 4;
  inline ::google::protobuf::int32 millisecond() const;
  inline void set_millisecond(::google::protobuf::int32 value);

  // required double lon = 5;
  inline bool has_lon() const;
  inline void clear_lon();
  static const int kLonFieldNumber = 5;
  inline double lon() const;
  inline void set_lon(double value);

  // required double lat = 6;
  inline bool has_lat() const;
  inline void clear_lat();
  static const int kLatFieldNumber = 6;
  inline double lat() const;
  inline void set_lat(double value);

  // required string id = 7;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 7;
  inline const ::std::string& id() const;
  inline void set_id(const ::std::string& value);
  inline void set_id(const char* value);
  inline void set_id(const char* value, size_t size);
  inline ::std::string* mutable_id();
  inline ::std::string* release_id();
  inline void set_allocated_id(::std::string* id);

  // @@protoc_insertion_point(class_scope:com.zhichenhaixin.proto.BD)
 private:
  inline void set_has_hour();
  inline void clear_has_hour();
  inline void set_has_minute();
  inline void clear_has_minute();
  inline void set_has_second();
  inline void clear_has_second();
  inline void set_has_millisecond();
  inline void clear_has_millisecond();
  inline void set_has_lon();
  inline void clear_has_lon();
  inline void set_has_lat();
  inline void clear_has_lat();
  inline void set_has_id();
  inline void clear_has_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 hour_;
  ::google::protobuf::int32 minute_;
  ::google::protobuf::int32 second_;
  ::google::protobuf::int32 millisecond_;
  double lon_;
  double lat_;
  ::std::string* id_;
  friend void  protobuf_AddDesc_ZCHXBd_2eproto();
  friend void protobuf_AssignDesc_ZCHXBd_2eproto();
  friend void protobuf_ShutdownFile_ZCHXBd_2eproto();

  void InitAsDefaultInstance();
  static BD* default_instance_;
};
// -------------------------------------------------------------------

class BDList : public ::google::protobuf::Message {
 public:
  BDList();
  virtual ~BDList();

  BDList(const BDList& from);

  inline BDList& operator=(const BDList& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BDList& default_instance();

  void Swap(BDList* other);

  // implements Message ----------------------------------------------

  BDList* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BDList& from);
  void MergeFrom(const BDList& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint64 UTC = 1;
  inline bool has_utc() const;
  inline void clear_utc();
  static const int kUTCFieldNumber = 1;
  inline ::google::protobuf::uint64 utc() const;
  inline void set_utc(::google::protobuf::uint64 value);

  // repeated .com.zhichenhaixin.proto.BD bd = 2;
  inline int bd_size() const;
  inline void clear_bd();
  static const int kBdFieldNumber = 2;
  inline const ::com::zhichenhaixin::proto::BD& bd(int index) const;
  inline ::com::zhichenhaixin::proto::BD* mutable_bd(int index);
  inline ::com::zhichenhaixin::proto::BD* add_bd();
  inline const ::google::protobuf::RepeatedPtrField< ::com::zhichenhaixin::proto::BD >&
      bd() const;
  inline ::google::protobuf::RepeatedPtrField< ::com::zhichenhaixin::proto::BD >*
      mutable_bd();

  // @@protoc_insertion_point(class_scope:com.zhichenhaixin.proto.BDList)
 private:
  inline void set_has_utc();
  inline void clear_has_utc();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 utc_;
  ::google::protobuf::RepeatedPtrField< ::com::zhichenhaixin::proto::BD > bd_;
  friend void  protobuf_AddDesc_ZCHXBd_2eproto();
  friend void protobuf_AssignDesc_ZCHXBd_2eproto();
  friend void protobuf_ShutdownFile_ZCHXBd_2eproto();

  void InitAsDefaultInstance();
  static BDList* default_instance_;
};
// ===================================================================


// ===================================================================

// BD

// required int32 hour = 1;
inline bool BD::has_hour() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BD::set_has_hour() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BD::clear_has_hour() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BD::clear_hour() {
  hour_ = 0;
  clear_has_hour();
}
inline ::google::protobuf::int32 BD::hour() const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.proto.BD.hour)
  return hour_;
}
inline void BD::set_hour(::google::protobuf::int32 value) {
  set_has_hour();
  hour_ = value;
  // @@protoc_insertion_point(field_set:com.zhichenhaixin.proto.BD.hour)
}

// required int32 minute = 2;
inline bool BD::has_minute() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BD::set_has_minute() {
  _has_bits_[0] |= 0x00000002u;
}
inline void BD::clear_has_minute() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void BD::clear_minute() {
  minute_ = 0;
  clear_has_minute();
}
inline ::google::protobuf::int32 BD::minute() const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.proto.BD.minute)
  return minute_;
}
inline void BD::set_minute(::google::protobuf::int32 value) {
  set_has_minute();
  minute_ = value;
  // @@protoc_insertion_point(field_set:com.zhichenhaixin.proto.BD.minute)
}

// required int32 second = 3;
inline bool BD::has_second() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void BD::set_has_second() {
  _has_bits_[0] |= 0x00000004u;
}
inline void BD::clear_has_second() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void BD::clear_second() {
  second_ = 0;
  clear_has_second();
}
inline ::google::protobuf::int32 BD::second() const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.proto.BD.second)
  return second_;
}
inline void BD::set_second(::google::protobuf::int32 value) {
  set_has_second();
  second_ = value;
  // @@protoc_insertion_point(field_set:com.zhichenhaixin.proto.BD.second)
}

// required int32 millisecond = 4;
inline bool BD::has_millisecond() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void BD::set_has_millisecond() {
  _has_bits_[0] |= 0x00000008u;
}
inline void BD::clear_has_millisecond() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void BD::clear_millisecond() {
  millisecond_ = 0;
  clear_has_millisecond();
}
inline ::google::protobuf::int32 BD::millisecond() const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.proto.BD.millisecond)
  return millisecond_;
}
inline void BD::set_millisecond(::google::protobuf::int32 value) {
  set_has_millisecond();
  millisecond_ = value;
  // @@protoc_insertion_point(field_set:com.zhichenhaixin.proto.BD.millisecond)
}

// required double lon = 5;
inline bool BD::has_lon() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void BD::set_has_lon() {
  _has_bits_[0] |= 0x00000010u;
}
inline void BD::clear_has_lon() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void BD::clear_lon() {
  lon_ = 0;
  clear_has_lon();
}
inline double BD::lon() const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.proto.BD.lon)
  return lon_;
}
inline void BD::set_lon(double value) {
  set_has_lon();
  lon_ = value;
  // @@protoc_insertion_point(field_set:com.zhichenhaixin.proto.BD.lon)
}

// required double lat = 6;
inline bool BD::has_lat() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void BD::set_has_lat() {
  _has_bits_[0] |= 0x00000020u;
}
inline void BD::clear_has_lat() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void BD::clear_lat() {
  lat_ = 0;
  clear_has_lat();
}
inline double BD::lat() const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.proto.BD.lat)
  return lat_;
}
inline void BD::set_lat(double value) {
  set_has_lat();
  lat_ = value;
  // @@protoc_insertion_point(field_set:com.zhichenhaixin.proto.BD.lat)
}

// required string id = 7;
inline bool BD::has_id() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void BD::set_has_id() {
  _has_bits_[0] |= 0x00000040u;
}
inline void BD::clear_has_id() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void BD::clear_id() {
  if (id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    id_->clear();
  }
  clear_has_id();
}
inline const ::std::string& BD::id() const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.proto.BD.id)
  return *id_;
}
inline void BD::set_id(const ::std::string& value) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    id_ = new ::std::string;
  }
  id_->assign(value);
  // @@protoc_insertion_point(field_set:com.zhichenhaixin.proto.BD.id)
}
inline void BD::set_id(const char* value) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    id_ = new ::std::string;
  }
  id_->assign(value);
  // @@protoc_insertion_point(field_set_char:com.zhichenhaixin.proto.BD.id)
}
inline void BD::set_id(const char* value, size_t size) {
  set_has_id();
  if (id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    id_ = new ::std::string;
  }
  id_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:com.zhichenhaixin.proto.BD.id)
}
inline ::std::string* BD::mutable_id() {
  set_has_id();
  if (id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    id_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:com.zhichenhaixin.proto.BD.id)
  return id_;
}
inline ::std::string* BD::release_id() {
  clear_has_id();
  if (id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = id_;
    id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void BD::set_allocated_id(::std::string* id) {
  if (id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete id_;
  }
  if (id) {
    set_has_id();
    id_ = id;
  } else {
    clear_has_id();
    id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:com.zhichenhaixin.proto.BD.id)
}

// -------------------------------------------------------------------

// BDList

// required uint64 UTC = 1;
inline bool BDList::has_utc() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BDList::set_has_utc() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BDList::clear_has_utc() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BDList::clear_utc() {
  utc_ = GOOGLE_ULONGLONG(0);
  clear_has_utc();
}
inline ::google::protobuf::uint64 BDList::utc() const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.proto.BDList.UTC)
  return utc_;
}
inline void BDList::set_utc(::google::protobuf::uint64 value) {
  set_has_utc();
  utc_ = value;
  // @@protoc_insertion_point(field_set:com.zhichenhaixin.proto.BDList.UTC)
}

// repeated .com.zhichenhaixin.proto.BD bd = 2;
inline int BDList::bd_size() const {
  return bd_.size();
}
inline void BDList::clear_bd() {
  bd_.Clear();
}
inline const ::com::zhichenhaixin::proto::BD& BDList::bd(int index) const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.proto.BDList.bd)
  return bd_.Get(index);
}
inline ::com::zhichenhaixin::proto::BD* BDList::mutable_bd(int index) {
  // @@protoc_insertion_point(field_mutable:com.zhichenhaixin.proto.BDList.bd)
  return bd_.Mutable(index);
}
inline ::com::zhichenhaixin::proto::BD* BDList::add_bd() {
  // @@protoc_insertion_point(field_add:com.zhichenhaixin.proto.BDList.bd)
  return bd_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::com::zhichenhaixin::proto::BD >&
BDList::bd() const {
  // @@protoc_insertion_point(field_list:com.zhichenhaixin.proto.BDList.bd)
  return bd_;
}
inline ::google::protobuf::RepeatedPtrField< ::com::zhichenhaixin::proto::BD >*
BDList::mutable_bd() {
  // @@protoc_insertion_point(field_mutable_list:com.zhichenhaixin.proto.BDList.bd)
  return &bd_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace zhichenhaixin
}  // namespace com

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_ZCHXBd_2eproto__INCLUDED
