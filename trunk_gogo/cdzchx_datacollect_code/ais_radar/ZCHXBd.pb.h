// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ZCHXBd.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_ZCHXBd_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_ZCHXBd_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3012000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3012001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_ZCHXBd_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_ZCHXBd_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[2]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_ZCHXBd_2eproto;
namespace com {
namespace zhichenhaixin {
namespace proto {
class BD;
class BDDefaultTypeInternal;
extern BDDefaultTypeInternal _BD_default_instance_;
class BDList;
class BDListDefaultTypeInternal;
extern BDListDefaultTypeInternal _BDList_default_instance_;
}  // namespace proto
}  // namespace zhichenhaixin
}  // namespace com
PROTOBUF_NAMESPACE_OPEN
template<> ::com::zhichenhaixin::proto::BD* Arena::CreateMaybeMessage<::com::zhichenhaixin::proto::BD>(Arena*);
template<> ::com::zhichenhaixin::proto::BDList* Arena::CreateMaybeMessage<::com::zhichenhaixin::proto::BDList>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace com {
namespace zhichenhaixin {
namespace proto {

// ===================================================================

class BD PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:com.zhichenhaixin.proto.BD) */ {
 public:
  inline BD() : BD(nullptr) {};
  virtual ~BD();

  BD(const BD& from);
  BD(BD&& from) noexcept
    : BD() {
    *this = ::std::move(from);
  }

  inline BD& operator=(const BD& from) {
    CopyFrom(from);
    return *this;
  }
  inline BD& operator=(BD&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const BD& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BD* internal_default_instance() {
    return reinterpret_cast<const BD*>(
               &_BD_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(BD& a, BD& b) {
    a.Swap(&b);
  }
  inline void Swap(BD* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BD* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BD* New() const final {
    return CreateMaybeMessage<BD>(nullptr);
  }

  BD* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BD>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const BD& from);
  void MergeFrom(const BD& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BD* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "com.zhichenhaixin.proto.BD";
  }
  protected:
  explicit BD(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ZCHXBd_2eproto);
    return ::descriptor_table_ZCHXBd_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdFieldNumber = 7,
    kHourFieldNumber = 1,
    kMinuteFieldNumber = 2,
    kSecondFieldNumber = 3,
    kMillisecondFieldNumber = 4,
    kLonFieldNumber = 5,
    kLatFieldNumber = 6,
  };
  // required string id = 7;
  bool has_id() const;
  private:
  bool _internal_has_id() const;
  public:
  void clear_id();
  const std::string& id() const;
  void set_id(const std::string& value);
  void set_id(std::string&& value);
  void set_id(const char* value);
  void set_id(const char* value, size_t size);
  std::string* mutable_id();
  std::string* release_id();
  void set_allocated_id(std::string* id);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_id();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_id(
      std::string* id);
  private:
  const std::string& _internal_id() const;
  void _internal_set_id(const std::string& value);
  std::string* _internal_mutable_id();
  public:

  // required int32 hour = 1;
  bool has_hour() const;
  private:
  bool _internal_has_hour() const;
  public:
  void clear_hour();
  ::PROTOBUF_NAMESPACE_ID::int32 hour() const;
  void set_hour(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_hour() const;
  void _internal_set_hour(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // required int32 minute = 2;
  bool has_minute() const;
  private:
  bool _internal_has_minute() const;
  public:
  void clear_minute();
  ::PROTOBUF_NAMESPACE_ID::int32 minute() const;
  void set_minute(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_minute() const;
  void _internal_set_minute(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // required int32 second = 3;
  bool has_second() const;
  private:
  bool _internal_has_second() const;
  public:
  void clear_second();
  ::PROTOBUF_NAMESPACE_ID::int32 second() const;
  void set_second(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_second() const;
  void _internal_set_second(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // required int32 millisecond = 4;
  bool has_millisecond() const;
  private:
  bool _internal_has_millisecond() const;
  public:
  void clear_millisecond();
  ::PROTOBUF_NAMESPACE_ID::int32 millisecond() const;
  void set_millisecond(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_millisecond() const;
  void _internal_set_millisecond(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // required double lon = 5;
  bool has_lon() const;
  private:
  bool _internal_has_lon() const;
  public:
  void clear_lon();
  double lon() const;
  void set_lon(double value);
  private:
  double _internal_lon() const;
  void _internal_set_lon(double value);
  public:

  // required double lat = 6;
  bool has_lat() const;
  private:
  bool _internal_has_lat() const;
  public:
  void clear_lat();
  double lat() const;
  void set_lat(double value);
  private:
  double _internal_lat() const;
  void _internal_set_lat(double value);
  public:

  // @@protoc_insertion_point(class_scope:com.zhichenhaixin.proto.BD)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr id_;
  ::PROTOBUF_NAMESPACE_ID::int32 hour_;
  ::PROTOBUF_NAMESPACE_ID::int32 minute_;
  ::PROTOBUF_NAMESPACE_ID::int32 second_;
  ::PROTOBUF_NAMESPACE_ID::int32 millisecond_;
  double lon_;
  double lat_;
  friend struct ::TableStruct_ZCHXBd_2eproto;
};
// -------------------------------------------------------------------

class BDList PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:com.zhichenhaixin.proto.BDList) */ {
 public:
  inline BDList() : BDList(nullptr) {};
  virtual ~BDList();

  BDList(const BDList& from);
  BDList(BDList&& from) noexcept
    : BDList() {
    *this = ::std::move(from);
  }

  inline BDList& operator=(const BDList& from) {
    CopyFrom(from);
    return *this;
  }
  inline BDList& operator=(BDList&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const BDList& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BDList* internal_default_instance() {
    return reinterpret_cast<const BDList*>(
               &_BDList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(BDList& a, BDList& b) {
    a.Swap(&b);
  }
  inline void Swap(BDList* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BDList* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BDList* New() const final {
    return CreateMaybeMessage<BDList>(nullptr);
  }

  BDList* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BDList>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const BDList& from);
  void MergeFrom(const BDList& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BDList* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "com.zhichenhaixin.proto.BDList";
  }
  protected:
  explicit BDList(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ZCHXBd_2eproto);
    return ::descriptor_table_ZCHXBd_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBdFieldNumber = 2,
    kUTCFieldNumber = 1,
  };
  // repeated .com.zhichenhaixin.proto.BD bd = 2;
  int bd_size() const;
  private:
  int _internal_bd_size() const;
  public:
  void clear_bd();
  ::com::zhichenhaixin::proto::BD* mutable_bd(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::zhichenhaixin::proto::BD >*
      mutable_bd();
  private:
  const ::com::zhichenhaixin::proto::BD& _internal_bd(int index) const;
  ::com::zhichenhaixin::proto::BD* _internal_add_bd();
  public:
  const ::com::zhichenhaixin::proto::BD& bd(int index) const;
  ::com::zhichenhaixin::proto::BD* add_bd();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::zhichenhaixin::proto::BD >&
      bd() const;

  // required uint64 UTC = 1;
  bool has_utc() const;
  private:
  bool _internal_has_utc() const;
  public:
  void clear_utc();
  ::PROTOBUF_NAMESPACE_ID::uint64 utc() const;
  void set_utc(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_utc() const;
  void _internal_set_utc(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:com.zhichenhaixin.proto.BDList)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::zhichenhaixin::proto::BD > bd_;
  ::PROTOBUF_NAMESPACE_ID::uint64 utc_;
  friend struct ::TableStruct_ZCHXBd_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// BD

// required int32 hour = 1;
inline bool BD::_internal_has_hour() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool BD::has_hour() const {
  return _internal_has_hour();
}
inline void BD::clear_hour() {
  hour_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BD::_internal_hour() const {
  return hour_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BD::hour() const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.proto.BD.hour)
  return _internal_hour();
}
inline void BD::_internal_set_hour(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  hour_ = value;
}
inline void BD::set_hour(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_hour(value);
  // @@protoc_insertion_point(field_set:com.zhichenhaixin.proto.BD.hour)
}

// required int32 minute = 2;
inline bool BD::_internal_has_minute() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool BD::has_minute() const {
  return _internal_has_minute();
}
inline void BD::clear_minute() {
  minute_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BD::_internal_minute() const {
  return minute_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BD::minute() const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.proto.BD.minute)
  return _internal_minute();
}
inline void BD::_internal_set_minute(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000004u;
  minute_ = value;
}
inline void BD::set_minute(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_minute(value);
  // @@protoc_insertion_point(field_set:com.zhichenhaixin.proto.BD.minute)
}

// required int32 second = 3;
inline bool BD::_internal_has_second() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool BD::has_second() const {
  return _internal_has_second();
}
inline void BD::clear_second() {
  second_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BD::_internal_second() const {
  return second_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BD::second() const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.proto.BD.second)
  return _internal_second();
}
inline void BD::_internal_set_second(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000008u;
  second_ = value;
}
inline void BD::set_second(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_second(value);
  // @@protoc_insertion_point(field_set:com.zhichenhaixin.proto.BD.second)
}

// required int32 millisecond = 4;
inline bool BD::_internal_has_millisecond() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool BD::has_millisecond() const {
  return _internal_has_millisecond();
}
inline void BD::clear_millisecond() {
  millisecond_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BD::_internal_millisecond() const {
  return millisecond_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 BD::millisecond() const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.proto.BD.millisecond)
  return _internal_millisecond();
}
inline void BD::_internal_set_millisecond(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000010u;
  millisecond_ = value;
}
inline void BD::set_millisecond(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_millisecond(value);
  // @@protoc_insertion_point(field_set:com.zhichenhaixin.proto.BD.millisecond)
}

// required double lon = 5;
inline bool BD::_internal_has_lon() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool BD::has_lon() const {
  return _internal_has_lon();
}
inline void BD::clear_lon() {
  lon_ = 0;
  _has_bits_[0] &= ~0x00000020u;
}
inline double BD::_internal_lon() const {
  return lon_;
}
inline double BD::lon() const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.proto.BD.lon)
  return _internal_lon();
}
inline void BD::_internal_set_lon(double value) {
  _has_bits_[0] |= 0x00000020u;
  lon_ = value;
}
inline void BD::set_lon(double value) {
  _internal_set_lon(value);
  // @@protoc_insertion_point(field_set:com.zhichenhaixin.proto.BD.lon)
}

// required double lat = 6;
inline bool BD::_internal_has_lat() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool BD::has_lat() const {
  return _internal_has_lat();
}
inline void BD::clear_lat() {
  lat_ = 0;
  _has_bits_[0] &= ~0x00000040u;
}
inline double BD::_internal_lat() const {
  return lat_;
}
inline double BD::lat() const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.proto.BD.lat)
  return _internal_lat();
}
inline void BD::_internal_set_lat(double value) {
  _has_bits_[0] |= 0x00000040u;
  lat_ = value;
}
inline void BD::set_lat(double value) {
  _internal_set_lat(value);
  // @@protoc_insertion_point(field_set:com.zhichenhaixin.proto.BD.lat)
}

// required string id = 7;
inline bool BD::_internal_has_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool BD::has_id() const {
  return _internal_has_id();
}
inline void BD::clear_id() {
  id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& BD::id() const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.proto.BD.id)
  return _internal_id();
}
inline void BD::set_id(const std::string& value) {
  _internal_set_id(value);
  // @@protoc_insertion_point(field_set:com.zhichenhaixin.proto.BD.id)
}
inline std::string* BD::mutable_id() {
  // @@protoc_insertion_point(field_mutable:com.zhichenhaixin.proto.BD.id)
  return _internal_mutable_id();
}
inline const std::string& BD::_internal_id() const {
  return id_.Get();
}
inline void BD::_internal_set_id(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void BD::set_id(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:com.zhichenhaixin.proto.BD.id)
}
inline void BD::set_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:com.zhichenhaixin.proto.BD.id)
}
inline void BD::set_id(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:com.zhichenhaixin.proto.BD.id)
}
inline std::string* BD::_internal_mutable_id() {
  _has_bits_[0] |= 0x00000001u;
  return id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* BD::release_id() {
  // @@protoc_insertion_point(field_release:com.zhichenhaixin.proto.BD.id)
  if (!_internal_has_id()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return id_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void BD::set_allocated_id(std::string* id) {
  if (id != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:com.zhichenhaixin.proto.BD.id)
}
inline std::string* BD::unsafe_arena_release_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.zhichenhaixin.proto.BD.id)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000001u;
  return id_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void BD::unsafe_arena_set_allocated_id(
    std::string* id) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (id != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  id_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      id, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.zhichenhaixin.proto.BD.id)
}

// -------------------------------------------------------------------

// BDList

// required uint64 UTC = 1;
inline bool BDList::_internal_has_utc() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool BDList::has_utc() const {
  return _internal_has_utc();
}
inline void BDList::clear_utc() {
  utc_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 BDList::_internal_utc() const {
  return utc_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 BDList::utc() const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.proto.BDList.UTC)
  return _internal_utc();
}
inline void BDList::_internal_set_utc(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000001u;
  utc_ = value;
}
inline void BDList::set_utc(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_utc(value);
  // @@protoc_insertion_point(field_set:com.zhichenhaixin.proto.BDList.UTC)
}

// repeated .com.zhichenhaixin.proto.BD bd = 2;
inline int BDList::_internal_bd_size() const {
  return bd_.size();
}
inline int BDList::bd_size() const {
  return _internal_bd_size();
}
inline void BDList::clear_bd() {
  bd_.Clear();
}
inline ::com::zhichenhaixin::proto::BD* BDList::mutable_bd(int index) {
  // @@protoc_insertion_point(field_mutable:com.zhichenhaixin.proto.BDList.bd)
  return bd_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::zhichenhaixin::proto::BD >*
BDList::mutable_bd() {
  // @@protoc_insertion_point(field_mutable_list:com.zhichenhaixin.proto.BDList.bd)
  return &bd_;
}
inline const ::com::zhichenhaixin::proto::BD& BDList::_internal_bd(int index) const {
  return bd_.Get(index);
}
inline const ::com::zhichenhaixin::proto::BD& BDList::bd(int index) const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.proto.BDList.bd)
  return _internal_bd(index);
}
inline ::com::zhichenhaixin::proto::BD* BDList::_internal_add_bd() {
  return bd_.Add();
}
inline ::com::zhichenhaixin::proto::BD* BDList::add_bd() {
  // @@protoc_insertion_point(field_add:com.zhichenhaixin.proto.BDList.bd)
  return _internal_add_bd();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::zhichenhaixin::proto::BD >&
BDList::bd() const {
  // @@protoc_insertion_point(field_list:com.zhichenhaixin.proto.BDList.bd)
  return bd_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace zhichenhaixin
}  // namespace com

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_ZCHXBd_2eproto
