// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ZCHXRadar.proto

#include "ZCHXRadar.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_ZCHXRadar_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RadarHistoryTrack_ZCHXRadar_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ZCHXRadar_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_RadarHistoryTracks_ZCHXRadar_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ZCHXRadar_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_TrackPoint_ZCHXRadar_2eproto;
namespace com {
namespace zhichenhaixin {
namespace proto {
class RadarHistoryTrackDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RadarHistoryTrack> _instance;
} _RadarHistoryTrack_default_instance_;
class RadarHistoryTracksDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RadarHistoryTracks> _instance;
} _RadarHistoryTracks_default_instance_;
class TrackPointDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TrackPoint> _instance;
} _TrackPoint_default_instance_;
class RadarSurfaceTrackDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RadarSurfaceTrack> _instance;
} _RadarSurfaceTrack_default_instance_;
class VideoFrameDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<VideoFrame> _instance;
} _VideoFrame_default_instance_;
}  // namespace proto
}  // namespace zhichenhaixin
}  // namespace com
static void InitDefaultsscc_info_RadarHistoryTrack_ZCHXRadar_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::zhichenhaixin::proto::_RadarHistoryTrack_default_instance_;
    new (ptr) ::com::zhichenhaixin::proto::RadarHistoryTrack();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::zhichenhaixin::proto::RadarHistoryTrack::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RadarHistoryTrack_ZCHXRadar_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_RadarHistoryTrack_ZCHXRadar_2eproto}, {}};

static void InitDefaultsscc_info_RadarHistoryTracks_ZCHXRadar_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::zhichenhaixin::proto::_RadarHistoryTracks_default_instance_;
    new (ptr) ::com::zhichenhaixin::proto::RadarHistoryTracks();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::zhichenhaixin::proto::RadarHistoryTracks::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_RadarHistoryTracks_ZCHXRadar_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_RadarHistoryTracks_ZCHXRadar_2eproto}, {
      &scc_info_RadarHistoryTrack_ZCHXRadar_2eproto.base,}};

static void InitDefaultsscc_info_RadarSurfaceTrack_ZCHXRadar_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::zhichenhaixin::proto::_RadarSurfaceTrack_default_instance_;
    new (ptr) ::com::zhichenhaixin::proto::RadarSurfaceTrack();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::zhichenhaixin::proto::RadarSurfaceTrack::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_RadarSurfaceTrack_ZCHXRadar_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_RadarSurfaceTrack_ZCHXRadar_2eproto}, {
      &scc_info_TrackPoint_ZCHXRadar_2eproto.base,}};

static void InitDefaultsscc_info_TrackPoint_ZCHXRadar_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::zhichenhaixin::proto::_TrackPoint_default_instance_;
    new (ptr) ::com::zhichenhaixin::proto::TrackPoint();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::zhichenhaixin::proto::TrackPoint::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_TrackPoint_ZCHXRadar_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_TrackPoint_ZCHXRadar_2eproto}, {
      &scc_info_RadarHistoryTracks_ZCHXRadar_2eproto.base,}};

static void InitDefaultsscc_info_VideoFrame_ZCHXRadar_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::zhichenhaixin::proto::_VideoFrame_default_instance_;
    new (ptr) ::com::zhichenhaixin::proto::VideoFrame();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::zhichenhaixin::proto::VideoFrame::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_VideoFrame_ZCHXRadar_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_VideoFrame_ZCHXRadar_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_ZCHXRadar_2eproto[5];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_ZCHXRadar_2eproto[5];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_ZCHXRadar_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_ZCHXRadar_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::com::zhichenhaixin::proto::RadarHistoryTrack, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::com::zhichenhaixin::proto::RadarHistoryTrack, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::com::zhichenhaixin::proto::RadarHistoryTrack, tracknumber_),
  PROTOBUF_FIELD_OFFSET(::com::zhichenhaixin::proto::RadarHistoryTrack, wgs84poslat_),
  PROTOBUF_FIELD_OFFSET(::com::zhichenhaixin::proto::RadarHistoryTrack, wgs84poslong_),
  PROTOBUF_FIELD_OFFSET(::com::zhichenhaixin::proto::RadarHistoryTrack, timeofday_),
  PROTOBUF_FIELD_OFFSET(::com::zhichenhaixin::proto::RadarHistoryTrack, tracktype_),
  PROTOBUF_FIELD_OFFSET(::com::zhichenhaixin::proto::RadarHistoryTrack, extrapolation_),
  PROTOBUF_FIELD_OFFSET(::com::zhichenhaixin::proto::RadarHistoryTrack, trackpositioncode_),
  PROTOBUF_FIELD_OFFSET(::com::zhichenhaixin::proto::RadarHistoryTrack, cog_),
  PROTOBUF_FIELD_OFFSET(::com::zhichenhaixin::proto::RadarHistoryTrack, sog_),
  PROTOBUF_FIELD_OFFSET(::com::zhichenhaixin::proto::RadarHistoryTrack, utc_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::com::zhichenhaixin::proto::RadarHistoryTracks, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::com::zhichenhaixin::proto::RadarHistoryTracks, track_),
  PROTOBUF_FIELD_OFFSET(::com::zhichenhaixin::proto::TrackPoint, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::com::zhichenhaixin::proto::TrackPoint, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::com::zhichenhaixin::proto::TrackPoint, systemareacode_),
  PROTOBUF_FIELD_OFFSET(::com::zhichenhaixin::proto::TrackPoint, systemidentificationcode_),
  PROTOBUF_FIELD_OFFSET(::com::zhichenhaixin::proto::TrackPoint, messagetype_),
  PROTOBUF_FIELD_OFFSET(::com::zhichenhaixin::proto::TrackPoint, tracknumber_),
  PROTOBUF_FIELD_OFFSET(::com::zhichenhaixin::proto::TrackPoint, cartesianposx_),
  PROTOBUF_FIELD_OFFSET(::com::zhichenhaixin::proto::TrackPoint, cartesianposy_),
  PROTOBUF_FIELD_OFFSET(::com::zhichenhaixin::proto::TrackPoint, wgs84poslat_),
  PROTOBUF_FIELD_OFFSET(::com::zhichenhaixin::proto::TrackPoint, wgs84poslong_),
  PROTOBUF_FIELD_OFFSET(::com::zhichenhaixin::proto::TrackPoint, timeofday_),
  PROTOBUF_FIELD_OFFSET(::com::zhichenhaixin::proto::TrackPoint, tracktype_),
  PROTOBUF_FIELD_OFFSET(::com::zhichenhaixin::proto::TrackPoint, tracklastreport_),
  PROTOBUF_FIELD_OFFSET(::com::zhichenhaixin::proto::TrackPoint, extrapolation_),
  PROTOBUF_FIELD_OFFSET(::com::zhichenhaixin::proto::TrackPoint, trackpositioncode_),
  PROTOBUF_FIELD_OFFSET(::com::zhichenhaixin::proto::TrackPoint, sigmax_),
  PROTOBUF_FIELD_OFFSET(::com::zhichenhaixin::proto::TrackPoint, sigmay_),
  PROTOBUF_FIELD_OFFSET(::com::zhichenhaixin::proto::TrackPoint, sigmaxy_),
  PROTOBUF_FIELD_OFFSET(::com::zhichenhaixin::proto::TrackPoint, ampofpriplot_),
  PROTOBUF_FIELD_OFFSET(::com::zhichenhaixin::proto::TrackPoint, cartesiantrkvel_vx_),
  PROTOBUF_FIELD_OFFSET(::com::zhichenhaixin::proto::TrackPoint, cartesiantrkvel_vy_),
  PROTOBUF_FIELD_OFFSET(::com::zhichenhaixin::proto::TrackPoint, cog_),
  PROTOBUF_FIELD_OFFSET(::com::zhichenhaixin::proto::TrackPoint, sog_),
  PROTOBUF_FIELD_OFFSET(::com::zhichenhaixin::proto::TrackPoint, fleetnumber_),
  PROTOBUF_FIELD_OFFSET(::com::zhichenhaixin::proto::TrackPoint, status_),
  PROTOBUF_FIELD_OFFSET(::com::zhichenhaixin::proto::TrackPoint, lontype_),
  PROTOBUF_FIELD_OFFSET(::com::zhichenhaixin::proto::TrackPoint, lattype_),
  PROTOBUF_FIELD_OFFSET(::com::zhichenhaixin::proto::TrackPoint, type_),
  PROTOBUF_FIELD_OFFSET(::com::zhichenhaixin::proto::TrackPoint, aisid_),
  PROTOBUF_FIELD_OFFSET(::com::zhichenhaixin::proto::TrackPoint, tracks_),
  PROTOBUF_FIELD_OFFSET(::com::zhichenhaixin::proto::TrackPoint, diameter_),
  PROTOBUF_FIELD_OFFSET(::com::zhichenhaixin::proto::TrackPoint, trackconfirmed_),
  4,
  5,
  6,
  7,
  8,
  9,
  10,
  11,
  12,
  13,
  24,
  14,
  15,
  16,
  17,
  18,
  19,
  20,
  21,
  22,
  23,
  26,
  27,
  0,
  1,
  28,
  2,
  3,
  29,
  25,
  PROTOBUF_FIELD_OFFSET(::com::zhichenhaixin::proto::RadarSurfaceTrack, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::com::zhichenhaixin::proto::RadarSurfaceTrack, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::com::zhichenhaixin::proto::RadarSurfaceTrack, flag_),
  PROTOBUF_FIELD_OFFSET(::com::zhichenhaixin::proto::RadarSurfaceTrack, sourceid_),
  PROTOBUF_FIELD_OFFSET(::com::zhichenhaixin::proto::RadarSurfaceTrack, utc_),
  PROTOBUF_FIELD_OFFSET(::com::zhichenhaixin::proto::RadarSurfaceTrack, length_),
  PROTOBUF_FIELD_OFFSET(::com::zhichenhaixin::proto::RadarSurfaceTrack, trackpoints_),
  1,
  0,
  3,
  2,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::com::zhichenhaixin::proto::VideoFrame, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::com::zhichenhaixin::proto::VideoFrame, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::com::zhichenhaixin::proto::VideoFrame, systemareacode_),
  PROTOBUF_FIELD_OFFSET(::com::zhichenhaixin::proto::VideoFrame, systemidentificationcode_),
  PROTOBUF_FIELD_OFFSET(::com::zhichenhaixin::proto::VideoFrame, msgindex_),
  PROTOBUF_FIELD_OFFSET(::com::zhichenhaixin::proto::VideoFrame, azimuth_),
  PROTOBUF_FIELD_OFFSET(::com::zhichenhaixin::proto::VideoFrame, heading_),
  PROTOBUF_FIELD_OFFSET(::com::zhichenhaixin::proto::VideoFrame, startrange_),
  PROTOBUF_FIELD_OFFSET(::com::zhichenhaixin::proto::VideoFrame, rangefactor_),
  PROTOBUF_FIELD_OFFSET(::com::zhichenhaixin::proto::VideoFrame, bitresolution_),
  PROTOBUF_FIELD_OFFSET(::com::zhichenhaixin::proto::VideoFrame, timeofday_),
  PROTOBUF_FIELD_OFFSET(::com::zhichenhaixin::proto::VideoFrame, amplitude_),
  0,
  1,
  2,
  3,
  6,
  4,
  5,
  8,
  7,
  ~0u,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 15, sizeof(::com::zhichenhaixin::proto::RadarHistoryTrack)},
  { 25, -1, sizeof(::com::zhichenhaixin::proto::RadarHistoryTracks)},
  { 31, 66, sizeof(::com::zhichenhaixin::proto::TrackPoint)},
  { 96, 106, sizeof(::com::zhichenhaixin::proto::RadarSurfaceTrack)},
  { 111, 126, sizeof(::com::zhichenhaixin::proto::VideoFrame)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::com::zhichenhaixin::proto::_RadarHistoryTrack_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::com::zhichenhaixin::proto::_RadarHistoryTracks_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::com::zhichenhaixin::proto::_TrackPoint_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::com::zhichenhaixin::proto::_RadarSurfaceTrack_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::com::zhichenhaixin::proto::_VideoFrame_default_instance_),
};

const char descriptor_table_protodef_ZCHXRadar_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\017ZCHXRadar.proto\022\027com.zhichenhaixin.pro"
  "to\"\254\002\n\021RadarHistoryTrack\022\023\n\013trackNumber\030"
  "\001 \002(\003\022\023\n\013wgs84PosLat\030\002 \002(\001\022\024\n\014wgs84PosLo"
  "ng\030\003 \002(\001\022\021\n\ttimeOfDay\030\004 \002(\002\022/\n\ttrackType"
  "\030\005 \001(\0162\034.com.zhichenhaixin.proto.CNF\0223\n\r"
  "extrapolation\030\007 \001(\0162\034.com.zhichenhaixin."
  "proto.CST\0227\n\021trackPositionCode\030\010 \001(\0162\034.c"
  "om.zhichenhaixin.proto.STH\022\013\n\003cog\030\t \002(\001\022"
  "\013\n\003sog\030\n \002(\001\022\013\n\003UTC\030\013 \002(\004\"O\n\022RadarHistor"
  "yTracks\0229\n\005track\030\001 \003(\0132*.com.zhichenhaix"
  "in.proto.RadarHistoryTrack\"\231\006\n\nTrackPoin"
  "t\022\026\n\016systemAreaCode\030\001 \002(\005\022 \n\030systemIdent"
  "ificationCode\030\002 \002(\005\0224\n\013messageType\030\003 \002(\016"
  "2\037.com.zhichenhaixin.proto.MSGTYP\022\023\n\013tra"
  "ckNumber\030\004 \002(\r\022\025\n\rcartesianPosX\030\005 \002(\002\022\025\n"
  "\rcartesianPosY\030\006 \002(\002\022\023\n\013wgs84PosLat\030\007 \002("
  "\001\022\024\n\014wgs84PosLong\030\010 \002(\001\022\021\n\ttimeOfDay\030\t \002"
  "(\002\022/\n\ttrackType\030\n \001(\0162\034.com.zhichenhaixi"
  "n.proto.CNF\022\027\n\017trackLastReport\030\013 \001(\010\0223\n\r"
  "extrapolation\030\014 \001(\0162\034.com.zhichenhaixin."
  "proto.CST\0227\n\021trackPositionCode\030\r \001(\0162\034.c"
  "om.zhichenhaixin.proto.STH\022\016\n\006sigmaX\030\016 \001"
  "(\002\022\016\n\006sigmaY\030\017 \001(\002\022\017\n\007sigmaXY\030\020 \001(\002\022\024\n\014a"
  "mpOfPriPlot\030\021 \001(\002\022\032\n\022cartesianTrkVel_vx\030"
  "\022 \002(\001\022\032\n\022cartesianTrkVel_vy\030\023 \002(\001\022\013\n\003cog"
  "\030\024 \002(\001\022\013\n\003sog\030\025 \002(\001\022\023\n\013fleetNumber\030\026 \001(\005"
  "\022\016\n\006status\030\027 \001(\005\022\017\n\007lonType\030\030 \001(\t\022\017\n\007lat"
  "Type\030\031 \001(\t\022\014\n\004type\030\032 \001(\005\022\r\n\005aisid\030\033 \001(\t\022"
  ";\n\006tracks\030\034 \001(\0132+.com.zhichenhaixin.prot"
  "o.RadarHistoryTracks\022\020\n\010diameter\030\035 \001(\005\022\026"
  "\n\016trackConfirmed\030\036 \001(\010\"\212\001\n\021RadarSurfaceT"
  "rack\022\014\n\004flag\030\001 \002(\005\022\020\n\010sourceId\030\002 \002(\t\022\013\n\003"
  "UTC\030\003 \002(\004\022\016\n\006length\030\004 \002(\005\0228\n\013trackPoints"
  "\030\005 \003(\0132#.com.zhichenhaixin.proto.TrackPo"
  "int\"\376\001\n\nVideoFrame\022\026\n\016systemAreaCode\030\001 \002"
  "(\005\022 \n\030systemIdentificationCode\030\002 \002(\005\022\020\n\010"
  "msgIndex\030\003 \002(\005\022\017\n\007azimuth\030\004 \002(\r\022\017\n\007headi"
  "ng\030\005 \001(\r\022\022\n\nstartRange\030\006 \002(\001\022\023\n\013rangeFac"
  "tor\030\007 \002(\001\0223\n\rbitResolution\030\010 \002(\0162\034.com.z"
  "hichenhaixin.proto.RES\022\021\n\ttimeOfDay\030\t \002("
  "\005\022\021\n\tamplitude\030\n \003(\005*}\n\006MSGTYP\022\024\n\020MSGTYP"
  "_UNDEFINED\020\000\022\021\n\rTARGET_REPORT\020\001\022\031\n\025START"
  "_OF_UPDATE_CYCLE\020\002\022\023\n\017PERIODIC_STATUS\020\003\022"
  "\032\n\026EVENT_TRIGGERED_STATUS\020\004*B\n\003CNF\022\023\n\017CO"
  "NFIRMED_TRACK\020\000\022\023\n\017TENTATIVE_TRACK\020\001\022\021\n\r"
  "UNKNOWN_TRACK\020\002*\230\001\n\003CST\022\021\n\rCST_UNDEFINED"
  "\020\000\022(\n$PREDICTABLE_EXTRAPOLATION_DUE_PERI"
  "OD\020\001\022%\n!PREDICTABLE_EXTRAPOLATION_IN_ARE"
  "A\020\002\022-\n)EXTRAPOLATION_DUE_UNPREDICTABLE_D"
  "ETECTION\020\003*3\n\003STH\022\025\n\021MEASURED_POSITION\020\000"
  "\022\025\n\021SMOOTHED_POSITION\020\001*\222\001\n\003RES\022\026\n\022MONOB"
  "IT_RESOLUTION\020\001\022\022\n\016LOW_RESOLUTION\020\002\022\025\n\021M"
  "EDIUM_RESOLUTION\020\003\022\023\n\017HIGH_RESOLUTION\020\004\022"
  "\030\n\024VERY_HIGH_RESOLUTION\020\005\022\031\n\025ULTRA_HIGH_"
  "RESOLUTION\020\006"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_ZCHXRadar_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_ZCHXRadar_2eproto_sccs[5] = {
  &scc_info_RadarHistoryTrack_ZCHXRadar_2eproto.base,
  &scc_info_RadarHistoryTracks_ZCHXRadar_2eproto.base,
  &scc_info_RadarSurfaceTrack_ZCHXRadar_2eproto.base,
  &scc_info_TrackPoint_ZCHXRadar_2eproto.base,
  &scc_info_VideoFrame_ZCHXRadar_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_ZCHXRadar_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_ZCHXRadar_2eproto = {
  false, false, descriptor_table_protodef_ZCHXRadar_2eproto, "ZCHXRadar.proto", 2172,
  &descriptor_table_ZCHXRadar_2eproto_once, descriptor_table_ZCHXRadar_2eproto_sccs, descriptor_table_ZCHXRadar_2eproto_deps, 5, 0,
  schemas, file_default_instances, TableStruct_ZCHXRadar_2eproto::offsets,
  file_level_metadata_ZCHXRadar_2eproto, 5, file_level_enum_descriptors_ZCHXRadar_2eproto, file_level_service_descriptors_ZCHXRadar_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_ZCHXRadar_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_ZCHXRadar_2eproto)), true);
namespace com {
namespace zhichenhaixin {
namespace proto {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* MSGTYP_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_ZCHXRadar_2eproto);
  return file_level_enum_descriptors_ZCHXRadar_2eproto[0];
}
bool MSGTYP_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CNF_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_ZCHXRadar_2eproto);
  return file_level_enum_descriptors_ZCHXRadar_2eproto[1];
}
bool CNF_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CST_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_ZCHXRadar_2eproto);
  return file_level_enum_descriptors_ZCHXRadar_2eproto[2];
}
bool CST_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* STH_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_ZCHXRadar_2eproto);
  return file_level_enum_descriptors_ZCHXRadar_2eproto[3];
}
bool STH_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* RES_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_ZCHXRadar_2eproto);
  return file_level_enum_descriptors_ZCHXRadar_2eproto[4];
}
bool RES_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}


// ===================================================================

void RadarHistoryTrack::InitAsDefaultInstance() {
}
class RadarHistoryTrack::_Internal {
 public:
  using HasBits = decltype(std::declval<RadarHistoryTrack>()._has_bits_);
  static void set_has_tracknumber(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_wgs84poslat(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_wgs84poslong(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_timeofday(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_tracktype(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_extrapolation(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_trackpositioncode(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_cog(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_sog(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_utc(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x0000038f) ^ 0x0000038f) != 0;
  }
};

RadarHistoryTrack::RadarHistoryTrack(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.zhichenhaixin.proto.RadarHistoryTrack)
}
RadarHistoryTrack::RadarHistoryTrack(const RadarHistoryTrack& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&tracknumber_, &from.tracknumber_,
    static_cast<size_t>(reinterpret_cast<char*>(&utc_) -
    reinterpret_cast<char*>(&tracknumber_)) + sizeof(utc_));
  // @@protoc_insertion_point(copy_constructor:com.zhichenhaixin.proto.RadarHistoryTrack)
}

void RadarHistoryTrack::SharedCtor() {
  ::memset(&tracknumber_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&utc_) -
      reinterpret_cast<char*>(&tracknumber_)) + sizeof(utc_));
}

RadarHistoryTrack::~RadarHistoryTrack() {
  // @@protoc_insertion_point(destructor:com.zhichenhaixin.proto.RadarHistoryTrack)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void RadarHistoryTrack::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void RadarHistoryTrack::ArenaDtor(void* object) {
  RadarHistoryTrack* _this = reinterpret_cast< RadarHistoryTrack* >(object);
  (void)_this;
}
void RadarHistoryTrack::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RadarHistoryTrack::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RadarHistoryTrack& RadarHistoryTrack::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RadarHistoryTrack_ZCHXRadar_2eproto.base);
  return *internal_default_instance();
}


void RadarHistoryTrack::Clear() {
// @@protoc_insertion_point(message_clear_start:com.zhichenhaixin.proto.RadarHistoryTrack)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&tracknumber_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&cog_) -
        reinterpret_cast<char*>(&tracknumber_)) + sizeof(cog_));
  }
  if (cached_has_bits & 0x00000300u) {
    ::memset(&sog_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&utc_) -
        reinterpret_cast<char*>(&sog_)) + sizeof(utc_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RadarHistoryTrack::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required int64 trackNumber = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_tracknumber(&has_bits);
          tracknumber_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required double wgs84PosLat = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          _Internal::set_has_wgs84poslat(&has_bits);
          wgs84poslat_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // required double wgs84PosLong = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          _Internal::set_has_wgs84poslong(&has_bits);
          wgs84poslong_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // required float timeOfDay = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          _Internal::set_has_timeofday(&has_bits);
          timeofday_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional .com.zhichenhaixin.proto.CNF trackType = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::com::zhichenhaixin::proto::CNF_IsValid(val))) {
            _internal_set_tracktype(static_cast<::com::zhichenhaixin::proto::CNF>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(5, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional .com.zhichenhaixin.proto.CST extrapolation = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::com::zhichenhaixin::proto::CST_IsValid(val))) {
            _internal_set_extrapolation(static_cast<::com::zhichenhaixin::proto::CST>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(7, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional .com.zhichenhaixin.proto.STH trackPositionCode = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::com::zhichenhaixin::proto::STH_IsValid(val))) {
            _internal_set_trackpositioncode(static_cast<::com::zhichenhaixin::proto::STH>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(8, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // required double cog = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 73)) {
          _Internal::set_has_cog(&has_bits);
          cog_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // required double sog = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 81)) {
          _Internal::set_has_sog(&has_bits);
          sog_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // required uint64 UTC = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          _Internal::set_has_utc(&has_bits);
          utc_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RadarHistoryTrack::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.zhichenhaixin.proto.RadarHistoryTrack)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int64 trackNumber = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_tracknumber(), target);
  }

  // required double wgs84PosLat = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_wgs84poslat(), target);
  }

  // required double wgs84PosLong = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_wgs84poslong(), target);
  }

  // required float timeOfDay = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4, this->_internal_timeofday(), target);
  }

  // optional .com.zhichenhaixin.proto.CNF trackType = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      5, this->_internal_tracktype(), target);
  }

  // optional .com.zhichenhaixin.proto.CST extrapolation = 7;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      7, this->_internal_extrapolation(), target);
  }

  // optional .com.zhichenhaixin.proto.STH trackPositionCode = 8;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      8, this->_internal_trackpositioncode(), target);
  }

  // required double cog = 9;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(9, this->_internal_cog(), target);
  }

  // required double sog = 10;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(10, this->_internal_sog(), target);
  }

  // required uint64 UTC = 11;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(11, this->_internal_utc(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.zhichenhaixin.proto.RadarHistoryTrack)
  return target;
}

size_t RadarHistoryTrack::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:com.zhichenhaixin.proto.RadarHistoryTrack)
  size_t total_size = 0;

  if (_internal_has_tracknumber()) {
    // required int64 trackNumber = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_tracknumber());
  }

  if (_internal_has_wgs84poslat()) {
    // required double wgs84PosLat = 2;
    total_size += 1 + 8;
  }

  if (_internal_has_wgs84poslong()) {
    // required double wgs84PosLong = 3;
    total_size += 1 + 8;
  }

  if (_internal_has_timeofday()) {
    // required float timeOfDay = 4;
    total_size += 1 + 4;
  }

  if (_internal_has_cog()) {
    // required double cog = 9;
    total_size += 1 + 8;
  }

  if (_internal_has_sog()) {
    // required double sog = 10;
    total_size += 1 + 8;
  }

  if (_internal_has_utc()) {
    // required uint64 UTC = 11;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_utc());
  }

  return total_size;
}
size_t RadarHistoryTrack::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.zhichenhaixin.proto.RadarHistoryTrack)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x0000038f) ^ 0x0000038f) == 0) {  // All required fields are present.
    // required int64 trackNumber = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64Size(
        this->_internal_tracknumber());

    // required double wgs84PosLat = 2;
    total_size += 1 + 8;

    // required double wgs84PosLong = 3;
    total_size += 1 + 8;

    // required float timeOfDay = 4;
    total_size += 1 + 4;

    // required double cog = 9;
    total_size += 1 + 8;

    // required double sog = 10;
    total_size += 1 + 8;

    // required uint64 UTC = 11;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_utc());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000070u) {
    // optional .com.zhichenhaixin.proto.CNF trackType = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_tracktype());
    }

    // optional .com.zhichenhaixin.proto.CST extrapolation = 7;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_extrapolation());
    }

    // optional .com.zhichenhaixin.proto.STH trackPositionCode = 8;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_trackpositioncode());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RadarHistoryTrack::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.zhichenhaixin.proto.RadarHistoryTrack)
  GOOGLE_DCHECK_NE(&from, this);
  const RadarHistoryTrack* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RadarHistoryTrack>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.zhichenhaixin.proto.RadarHistoryTrack)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.zhichenhaixin.proto.RadarHistoryTrack)
    MergeFrom(*source);
  }
}

void RadarHistoryTrack::MergeFrom(const RadarHistoryTrack& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.zhichenhaixin.proto.RadarHistoryTrack)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      tracknumber_ = from.tracknumber_;
    }
    if (cached_has_bits & 0x00000002u) {
      wgs84poslat_ = from.wgs84poslat_;
    }
    if (cached_has_bits & 0x00000004u) {
      wgs84poslong_ = from.wgs84poslong_;
    }
    if (cached_has_bits & 0x00000008u) {
      timeofday_ = from.timeofday_;
    }
    if (cached_has_bits & 0x00000010u) {
      tracktype_ = from.tracktype_;
    }
    if (cached_has_bits & 0x00000020u) {
      extrapolation_ = from.extrapolation_;
    }
    if (cached_has_bits & 0x00000040u) {
      trackpositioncode_ = from.trackpositioncode_;
    }
    if (cached_has_bits & 0x00000080u) {
      cog_ = from.cog_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000300u) {
    if (cached_has_bits & 0x00000100u) {
      sog_ = from.sog_;
    }
    if (cached_has_bits & 0x00000200u) {
      utc_ = from.utc_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void RadarHistoryTrack::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.zhichenhaixin.proto.RadarHistoryTrack)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RadarHistoryTrack::CopyFrom(const RadarHistoryTrack& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.zhichenhaixin.proto.RadarHistoryTrack)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RadarHistoryTrack::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void RadarHistoryTrack::InternalSwap(RadarHistoryTrack* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RadarHistoryTrack, utc_)
      + sizeof(RadarHistoryTrack::utc_)
      - PROTOBUF_FIELD_OFFSET(RadarHistoryTrack, tracknumber_)>(
          reinterpret_cast<char*>(&tracknumber_),
          reinterpret_cast<char*>(&other->tracknumber_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RadarHistoryTrack::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RadarHistoryTracks::InitAsDefaultInstance() {
}
class RadarHistoryTracks::_Internal {
 public:
};

RadarHistoryTracks::RadarHistoryTracks(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  track_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.zhichenhaixin.proto.RadarHistoryTracks)
}
RadarHistoryTracks::RadarHistoryTracks(const RadarHistoryTracks& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      track_(from.track_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:com.zhichenhaixin.proto.RadarHistoryTracks)
}

void RadarHistoryTracks::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_RadarHistoryTracks_ZCHXRadar_2eproto.base);
}

RadarHistoryTracks::~RadarHistoryTracks() {
  // @@protoc_insertion_point(destructor:com.zhichenhaixin.proto.RadarHistoryTracks)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void RadarHistoryTracks::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void RadarHistoryTracks::ArenaDtor(void* object) {
  RadarHistoryTracks* _this = reinterpret_cast< RadarHistoryTracks* >(object);
  (void)_this;
}
void RadarHistoryTracks::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RadarHistoryTracks::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RadarHistoryTracks& RadarHistoryTracks::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RadarHistoryTracks_ZCHXRadar_2eproto.base);
  return *internal_default_instance();
}


void RadarHistoryTracks::Clear() {
// @@protoc_insertion_point(message_clear_start:com.zhichenhaixin.proto.RadarHistoryTracks)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  track_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RadarHistoryTracks::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .com.zhichenhaixin.proto.RadarHistoryTrack track = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_track(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RadarHistoryTracks::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.zhichenhaixin.proto.RadarHistoryTracks)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .com.zhichenhaixin.proto.RadarHistoryTrack track = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_track_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_track(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.zhichenhaixin.proto.RadarHistoryTracks)
  return target;
}

size_t RadarHistoryTracks::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.zhichenhaixin.proto.RadarHistoryTracks)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .com.zhichenhaixin.proto.RadarHistoryTrack track = 1;
  total_size += 1UL * this->_internal_track_size();
  for (const auto& msg : this->track_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RadarHistoryTracks::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.zhichenhaixin.proto.RadarHistoryTracks)
  GOOGLE_DCHECK_NE(&from, this);
  const RadarHistoryTracks* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RadarHistoryTracks>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.zhichenhaixin.proto.RadarHistoryTracks)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.zhichenhaixin.proto.RadarHistoryTracks)
    MergeFrom(*source);
  }
}

void RadarHistoryTracks::MergeFrom(const RadarHistoryTracks& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.zhichenhaixin.proto.RadarHistoryTracks)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  track_.MergeFrom(from.track_);
}

void RadarHistoryTracks::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.zhichenhaixin.proto.RadarHistoryTracks)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RadarHistoryTracks::CopyFrom(const RadarHistoryTracks& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.zhichenhaixin.proto.RadarHistoryTracks)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RadarHistoryTracks::IsInitialized() const {
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(track_)) return false;
  return true;
}

void RadarHistoryTracks::InternalSwap(RadarHistoryTracks* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  track_.InternalSwap(&other->track_);
}

::PROTOBUF_NAMESPACE_ID::Metadata RadarHistoryTracks::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TrackPoint::InitAsDefaultInstance() {
  ::com::zhichenhaixin::proto::_TrackPoint_default_instance_._instance.get_mutable()->tracks_ = const_cast< ::com::zhichenhaixin::proto::RadarHistoryTracks*>(
      ::com::zhichenhaixin::proto::RadarHistoryTracks::internal_default_instance());
}
class TrackPoint::_Internal {
 public:
  using HasBits = decltype(std::declval<TrackPoint>()._has_bits_);
  static void set_has_systemareacode(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_systemidentificationcode(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_messagetype(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_tracknumber(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_cartesianposx(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_cartesianposy(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_wgs84poslat(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_wgs84poslong(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_timeofday(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_tracktype(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_tracklastreport(HasBits* has_bits) {
    (*has_bits)[0] |= 16777216u;
  }
  static void set_has_extrapolation(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static void set_has_trackpositioncode(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static void set_has_sigmax(HasBits* has_bits) {
    (*has_bits)[0] |= 65536u;
  }
  static void set_has_sigmay(HasBits* has_bits) {
    (*has_bits)[0] |= 131072u;
  }
  static void set_has_sigmaxy(HasBits* has_bits) {
    (*has_bits)[0] |= 262144u;
  }
  static void set_has_ampofpriplot(HasBits* has_bits) {
    (*has_bits)[0] |= 524288u;
  }
  static void set_has_cartesiantrkvel_vx(HasBits* has_bits) {
    (*has_bits)[0] |= 1048576u;
  }
  static void set_has_cartesiantrkvel_vy(HasBits* has_bits) {
    (*has_bits)[0] |= 2097152u;
  }
  static void set_has_cog(HasBits* has_bits) {
    (*has_bits)[0] |= 4194304u;
  }
  static void set_has_sog(HasBits* has_bits) {
    (*has_bits)[0] |= 8388608u;
  }
  static void set_has_fleetnumber(HasBits* has_bits) {
    (*has_bits)[0] |= 67108864u;
  }
  static void set_has_status(HasBits* has_bits) {
    (*has_bits)[0] |= 134217728u;
  }
  static void set_has_lontype(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_lattype(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_type(HasBits* has_bits) {
    (*has_bits)[0] |= 268435456u;
  }
  static void set_has_aisid(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::com::zhichenhaixin::proto::RadarHistoryTracks& tracks(const TrackPoint* msg);
  static void set_has_tracks(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_diameter(HasBits* has_bits) {
    (*has_bits)[0] |= 536870912u;
  }
  static void set_has_trackconfirmed(HasBits* has_bits) {
    (*has_bits)[0] |= 33554432u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00f01ff0) ^ 0x00f01ff0) != 0;
  }
};

const ::com::zhichenhaixin::proto::RadarHistoryTracks&
TrackPoint::_Internal::tracks(const TrackPoint* msg) {
  return *msg->tracks_;
}
TrackPoint::TrackPoint(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.zhichenhaixin.proto.TrackPoint)
}
TrackPoint::TrackPoint(const TrackPoint& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  lontype_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_lontype()) {
    lontype_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_lontype(),
      GetArena());
  }
  lattype_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_lattype()) {
    lattype_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_lattype(),
      GetArena());
  }
  aisid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_aisid()) {
    aisid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_aisid(),
      GetArena());
  }
  if (from._internal_has_tracks()) {
    tracks_ = new ::com::zhichenhaixin::proto::RadarHistoryTracks(*from.tracks_);
  } else {
    tracks_ = nullptr;
  }
  ::memcpy(&systemareacode_, &from.systemareacode_,
    static_cast<size_t>(reinterpret_cast<char*>(&diameter_) -
    reinterpret_cast<char*>(&systemareacode_)) + sizeof(diameter_));
  // @@protoc_insertion_point(copy_constructor:com.zhichenhaixin.proto.TrackPoint)
}

void TrackPoint::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TrackPoint_ZCHXRadar_2eproto.base);
  lontype_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  lattype_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  aisid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&tracks_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&diameter_) -
      reinterpret_cast<char*>(&tracks_)) + sizeof(diameter_));
}

TrackPoint::~TrackPoint() {
  // @@protoc_insertion_point(destructor:com.zhichenhaixin.proto.TrackPoint)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void TrackPoint::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  lontype_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  lattype_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  aisid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete tracks_;
}

void TrackPoint::ArenaDtor(void* object) {
  TrackPoint* _this = reinterpret_cast< TrackPoint* >(object);
  (void)_this;
}
void TrackPoint::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TrackPoint::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TrackPoint& TrackPoint::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TrackPoint_ZCHXRadar_2eproto.base);
  return *internal_default_instance();
}


void TrackPoint::Clear() {
// @@protoc_insertion_point(message_clear_start:com.zhichenhaixin.proto.TrackPoint)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      lontype_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      lattype_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      aisid_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(tracks_ != nullptr);
      tracks_->Clear();
    }
  }
  if (cached_has_bits & 0x000000f0u) {
    ::memset(&systemareacode_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&tracknumber_) -
        reinterpret_cast<char*>(&systemareacode_)) + sizeof(tracknumber_));
  }
  if (cached_has_bits & 0x0000ff00u) {
    ::memset(&cartesianposx_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&trackpositioncode_) -
        reinterpret_cast<char*>(&cartesianposx_)) + sizeof(trackpositioncode_));
  }
  if (cached_has_bits & 0x00ff0000u) {
    ::memset(&sigmax_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&sog_) -
        reinterpret_cast<char*>(&sigmax_)) + sizeof(sog_));
  }
  if (cached_has_bits & 0x3f000000u) {
    ::memset(&tracklastreport_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&diameter_) -
        reinterpret_cast<char*>(&tracklastreport_)) + sizeof(diameter_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TrackPoint::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required int32 systemAreaCode = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_systemareacode(&has_bits);
          systemareacode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int32 systemIdentificationCode = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_systemidentificationcode(&has_bits);
          systemidentificationcode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required .com.zhichenhaixin.proto.MSGTYP messageType = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::com::zhichenhaixin::proto::MSGTYP_IsValid(val))) {
            _internal_set_messagetype(static_cast<::com::zhichenhaixin::proto::MSGTYP>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(3, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // required uint32 trackNumber = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_tracknumber(&has_bits);
          tracknumber_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required float cartesianPosX = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 45)) {
          _Internal::set_has_cartesianposx(&has_bits);
          cartesianposx_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // required float cartesianPosY = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 53)) {
          _Internal::set_has_cartesianposy(&has_bits);
          cartesianposy_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // required double wgs84PosLat = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 57)) {
          _Internal::set_has_wgs84poslat(&has_bits);
          wgs84poslat_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // required double wgs84PosLong = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 65)) {
          _Internal::set_has_wgs84poslong(&has_bits);
          wgs84poslong_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // required float timeOfDay = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 77)) {
          _Internal::set_has_timeofday(&has_bits);
          timeofday_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional .com.zhichenhaixin.proto.CNF trackType = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::com::zhichenhaixin::proto::CNF_IsValid(val))) {
            _internal_set_tracktype(static_cast<::com::zhichenhaixin::proto::CNF>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(10, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional bool trackLastReport = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          _Internal::set_has_tracklastreport(&has_bits);
          tracklastreport_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .com.zhichenhaixin.proto.CST extrapolation = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::com::zhichenhaixin::proto::CST_IsValid(val))) {
            _internal_set_extrapolation(static_cast<::com::zhichenhaixin::proto::CST>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(12, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional .com.zhichenhaixin.proto.STH trackPositionCode = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::com::zhichenhaixin::proto::STH_IsValid(val))) {
            _internal_set_trackpositioncode(static_cast<::com::zhichenhaixin::proto::STH>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(13, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // optional float sigmaX = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 117)) {
          _Internal::set_has_sigmax(&has_bits);
          sigmax_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float sigmaY = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 125)) {
          _Internal::set_has_sigmay(&has_bits);
          sigmay_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float sigmaXY = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 133)) {
          _Internal::set_has_sigmaxy(&has_bits);
          sigmaxy_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float ampOfPriPlot = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 141)) {
          _Internal::set_has_ampofpriplot(&has_bits);
          ampofpriplot_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // required double cartesianTrkVel_vx = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 145)) {
          _Internal::set_has_cartesiantrkvel_vx(&has_bits);
          cartesiantrkvel_vx_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // required double cartesianTrkVel_vy = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 153)) {
          _Internal::set_has_cartesiantrkvel_vy(&has_bits);
          cartesiantrkvel_vy_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // required double cog = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 161)) {
          _Internal::set_has_cog(&has_bits);
          cog_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // required double sog = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 169)) {
          _Internal::set_has_sog(&has_bits);
          sog_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional int32 fleetNumber = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 176)) {
          _Internal::set_has_fleetnumber(&has_bits);
          fleetnumber_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 status = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 184)) {
          _Internal::set_has_status(&has_bits);
          status_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string lonType = 24;
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 194)) {
          auto str = _internal_mutable_lontype();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "com.zhichenhaixin.proto.TrackPoint.lonType");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string latType = 25;
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 202)) {
          auto str = _internal_mutable_lattype();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "com.zhichenhaixin.proto.TrackPoint.latType");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 type = 26;
      case 26:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 208)) {
          _Internal::set_has_type(&has_bits);
          type_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string aisid = 27;
      case 27:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 218)) {
          auto str = _internal_mutable_aisid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "com.zhichenhaixin.proto.TrackPoint.aisid");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional .com.zhichenhaixin.proto.RadarHistoryTracks tracks = 28;
      case 28:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 226)) {
          ptr = ctx->ParseMessage(_internal_mutable_tracks(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 diameter = 29;
      case 29:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 232)) {
          _Internal::set_has_diameter(&has_bits);
          diameter_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional bool trackConfirmed = 30;
      case 30:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 240)) {
          _Internal::set_has_trackconfirmed(&has_bits);
          trackconfirmed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TrackPoint::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.zhichenhaixin.proto.TrackPoint)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 systemAreaCode = 1;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_systemareacode(), target);
  }

  // required int32 systemIdentificationCode = 2;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_systemidentificationcode(), target);
  }

  // required .com.zhichenhaixin.proto.MSGTYP messageType = 3;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      3, this->_internal_messagetype(), target);
  }

  // required uint32 trackNumber = 4;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_tracknumber(), target);
  }

  // required float cartesianPosX = 5;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(5, this->_internal_cartesianposx(), target);
  }

  // required float cartesianPosY = 6;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(6, this->_internal_cartesianposy(), target);
  }

  // required double wgs84PosLat = 7;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(7, this->_internal_wgs84poslat(), target);
  }

  // required double wgs84PosLong = 8;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(8, this->_internal_wgs84poslong(), target);
  }

  // required float timeOfDay = 9;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(9, this->_internal_timeofday(), target);
  }

  // optional .com.zhichenhaixin.proto.CNF trackType = 10;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      10, this->_internal_tracktype(), target);
  }

  // optional bool trackLastReport = 11;
  if (cached_has_bits & 0x01000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(11, this->_internal_tracklastreport(), target);
  }

  // optional .com.zhichenhaixin.proto.CST extrapolation = 12;
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      12, this->_internal_extrapolation(), target);
  }

  // optional .com.zhichenhaixin.proto.STH trackPositionCode = 13;
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      13, this->_internal_trackpositioncode(), target);
  }

  // optional float sigmaX = 14;
  if (cached_has_bits & 0x00010000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(14, this->_internal_sigmax(), target);
  }

  // optional float sigmaY = 15;
  if (cached_has_bits & 0x00020000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(15, this->_internal_sigmay(), target);
  }

  // optional float sigmaXY = 16;
  if (cached_has_bits & 0x00040000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(16, this->_internal_sigmaxy(), target);
  }

  // optional float ampOfPriPlot = 17;
  if (cached_has_bits & 0x00080000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(17, this->_internal_ampofpriplot(), target);
  }

  // required double cartesianTrkVel_vx = 18;
  if (cached_has_bits & 0x00100000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(18, this->_internal_cartesiantrkvel_vx(), target);
  }

  // required double cartesianTrkVel_vy = 19;
  if (cached_has_bits & 0x00200000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(19, this->_internal_cartesiantrkvel_vy(), target);
  }

  // required double cog = 20;
  if (cached_has_bits & 0x00400000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(20, this->_internal_cog(), target);
  }

  // required double sog = 21;
  if (cached_has_bits & 0x00800000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(21, this->_internal_sog(), target);
  }

  // optional int32 fleetNumber = 22;
  if (cached_has_bits & 0x04000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(22, this->_internal_fleetnumber(), target);
  }

  // optional int32 status = 23;
  if (cached_has_bits & 0x08000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(23, this->_internal_status(), target);
  }

  // optional string lonType = 24;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_lontype().data(), static_cast<int>(this->_internal_lontype().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "com.zhichenhaixin.proto.TrackPoint.lonType");
    target = stream->WriteStringMaybeAliased(
        24, this->_internal_lontype(), target);
  }

  // optional string latType = 25;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_lattype().data(), static_cast<int>(this->_internal_lattype().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "com.zhichenhaixin.proto.TrackPoint.latType");
    target = stream->WriteStringMaybeAliased(
        25, this->_internal_lattype(), target);
  }

  // optional int32 type = 26;
  if (cached_has_bits & 0x10000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(26, this->_internal_type(), target);
  }

  // optional string aisid = 27;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_aisid().data(), static_cast<int>(this->_internal_aisid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "com.zhichenhaixin.proto.TrackPoint.aisid");
    target = stream->WriteStringMaybeAliased(
        27, this->_internal_aisid(), target);
  }

  // optional .com.zhichenhaixin.proto.RadarHistoryTracks tracks = 28;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        28, _Internal::tracks(this), target, stream);
  }

  // optional int32 diameter = 29;
  if (cached_has_bits & 0x20000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(29, this->_internal_diameter(), target);
  }

  // optional bool trackConfirmed = 30;
  if (cached_has_bits & 0x02000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(30, this->_internal_trackconfirmed(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.zhichenhaixin.proto.TrackPoint)
  return target;
}

size_t TrackPoint::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:com.zhichenhaixin.proto.TrackPoint)
  size_t total_size = 0;

  if (_internal_has_systemareacode()) {
    // required int32 systemAreaCode = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_systemareacode());
  }

  if (_internal_has_systemidentificationcode()) {
    // required int32 systemIdentificationCode = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_systemidentificationcode());
  }

  if (_internal_has_messagetype()) {
    // required .com.zhichenhaixin.proto.MSGTYP messageType = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_messagetype());
  }

  if (_internal_has_tracknumber()) {
    // required uint32 trackNumber = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_tracknumber());
  }

  if (_internal_has_cartesianposx()) {
    // required float cartesianPosX = 5;
    total_size += 1 + 4;
  }

  if (_internal_has_cartesianposy()) {
    // required float cartesianPosY = 6;
    total_size += 1 + 4;
  }

  if (_internal_has_wgs84poslat()) {
    // required double wgs84PosLat = 7;
    total_size += 1 + 8;
  }

  if (_internal_has_wgs84poslong()) {
    // required double wgs84PosLong = 8;
    total_size += 1 + 8;
  }

  if (_internal_has_timeofday()) {
    // required float timeOfDay = 9;
    total_size += 1 + 4;
  }

  if (_internal_has_cartesiantrkvel_vx()) {
    // required double cartesianTrkVel_vx = 18;
    total_size += 2 + 8;
  }

  if (_internal_has_cartesiantrkvel_vy()) {
    // required double cartesianTrkVel_vy = 19;
    total_size += 2 + 8;
  }

  if (_internal_has_cog()) {
    // required double cog = 20;
    total_size += 2 + 8;
  }

  if (_internal_has_sog()) {
    // required double sog = 21;
    total_size += 2 + 8;
  }

  return total_size;
}
size_t TrackPoint::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.zhichenhaixin.proto.TrackPoint)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00f01ff0) ^ 0x00f01ff0) == 0) {  // All required fields are present.
    // required int32 systemAreaCode = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_systemareacode());

    // required int32 systemIdentificationCode = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_systemidentificationcode());

    // required .com.zhichenhaixin.proto.MSGTYP messageType = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_messagetype());

    // required uint32 trackNumber = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_tracknumber());

    // required float cartesianPosX = 5;
    total_size += 1 + 4;

    // required float cartesianPosY = 6;
    total_size += 1 + 4;

    // required double wgs84PosLat = 7;
    total_size += 1 + 8;

    // required double wgs84PosLong = 8;
    total_size += 1 + 8;

    // required float timeOfDay = 9;
    total_size += 1 + 4;

    // required double cartesianTrkVel_vx = 18;
    total_size += 2 + 8;

    // required double cartesianTrkVel_vy = 19;
    total_size += 2 + 8;

    // required double cog = 20;
    total_size += 2 + 8;

    // required double sog = 21;
    total_size += 2 + 8;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional string lonType = 24;
    if (cached_has_bits & 0x00000001u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_lontype());
    }

    // optional string latType = 25;
    if (cached_has_bits & 0x00000002u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_lattype());
    }

    // optional string aisid = 27;
    if (cached_has_bits & 0x00000004u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_aisid());
    }

    // optional .com.zhichenhaixin.proto.RadarHistoryTracks tracks = 28;
    if (cached_has_bits & 0x00000008u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *tracks_);
    }

  }
  if (cached_has_bits & 0x0000e000u) {
    // optional .com.zhichenhaixin.proto.CNF trackType = 10;
    if (cached_has_bits & 0x00002000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_tracktype());
    }

    // optional .com.zhichenhaixin.proto.CST extrapolation = 12;
    if (cached_has_bits & 0x00004000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_extrapolation());
    }

    // optional .com.zhichenhaixin.proto.STH trackPositionCode = 13;
    if (cached_has_bits & 0x00008000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_trackpositioncode());
    }

  }
  if (cached_has_bits & 0x000f0000u) {
    // optional float sigmaX = 14;
    if (cached_has_bits & 0x00010000u) {
      total_size += 1 + 4;
    }

    // optional float sigmaY = 15;
    if (cached_has_bits & 0x00020000u) {
      total_size += 1 + 4;
    }

    // optional float sigmaXY = 16;
    if (cached_has_bits & 0x00040000u) {
      total_size += 2 + 4;
    }

    // optional float ampOfPriPlot = 17;
    if (cached_has_bits & 0x00080000u) {
      total_size += 2 + 4;
    }

  }
  if (cached_has_bits & 0x3f000000u) {
    // optional bool trackLastReport = 11;
    if (cached_has_bits & 0x01000000u) {
      total_size += 1 + 1;
    }

    // optional bool trackConfirmed = 30;
    if (cached_has_bits & 0x02000000u) {
      total_size += 2 + 1;
    }

    // optional int32 fleetNumber = 22;
    if (cached_has_bits & 0x04000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_fleetnumber());
    }

    // optional int32 status = 23;
    if (cached_has_bits & 0x08000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_status());
    }

    // optional int32 type = 26;
    if (cached_has_bits & 0x10000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_type());
    }

    // optional int32 diameter = 29;
    if (cached_has_bits & 0x20000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_diameter());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TrackPoint::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.zhichenhaixin.proto.TrackPoint)
  GOOGLE_DCHECK_NE(&from, this);
  const TrackPoint* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TrackPoint>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.zhichenhaixin.proto.TrackPoint)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.zhichenhaixin.proto.TrackPoint)
    MergeFrom(*source);
  }
}

void TrackPoint::MergeFrom(const TrackPoint& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.zhichenhaixin.proto.TrackPoint)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_lontype(from._internal_lontype());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_lattype(from._internal_lattype());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_aisid(from._internal_aisid());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_mutable_tracks()->::com::zhichenhaixin::proto::RadarHistoryTracks::MergeFrom(from._internal_tracks());
    }
    if (cached_has_bits & 0x00000010u) {
      systemareacode_ = from.systemareacode_;
    }
    if (cached_has_bits & 0x00000020u) {
      systemidentificationcode_ = from.systemidentificationcode_;
    }
    if (cached_has_bits & 0x00000040u) {
      messagetype_ = from.messagetype_;
    }
    if (cached_has_bits & 0x00000080u) {
      tracknumber_ = from.tracknumber_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      cartesianposx_ = from.cartesianposx_;
    }
    if (cached_has_bits & 0x00000200u) {
      cartesianposy_ = from.cartesianposy_;
    }
    if (cached_has_bits & 0x00000400u) {
      wgs84poslat_ = from.wgs84poslat_;
    }
    if (cached_has_bits & 0x00000800u) {
      wgs84poslong_ = from.wgs84poslong_;
    }
    if (cached_has_bits & 0x00001000u) {
      timeofday_ = from.timeofday_;
    }
    if (cached_has_bits & 0x00002000u) {
      tracktype_ = from.tracktype_;
    }
    if (cached_has_bits & 0x00004000u) {
      extrapolation_ = from.extrapolation_;
    }
    if (cached_has_bits & 0x00008000u) {
      trackpositioncode_ = from.trackpositioncode_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00ff0000u) {
    if (cached_has_bits & 0x00010000u) {
      sigmax_ = from.sigmax_;
    }
    if (cached_has_bits & 0x00020000u) {
      sigmay_ = from.sigmay_;
    }
    if (cached_has_bits & 0x00040000u) {
      sigmaxy_ = from.sigmaxy_;
    }
    if (cached_has_bits & 0x00080000u) {
      ampofpriplot_ = from.ampofpriplot_;
    }
    if (cached_has_bits & 0x00100000u) {
      cartesiantrkvel_vx_ = from.cartesiantrkvel_vx_;
    }
    if (cached_has_bits & 0x00200000u) {
      cartesiantrkvel_vy_ = from.cartesiantrkvel_vy_;
    }
    if (cached_has_bits & 0x00400000u) {
      cog_ = from.cog_;
    }
    if (cached_has_bits & 0x00800000u) {
      sog_ = from.sog_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x3f000000u) {
    if (cached_has_bits & 0x01000000u) {
      tracklastreport_ = from.tracklastreport_;
    }
    if (cached_has_bits & 0x02000000u) {
      trackconfirmed_ = from.trackconfirmed_;
    }
    if (cached_has_bits & 0x04000000u) {
      fleetnumber_ = from.fleetnumber_;
    }
    if (cached_has_bits & 0x08000000u) {
      status_ = from.status_;
    }
    if (cached_has_bits & 0x10000000u) {
      type_ = from.type_;
    }
    if (cached_has_bits & 0x20000000u) {
      diameter_ = from.diameter_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void TrackPoint::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.zhichenhaixin.proto.TrackPoint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TrackPoint::CopyFrom(const TrackPoint& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.zhichenhaixin.proto.TrackPoint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TrackPoint::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (_internal_has_tracks()) {
    if (!tracks_->IsInitialized()) return false;
  }
  return true;
}

void TrackPoint::InternalSwap(TrackPoint* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  lontype_.Swap(&other->lontype_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  lattype_.Swap(&other->lattype_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  aisid_.Swap(&other->aisid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TrackPoint, diameter_)
      + sizeof(TrackPoint::diameter_)
      - PROTOBUF_FIELD_OFFSET(TrackPoint, tracks_)>(
          reinterpret_cast<char*>(&tracks_),
          reinterpret_cast<char*>(&other->tracks_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TrackPoint::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RadarSurfaceTrack::InitAsDefaultInstance() {
}
class RadarSurfaceTrack::_Internal {
 public:
  using HasBits = decltype(std::declval<RadarSurfaceTrack>()._has_bits_);
  static void set_has_flag(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_sourceid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_utc(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_length(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x0000000f) ^ 0x0000000f) != 0;
  }
};

RadarSurfaceTrack::RadarSurfaceTrack(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  trackpoints_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.zhichenhaixin.proto.RadarSurfaceTrack)
}
RadarSurfaceTrack::RadarSurfaceTrack(const RadarSurfaceTrack& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      trackpoints_(from.trackpoints_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  sourceid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_sourceid()) {
    sourceid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_sourceid(),
      GetArena());
  }
  ::memcpy(&flag_, &from.flag_,
    static_cast<size_t>(reinterpret_cast<char*>(&utc_) -
    reinterpret_cast<char*>(&flag_)) + sizeof(utc_));
  // @@protoc_insertion_point(copy_constructor:com.zhichenhaixin.proto.RadarSurfaceTrack)
}

void RadarSurfaceTrack::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_RadarSurfaceTrack_ZCHXRadar_2eproto.base);
  sourceid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&flag_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&utc_) -
      reinterpret_cast<char*>(&flag_)) + sizeof(utc_));
}

RadarSurfaceTrack::~RadarSurfaceTrack() {
  // @@protoc_insertion_point(destructor:com.zhichenhaixin.proto.RadarSurfaceTrack)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void RadarSurfaceTrack::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  sourceid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void RadarSurfaceTrack::ArenaDtor(void* object) {
  RadarSurfaceTrack* _this = reinterpret_cast< RadarSurfaceTrack* >(object);
  (void)_this;
}
void RadarSurfaceTrack::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RadarSurfaceTrack::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RadarSurfaceTrack& RadarSurfaceTrack::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RadarSurfaceTrack_ZCHXRadar_2eproto.base);
  return *internal_default_instance();
}


void RadarSurfaceTrack::Clear() {
// @@protoc_insertion_point(message_clear_start:com.zhichenhaixin.proto.RadarSurfaceTrack)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  trackpoints_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    sourceid_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x0000000eu) {
    ::memset(&flag_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&utc_) -
        reinterpret_cast<char*>(&flag_)) + sizeof(utc_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RadarSurfaceTrack::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required int32 flag = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_flag(&has_bits);
          flag_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required string sourceId = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_sourceid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "com.zhichenhaixin.proto.RadarSurfaceTrack.sourceId");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint64 UTC = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_utc(&has_bits);
          utc_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int32 length = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_length(&has_bits);
          length_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .com.zhichenhaixin.proto.TrackPoint trackPoints = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_trackpoints(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RadarSurfaceTrack::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.zhichenhaixin.proto.RadarSurfaceTrack)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 flag = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_flag(), target);
  }

  // required string sourceId = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_sourceid().data(), static_cast<int>(this->_internal_sourceid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "com.zhichenhaixin.proto.RadarSurfaceTrack.sourceId");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_sourceid(), target);
  }

  // required uint64 UTC = 3;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(3, this->_internal_utc(), target);
  }

  // required int32 length = 4;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_length(), target);
  }

  // repeated .com.zhichenhaixin.proto.TrackPoint trackPoints = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_trackpoints_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, this->_internal_trackpoints(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.zhichenhaixin.proto.RadarSurfaceTrack)
  return target;
}

size_t RadarSurfaceTrack::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:com.zhichenhaixin.proto.RadarSurfaceTrack)
  size_t total_size = 0;

  if (_internal_has_sourceid()) {
    // required string sourceId = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_sourceid());
  }

  if (_internal_has_flag()) {
    // required int32 flag = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_flag());
  }

  if (_internal_has_length()) {
    // required int32 length = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_length());
  }

  if (_internal_has_utc()) {
    // required uint64 UTC = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_utc());
  }

  return total_size;
}
size_t RadarSurfaceTrack::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.zhichenhaixin.proto.RadarSurfaceTrack)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x0000000f) ^ 0x0000000f) == 0) {  // All required fields are present.
    // required string sourceId = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_sourceid());

    // required int32 flag = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_flag());

    // required int32 length = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_length());

    // required uint64 UTC = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_utc());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .com.zhichenhaixin.proto.TrackPoint trackPoints = 5;
  total_size += 1UL * this->_internal_trackpoints_size();
  for (const auto& msg : this->trackpoints_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RadarSurfaceTrack::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.zhichenhaixin.proto.RadarSurfaceTrack)
  GOOGLE_DCHECK_NE(&from, this);
  const RadarSurfaceTrack* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RadarSurfaceTrack>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.zhichenhaixin.proto.RadarSurfaceTrack)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.zhichenhaixin.proto.RadarSurfaceTrack)
    MergeFrom(*source);
  }
}

void RadarSurfaceTrack::MergeFrom(const RadarSurfaceTrack& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.zhichenhaixin.proto.RadarSurfaceTrack)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  trackpoints_.MergeFrom(from.trackpoints_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_sourceid(from._internal_sourceid());
    }
    if (cached_has_bits & 0x00000002u) {
      flag_ = from.flag_;
    }
    if (cached_has_bits & 0x00000004u) {
      length_ = from.length_;
    }
    if (cached_has_bits & 0x00000008u) {
      utc_ = from.utc_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void RadarSurfaceTrack::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.zhichenhaixin.proto.RadarSurfaceTrack)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RadarSurfaceTrack::CopyFrom(const RadarSurfaceTrack& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.zhichenhaixin.proto.RadarSurfaceTrack)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RadarSurfaceTrack::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(trackpoints_)) return false;
  return true;
}

void RadarSurfaceTrack::InternalSwap(RadarSurfaceTrack* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  trackpoints_.InternalSwap(&other->trackpoints_);
  sourceid_.Swap(&other->sourceid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RadarSurfaceTrack, utc_)
      + sizeof(RadarSurfaceTrack::utc_)
      - PROTOBUF_FIELD_OFFSET(RadarSurfaceTrack, flag_)>(
          reinterpret_cast<char*>(&flag_),
          reinterpret_cast<char*>(&other->flag_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RadarSurfaceTrack::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void VideoFrame::InitAsDefaultInstance() {
}
class VideoFrame::_Internal {
 public:
  using HasBits = decltype(std::declval<VideoFrame>()._has_bits_);
  static void set_has_systemareacode(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_systemidentificationcode(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_msgindex(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_azimuth(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_heading(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_startrange(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_rangefactor(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_bitresolution(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_timeofday(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x000001bf) ^ 0x000001bf) != 0;
  }
};

VideoFrame::VideoFrame(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  amplitude_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.zhichenhaixin.proto.VideoFrame)
}
VideoFrame::VideoFrame(const VideoFrame& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      amplitude_(from.amplitude_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&systemareacode_, &from.systemareacode_,
    static_cast<size_t>(reinterpret_cast<char*>(&bitresolution_) -
    reinterpret_cast<char*>(&systemareacode_)) + sizeof(bitresolution_));
  // @@protoc_insertion_point(copy_constructor:com.zhichenhaixin.proto.VideoFrame)
}

void VideoFrame::SharedCtor() {
  ::memset(&systemareacode_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&timeofday_) -
      reinterpret_cast<char*>(&systemareacode_)) + sizeof(timeofday_));
  bitresolution_ = 1;
}

VideoFrame::~VideoFrame() {
  // @@protoc_insertion_point(destructor:com.zhichenhaixin.proto.VideoFrame)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void VideoFrame::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void VideoFrame::ArenaDtor(void* object) {
  VideoFrame* _this = reinterpret_cast< VideoFrame* >(object);
  (void)_this;
}
void VideoFrame::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void VideoFrame::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const VideoFrame& VideoFrame::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_VideoFrame_ZCHXRadar_2eproto.base);
  return *internal_default_instance();
}


void VideoFrame::Clear() {
// @@protoc_insertion_point(message_clear_start:com.zhichenhaixin.proto.VideoFrame)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  amplitude_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&systemareacode_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&timeofday_) -
        reinterpret_cast<char*>(&systemareacode_)) + sizeof(timeofday_));
  }
  bitresolution_ = 1;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* VideoFrame::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required int32 systemAreaCode = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_systemareacode(&has_bits);
          systemareacode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int32 systemIdentificationCode = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_systemidentificationcode(&has_bits);
          systemidentificationcode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int32 msgIndex = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_msgindex(&has_bits);
          msgindex_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 azimuth = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_azimuth(&has_bits);
          azimuth_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 heading = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_heading(&has_bits);
          heading_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required double startRange = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 49)) {
          _Internal::set_has_startrange(&has_bits);
          startrange_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // required double rangeFactor = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 57)) {
          _Internal::set_has_rangefactor(&has_bits);
          rangefactor_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // required .com.zhichenhaixin.proto.RES bitResolution = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::com::zhichenhaixin::proto::RES_IsValid(val))) {
            _internal_set_bitresolution(static_cast<::com::zhichenhaixin::proto::RES>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(8, val, mutable_unknown_fields());
          }
        } else goto handle_unusual;
        continue;
      // required int32 timeOfDay = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          _Internal::set_has_timeofday(&has_bits);
          timeofday_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated int32 amplitude = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          ptr -= 1;
          do {
            ptr += 1;
            _internal_add_amplitude(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<80>(ptr));
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_amplitude(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* VideoFrame::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.zhichenhaixin.proto.VideoFrame)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 systemAreaCode = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_systemareacode(), target);
  }

  // required int32 systemIdentificationCode = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_systemidentificationcode(), target);
  }

  // required int32 msgIndex = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_msgindex(), target);
  }

  // required uint32 azimuth = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_azimuth(), target);
  }

  // optional uint32 heading = 5;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_heading(), target);
  }

  // required double startRange = 6;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(6, this->_internal_startrange(), target);
  }

  // required double rangeFactor = 7;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(7, this->_internal_rangefactor(), target);
  }

  // required .com.zhichenhaixin.proto.RES bitResolution = 8;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      8, this->_internal_bitresolution(), target);
  }

  // required int32 timeOfDay = 9;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(9, this->_internal_timeofday(), target);
  }

  // repeated int32 amplitude = 10;
  for (int i = 0, n = this->_internal_amplitude_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(10, this->_internal_amplitude(i), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.zhichenhaixin.proto.VideoFrame)
  return target;
}

size_t VideoFrame::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:com.zhichenhaixin.proto.VideoFrame)
  size_t total_size = 0;

  if (_internal_has_systemareacode()) {
    // required int32 systemAreaCode = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_systemareacode());
  }

  if (_internal_has_systemidentificationcode()) {
    // required int32 systemIdentificationCode = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_systemidentificationcode());
  }

  if (_internal_has_msgindex()) {
    // required int32 msgIndex = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_msgindex());
  }

  if (_internal_has_azimuth()) {
    // required uint32 azimuth = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_azimuth());
  }

  if (_internal_has_startrange()) {
    // required double startRange = 6;
    total_size += 1 + 8;
  }

  if (_internal_has_rangefactor()) {
    // required double rangeFactor = 7;
    total_size += 1 + 8;
  }

  if (_internal_has_timeofday()) {
    // required int32 timeOfDay = 9;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_timeofday());
  }

  if (_internal_has_bitresolution()) {
    // required .com.zhichenhaixin.proto.RES bitResolution = 8;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_bitresolution());
  }

  return total_size;
}
size_t VideoFrame::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.zhichenhaixin.proto.VideoFrame)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x000001bf) ^ 0x000001bf) == 0) {  // All required fields are present.
    // required int32 systemAreaCode = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_systemareacode());

    // required int32 systemIdentificationCode = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_systemidentificationcode());

    // required int32 msgIndex = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_msgindex());

    // required uint32 azimuth = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_azimuth());

    // required double startRange = 6;
    total_size += 1 + 8;

    // required double rangeFactor = 7;
    total_size += 1 + 8;

    // required int32 timeOfDay = 9;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_timeofday());

    // required .com.zhichenhaixin.proto.RES bitResolution = 8;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_bitresolution());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 amplitude = 10;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->amplitude_);
    total_size += 1 *
                  ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_amplitude_size());
    total_size += data_size;
  }

  // optional uint32 heading = 5;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000040u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_heading());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void VideoFrame::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.zhichenhaixin.proto.VideoFrame)
  GOOGLE_DCHECK_NE(&from, this);
  const VideoFrame* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<VideoFrame>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.zhichenhaixin.proto.VideoFrame)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.zhichenhaixin.proto.VideoFrame)
    MergeFrom(*source);
  }
}

void VideoFrame::MergeFrom(const VideoFrame& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.zhichenhaixin.proto.VideoFrame)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  amplitude_.MergeFrom(from.amplitude_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      systemareacode_ = from.systemareacode_;
    }
    if (cached_has_bits & 0x00000002u) {
      systemidentificationcode_ = from.systemidentificationcode_;
    }
    if (cached_has_bits & 0x00000004u) {
      msgindex_ = from.msgindex_;
    }
    if (cached_has_bits & 0x00000008u) {
      azimuth_ = from.azimuth_;
    }
    if (cached_has_bits & 0x00000010u) {
      startrange_ = from.startrange_;
    }
    if (cached_has_bits & 0x00000020u) {
      rangefactor_ = from.rangefactor_;
    }
    if (cached_has_bits & 0x00000040u) {
      heading_ = from.heading_;
    }
    if (cached_has_bits & 0x00000080u) {
      timeofday_ = from.timeofday_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000100u) {
    _internal_set_bitresolution(from._internal_bitresolution());
  }
}

void VideoFrame::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.zhichenhaixin.proto.VideoFrame)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VideoFrame::CopyFrom(const VideoFrame& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.zhichenhaixin.proto.VideoFrame)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VideoFrame::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void VideoFrame::InternalSwap(VideoFrame* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  amplitude_.InternalSwap(&other->amplitude_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(VideoFrame, timeofday_)
      + sizeof(VideoFrame::timeofday_)
      - PROTOBUF_FIELD_OFFSET(VideoFrame, systemareacode_)>(
          reinterpret_cast<char*>(&systemareacode_),
          reinterpret_cast<char*>(&other->systemareacode_));
  swap(bitresolution_, other->bitresolution_);
}

::PROTOBUF_NAMESPACE_ID::Metadata VideoFrame::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace proto
}  // namespace zhichenhaixin
}  // namespace com
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::com::zhichenhaixin::proto::RadarHistoryTrack* Arena::CreateMaybeMessage< ::com::zhichenhaixin::proto::RadarHistoryTrack >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::zhichenhaixin::proto::RadarHistoryTrack >(arena);
}
template<> PROTOBUF_NOINLINE ::com::zhichenhaixin::proto::RadarHistoryTracks* Arena::CreateMaybeMessage< ::com::zhichenhaixin::proto::RadarHistoryTracks >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::zhichenhaixin::proto::RadarHistoryTracks >(arena);
}
template<> PROTOBUF_NOINLINE ::com::zhichenhaixin::proto::TrackPoint* Arena::CreateMaybeMessage< ::com::zhichenhaixin::proto::TrackPoint >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::zhichenhaixin::proto::TrackPoint >(arena);
}
template<> PROTOBUF_NOINLINE ::com::zhichenhaixin::proto::RadarSurfaceTrack* Arena::CreateMaybeMessage< ::com::zhichenhaixin::proto::RadarSurfaceTrack >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::zhichenhaixin::proto::RadarSurfaceTrack >(arena);
}
template<> PROTOBUF_NOINLINE ::com::zhichenhaixin::proto::VideoFrame* Arena::CreateMaybeMessage< ::com::zhichenhaixin::proto::VideoFrame >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::zhichenhaixin::proto::VideoFrame >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
