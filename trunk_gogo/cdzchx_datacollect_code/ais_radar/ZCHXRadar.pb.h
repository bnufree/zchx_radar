// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ZCHXRadar.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_ZCHXRadar_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_ZCHXRadar_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3012000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3012001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_ZCHXRadar_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_ZCHXRadar_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[5]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_ZCHXRadar_2eproto;
namespace com {
namespace zhichenhaixin {
namespace proto {
class RadarHistoryTrack;
class RadarHistoryTrackDefaultTypeInternal;
extern RadarHistoryTrackDefaultTypeInternal _RadarHistoryTrack_default_instance_;
class RadarHistoryTracks;
class RadarHistoryTracksDefaultTypeInternal;
extern RadarHistoryTracksDefaultTypeInternal _RadarHistoryTracks_default_instance_;
class RadarSurfaceTrack;
class RadarSurfaceTrackDefaultTypeInternal;
extern RadarSurfaceTrackDefaultTypeInternal _RadarSurfaceTrack_default_instance_;
class TrackPoint;
class TrackPointDefaultTypeInternal;
extern TrackPointDefaultTypeInternal _TrackPoint_default_instance_;
class VideoFrame;
class VideoFrameDefaultTypeInternal;
extern VideoFrameDefaultTypeInternal _VideoFrame_default_instance_;
}  // namespace proto
}  // namespace zhichenhaixin
}  // namespace com
PROTOBUF_NAMESPACE_OPEN
template<> ::com::zhichenhaixin::proto::RadarHistoryTrack* Arena::CreateMaybeMessage<::com::zhichenhaixin::proto::RadarHistoryTrack>(Arena*);
template<> ::com::zhichenhaixin::proto::RadarHistoryTracks* Arena::CreateMaybeMessage<::com::zhichenhaixin::proto::RadarHistoryTracks>(Arena*);
template<> ::com::zhichenhaixin::proto::RadarSurfaceTrack* Arena::CreateMaybeMessage<::com::zhichenhaixin::proto::RadarSurfaceTrack>(Arena*);
template<> ::com::zhichenhaixin::proto::TrackPoint* Arena::CreateMaybeMessage<::com::zhichenhaixin::proto::TrackPoint>(Arena*);
template<> ::com::zhichenhaixin::proto::VideoFrame* Arena::CreateMaybeMessage<::com::zhichenhaixin::proto::VideoFrame>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace com {
namespace zhichenhaixin {
namespace proto {

enum MSGTYP : int {
  MSGTYP_UNDEFINED = 0,
  TARGET_REPORT = 1,
  START_OF_UPDATE_CYCLE = 2,
  PERIODIC_STATUS = 3,
  EVENT_TRIGGERED_STATUS = 4
};
bool MSGTYP_IsValid(int value);
constexpr MSGTYP MSGTYP_MIN = MSGTYP_UNDEFINED;
constexpr MSGTYP MSGTYP_MAX = EVENT_TRIGGERED_STATUS;
constexpr int MSGTYP_ARRAYSIZE = MSGTYP_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* MSGTYP_descriptor();
template<typename T>
inline const std::string& MSGTYP_Name(T enum_t_value) {
  static_assert(::std::is_same<T, MSGTYP>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function MSGTYP_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    MSGTYP_descriptor(), enum_t_value);
}
inline bool MSGTYP_Parse(
    const std::string& name, MSGTYP* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<MSGTYP>(
    MSGTYP_descriptor(), name, value);
}
enum CNF : int {
  CONFIRMED_TRACK = 0,
  TENTATIVE_TRACK = 1,
  UNKNOWN_TRACK = 2
};
bool CNF_IsValid(int value);
constexpr CNF CNF_MIN = CONFIRMED_TRACK;
constexpr CNF CNF_MAX = UNKNOWN_TRACK;
constexpr int CNF_ARRAYSIZE = CNF_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CNF_descriptor();
template<typename T>
inline const std::string& CNF_Name(T enum_t_value) {
  static_assert(::std::is_same<T, CNF>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function CNF_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    CNF_descriptor(), enum_t_value);
}
inline bool CNF_Parse(
    const std::string& name, CNF* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<CNF>(
    CNF_descriptor(), name, value);
}
enum CST : int {
  CST_UNDEFINED = 0,
  PREDICTABLE_EXTRAPOLATION_DUE_PERIOD = 1,
  PREDICTABLE_EXTRAPOLATION_IN_AREA = 2,
  EXTRAPOLATION_DUE_UNPREDICTABLE_DETECTION = 3
};
bool CST_IsValid(int value);
constexpr CST CST_MIN = CST_UNDEFINED;
constexpr CST CST_MAX = EXTRAPOLATION_DUE_UNPREDICTABLE_DETECTION;
constexpr int CST_ARRAYSIZE = CST_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* CST_descriptor();
template<typename T>
inline const std::string& CST_Name(T enum_t_value) {
  static_assert(::std::is_same<T, CST>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function CST_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    CST_descriptor(), enum_t_value);
}
inline bool CST_Parse(
    const std::string& name, CST* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<CST>(
    CST_descriptor(), name, value);
}
enum STH : int {
  MEASURED_POSITION = 0,
  SMOOTHED_POSITION = 1
};
bool STH_IsValid(int value);
constexpr STH STH_MIN = MEASURED_POSITION;
constexpr STH STH_MAX = SMOOTHED_POSITION;
constexpr int STH_ARRAYSIZE = STH_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* STH_descriptor();
template<typename T>
inline const std::string& STH_Name(T enum_t_value) {
  static_assert(::std::is_same<T, STH>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function STH_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    STH_descriptor(), enum_t_value);
}
inline bool STH_Parse(
    const std::string& name, STH* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<STH>(
    STH_descriptor(), name, value);
}
enum RES : int {
  MONOBIT_RESOLUTION = 1,
  LOW_RESOLUTION = 2,
  MEDIUM_RESOLUTION = 3,
  HIGH_RESOLUTION = 4,
  VERY_HIGH_RESOLUTION = 5,
  ULTRA_HIGH_RESOLUTION = 6
};
bool RES_IsValid(int value);
constexpr RES RES_MIN = MONOBIT_RESOLUTION;
constexpr RES RES_MAX = ULTRA_HIGH_RESOLUTION;
constexpr int RES_ARRAYSIZE = RES_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* RES_descriptor();
template<typename T>
inline const std::string& RES_Name(T enum_t_value) {
  static_assert(::std::is_same<T, RES>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function RES_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    RES_descriptor(), enum_t_value);
}
inline bool RES_Parse(
    const std::string& name, RES* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<RES>(
    RES_descriptor(), name, value);
}
// ===================================================================

class RadarHistoryTrack PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:com.zhichenhaixin.proto.RadarHistoryTrack) */ {
 public:
  inline RadarHistoryTrack() : RadarHistoryTrack(nullptr) {};
  virtual ~RadarHistoryTrack();

  RadarHistoryTrack(const RadarHistoryTrack& from);
  RadarHistoryTrack(RadarHistoryTrack&& from) noexcept
    : RadarHistoryTrack() {
    *this = ::std::move(from);
  }

  inline RadarHistoryTrack& operator=(const RadarHistoryTrack& from) {
    CopyFrom(from);
    return *this;
  }
  inline RadarHistoryTrack& operator=(RadarHistoryTrack&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RadarHistoryTrack& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RadarHistoryTrack* internal_default_instance() {
    return reinterpret_cast<const RadarHistoryTrack*>(
               &_RadarHistoryTrack_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(RadarHistoryTrack& a, RadarHistoryTrack& b) {
    a.Swap(&b);
  }
  inline void Swap(RadarHistoryTrack* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RadarHistoryTrack* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RadarHistoryTrack* New() const final {
    return CreateMaybeMessage<RadarHistoryTrack>(nullptr);
  }

  RadarHistoryTrack* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RadarHistoryTrack>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RadarHistoryTrack& from);
  void MergeFrom(const RadarHistoryTrack& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RadarHistoryTrack* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "com.zhichenhaixin.proto.RadarHistoryTrack";
  }
  protected:
  explicit RadarHistoryTrack(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ZCHXRadar_2eproto);
    return ::descriptor_table_ZCHXRadar_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTrackNumberFieldNumber = 1,
    kWgs84PosLatFieldNumber = 2,
    kWgs84PosLongFieldNumber = 3,
    kTimeOfDayFieldNumber = 4,
    kTrackTypeFieldNumber = 5,
    kExtrapolationFieldNumber = 7,
    kTrackPositionCodeFieldNumber = 8,
    kCogFieldNumber = 9,
    kSogFieldNumber = 10,
    kUTCFieldNumber = 11,
  };
  // required int64 trackNumber = 1;
  bool has_tracknumber() const;
  private:
  bool _internal_has_tracknumber() const;
  public:
  void clear_tracknumber();
  ::PROTOBUF_NAMESPACE_ID::int64 tracknumber() const;
  void set_tracknumber(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_tracknumber() const;
  void _internal_set_tracknumber(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // required double wgs84PosLat = 2;
  bool has_wgs84poslat() const;
  private:
  bool _internal_has_wgs84poslat() const;
  public:
  void clear_wgs84poslat();
  double wgs84poslat() const;
  void set_wgs84poslat(double value);
  private:
  double _internal_wgs84poslat() const;
  void _internal_set_wgs84poslat(double value);
  public:

  // required double wgs84PosLong = 3;
  bool has_wgs84poslong() const;
  private:
  bool _internal_has_wgs84poslong() const;
  public:
  void clear_wgs84poslong();
  double wgs84poslong() const;
  void set_wgs84poslong(double value);
  private:
  double _internal_wgs84poslong() const;
  void _internal_set_wgs84poslong(double value);
  public:

  // required float timeOfDay = 4;
  bool has_timeofday() const;
  private:
  bool _internal_has_timeofday() const;
  public:
  void clear_timeofday();
  float timeofday() const;
  void set_timeofday(float value);
  private:
  float _internal_timeofday() const;
  void _internal_set_timeofday(float value);
  public:

  // optional .com.zhichenhaixin.proto.CNF trackType = 5;
  bool has_tracktype() const;
  private:
  bool _internal_has_tracktype() const;
  public:
  void clear_tracktype();
  ::com::zhichenhaixin::proto::CNF tracktype() const;
  void set_tracktype(::com::zhichenhaixin::proto::CNF value);
  private:
  ::com::zhichenhaixin::proto::CNF _internal_tracktype() const;
  void _internal_set_tracktype(::com::zhichenhaixin::proto::CNF value);
  public:

  // optional .com.zhichenhaixin.proto.CST extrapolation = 7;
  bool has_extrapolation() const;
  private:
  bool _internal_has_extrapolation() const;
  public:
  void clear_extrapolation();
  ::com::zhichenhaixin::proto::CST extrapolation() const;
  void set_extrapolation(::com::zhichenhaixin::proto::CST value);
  private:
  ::com::zhichenhaixin::proto::CST _internal_extrapolation() const;
  void _internal_set_extrapolation(::com::zhichenhaixin::proto::CST value);
  public:

  // optional .com.zhichenhaixin.proto.STH trackPositionCode = 8;
  bool has_trackpositioncode() const;
  private:
  bool _internal_has_trackpositioncode() const;
  public:
  void clear_trackpositioncode();
  ::com::zhichenhaixin::proto::STH trackpositioncode() const;
  void set_trackpositioncode(::com::zhichenhaixin::proto::STH value);
  private:
  ::com::zhichenhaixin::proto::STH _internal_trackpositioncode() const;
  void _internal_set_trackpositioncode(::com::zhichenhaixin::proto::STH value);
  public:

  // required double cog = 9;
  bool has_cog() const;
  private:
  bool _internal_has_cog() const;
  public:
  void clear_cog();
  double cog() const;
  void set_cog(double value);
  private:
  double _internal_cog() const;
  void _internal_set_cog(double value);
  public:

  // required double sog = 10;
  bool has_sog() const;
  private:
  bool _internal_has_sog() const;
  public:
  void clear_sog();
  double sog() const;
  void set_sog(double value);
  private:
  double _internal_sog() const;
  void _internal_set_sog(double value);
  public:

  // required uint64 UTC = 11;
  bool has_utc() const;
  private:
  bool _internal_has_utc() const;
  public:
  void clear_utc();
  ::PROTOBUF_NAMESPACE_ID::uint64 utc() const;
  void set_utc(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_utc() const;
  void _internal_set_utc(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:com.zhichenhaixin.proto.RadarHistoryTrack)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::int64 tracknumber_;
  double wgs84poslat_;
  double wgs84poslong_;
  float timeofday_;
  int tracktype_;
  int extrapolation_;
  int trackpositioncode_;
  double cog_;
  double sog_;
  ::PROTOBUF_NAMESPACE_ID::uint64 utc_;
  friend struct ::TableStruct_ZCHXRadar_2eproto;
};
// -------------------------------------------------------------------

class RadarHistoryTracks PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:com.zhichenhaixin.proto.RadarHistoryTracks) */ {
 public:
  inline RadarHistoryTracks() : RadarHistoryTracks(nullptr) {};
  virtual ~RadarHistoryTracks();

  RadarHistoryTracks(const RadarHistoryTracks& from);
  RadarHistoryTracks(RadarHistoryTracks&& from) noexcept
    : RadarHistoryTracks() {
    *this = ::std::move(from);
  }

  inline RadarHistoryTracks& operator=(const RadarHistoryTracks& from) {
    CopyFrom(from);
    return *this;
  }
  inline RadarHistoryTracks& operator=(RadarHistoryTracks&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RadarHistoryTracks& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RadarHistoryTracks* internal_default_instance() {
    return reinterpret_cast<const RadarHistoryTracks*>(
               &_RadarHistoryTracks_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(RadarHistoryTracks& a, RadarHistoryTracks& b) {
    a.Swap(&b);
  }
  inline void Swap(RadarHistoryTracks* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RadarHistoryTracks* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RadarHistoryTracks* New() const final {
    return CreateMaybeMessage<RadarHistoryTracks>(nullptr);
  }

  RadarHistoryTracks* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RadarHistoryTracks>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RadarHistoryTracks& from);
  void MergeFrom(const RadarHistoryTracks& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RadarHistoryTracks* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "com.zhichenhaixin.proto.RadarHistoryTracks";
  }
  protected:
  explicit RadarHistoryTracks(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ZCHXRadar_2eproto);
    return ::descriptor_table_ZCHXRadar_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTrackFieldNumber = 1,
  };
  // repeated .com.zhichenhaixin.proto.RadarHistoryTrack track = 1;
  int track_size() const;
  private:
  int _internal_track_size() const;
  public:
  void clear_track();
  ::com::zhichenhaixin::proto::RadarHistoryTrack* mutable_track(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::zhichenhaixin::proto::RadarHistoryTrack >*
      mutable_track();
  private:
  const ::com::zhichenhaixin::proto::RadarHistoryTrack& _internal_track(int index) const;
  ::com::zhichenhaixin::proto::RadarHistoryTrack* _internal_add_track();
  public:
  const ::com::zhichenhaixin::proto::RadarHistoryTrack& track(int index) const;
  ::com::zhichenhaixin::proto::RadarHistoryTrack* add_track();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::zhichenhaixin::proto::RadarHistoryTrack >&
      track() const;

  // @@protoc_insertion_point(class_scope:com.zhichenhaixin.proto.RadarHistoryTracks)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::zhichenhaixin::proto::RadarHistoryTrack > track_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ZCHXRadar_2eproto;
};
// -------------------------------------------------------------------

class TrackPoint PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:com.zhichenhaixin.proto.TrackPoint) */ {
 public:
  inline TrackPoint() : TrackPoint(nullptr) {};
  virtual ~TrackPoint();

  TrackPoint(const TrackPoint& from);
  TrackPoint(TrackPoint&& from) noexcept
    : TrackPoint() {
    *this = ::std::move(from);
  }

  inline TrackPoint& operator=(const TrackPoint& from) {
    CopyFrom(from);
    return *this;
  }
  inline TrackPoint& operator=(TrackPoint&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TrackPoint& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TrackPoint* internal_default_instance() {
    return reinterpret_cast<const TrackPoint*>(
               &_TrackPoint_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(TrackPoint& a, TrackPoint& b) {
    a.Swap(&b);
  }
  inline void Swap(TrackPoint* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TrackPoint* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TrackPoint* New() const final {
    return CreateMaybeMessage<TrackPoint>(nullptr);
  }

  TrackPoint* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TrackPoint>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TrackPoint& from);
  void MergeFrom(const TrackPoint& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TrackPoint* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "com.zhichenhaixin.proto.TrackPoint";
  }
  protected:
  explicit TrackPoint(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ZCHXRadar_2eproto);
    return ::descriptor_table_ZCHXRadar_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLonTypeFieldNumber = 24,
    kLatTypeFieldNumber = 25,
    kAisidFieldNumber = 27,
    kTracksFieldNumber = 28,
    kSystemAreaCodeFieldNumber = 1,
    kSystemIdentificationCodeFieldNumber = 2,
    kMessageTypeFieldNumber = 3,
    kTrackNumberFieldNumber = 4,
    kCartesianPosXFieldNumber = 5,
    kCartesianPosYFieldNumber = 6,
    kWgs84PosLatFieldNumber = 7,
    kWgs84PosLongFieldNumber = 8,
    kTimeOfDayFieldNumber = 9,
    kTrackTypeFieldNumber = 10,
    kExtrapolationFieldNumber = 12,
    kTrackPositionCodeFieldNumber = 13,
    kSigmaXFieldNumber = 14,
    kSigmaYFieldNumber = 15,
    kSigmaXYFieldNumber = 16,
    kAmpOfPriPlotFieldNumber = 17,
    kCartesianTrkVelVxFieldNumber = 18,
    kCartesianTrkVelVyFieldNumber = 19,
    kCogFieldNumber = 20,
    kSogFieldNumber = 21,
    kTrackLastReportFieldNumber = 11,
    kTrackConfirmedFieldNumber = 30,
    kFleetNumberFieldNumber = 22,
    kStatusFieldNumber = 23,
    kTypeFieldNumber = 26,
    kDiameterFieldNumber = 29,
  };
  // optional string lonType = 24;
  bool has_lontype() const;
  private:
  bool _internal_has_lontype() const;
  public:
  void clear_lontype();
  const std::string& lontype() const;
  void set_lontype(const std::string& value);
  void set_lontype(std::string&& value);
  void set_lontype(const char* value);
  void set_lontype(const char* value, size_t size);
  std::string* mutable_lontype();
  std::string* release_lontype();
  void set_allocated_lontype(std::string* lontype);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_lontype();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_lontype(
      std::string* lontype);
  private:
  const std::string& _internal_lontype() const;
  void _internal_set_lontype(const std::string& value);
  std::string* _internal_mutable_lontype();
  public:

  // optional string latType = 25;
  bool has_lattype() const;
  private:
  bool _internal_has_lattype() const;
  public:
  void clear_lattype();
  const std::string& lattype() const;
  void set_lattype(const std::string& value);
  void set_lattype(std::string&& value);
  void set_lattype(const char* value);
  void set_lattype(const char* value, size_t size);
  std::string* mutable_lattype();
  std::string* release_lattype();
  void set_allocated_lattype(std::string* lattype);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_lattype();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_lattype(
      std::string* lattype);
  private:
  const std::string& _internal_lattype() const;
  void _internal_set_lattype(const std::string& value);
  std::string* _internal_mutable_lattype();
  public:

  // optional string aisid = 27;
  bool has_aisid() const;
  private:
  bool _internal_has_aisid() const;
  public:
  void clear_aisid();
  const std::string& aisid() const;
  void set_aisid(const std::string& value);
  void set_aisid(std::string&& value);
  void set_aisid(const char* value);
  void set_aisid(const char* value, size_t size);
  std::string* mutable_aisid();
  std::string* release_aisid();
  void set_allocated_aisid(std::string* aisid);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_aisid();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_aisid(
      std::string* aisid);
  private:
  const std::string& _internal_aisid() const;
  void _internal_set_aisid(const std::string& value);
  std::string* _internal_mutable_aisid();
  public:

  // optional .com.zhichenhaixin.proto.RadarHistoryTracks tracks = 28;
  bool has_tracks() const;
  private:
  bool _internal_has_tracks() const;
  public:
  void clear_tracks();
  const ::com::zhichenhaixin::proto::RadarHistoryTracks& tracks() const;
  ::com::zhichenhaixin::proto::RadarHistoryTracks* release_tracks();
  ::com::zhichenhaixin::proto::RadarHistoryTracks* mutable_tracks();
  void set_allocated_tracks(::com::zhichenhaixin::proto::RadarHistoryTracks* tracks);
  private:
  const ::com::zhichenhaixin::proto::RadarHistoryTracks& _internal_tracks() const;
  ::com::zhichenhaixin::proto::RadarHistoryTracks* _internal_mutable_tracks();
  public:
  void unsafe_arena_set_allocated_tracks(
      ::com::zhichenhaixin::proto::RadarHistoryTracks* tracks);
  ::com::zhichenhaixin::proto::RadarHistoryTracks* unsafe_arena_release_tracks();

  // required int32 systemAreaCode = 1;
  bool has_systemareacode() const;
  private:
  bool _internal_has_systemareacode() const;
  public:
  void clear_systemareacode();
  ::PROTOBUF_NAMESPACE_ID::int32 systemareacode() const;
  void set_systemareacode(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_systemareacode() const;
  void _internal_set_systemareacode(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // required int32 systemIdentificationCode = 2;
  bool has_systemidentificationcode() const;
  private:
  bool _internal_has_systemidentificationcode() const;
  public:
  void clear_systemidentificationcode();
  ::PROTOBUF_NAMESPACE_ID::int32 systemidentificationcode() const;
  void set_systemidentificationcode(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_systemidentificationcode() const;
  void _internal_set_systemidentificationcode(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // required .com.zhichenhaixin.proto.MSGTYP messageType = 3;
  bool has_messagetype() const;
  private:
  bool _internal_has_messagetype() const;
  public:
  void clear_messagetype();
  ::com::zhichenhaixin::proto::MSGTYP messagetype() const;
  void set_messagetype(::com::zhichenhaixin::proto::MSGTYP value);
  private:
  ::com::zhichenhaixin::proto::MSGTYP _internal_messagetype() const;
  void _internal_set_messagetype(::com::zhichenhaixin::proto::MSGTYP value);
  public:

  // required uint32 trackNumber = 4;
  bool has_tracknumber() const;
  private:
  bool _internal_has_tracknumber() const;
  public:
  void clear_tracknumber();
  ::PROTOBUF_NAMESPACE_ID::uint32 tracknumber() const;
  void set_tracknumber(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_tracknumber() const;
  void _internal_set_tracknumber(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // required float cartesianPosX = 5;
  bool has_cartesianposx() const;
  private:
  bool _internal_has_cartesianposx() const;
  public:
  void clear_cartesianposx();
  float cartesianposx() const;
  void set_cartesianposx(float value);
  private:
  float _internal_cartesianposx() const;
  void _internal_set_cartesianposx(float value);
  public:

  // required float cartesianPosY = 6;
  bool has_cartesianposy() const;
  private:
  bool _internal_has_cartesianposy() const;
  public:
  void clear_cartesianposy();
  float cartesianposy() const;
  void set_cartesianposy(float value);
  private:
  float _internal_cartesianposy() const;
  void _internal_set_cartesianposy(float value);
  public:

  // required double wgs84PosLat = 7;
  bool has_wgs84poslat() const;
  private:
  bool _internal_has_wgs84poslat() const;
  public:
  void clear_wgs84poslat();
  double wgs84poslat() const;
  void set_wgs84poslat(double value);
  private:
  double _internal_wgs84poslat() const;
  void _internal_set_wgs84poslat(double value);
  public:

  // required double wgs84PosLong = 8;
  bool has_wgs84poslong() const;
  private:
  bool _internal_has_wgs84poslong() const;
  public:
  void clear_wgs84poslong();
  double wgs84poslong() const;
  void set_wgs84poslong(double value);
  private:
  double _internal_wgs84poslong() const;
  void _internal_set_wgs84poslong(double value);
  public:

  // required float timeOfDay = 9;
  bool has_timeofday() const;
  private:
  bool _internal_has_timeofday() const;
  public:
  void clear_timeofday();
  float timeofday() const;
  void set_timeofday(float value);
  private:
  float _internal_timeofday() const;
  void _internal_set_timeofday(float value);
  public:

  // optional .com.zhichenhaixin.proto.CNF trackType = 10;
  bool has_tracktype() const;
  private:
  bool _internal_has_tracktype() const;
  public:
  void clear_tracktype();
  ::com::zhichenhaixin::proto::CNF tracktype() const;
  void set_tracktype(::com::zhichenhaixin::proto::CNF value);
  private:
  ::com::zhichenhaixin::proto::CNF _internal_tracktype() const;
  void _internal_set_tracktype(::com::zhichenhaixin::proto::CNF value);
  public:

  // optional .com.zhichenhaixin.proto.CST extrapolation = 12;
  bool has_extrapolation() const;
  private:
  bool _internal_has_extrapolation() const;
  public:
  void clear_extrapolation();
  ::com::zhichenhaixin::proto::CST extrapolation() const;
  void set_extrapolation(::com::zhichenhaixin::proto::CST value);
  private:
  ::com::zhichenhaixin::proto::CST _internal_extrapolation() const;
  void _internal_set_extrapolation(::com::zhichenhaixin::proto::CST value);
  public:

  // optional .com.zhichenhaixin.proto.STH trackPositionCode = 13;
  bool has_trackpositioncode() const;
  private:
  bool _internal_has_trackpositioncode() const;
  public:
  void clear_trackpositioncode();
  ::com::zhichenhaixin::proto::STH trackpositioncode() const;
  void set_trackpositioncode(::com::zhichenhaixin::proto::STH value);
  private:
  ::com::zhichenhaixin::proto::STH _internal_trackpositioncode() const;
  void _internal_set_trackpositioncode(::com::zhichenhaixin::proto::STH value);
  public:

  // optional float sigmaX = 14;
  bool has_sigmax() const;
  private:
  bool _internal_has_sigmax() const;
  public:
  void clear_sigmax();
  float sigmax() const;
  void set_sigmax(float value);
  private:
  float _internal_sigmax() const;
  void _internal_set_sigmax(float value);
  public:

  // optional float sigmaY = 15;
  bool has_sigmay() const;
  private:
  bool _internal_has_sigmay() const;
  public:
  void clear_sigmay();
  float sigmay() const;
  void set_sigmay(float value);
  private:
  float _internal_sigmay() const;
  void _internal_set_sigmay(float value);
  public:

  // optional float sigmaXY = 16;
  bool has_sigmaxy() const;
  private:
  bool _internal_has_sigmaxy() const;
  public:
  void clear_sigmaxy();
  float sigmaxy() const;
  void set_sigmaxy(float value);
  private:
  float _internal_sigmaxy() const;
  void _internal_set_sigmaxy(float value);
  public:

  // optional float ampOfPriPlot = 17;
  bool has_ampofpriplot() const;
  private:
  bool _internal_has_ampofpriplot() const;
  public:
  void clear_ampofpriplot();
  float ampofpriplot() const;
  void set_ampofpriplot(float value);
  private:
  float _internal_ampofpriplot() const;
  void _internal_set_ampofpriplot(float value);
  public:

  // required double cartesianTrkVel_vx = 18;
  bool has_cartesiantrkvel_vx() const;
  private:
  bool _internal_has_cartesiantrkvel_vx() const;
  public:
  void clear_cartesiantrkvel_vx();
  double cartesiantrkvel_vx() const;
  void set_cartesiantrkvel_vx(double value);
  private:
  double _internal_cartesiantrkvel_vx() const;
  void _internal_set_cartesiantrkvel_vx(double value);
  public:

  // required double cartesianTrkVel_vy = 19;
  bool has_cartesiantrkvel_vy() const;
  private:
  bool _internal_has_cartesiantrkvel_vy() const;
  public:
  void clear_cartesiantrkvel_vy();
  double cartesiantrkvel_vy() const;
  void set_cartesiantrkvel_vy(double value);
  private:
  double _internal_cartesiantrkvel_vy() const;
  void _internal_set_cartesiantrkvel_vy(double value);
  public:

  // required double cog = 20;
  bool has_cog() const;
  private:
  bool _internal_has_cog() const;
  public:
  void clear_cog();
  double cog() const;
  void set_cog(double value);
  private:
  double _internal_cog() const;
  void _internal_set_cog(double value);
  public:

  // required double sog = 21;
  bool has_sog() const;
  private:
  bool _internal_has_sog() const;
  public:
  void clear_sog();
  double sog() const;
  void set_sog(double value);
  private:
  double _internal_sog() const;
  void _internal_set_sog(double value);
  public:

  // optional bool trackLastReport = 11;
  bool has_tracklastreport() const;
  private:
  bool _internal_has_tracklastreport() const;
  public:
  void clear_tracklastreport();
  bool tracklastreport() const;
  void set_tracklastreport(bool value);
  private:
  bool _internal_tracklastreport() const;
  void _internal_set_tracklastreport(bool value);
  public:

  // optional bool trackConfirmed = 30;
  bool has_trackconfirmed() const;
  private:
  bool _internal_has_trackconfirmed() const;
  public:
  void clear_trackconfirmed();
  bool trackconfirmed() const;
  void set_trackconfirmed(bool value);
  private:
  bool _internal_trackconfirmed() const;
  void _internal_set_trackconfirmed(bool value);
  public:

  // optional int32 fleetNumber = 22;
  bool has_fleetnumber() const;
  private:
  bool _internal_has_fleetnumber() const;
  public:
  void clear_fleetnumber();
  ::PROTOBUF_NAMESPACE_ID::int32 fleetnumber() const;
  void set_fleetnumber(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_fleetnumber() const;
  void _internal_set_fleetnumber(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 status = 23;
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  ::PROTOBUF_NAMESPACE_ID::int32 status() const;
  void set_status(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_status() const;
  void _internal_set_status(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 type = 26;
  bool has_type() const;
  private:
  bool _internal_has_type() const;
  public:
  void clear_type();
  ::PROTOBUF_NAMESPACE_ID::int32 type() const;
  void set_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_type() const;
  void _internal_set_type(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 diameter = 29;
  bool has_diameter() const;
  private:
  bool _internal_has_diameter() const;
  public:
  void clear_diameter();
  ::PROTOBUF_NAMESPACE_ID::int32 diameter() const;
  void set_diameter(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_diameter() const;
  void _internal_set_diameter(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:com.zhichenhaixin.proto.TrackPoint)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr lontype_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr lattype_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr aisid_;
  ::com::zhichenhaixin::proto::RadarHistoryTracks* tracks_;
  ::PROTOBUF_NAMESPACE_ID::int32 systemareacode_;
  ::PROTOBUF_NAMESPACE_ID::int32 systemidentificationcode_;
  int messagetype_;
  ::PROTOBUF_NAMESPACE_ID::uint32 tracknumber_;
  float cartesianposx_;
  float cartesianposy_;
  double wgs84poslat_;
  double wgs84poslong_;
  float timeofday_;
  int tracktype_;
  int extrapolation_;
  int trackpositioncode_;
  float sigmax_;
  float sigmay_;
  float sigmaxy_;
  float ampofpriplot_;
  double cartesiantrkvel_vx_;
  double cartesiantrkvel_vy_;
  double cog_;
  double sog_;
  bool tracklastreport_;
  bool trackconfirmed_;
  ::PROTOBUF_NAMESPACE_ID::int32 fleetnumber_;
  ::PROTOBUF_NAMESPACE_ID::int32 status_;
  ::PROTOBUF_NAMESPACE_ID::int32 type_;
  ::PROTOBUF_NAMESPACE_ID::int32 diameter_;
  friend struct ::TableStruct_ZCHXRadar_2eproto;
};
// -------------------------------------------------------------------

class RadarSurfaceTrack PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:com.zhichenhaixin.proto.RadarSurfaceTrack) */ {
 public:
  inline RadarSurfaceTrack() : RadarSurfaceTrack(nullptr) {};
  virtual ~RadarSurfaceTrack();

  RadarSurfaceTrack(const RadarSurfaceTrack& from);
  RadarSurfaceTrack(RadarSurfaceTrack&& from) noexcept
    : RadarSurfaceTrack() {
    *this = ::std::move(from);
  }

  inline RadarSurfaceTrack& operator=(const RadarSurfaceTrack& from) {
    CopyFrom(from);
    return *this;
  }
  inline RadarSurfaceTrack& operator=(RadarSurfaceTrack&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RadarSurfaceTrack& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RadarSurfaceTrack* internal_default_instance() {
    return reinterpret_cast<const RadarSurfaceTrack*>(
               &_RadarSurfaceTrack_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(RadarSurfaceTrack& a, RadarSurfaceTrack& b) {
    a.Swap(&b);
  }
  inline void Swap(RadarSurfaceTrack* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RadarSurfaceTrack* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RadarSurfaceTrack* New() const final {
    return CreateMaybeMessage<RadarSurfaceTrack>(nullptr);
  }

  RadarSurfaceTrack* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RadarSurfaceTrack>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RadarSurfaceTrack& from);
  void MergeFrom(const RadarSurfaceTrack& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RadarSurfaceTrack* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "com.zhichenhaixin.proto.RadarSurfaceTrack";
  }
  protected:
  explicit RadarSurfaceTrack(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ZCHXRadar_2eproto);
    return ::descriptor_table_ZCHXRadar_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTrackPointsFieldNumber = 5,
    kSourceIdFieldNumber = 2,
    kFlagFieldNumber = 1,
    kLengthFieldNumber = 4,
    kUTCFieldNumber = 3,
  };
  // repeated .com.zhichenhaixin.proto.TrackPoint trackPoints = 5;
  int trackpoints_size() const;
  private:
  int _internal_trackpoints_size() const;
  public:
  void clear_trackpoints();
  ::com::zhichenhaixin::proto::TrackPoint* mutable_trackpoints(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::zhichenhaixin::proto::TrackPoint >*
      mutable_trackpoints();
  private:
  const ::com::zhichenhaixin::proto::TrackPoint& _internal_trackpoints(int index) const;
  ::com::zhichenhaixin::proto::TrackPoint* _internal_add_trackpoints();
  public:
  const ::com::zhichenhaixin::proto::TrackPoint& trackpoints(int index) const;
  ::com::zhichenhaixin::proto::TrackPoint* add_trackpoints();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::zhichenhaixin::proto::TrackPoint >&
      trackpoints() const;

  // required string sourceId = 2;
  bool has_sourceid() const;
  private:
  bool _internal_has_sourceid() const;
  public:
  void clear_sourceid();
  const std::string& sourceid() const;
  void set_sourceid(const std::string& value);
  void set_sourceid(std::string&& value);
  void set_sourceid(const char* value);
  void set_sourceid(const char* value, size_t size);
  std::string* mutable_sourceid();
  std::string* release_sourceid();
  void set_allocated_sourceid(std::string* sourceid);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_sourceid();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_sourceid(
      std::string* sourceid);
  private:
  const std::string& _internal_sourceid() const;
  void _internal_set_sourceid(const std::string& value);
  std::string* _internal_mutable_sourceid();
  public:

  // required int32 flag = 1;
  bool has_flag() const;
  private:
  bool _internal_has_flag() const;
  public:
  void clear_flag();
  ::PROTOBUF_NAMESPACE_ID::int32 flag() const;
  void set_flag(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_flag() const;
  void _internal_set_flag(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // required int32 length = 4;
  bool has_length() const;
  private:
  bool _internal_has_length() const;
  public:
  void clear_length();
  ::PROTOBUF_NAMESPACE_ID::int32 length() const;
  void set_length(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_length() const;
  void _internal_set_length(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // required uint64 UTC = 3;
  bool has_utc() const;
  private:
  bool _internal_has_utc() const;
  public:
  void clear_utc();
  ::PROTOBUF_NAMESPACE_ID::uint64 utc() const;
  void set_utc(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_utc() const;
  void _internal_set_utc(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // @@protoc_insertion_point(class_scope:com.zhichenhaixin.proto.RadarSurfaceTrack)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::zhichenhaixin::proto::TrackPoint > trackpoints_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr sourceid_;
  ::PROTOBUF_NAMESPACE_ID::int32 flag_;
  ::PROTOBUF_NAMESPACE_ID::int32 length_;
  ::PROTOBUF_NAMESPACE_ID::uint64 utc_;
  friend struct ::TableStruct_ZCHXRadar_2eproto;
};
// -------------------------------------------------------------------

class VideoFrame PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:com.zhichenhaixin.proto.VideoFrame) */ {
 public:
  inline VideoFrame() : VideoFrame(nullptr) {};
  virtual ~VideoFrame();

  VideoFrame(const VideoFrame& from);
  VideoFrame(VideoFrame&& from) noexcept
    : VideoFrame() {
    *this = ::std::move(from);
  }

  inline VideoFrame& operator=(const VideoFrame& from) {
    CopyFrom(from);
    return *this;
  }
  inline VideoFrame& operator=(VideoFrame&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const VideoFrame& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const VideoFrame* internal_default_instance() {
    return reinterpret_cast<const VideoFrame*>(
               &_VideoFrame_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(VideoFrame& a, VideoFrame& b) {
    a.Swap(&b);
  }
  inline void Swap(VideoFrame* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(VideoFrame* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline VideoFrame* New() const final {
    return CreateMaybeMessage<VideoFrame>(nullptr);
  }

  VideoFrame* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<VideoFrame>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const VideoFrame& from);
  void MergeFrom(const VideoFrame& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(VideoFrame* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "com.zhichenhaixin.proto.VideoFrame";
  }
  protected:
  explicit VideoFrame(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ZCHXRadar_2eproto);
    return ::descriptor_table_ZCHXRadar_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAmplitudeFieldNumber = 10,
    kSystemAreaCodeFieldNumber = 1,
    kSystemIdentificationCodeFieldNumber = 2,
    kMsgIndexFieldNumber = 3,
    kAzimuthFieldNumber = 4,
    kStartRangeFieldNumber = 6,
    kRangeFactorFieldNumber = 7,
    kHeadingFieldNumber = 5,
    kTimeOfDayFieldNumber = 9,
    kBitResolutionFieldNumber = 8,
  };
  // repeated int32 amplitude = 10;
  int amplitude_size() const;
  private:
  int _internal_amplitude_size() const;
  public:
  void clear_amplitude();
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_amplitude(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      _internal_amplitude() const;
  void _internal_add_amplitude(::PROTOBUF_NAMESPACE_ID::int32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      _internal_mutable_amplitude();
  public:
  ::PROTOBUF_NAMESPACE_ID::int32 amplitude(int index) const;
  void set_amplitude(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_amplitude(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      amplitude() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_amplitude();

  // required int32 systemAreaCode = 1;
  bool has_systemareacode() const;
  private:
  bool _internal_has_systemareacode() const;
  public:
  void clear_systemareacode();
  ::PROTOBUF_NAMESPACE_ID::int32 systemareacode() const;
  void set_systemareacode(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_systemareacode() const;
  void _internal_set_systemareacode(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // required int32 systemIdentificationCode = 2;
  bool has_systemidentificationcode() const;
  private:
  bool _internal_has_systemidentificationcode() const;
  public:
  void clear_systemidentificationcode();
  ::PROTOBUF_NAMESPACE_ID::int32 systemidentificationcode() const;
  void set_systemidentificationcode(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_systemidentificationcode() const;
  void _internal_set_systemidentificationcode(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // required int32 msgIndex = 3;
  bool has_msgindex() const;
  private:
  bool _internal_has_msgindex() const;
  public:
  void clear_msgindex();
  ::PROTOBUF_NAMESPACE_ID::int32 msgindex() const;
  void set_msgindex(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_msgindex() const;
  void _internal_set_msgindex(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // required uint32 azimuth = 4;
  bool has_azimuth() const;
  private:
  bool _internal_has_azimuth() const;
  public:
  void clear_azimuth();
  ::PROTOBUF_NAMESPACE_ID::uint32 azimuth() const;
  void set_azimuth(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_azimuth() const;
  void _internal_set_azimuth(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // required double startRange = 6;
  bool has_startrange() const;
  private:
  bool _internal_has_startrange() const;
  public:
  void clear_startrange();
  double startrange() const;
  void set_startrange(double value);
  private:
  double _internal_startrange() const;
  void _internal_set_startrange(double value);
  public:

  // required double rangeFactor = 7;
  bool has_rangefactor() const;
  private:
  bool _internal_has_rangefactor() const;
  public:
  void clear_rangefactor();
  double rangefactor() const;
  void set_rangefactor(double value);
  private:
  double _internal_rangefactor() const;
  void _internal_set_rangefactor(double value);
  public:

  // optional uint32 heading = 5;
  bool has_heading() const;
  private:
  bool _internal_has_heading() const;
  public:
  void clear_heading();
  ::PROTOBUF_NAMESPACE_ID::uint32 heading() const;
  void set_heading(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_heading() const;
  void _internal_set_heading(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // required int32 timeOfDay = 9;
  bool has_timeofday() const;
  private:
  bool _internal_has_timeofday() const;
  public:
  void clear_timeofday();
  ::PROTOBUF_NAMESPACE_ID::int32 timeofday() const;
  void set_timeofday(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_timeofday() const;
  void _internal_set_timeofday(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // required .com.zhichenhaixin.proto.RES bitResolution = 8;
  bool has_bitresolution() const;
  private:
  bool _internal_has_bitresolution() const;
  public:
  void clear_bitresolution();
  ::com::zhichenhaixin::proto::RES bitresolution() const;
  void set_bitresolution(::com::zhichenhaixin::proto::RES value);
  private:
  ::com::zhichenhaixin::proto::RES _internal_bitresolution() const;
  void _internal_set_bitresolution(::com::zhichenhaixin::proto::RES value);
  public:

  // @@protoc_insertion_point(class_scope:com.zhichenhaixin.proto.VideoFrame)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > amplitude_;
  ::PROTOBUF_NAMESPACE_ID::int32 systemareacode_;
  ::PROTOBUF_NAMESPACE_ID::int32 systemidentificationcode_;
  ::PROTOBUF_NAMESPACE_ID::int32 msgindex_;
  ::PROTOBUF_NAMESPACE_ID::uint32 azimuth_;
  double startrange_;
  double rangefactor_;
  ::PROTOBUF_NAMESPACE_ID::uint32 heading_;
  ::PROTOBUF_NAMESPACE_ID::int32 timeofday_;
  int bitresolution_;
  friend struct ::TableStruct_ZCHXRadar_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// RadarHistoryTrack

// required int64 trackNumber = 1;
inline bool RadarHistoryTrack::_internal_has_tracknumber() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool RadarHistoryTrack::has_tracknumber() const {
  return _internal_has_tracknumber();
}
inline void RadarHistoryTrack::clear_tracknumber() {
  tracknumber_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 RadarHistoryTrack::_internal_tracknumber() const {
  return tracknumber_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 RadarHistoryTrack::tracknumber() const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.proto.RadarHistoryTrack.trackNumber)
  return _internal_tracknumber();
}
inline void RadarHistoryTrack::_internal_set_tracknumber(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000001u;
  tracknumber_ = value;
}
inline void RadarHistoryTrack::set_tracknumber(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_tracknumber(value);
  // @@protoc_insertion_point(field_set:com.zhichenhaixin.proto.RadarHistoryTrack.trackNumber)
}

// required double wgs84PosLat = 2;
inline bool RadarHistoryTrack::_internal_has_wgs84poslat() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool RadarHistoryTrack::has_wgs84poslat() const {
  return _internal_has_wgs84poslat();
}
inline void RadarHistoryTrack::clear_wgs84poslat() {
  wgs84poslat_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline double RadarHistoryTrack::_internal_wgs84poslat() const {
  return wgs84poslat_;
}
inline double RadarHistoryTrack::wgs84poslat() const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.proto.RadarHistoryTrack.wgs84PosLat)
  return _internal_wgs84poslat();
}
inline void RadarHistoryTrack::_internal_set_wgs84poslat(double value) {
  _has_bits_[0] |= 0x00000002u;
  wgs84poslat_ = value;
}
inline void RadarHistoryTrack::set_wgs84poslat(double value) {
  _internal_set_wgs84poslat(value);
  // @@protoc_insertion_point(field_set:com.zhichenhaixin.proto.RadarHistoryTrack.wgs84PosLat)
}

// required double wgs84PosLong = 3;
inline bool RadarHistoryTrack::_internal_has_wgs84poslong() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool RadarHistoryTrack::has_wgs84poslong() const {
  return _internal_has_wgs84poslong();
}
inline void RadarHistoryTrack::clear_wgs84poslong() {
  wgs84poslong_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline double RadarHistoryTrack::_internal_wgs84poslong() const {
  return wgs84poslong_;
}
inline double RadarHistoryTrack::wgs84poslong() const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.proto.RadarHistoryTrack.wgs84PosLong)
  return _internal_wgs84poslong();
}
inline void RadarHistoryTrack::_internal_set_wgs84poslong(double value) {
  _has_bits_[0] |= 0x00000004u;
  wgs84poslong_ = value;
}
inline void RadarHistoryTrack::set_wgs84poslong(double value) {
  _internal_set_wgs84poslong(value);
  // @@protoc_insertion_point(field_set:com.zhichenhaixin.proto.RadarHistoryTrack.wgs84PosLong)
}

// required float timeOfDay = 4;
inline bool RadarHistoryTrack::_internal_has_timeofday() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool RadarHistoryTrack::has_timeofday() const {
  return _internal_has_timeofday();
}
inline void RadarHistoryTrack::clear_timeofday() {
  timeofday_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline float RadarHistoryTrack::_internal_timeofday() const {
  return timeofday_;
}
inline float RadarHistoryTrack::timeofday() const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.proto.RadarHistoryTrack.timeOfDay)
  return _internal_timeofday();
}
inline void RadarHistoryTrack::_internal_set_timeofday(float value) {
  _has_bits_[0] |= 0x00000008u;
  timeofday_ = value;
}
inline void RadarHistoryTrack::set_timeofday(float value) {
  _internal_set_timeofday(value);
  // @@protoc_insertion_point(field_set:com.zhichenhaixin.proto.RadarHistoryTrack.timeOfDay)
}

// optional .com.zhichenhaixin.proto.CNF trackType = 5;
inline bool RadarHistoryTrack::_internal_has_tracktype() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool RadarHistoryTrack::has_tracktype() const {
  return _internal_has_tracktype();
}
inline void RadarHistoryTrack::clear_tracktype() {
  tracktype_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::com::zhichenhaixin::proto::CNF RadarHistoryTrack::_internal_tracktype() const {
  return static_cast< ::com::zhichenhaixin::proto::CNF >(tracktype_);
}
inline ::com::zhichenhaixin::proto::CNF RadarHistoryTrack::tracktype() const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.proto.RadarHistoryTrack.trackType)
  return _internal_tracktype();
}
inline void RadarHistoryTrack::_internal_set_tracktype(::com::zhichenhaixin::proto::CNF value) {
  assert(::com::zhichenhaixin::proto::CNF_IsValid(value));
  _has_bits_[0] |= 0x00000010u;
  tracktype_ = value;
}
inline void RadarHistoryTrack::set_tracktype(::com::zhichenhaixin::proto::CNF value) {
  _internal_set_tracktype(value);
  // @@protoc_insertion_point(field_set:com.zhichenhaixin.proto.RadarHistoryTrack.trackType)
}

// optional .com.zhichenhaixin.proto.CST extrapolation = 7;
inline bool RadarHistoryTrack::_internal_has_extrapolation() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool RadarHistoryTrack::has_extrapolation() const {
  return _internal_has_extrapolation();
}
inline void RadarHistoryTrack::clear_extrapolation() {
  extrapolation_ = 0;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::com::zhichenhaixin::proto::CST RadarHistoryTrack::_internal_extrapolation() const {
  return static_cast< ::com::zhichenhaixin::proto::CST >(extrapolation_);
}
inline ::com::zhichenhaixin::proto::CST RadarHistoryTrack::extrapolation() const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.proto.RadarHistoryTrack.extrapolation)
  return _internal_extrapolation();
}
inline void RadarHistoryTrack::_internal_set_extrapolation(::com::zhichenhaixin::proto::CST value) {
  assert(::com::zhichenhaixin::proto::CST_IsValid(value));
  _has_bits_[0] |= 0x00000020u;
  extrapolation_ = value;
}
inline void RadarHistoryTrack::set_extrapolation(::com::zhichenhaixin::proto::CST value) {
  _internal_set_extrapolation(value);
  // @@protoc_insertion_point(field_set:com.zhichenhaixin.proto.RadarHistoryTrack.extrapolation)
}

// optional .com.zhichenhaixin.proto.STH trackPositionCode = 8;
inline bool RadarHistoryTrack::_internal_has_trackpositioncode() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool RadarHistoryTrack::has_trackpositioncode() const {
  return _internal_has_trackpositioncode();
}
inline void RadarHistoryTrack::clear_trackpositioncode() {
  trackpositioncode_ = 0;
  _has_bits_[0] &= ~0x00000040u;
}
inline ::com::zhichenhaixin::proto::STH RadarHistoryTrack::_internal_trackpositioncode() const {
  return static_cast< ::com::zhichenhaixin::proto::STH >(trackpositioncode_);
}
inline ::com::zhichenhaixin::proto::STH RadarHistoryTrack::trackpositioncode() const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.proto.RadarHistoryTrack.trackPositionCode)
  return _internal_trackpositioncode();
}
inline void RadarHistoryTrack::_internal_set_trackpositioncode(::com::zhichenhaixin::proto::STH value) {
  assert(::com::zhichenhaixin::proto::STH_IsValid(value));
  _has_bits_[0] |= 0x00000040u;
  trackpositioncode_ = value;
}
inline void RadarHistoryTrack::set_trackpositioncode(::com::zhichenhaixin::proto::STH value) {
  _internal_set_trackpositioncode(value);
  // @@protoc_insertion_point(field_set:com.zhichenhaixin.proto.RadarHistoryTrack.trackPositionCode)
}

// required double cog = 9;
inline bool RadarHistoryTrack::_internal_has_cog() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool RadarHistoryTrack::has_cog() const {
  return _internal_has_cog();
}
inline void RadarHistoryTrack::clear_cog() {
  cog_ = 0;
  _has_bits_[0] &= ~0x00000080u;
}
inline double RadarHistoryTrack::_internal_cog() const {
  return cog_;
}
inline double RadarHistoryTrack::cog() const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.proto.RadarHistoryTrack.cog)
  return _internal_cog();
}
inline void RadarHistoryTrack::_internal_set_cog(double value) {
  _has_bits_[0] |= 0x00000080u;
  cog_ = value;
}
inline void RadarHistoryTrack::set_cog(double value) {
  _internal_set_cog(value);
  // @@protoc_insertion_point(field_set:com.zhichenhaixin.proto.RadarHistoryTrack.cog)
}

// required double sog = 10;
inline bool RadarHistoryTrack::_internal_has_sog() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool RadarHistoryTrack::has_sog() const {
  return _internal_has_sog();
}
inline void RadarHistoryTrack::clear_sog() {
  sog_ = 0;
  _has_bits_[0] &= ~0x00000100u;
}
inline double RadarHistoryTrack::_internal_sog() const {
  return sog_;
}
inline double RadarHistoryTrack::sog() const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.proto.RadarHistoryTrack.sog)
  return _internal_sog();
}
inline void RadarHistoryTrack::_internal_set_sog(double value) {
  _has_bits_[0] |= 0x00000100u;
  sog_ = value;
}
inline void RadarHistoryTrack::set_sog(double value) {
  _internal_set_sog(value);
  // @@protoc_insertion_point(field_set:com.zhichenhaixin.proto.RadarHistoryTrack.sog)
}

// required uint64 UTC = 11;
inline bool RadarHistoryTrack::_internal_has_utc() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool RadarHistoryTrack::has_utc() const {
  return _internal_has_utc();
}
inline void RadarHistoryTrack::clear_utc() {
  utc_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000200u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 RadarHistoryTrack::_internal_utc() const {
  return utc_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 RadarHistoryTrack::utc() const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.proto.RadarHistoryTrack.UTC)
  return _internal_utc();
}
inline void RadarHistoryTrack::_internal_set_utc(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000200u;
  utc_ = value;
}
inline void RadarHistoryTrack::set_utc(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_utc(value);
  // @@protoc_insertion_point(field_set:com.zhichenhaixin.proto.RadarHistoryTrack.UTC)
}

// -------------------------------------------------------------------

// RadarHistoryTracks

// repeated .com.zhichenhaixin.proto.RadarHistoryTrack track = 1;
inline int RadarHistoryTracks::_internal_track_size() const {
  return track_.size();
}
inline int RadarHistoryTracks::track_size() const {
  return _internal_track_size();
}
inline void RadarHistoryTracks::clear_track() {
  track_.Clear();
}
inline ::com::zhichenhaixin::proto::RadarHistoryTrack* RadarHistoryTracks::mutable_track(int index) {
  // @@protoc_insertion_point(field_mutable:com.zhichenhaixin.proto.RadarHistoryTracks.track)
  return track_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::zhichenhaixin::proto::RadarHistoryTrack >*
RadarHistoryTracks::mutable_track() {
  // @@protoc_insertion_point(field_mutable_list:com.zhichenhaixin.proto.RadarHistoryTracks.track)
  return &track_;
}
inline const ::com::zhichenhaixin::proto::RadarHistoryTrack& RadarHistoryTracks::_internal_track(int index) const {
  return track_.Get(index);
}
inline const ::com::zhichenhaixin::proto::RadarHistoryTrack& RadarHistoryTracks::track(int index) const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.proto.RadarHistoryTracks.track)
  return _internal_track(index);
}
inline ::com::zhichenhaixin::proto::RadarHistoryTrack* RadarHistoryTracks::_internal_add_track() {
  return track_.Add();
}
inline ::com::zhichenhaixin::proto::RadarHistoryTrack* RadarHistoryTracks::add_track() {
  // @@protoc_insertion_point(field_add:com.zhichenhaixin.proto.RadarHistoryTracks.track)
  return _internal_add_track();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::zhichenhaixin::proto::RadarHistoryTrack >&
RadarHistoryTracks::track() const {
  // @@protoc_insertion_point(field_list:com.zhichenhaixin.proto.RadarHistoryTracks.track)
  return track_;
}

// -------------------------------------------------------------------

// TrackPoint

// required int32 systemAreaCode = 1;
inline bool TrackPoint::_internal_has_systemareacode() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool TrackPoint::has_systemareacode() const {
  return _internal_has_systemareacode();
}
inline void TrackPoint::clear_systemareacode() {
  systemareacode_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TrackPoint::_internal_systemareacode() const {
  return systemareacode_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TrackPoint::systemareacode() const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.proto.TrackPoint.systemAreaCode)
  return _internal_systemareacode();
}
inline void TrackPoint::_internal_set_systemareacode(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000010u;
  systemareacode_ = value;
}
inline void TrackPoint::set_systemareacode(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_systemareacode(value);
  // @@protoc_insertion_point(field_set:com.zhichenhaixin.proto.TrackPoint.systemAreaCode)
}

// required int32 systemIdentificationCode = 2;
inline bool TrackPoint::_internal_has_systemidentificationcode() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool TrackPoint::has_systemidentificationcode() const {
  return _internal_has_systemidentificationcode();
}
inline void TrackPoint::clear_systemidentificationcode() {
  systemidentificationcode_ = 0;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TrackPoint::_internal_systemidentificationcode() const {
  return systemidentificationcode_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TrackPoint::systemidentificationcode() const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.proto.TrackPoint.systemIdentificationCode)
  return _internal_systemidentificationcode();
}
inline void TrackPoint::_internal_set_systemidentificationcode(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000020u;
  systemidentificationcode_ = value;
}
inline void TrackPoint::set_systemidentificationcode(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_systemidentificationcode(value);
  // @@protoc_insertion_point(field_set:com.zhichenhaixin.proto.TrackPoint.systemIdentificationCode)
}

// required .com.zhichenhaixin.proto.MSGTYP messageType = 3;
inline bool TrackPoint::_internal_has_messagetype() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool TrackPoint::has_messagetype() const {
  return _internal_has_messagetype();
}
inline void TrackPoint::clear_messagetype() {
  messagetype_ = 0;
  _has_bits_[0] &= ~0x00000040u;
}
inline ::com::zhichenhaixin::proto::MSGTYP TrackPoint::_internal_messagetype() const {
  return static_cast< ::com::zhichenhaixin::proto::MSGTYP >(messagetype_);
}
inline ::com::zhichenhaixin::proto::MSGTYP TrackPoint::messagetype() const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.proto.TrackPoint.messageType)
  return _internal_messagetype();
}
inline void TrackPoint::_internal_set_messagetype(::com::zhichenhaixin::proto::MSGTYP value) {
  assert(::com::zhichenhaixin::proto::MSGTYP_IsValid(value));
  _has_bits_[0] |= 0x00000040u;
  messagetype_ = value;
}
inline void TrackPoint::set_messagetype(::com::zhichenhaixin::proto::MSGTYP value) {
  _internal_set_messagetype(value);
  // @@protoc_insertion_point(field_set:com.zhichenhaixin.proto.TrackPoint.messageType)
}

// required uint32 trackNumber = 4;
inline bool TrackPoint::_internal_has_tracknumber() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool TrackPoint::has_tracknumber() const {
  return _internal_has_tracknumber();
}
inline void TrackPoint::clear_tracknumber() {
  tracknumber_ = 0u;
  _has_bits_[0] &= ~0x00000080u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TrackPoint::_internal_tracknumber() const {
  return tracknumber_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TrackPoint::tracknumber() const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.proto.TrackPoint.trackNumber)
  return _internal_tracknumber();
}
inline void TrackPoint::_internal_set_tracknumber(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000080u;
  tracknumber_ = value;
}
inline void TrackPoint::set_tracknumber(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_tracknumber(value);
  // @@protoc_insertion_point(field_set:com.zhichenhaixin.proto.TrackPoint.trackNumber)
}

// required float cartesianPosX = 5;
inline bool TrackPoint::_internal_has_cartesianposx() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool TrackPoint::has_cartesianposx() const {
  return _internal_has_cartesianposx();
}
inline void TrackPoint::clear_cartesianposx() {
  cartesianposx_ = 0;
  _has_bits_[0] &= ~0x00000100u;
}
inline float TrackPoint::_internal_cartesianposx() const {
  return cartesianposx_;
}
inline float TrackPoint::cartesianposx() const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.proto.TrackPoint.cartesianPosX)
  return _internal_cartesianposx();
}
inline void TrackPoint::_internal_set_cartesianposx(float value) {
  _has_bits_[0] |= 0x00000100u;
  cartesianposx_ = value;
}
inline void TrackPoint::set_cartesianposx(float value) {
  _internal_set_cartesianposx(value);
  // @@protoc_insertion_point(field_set:com.zhichenhaixin.proto.TrackPoint.cartesianPosX)
}

// required float cartesianPosY = 6;
inline bool TrackPoint::_internal_has_cartesianposy() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool TrackPoint::has_cartesianposy() const {
  return _internal_has_cartesianposy();
}
inline void TrackPoint::clear_cartesianposy() {
  cartesianposy_ = 0;
  _has_bits_[0] &= ~0x00000200u;
}
inline float TrackPoint::_internal_cartesianposy() const {
  return cartesianposy_;
}
inline float TrackPoint::cartesianposy() const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.proto.TrackPoint.cartesianPosY)
  return _internal_cartesianposy();
}
inline void TrackPoint::_internal_set_cartesianposy(float value) {
  _has_bits_[0] |= 0x00000200u;
  cartesianposy_ = value;
}
inline void TrackPoint::set_cartesianposy(float value) {
  _internal_set_cartesianposy(value);
  // @@protoc_insertion_point(field_set:com.zhichenhaixin.proto.TrackPoint.cartesianPosY)
}

// required double wgs84PosLat = 7;
inline bool TrackPoint::_internal_has_wgs84poslat() const {
  bool value = (_has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool TrackPoint::has_wgs84poslat() const {
  return _internal_has_wgs84poslat();
}
inline void TrackPoint::clear_wgs84poslat() {
  wgs84poslat_ = 0;
  _has_bits_[0] &= ~0x00000400u;
}
inline double TrackPoint::_internal_wgs84poslat() const {
  return wgs84poslat_;
}
inline double TrackPoint::wgs84poslat() const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.proto.TrackPoint.wgs84PosLat)
  return _internal_wgs84poslat();
}
inline void TrackPoint::_internal_set_wgs84poslat(double value) {
  _has_bits_[0] |= 0x00000400u;
  wgs84poslat_ = value;
}
inline void TrackPoint::set_wgs84poslat(double value) {
  _internal_set_wgs84poslat(value);
  // @@protoc_insertion_point(field_set:com.zhichenhaixin.proto.TrackPoint.wgs84PosLat)
}

// required double wgs84PosLong = 8;
inline bool TrackPoint::_internal_has_wgs84poslong() const {
  bool value = (_has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline bool TrackPoint::has_wgs84poslong() const {
  return _internal_has_wgs84poslong();
}
inline void TrackPoint::clear_wgs84poslong() {
  wgs84poslong_ = 0;
  _has_bits_[0] &= ~0x00000800u;
}
inline double TrackPoint::_internal_wgs84poslong() const {
  return wgs84poslong_;
}
inline double TrackPoint::wgs84poslong() const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.proto.TrackPoint.wgs84PosLong)
  return _internal_wgs84poslong();
}
inline void TrackPoint::_internal_set_wgs84poslong(double value) {
  _has_bits_[0] |= 0x00000800u;
  wgs84poslong_ = value;
}
inline void TrackPoint::set_wgs84poslong(double value) {
  _internal_set_wgs84poslong(value);
  // @@protoc_insertion_point(field_set:com.zhichenhaixin.proto.TrackPoint.wgs84PosLong)
}

// required float timeOfDay = 9;
inline bool TrackPoint::_internal_has_timeofday() const {
  bool value = (_has_bits_[0] & 0x00001000u) != 0;
  return value;
}
inline bool TrackPoint::has_timeofday() const {
  return _internal_has_timeofday();
}
inline void TrackPoint::clear_timeofday() {
  timeofday_ = 0;
  _has_bits_[0] &= ~0x00001000u;
}
inline float TrackPoint::_internal_timeofday() const {
  return timeofday_;
}
inline float TrackPoint::timeofday() const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.proto.TrackPoint.timeOfDay)
  return _internal_timeofday();
}
inline void TrackPoint::_internal_set_timeofday(float value) {
  _has_bits_[0] |= 0x00001000u;
  timeofday_ = value;
}
inline void TrackPoint::set_timeofday(float value) {
  _internal_set_timeofday(value);
  // @@protoc_insertion_point(field_set:com.zhichenhaixin.proto.TrackPoint.timeOfDay)
}

// optional .com.zhichenhaixin.proto.CNF trackType = 10;
inline bool TrackPoint::_internal_has_tracktype() const {
  bool value = (_has_bits_[0] & 0x00002000u) != 0;
  return value;
}
inline bool TrackPoint::has_tracktype() const {
  return _internal_has_tracktype();
}
inline void TrackPoint::clear_tracktype() {
  tracktype_ = 0;
  _has_bits_[0] &= ~0x00002000u;
}
inline ::com::zhichenhaixin::proto::CNF TrackPoint::_internal_tracktype() const {
  return static_cast< ::com::zhichenhaixin::proto::CNF >(tracktype_);
}
inline ::com::zhichenhaixin::proto::CNF TrackPoint::tracktype() const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.proto.TrackPoint.trackType)
  return _internal_tracktype();
}
inline void TrackPoint::_internal_set_tracktype(::com::zhichenhaixin::proto::CNF value) {
  assert(::com::zhichenhaixin::proto::CNF_IsValid(value));
  _has_bits_[0] |= 0x00002000u;
  tracktype_ = value;
}
inline void TrackPoint::set_tracktype(::com::zhichenhaixin::proto::CNF value) {
  _internal_set_tracktype(value);
  // @@protoc_insertion_point(field_set:com.zhichenhaixin.proto.TrackPoint.trackType)
}

// optional bool trackLastReport = 11;
inline bool TrackPoint::_internal_has_tracklastreport() const {
  bool value = (_has_bits_[0] & 0x01000000u) != 0;
  return value;
}
inline bool TrackPoint::has_tracklastreport() const {
  return _internal_has_tracklastreport();
}
inline void TrackPoint::clear_tracklastreport() {
  tracklastreport_ = false;
  _has_bits_[0] &= ~0x01000000u;
}
inline bool TrackPoint::_internal_tracklastreport() const {
  return tracklastreport_;
}
inline bool TrackPoint::tracklastreport() const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.proto.TrackPoint.trackLastReport)
  return _internal_tracklastreport();
}
inline void TrackPoint::_internal_set_tracklastreport(bool value) {
  _has_bits_[0] |= 0x01000000u;
  tracklastreport_ = value;
}
inline void TrackPoint::set_tracklastreport(bool value) {
  _internal_set_tracklastreport(value);
  // @@protoc_insertion_point(field_set:com.zhichenhaixin.proto.TrackPoint.trackLastReport)
}

// optional .com.zhichenhaixin.proto.CST extrapolation = 12;
inline bool TrackPoint::_internal_has_extrapolation() const {
  bool value = (_has_bits_[0] & 0x00004000u) != 0;
  return value;
}
inline bool TrackPoint::has_extrapolation() const {
  return _internal_has_extrapolation();
}
inline void TrackPoint::clear_extrapolation() {
  extrapolation_ = 0;
  _has_bits_[0] &= ~0x00004000u;
}
inline ::com::zhichenhaixin::proto::CST TrackPoint::_internal_extrapolation() const {
  return static_cast< ::com::zhichenhaixin::proto::CST >(extrapolation_);
}
inline ::com::zhichenhaixin::proto::CST TrackPoint::extrapolation() const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.proto.TrackPoint.extrapolation)
  return _internal_extrapolation();
}
inline void TrackPoint::_internal_set_extrapolation(::com::zhichenhaixin::proto::CST value) {
  assert(::com::zhichenhaixin::proto::CST_IsValid(value));
  _has_bits_[0] |= 0x00004000u;
  extrapolation_ = value;
}
inline void TrackPoint::set_extrapolation(::com::zhichenhaixin::proto::CST value) {
  _internal_set_extrapolation(value);
  // @@protoc_insertion_point(field_set:com.zhichenhaixin.proto.TrackPoint.extrapolation)
}

// optional .com.zhichenhaixin.proto.STH trackPositionCode = 13;
inline bool TrackPoint::_internal_has_trackpositioncode() const {
  bool value = (_has_bits_[0] & 0x00008000u) != 0;
  return value;
}
inline bool TrackPoint::has_trackpositioncode() const {
  return _internal_has_trackpositioncode();
}
inline void TrackPoint::clear_trackpositioncode() {
  trackpositioncode_ = 0;
  _has_bits_[0] &= ~0x00008000u;
}
inline ::com::zhichenhaixin::proto::STH TrackPoint::_internal_trackpositioncode() const {
  return static_cast< ::com::zhichenhaixin::proto::STH >(trackpositioncode_);
}
inline ::com::zhichenhaixin::proto::STH TrackPoint::trackpositioncode() const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.proto.TrackPoint.trackPositionCode)
  return _internal_trackpositioncode();
}
inline void TrackPoint::_internal_set_trackpositioncode(::com::zhichenhaixin::proto::STH value) {
  assert(::com::zhichenhaixin::proto::STH_IsValid(value));
  _has_bits_[0] |= 0x00008000u;
  trackpositioncode_ = value;
}
inline void TrackPoint::set_trackpositioncode(::com::zhichenhaixin::proto::STH value) {
  _internal_set_trackpositioncode(value);
  // @@protoc_insertion_point(field_set:com.zhichenhaixin.proto.TrackPoint.trackPositionCode)
}

// optional float sigmaX = 14;
inline bool TrackPoint::_internal_has_sigmax() const {
  bool value = (_has_bits_[0] & 0x00010000u) != 0;
  return value;
}
inline bool TrackPoint::has_sigmax() const {
  return _internal_has_sigmax();
}
inline void TrackPoint::clear_sigmax() {
  sigmax_ = 0;
  _has_bits_[0] &= ~0x00010000u;
}
inline float TrackPoint::_internal_sigmax() const {
  return sigmax_;
}
inline float TrackPoint::sigmax() const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.proto.TrackPoint.sigmaX)
  return _internal_sigmax();
}
inline void TrackPoint::_internal_set_sigmax(float value) {
  _has_bits_[0] |= 0x00010000u;
  sigmax_ = value;
}
inline void TrackPoint::set_sigmax(float value) {
  _internal_set_sigmax(value);
  // @@protoc_insertion_point(field_set:com.zhichenhaixin.proto.TrackPoint.sigmaX)
}

// optional float sigmaY = 15;
inline bool TrackPoint::_internal_has_sigmay() const {
  bool value = (_has_bits_[0] & 0x00020000u) != 0;
  return value;
}
inline bool TrackPoint::has_sigmay() const {
  return _internal_has_sigmay();
}
inline void TrackPoint::clear_sigmay() {
  sigmay_ = 0;
  _has_bits_[0] &= ~0x00020000u;
}
inline float TrackPoint::_internal_sigmay() const {
  return sigmay_;
}
inline float TrackPoint::sigmay() const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.proto.TrackPoint.sigmaY)
  return _internal_sigmay();
}
inline void TrackPoint::_internal_set_sigmay(float value) {
  _has_bits_[0] |= 0x00020000u;
  sigmay_ = value;
}
inline void TrackPoint::set_sigmay(float value) {
  _internal_set_sigmay(value);
  // @@protoc_insertion_point(field_set:com.zhichenhaixin.proto.TrackPoint.sigmaY)
}

// optional float sigmaXY = 16;
inline bool TrackPoint::_internal_has_sigmaxy() const {
  bool value = (_has_bits_[0] & 0x00040000u) != 0;
  return value;
}
inline bool TrackPoint::has_sigmaxy() const {
  return _internal_has_sigmaxy();
}
inline void TrackPoint::clear_sigmaxy() {
  sigmaxy_ = 0;
  _has_bits_[0] &= ~0x00040000u;
}
inline float TrackPoint::_internal_sigmaxy() const {
  return sigmaxy_;
}
inline float TrackPoint::sigmaxy() const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.proto.TrackPoint.sigmaXY)
  return _internal_sigmaxy();
}
inline void TrackPoint::_internal_set_sigmaxy(float value) {
  _has_bits_[0] |= 0x00040000u;
  sigmaxy_ = value;
}
inline void TrackPoint::set_sigmaxy(float value) {
  _internal_set_sigmaxy(value);
  // @@protoc_insertion_point(field_set:com.zhichenhaixin.proto.TrackPoint.sigmaXY)
}

// optional float ampOfPriPlot = 17;
inline bool TrackPoint::_internal_has_ampofpriplot() const {
  bool value = (_has_bits_[0] & 0x00080000u) != 0;
  return value;
}
inline bool TrackPoint::has_ampofpriplot() const {
  return _internal_has_ampofpriplot();
}
inline void TrackPoint::clear_ampofpriplot() {
  ampofpriplot_ = 0;
  _has_bits_[0] &= ~0x00080000u;
}
inline float TrackPoint::_internal_ampofpriplot() const {
  return ampofpriplot_;
}
inline float TrackPoint::ampofpriplot() const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.proto.TrackPoint.ampOfPriPlot)
  return _internal_ampofpriplot();
}
inline void TrackPoint::_internal_set_ampofpriplot(float value) {
  _has_bits_[0] |= 0x00080000u;
  ampofpriplot_ = value;
}
inline void TrackPoint::set_ampofpriplot(float value) {
  _internal_set_ampofpriplot(value);
  // @@protoc_insertion_point(field_set:com.zhichenhaixin.proto.TrackPoint.ampOfPriPlot)
}

// required double cartesianTrkVel_vx = 18;
inline bool TrackPoint::_internal_has_cartesiantrkvel_vx() const {
  bool value = (_has_bits_[0] & 0x00100000u) != 0;
  return value;
}
inline bool TrackPoint::has_cartesiantrkvel_vx() const {
  return _internal_has_cartesiantrkvel_vx();
}
inline void TrackPoint::clear_cartesiantrkvel_vx() {
  cartesiantrkvel_vx_ = 0;
  _has_bits_[0] &= ~0x00100000u;
}
inline double TrackPoint::_internal_cartesiantrkvel_vx() const {
  return cartesiantrkvel_vx_;
}
inline double TrackPoint::cartesiantrkvel_vx() const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.proto.TrackPoint.cartesianTrkVel_vx)
  return _internal_cartesiantrkvel_vx();
}
inline void TrackPoint::_internal_set_cartesiantrkvel_vx(double value) {
  _has_bits_[0] |= 0x00100000u;
  cartesiantrkvel_vx_ = value;
}
inline void TrackPoint::set_cartesiantrkvel_vx(double value) {
  _internal_set_cartesiantrkvel_vx(value);
  // @@protoc_insertion_point(field_set:com.zhichenhaixin.proto.TrackPoint.cartesianTrkVel_vx)
}

// required double cartesianTrkVel_vy = 19;
inline bool TrackPoint::_internal_has_cartesiantrkvel_vy() const {
  bool value = (_has_bits_[0] & 0x00200000u) != 0;
  return value;
}
inline bool TrackPoint::has_cartesiantrkvel_vy() const {
  return _internal_has_cartesiantrkvel_vy();
}
inline void TrackPoint::clear_cartesiantrkvel_vy() {
  cartesiantrkvel_vy_ = 0;
  _has_bits_[0] &= ~0x00200000u;
}
inline double TrackPoint::_internal_cartesiantrkvel_vy() const {
  return cartesiantrkvel_vy_;
}
inline double TrackPoint::cartesiantrkvel_vy() const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.proto.TrackPoint.cartesianTrkVel_vy)
  return _internal_cartesiantrkvel_vy();
}
inline void TrackPoint::_internal_set_cartesiantrkvel_vy(double value) {
  _has_bits_[0] |= 0x00200000u;
  cartesiantrkvel_vy_ = value;
}
inline void TrackPoint::set_cartesiantrkvel_vy(double value) {
  _internal_set_cartesiantrkvel_vy(value);
  // @@protoc_insertion_point(field_set:com.zhichenhaixin.proto.TrackPoint.cartesianTrkVel_vy)
}

// required double cog = 20;
inline bool TrackPoint::_internal_has_cog() const {
  bool value = (_has_bits_[0] & 0x00400000u) != 0;
  return value;
}
inline bool TrackPoint::has_cog() const {
  return _internal_has_cog();
}
inline void TrackPoint::clear_cog() {
  cog_ = 0;
  _has_bits_[0] &= ~0x00400000u;
}
inline double TrackPoint::_internal_cog() const {
  return cog_;
}
inline double TrackPoint::cog() const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.proto.TrackPoint.cog)
  return _internal_cog();
}
inline void TrackPoint::_internal_set_cog(double value) {
  _has_bits_[0] |= 0x00400000u;
  cog_ = value;
}
inline void TrackPoint::set_cog(double value) {
  _internal_set_cog(value);
  // @@protoc_insertion_point(field_set:com.zhichenhaixin.proto.TrackPoint.cog)
}

// required double sog = 21;
inline bool TrackPoint::_internal_has_sog() const {
  bool value = (_has_bits_[0] & 0x00800000u) != 0;
  return value;
}
inline bool TrackPoint::has_sog() const {
  return _internal_has_sog();
}
inline void TrackPoint::clear_sog() {
  sog_ = 0;
  _has_bits_[0] &= ~0x00800000u;
}
inline double TrackPoint::_internal_sog() const {
  return sog_;
}
inline double TrackPoint::sog() const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.proto.TrackPoint.sog)
  return _internal_sog();
}
inline void TrackPoint::_internal_set_sog(double value) {
  _has_bits_[0] |= 0x00800000u;
  sog_ = value;
}
inline void TrackPoint::set_sog(double value) {
  _internal_set_sog(value);
  // @@protoc_insertion_point(field_set:com.zhichenhaixin.proto.TrackPoint.sog)
}

// optional int32 fleetNumber = 22;
inline bool TrackPoint::_internal_has_fleetnumber() const {
  bool value = (_has_bits_[0] & 0x04000000u) != 0;
  return value;
}
inline bool TrackPoint::has_fleetnumber() const {
  return _internal_has_fleetnumber();
}
inline void TrackPoint::clear_fleetnumber() {
  fleetnumber_ = 0;
  _has_bits_[0] &= ~0x04000000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TrackPoint::_internal_fleetnumber() const {
  return fleetnumber_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TrackPoint::fleetnumber() const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.proto.TrackPoint.fleetNumber)
  return _internal_fleetnumber();
}
inline void TrackPoint::_internal_set_fleetnumber(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x04000000u;
  fleetnumber_ = value;
}
inline void TrackPoint::set_fleetnumber(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_fleetnumber(value);
  // @@protoc_insertion_point(field_set:com.zhichenhaixin.proto.TrackPoint.fleetNumber)
}

// optional int32 status = 23;
inline bool TrackPoint::_internal_has_status() const {
  bool value = (_has_bits_[0] & 0x08000000u) != 0;
  return value;
}
inline bool TrackPoint::has_status() const {
  return _internal_has_status();
}
inline void TrackPoint::clear_status() {
  status_ = 0;
  _has_bits_[0] &= ~0x08000000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TrackPoint::_internal_status() const {
  return status_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TrackPoint::status() const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.proto.TrackPoint.status)
  return _internal_status();
}
inline void TrackPoint::_internal_set_status(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x08000000u;
  status_ = value;
}
inline void TrackPoint::set_status(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:com.zhichenhaixin.proto.TrackPoint.status)
}

// optional string lonType = 24;
inline bool TrackPoint::_internal_has_lontype() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool TrackPoint::has_lontype() const {
  return _internal_has_lontype();
}
inline void TrackPoint::clear_lontype() {
  lontype_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& TrackPoint::lontype() const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.proto.TrackPoint.lonType)
  return _internal_lontype();
}
inline void TrackPoint::set_lontype(const std::string& value) {
  _internal_set_lontype(value);
  // @@protoc_insertion_point(field_set:com.zhichenhaixin.proto.TrackPoint.lonType)
}
inline std::string* TrackPoint::mutable_lontype() {
  // @@protoc_insertion_point(field_mutable:com.zhichenhaixin.proto.TrackPoint.lonType)
  return _internal_mutable_lontype();
}
inline const std::string& TrackPoint::_internal_lontype() const {
  return lontype_.Get();
}
inline void TrackPoint::_internal_set_lontype(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  lontype_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void TrackPoint::set_lontype(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  lontype_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:com.zhichenhaixin.proto.TrackPoint.lonType)
}
inline void TrackPoint::set_lontype(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  lontype_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:com.zhichenhaixin.proto.TrackPoint.lonType)
}
inline void TrackPoint::set_lontype(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  lontype_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:com.zhichenhaixin.proto.TrackPoint.lonType)
}
inline std::string* TrackPoint::_internal_mutable_lontype() {
  _has_bits_[0] |= 0x00000001u;
  return lontype_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* TrackPoint::release_lontype() {
  // @@protoc_insertion_point(field_release:com.zhichenhaixin.proto.TrackPoint.lonType)
  if (!_internal_has_lontype()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return lontype_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void TrackPoint::set_allocated_lontype(std::string* lontype) {
  if (lontype != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  lontype_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), lontype,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:com.zhichenhaixin.proto.TrackPoint.lonType)
}
inline std::string* TrackPoint::unsafe_arena_release_lontype() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.zhichenhaixin.proto.TrackPoint.lonType)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000001u;
  return lontype_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void TrackPoint::unsafe_arena_set_allocated_lontype(
    std::string* lontype) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (lontype != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  lontype_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      lontype, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.zhichenhaixin.proto.TrackPoint.lonType)
}

// optional string latType = 25;
inline bool TrackPoint::_internal_has_lattype() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool TrackPoint::has_lattype() const {
  return _internal_has_lattype();
}
inline void TrackPoint::clear_lattype() {
  lattype_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& TrackPoint::lattype() const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.proto.TrackPoint.latType)
  return _internal_lattype();
}
inline void TrackPoint::set_lattype(const std::string& value) {
  _internal_set_lattype(value);
  // @@protoc_insertion_point(field_set:com.zhichenhaixin.proto.TrackPoint.latType)
}
inline std::string* TrackPoint::mutable_lattype() {
  // @@protoc_insertion_point(field_mutable:com.zhichenhaixin.proto.TrackPoint.latType)
  return _internal_mutable_lattype();
}
inline const std::string& TrackPoint::_internal_lattype() const {
  return lattype_.Get();
}
inline void TrackPoint::_internal_set_lattype(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  lattype_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void TrackPoint::set_lattype(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  lattype_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:com.zhichenhaixin.proto.TrackPoint.latType)
}
inline void TrackPoint::set_lattype(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  lattype_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:com.zhichenhaixin.proto.TrackPoint.latType)
}
inline void TrackPoint::set_lattype(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000002u;
  lattype_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:com.zhichenhaixin.proto.TrackPoint.latType)
}
inline std::string* TrackPoint::_internal_mutable_lattype() {
  _has_bits_[0] |= 0x00000002u;
  return lattype_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* TrackPoint::release_lattype() {
  // @@protoc_insertion_point(field_release:com.zhichenhaixin.proto.TrackPoint.latType)
  if (!_internal_has_lattype()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return lattype_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void TrackPoint::set_allocated_lattype(std::string* lattype) {
  if (lattype != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  lattype_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), lattype,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:com.zhichenhaixin.proto.TrackPoint.latType)
}
inline std::string* TrackPoint::unsafe_arena_release_lattype() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.zhichenhaixin.proto.TrackPoint.latType)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000002u;
  return lattype_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void TrackPoint::unsafe_arena_set_allocated_lattype(
    std::string* lattype) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (lattype != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  lattype_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      lattype, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.zhichenhaixin.proto.TrackPoint.latType)
}

// optional int32 type = 26;
inline bool TrackPoint::_internal_has_type() const {
  bool value = (_has_bits_[0] & 0x10000000u) != 0;
  return value;
}
inline bool TrackPoint::has_type() const {
  return _internal_has_type();
}
inline void TrackPoint::clear_type() {
  type_ = 0;
  _has_bits_[0] &= ~0x10000000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TrackPoint::_internal_type() const {
  return type_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TrackPoint::type() const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.proto.TrackPoint.type)
  return _internal_type();
}
inline void TrackPoint::_internal_set_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x10000000u;
  type_ = value;
}
inline void TrackPoint::set_type(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:com.zhichenhaixin.proto.TrackPoint.type)
}

// optional string aisid = 27;
inline bool TrackPoint::_internal_has_aisid() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool TrackPoint::has_aisid() const {
  return _internal_has_aisid();
}
inline void TrackPoint::clear_aisid() {
  aisid_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& TrackPoint::aisid() const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.proto.TrackPoint.aisid)
  return _internal_aisid();
}
inline void TrackPoint::set_aisid(const std::string& value) {
  _internal_set_aisid(value);
  // @@protoc_insertion_point(field_set:com.zhichenhaixin.proto.TrackPoint.aisid)
}
inline std::string* TrackPoint::mutable_aisid() {
  // @@protoc_insertion_point(field_mutable:com.zhichenhaixin.proto.TrackPoint.aisid)
  return _internal_mutable_aisid();
}
inline const std::string& TrackPoint::_internal_aisid() const {
  return aisid_.Get();
}
inline void TrackPoint::_internal_set_aisid(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  aisid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void TrackPoint::set_aisid(std::string&& value) {
  _has_bits_[0] |= 0x00000004u;
  aisid_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:com.zhichenhaixin.proto.TrackPoint.aisid)
}
inline void TrackPoint::set_aisid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000004u;
  aisid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:com.zhichenhaixin.proto.TrackPoint.aisid)
}
inline void TrackPoint::set_aisid(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000004u;
  aisid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:com.zhichenhaixin.proto.TrackPoint.aisid)
}
inline std::string* TrackPoint::_internal_mutable_aisid() {
  _has_bits_[0] |= 0x00000004u;
  return aisid_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* TrackPoint::release_aisid() {
  // @@protoc_insertion_point(field_release:com.zhichenhaixin.proto.TrackPoint.aisid)
  if (!_internal_has_aisid()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return aisid_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void TrackPoint::set_allocated_aisid(std::string* aisid) {
  if (aisid != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  aisid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), aisid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:com.zhichenhaixin.proto.TrackPoint.aisid)
}
inline std::string* TrackPoint::unsafe_arena_release_aisid() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.zhichenhaixin.proto.TrackPoint.aisid)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000004u;
  return aisid_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void TrackPoint::unsafe_arena_set_allocated_aisid(
    std::string* aisid) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (aisid != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  aisid_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      aisid, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.zhichenhaixin.proto.TrackPoint.aisid)
}

// optional .com.zhichenhaixin.proto.RadarHistoryTracks tracks = 28;
inline bool TrackPoint::_internal_has_tracks() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || tracks_ != nullptr);
  return value;
}
inline bool TrackPoint::has_tracks() const {
  return _internal_has_tracks();
}
inline void TrackPoint::clear_tracks() {
  if (tracks_ != nullptr) tracks_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
inline const ::com::zhichenhaixin::proto::RadarHistoryTracks& TrackPoint::_internal_tracks() const {
  const ::com::zhichenhaixin::proto::RadarHistoryTracks* p = tracks_;
  return p != nullptr ? *p : *reinterpret_cast<const ::com::zhichenhaixin::proto::RadarHistoryTracks*>(
      &::com::zhichenhaixin::proto::_RadarHistoryTracks_default_instance_);
}
inline const ::com::zhichenhaixin::proto::RadarHistoryTracks& TrackPoint::tracks() const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.proto.TrackPoint.tracks)
  return _internal_tracks();
}
inline void TrackPoint::unsafe_arena_set_allocated_tracks(
    ::com::zhichenhaixin::proto::RadarHistoryTracks* tracks) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(tracks_);
  }
  tracks_ = tracks;
  if (tracks) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.zhichenhaixin.proto.TrackPoint.tracks)
}
inline ::com::zhichenhaixin::proto::RadarHistoryTracks* TrackPoint::release_tracks() {
  auto temp = unsafe_arena_release_tracks();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::com::zhichenhaixin::proto::RadarHistoryTracks* TrackPoint::unsafe_arena_release_tracks() {
  // @@protoc_insertion_point(field_release:com.zhichenhaixin.proto.TrackPoint.tracks)
  _has_bits_[0] &= ~0x00000008u;
  ::com::zhichenhaixin::proto::RadarHistoryTracks* temp = tracks_;
  tracks_ = nullptr;
  return temp;
}
inline ::com::zhichenhaixin::proto::RadarHistoryTracks* TrackPoint::_internal_mutable_tracks() {
  _has_bits_[0] |= 0x00000008u;
  if (tracks_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::zhichenhaixin::proto::RadarHistoryTracks>(GetArena());
    tracks_ = p;
  }
  return tracks_;
}
inline ::com::zhichenhaixin::proto::RadarHistoryTracks* TrackPoint::mutable_tracks() {
  // @@protoc_insertion_point(field_mutable:com.zhichenhaixin.proto.TrackPoint.tracks)
  return _internal_mutable_tracks();
}
inline void TrackPoint::set_allocated_tracks(::com::zhichenhaixin::proto::RadarHistoryTracks* tracks) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete tracks_;
  }
  if (tracks) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(tracks);
    if (message_arena != submessage_arena) {
      tracks = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, tracks, submessage_arena);
    }
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  tracks_ = tracks;
  // @@protoc_insertion_point(field_set_allocated:com.zhichenhaixin.proto.TrackPoint.tracks)
}

// optional int32 diameter = 29;
inline bool TrackPoint::_internal_has_diameter() const {
  bool value = (_has_bits_[0] & 0x20000000u) != 0;
  return value;
}
inline bool TrackPoint::has_diameter() const {
  return _internal_has_diameter();
}
inline void TrackPoint::clear_diameter() {
  diameter_ = 0;
  _has_bits_[0] &= ~0x20000000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TrackPoint::_internal_diameter() const {
  return diameter_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 TrackPoint::diameter() const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.proto.TrackPoint.diameter)
  return _internal_diameter();
}
inline void TrackPoint::_internal_set_diameter(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x20000000u;
  diameter_ = value;
}
inline void TrackPoint::set_diameter(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_diameter(value);
  // @@protoc_insertion_point(field_set:com.zhichenhaixin.proto.TrackPoint.diameter)
}

// optional bool trackConfirmed = 30;
inline bool TrackPoint::_internal_has_trackconfirmed() const {
  bool value = (_has_bits_[0] & 0x02000000u) != 0;
  return value;
}
inline bool TrackPoint::has_trackconfirmed() const {
  return _internal_has_trackconfirmed();
}
inline void TrackPoint::clear_trackconfirmed() {
  trackconfirmed_ = false;
  _has_bits_[0] &= ~0x02000000u;
}
inline bool TrackPoint::_internal_trackconfirmed() const {
  return trackconfirmed_;
}
inline bool TrackPoint::trackconfirmed() const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.proto.TrackPoint.trackConfirmed)
  return _internal_trackconfirmed();
}
inline void TrackPoint::_internal_set_trackconfirmed(bool value) {
  _has_bits_[0] |= 0x02000000u;
  trackconfirmed_ = value;
}
inline void TrackPoint::set_trackconfirmed(bool value) {
  _internal_set_trackconfirmed(value);
  // @@protoc_insertion_point(field_set:com.zhichenhaixin.proto.TrackPoint.trackConfirmed)
}

// -------------------------------------------------------------------

// RadarSurfaceTrack

// required int32 flag = 1;
inline bool RadarSurfaceTrack::_internal_has_flag() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool RadarSurfaceTrack::has_flag() const {
  return _internal_has_flag();
}
inline void RadarSurfaceTrack::clear_flag() {
  flag_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RadarSurfaceTrack::_internal_flag() const {
  return flag_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RadarSurfaceTrack::flag() const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.proto.RadarSurfaceTrack.flag)
  return _internal_flag();
}
inline void RadarSurfaceTrack::_internal_set_flag(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  flag_ = value;
}
inline void RadarSurfaceTrack::set_flag(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_flag(value);
  // @@protoc_insertion_point(field_set:com.zhichenhaixin.proto.RadarSurfaceTrack.flag)
}

// required string sourceId = 2;
inline bool RadarSurfaceTrack::_internal_has_sourceid() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool RadarSurfaceTrack::has_sourceid() const {
  return _internal_has_sourceid();
}
inline void RadarSurfaceTrack::clear_sourceid() {
  sourceid_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& RadarSurfaceTrack::sourceid() const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.proto.RadarSurfaceTrack.sourceId)
  return _internal_sourceid();
}
inline void RadarSurfaceTrack::set_sourceid(const std::string& value) {
  _internal_set_sourceid(value);
  // @@protoc_insertion_point(field_set:com.zhichenhaixin.proto.RadarSurfaceTrack.sourceId)
}
inline std::string* RadarSurfaceTrack::mutable_sourceid() {
  // @@protoc_insertion_point(field_mutable:com.zhichenhaixin.proto.RadarSurfaceTrack.sourceId)
  return _internal_mutable_sourceid();
}
inline const std::string& RadarSurfaceTrack::_internal_sourceid() const {
  return sourceid_.Get();
}
inline void RadarSurfaceTrack::_internal_set_sourceid(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  sourceid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void RadarSurfaceTrack::set_sourceid(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  sourceid_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:com.zhichenhaixin.proto.RadarSurfaceTrack.sourceId)
}
inline void RadarSurfaceTrack::set_sourceid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  sourceid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:com.zhichenhaixin.proto.RadarSurfaceTrack.sourceId)
}
inline void RadarSurfaceTrack::set_sourceid(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  sourceid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:com.zhichenhaixin.proto.RadarSurfaceTrack.sourceId)
}
inline std::string* RadarSurfaceTrack::_internal_mutable_sourceid() {
  _has_bits_[0] |= 0x00000001u;
  return sourceid_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* RadarSurfaceTrack::release_sourceid() {
  // @@protoc_insertion_point(field_release:com.zhichenhaixin.proto.RadarSurfaceTrack.sourceId)
  if (!_internal_has_sourceid()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return sourceid_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void RadarSurfaceTrack::set_allocated_sourceid(std::string* sourceid) {
  if (sourceid != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  sourceid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), sourceid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:com.zhichenhaixin.proto.RadarSurfaceTrack.sourceId)
}
inline std::string* RadarSurfaceTrack::unsafe_arena_release_sourceid() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.zhichenhaixin.proto.RadarSurfaceTrack.sourceId)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000001u;
  return sourceid_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void RadarSurfaceTrack::unsafe_arena_set_allocated_sourceid(
    std::string* sourceid) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (sourceid != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  sourceid_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      sourceid, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.zhichenhaixin.proto.RadarSurfaceTrack.sourceId)
}

// required uint64 UTC = 3;
inline bool RadarSurfaceTrack::_internal_has_utc() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool RadarSurfaceTrack::has_utc() const {
  return _internal_has_utc();
}
inline void RadarSurfaceTrack::clear_utc() {
  utc_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 RadarSurfaceTrack::_internal_utc() const {
  return utc_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 RadarSurfaceTrack::utc() const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.proto.RadarSurfaceTrack.UTC)
  return _internal_utc();
}
inline void RadarSurfaceTrack::_internal_set_utc(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000008u;
  utc_ = value;
}
inline void RadarSurfaceTrack::set_utc(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_utc(value);
  // @@protoc_insertion_point(field_set:com.zhichenhaixin.proto.RadarSurfaceTrack.UTC)
}

// required int32 length = 4;
inline bool RadarSurfaceTrack::_internal_has_length() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool RadarSurfaceTrack::has_length() const {
  return _internal_has_length();
}
inline void RadarSurfaceTrack::clear_length() {
  length_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RadarSurfaceTrack::_internal_length() const {
  return length_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RadarSurfaceTrack::length() const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.proto.RadarSurfaceTrack.length)
  return _internal_length();
}
inline void RadarSurfaceTrack::_internal_set_length(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000004u;
  length_ = value;
}
inline void RadarSurfaceTrack::set_length(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_length(value);
  // @@protoc_insertion_point(field_set:com.zhichenhaixin.proto.RadarSurfaceTrack.length)
}

// repeated .com.zhichenhaixin.proto.TrackPoint trackPoints = 5;
inline int RadarSurfaceTrack::_internal_trackpoints_size() const {
  return trackpoints_.size();
}
inline int RadarSurfaceTrack::trackpoints_size() const {
  return _internal_trackpoints_size();
}
inline void RadarSurfaceTrack::clear_trackpoints() {
  trackpoints_.Clear();
}
inline ::com::zhichenhaixin::proto::TrackPoint* RadarSurfaceTrack::mutable_trackpoints(int index) {
  // @@protoc_insertion_point(field_mutable:com.zhichenhaixin.proto.RadarSurfaceTrack.trackPoints)
  return trackpoints_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::zhichenhaixin::proto::TrackPoint >*
RadarSurfaceTrack::mutable_trackpoints() {
  // @@protoc_insertion_point(field_mutable_list:com.zhichenhaixin.proto.RadarSurfaceTrack.trackPoints)
  return &trackpoints_;
}
inline const ::com::zhichenhaixin::proto::TrackPoint& RadarSurfaceTrack::_internal_trackpoints(int index) const {
  return trackpoints_.Get(index);
}
inline const ::com::zhichenhaixin::proto::TrackPoint& RadarSurfaceTrack::trackpoints(int index) const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.proto.RadarSurfaceTrack.trackPoints)
  return _internal_trackpoints(index);
}
inline ::com::zhichenhaixin::proto::TrackPoint* RadarSurfaceTrack::_internal_add_trackpoints() {
  return trackpoints_.Add();
}
inline ::com::zhichenhaixin::proto::TrackPoint* RadarSurfaceTrack::add_trackpoints() {
  // @@protoc_insertion_point(field_add:com.zhichenhaixin.proto.RadarSurfaceTrack.trackPoints)
  return _internal_add_trackpoints();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::zhichenhaixin::proto::TrackPoint >&
RadarSurfaceTrack::trackpoints() const {
  // @@protoc_insertion_point(field_list:com.zhichenhaixin.proto.RadarSurfaceTrack.trackPoints)
  return trackpoints_;
}

// -------------------------------------------------------------------

// VideoFrame

// required int32 systemAreaCode = 1;
inline bool VideoFrame::_internal_has_systemareacode() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool VideoFrame::has_systemareacode() const {
  return _internal_has_systemareacode();
}
inline void VideoFrame::clear_systemareacode() {
  systemareacode_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 VideoFrame::_internal_systemareacode() const {
  return systemareacode_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 VideoFrame::systemareacode() const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.proto.VideoFrame.systemAreaCode)
  return _internal_systemareacode();
}
inline void VideoFrame::_internal_set_systemareacode(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000001u;
  systemareacode_ = value;
}
inline void VideoFrame::set_systemareacode(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_systemareacode(value);
  // @@protoc_insertion_point(field_set:com.zhichenhaixin.proto.VideoFrame.systemAreaCode)
}

// required int32 systemIdentificationCode = 2;
inline bool VideoFrame::_internal_has_systemidentificationcode() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool VideoFrame::has_systemidentificationcode() const {
  return _internal_has_systemidentificationcode();
}
inline void VideoFrame::clear_systemidentificationcode() {
  systemidentificationcode_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 VideoFrame::_internal_systemidentificationcode() const {
  return systemidentificationcode_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 VideoFrame::systemidentificationcode() const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.proto.VideoFrame.systemIdentificationCode)
  return _internal_systemidentificationcode();
}
inline void VideoFrame::_internal_set_systemidentificationcode(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  systemidentificationcode_ = value;
}
inline void VideoFrame::set_systemidentificationcode(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_systemidentificationcode(value);
  // @@protoc_insertion_point(field_set:com.zhichenhaixin.proto.VideoFrame.systemIdentificationCode)
}

// required int32 msgIndex = 3;
inline bool VideoFrame::_internal_has_msgindex() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool VideoFrame::has_msgindex() const {
  return _internal_has_msgindex();
}
inline void VideoFrame::clear_msgindex() {
  msgindex_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 VideoFrame::_internal_msgindex() const {
  return msgindex_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 VideoFrame::msgindex() const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.proto.VideoFrame.msgIndex)
  return _internal_msgindex();
}
inline void VideoFrame::_internal_set_msgindex(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000004u;
  msgindex_ = value;
}
inline void VideoFrame::set_msgindex(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_msgindex(value);
  // @@protoc_insertion_point(field_set:com.zhichenhaixin.proto.VideoFrame.msgIndex)
}

// required uint32 azimuth = 4;
inline bool VideoFrame::_internal_has_azimuth() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool VideoFrame::has_azimuth() const {
  return _internal_has_azimuth();
}
inline void VideoFrame::clear_azimuth() {
  azimuth_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 VideoFrame::_internal_azimuth() const {
  return azimuth_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 VideoFrame::azimuth() const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.proto.VideoFrame.azimuth)
  return _internal_azimuth();
}
inline void VideoFrame::_internal_set_azimuth(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000008u;
  azimuth_ = value;
}
inline void VideoFrame::set_azimuth(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_azimuth(value);
  // @@protoc_insertion_point(field_set:com.zhichenhaixin.proto.VideoFrame.azimuth)
}

// optional uint32 heading = 5;
inline bool VideoFrame::_internal_has_heading() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool VideoFrame::has_heading() const {
  return _internal_has_heading();
}
inline void VideoFrame::clear_heading() {
  heading_ = 0u;
  _has_bits_[0] &= ~0x00000040u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 VideoFrame::_internal_heading() const {
  return heading_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 VideoFrame::heading() const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.proto.VideoFrame.heading)
  return _internal_heading();
}
inline void VideoFrame::_internal_set_heading(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000040u;
  heading_ = value;
}
inline void VideoFrame::set_heading(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_heading(value);
  // @@protoc_insertion_point(field_set:com.zhichenhaixin.proto.VideoFrame.heading)
}

// required double startRange = 6;
inline bool VideoFrame::_internal_has_startrange() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool VideoFrame::has_startrange() const {
  return _internal_has_startrange();
}
inline void VideoFrame::clear_startrange() {
  startrange_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline double VideoFrame::_internal_startrange() const {
  return startrange_;
}
inline double VideoFrame::startrange() const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.proto.VideoFrame.startRange)
  return _internal_startrange();
}
inline void VideoFrame::_internal_set_startrange(double value) {
  _has_bits_[0] |= 0x00000010u;
  startrange_ = value;
}
inline void VideoFrame::set_startrange(double value) {
  _internal_set_startrange(value);
  // @@protoc_insertion_point(field_set:com.zhichenhaixin.proto.VideoFrame.startRange)
}

// required double rangeFactor = 7;
inline bool VideoFrame::_internal_has_rangefactor() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool VideoFrame::has_rangefactor() const {
  return _internal_has_rangefactor();
}
inline void VideoFrame::clear_rangefactor() {
  rangefactor_ = 0;
  _has_bits_[0] &= ~0x00000020u;
}
inline double VideoFrame::_internal_rangefactor() const {
  return rangefactor_;
}
inline double VideoFrame::rangefactor() const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.proto.VideoFrame.rangeFactor)
  return _internal_rangefactor();
}
inline void VideoFrame::_internal_set_rangefactor(double value) {
  _has_bits_[0] |= 0x00000020u;
  rangefactor_ = value;
}
inline void VideoFrame::set_rangefactor(double value) {
  _internal_set_rangefactor(value);
  // @@protoc_insertion_point(field_set:com.zhichenhaixin.proto.VideoFrame.rangeFactor)
}

// required .com.zhichenhaixin.proto.RES bitResolution = 8;
inline bool VideoFrame::_internal_has_bitresolution() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool VideoFrame::has_bitresolution() const {
  return _internal_has_bitresolution();
}
inline void VideoFrame::clear_bitresolution() {
  bitresolution_ = 1;
  _has_bits_[0] &= ~0x00000100u;
}
inline ::com::zhichenhaixin::proto::RES VideoFrame::_internal_bitresolution() const {
  return static_cast< ::com::zhichenhaixin::proto::RES >(bitresolution_);
}
inline ::com::zhichenhaixin::proto::RES VideoFrame::bitresolution() const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.proto.VideoFrame.bitResolution)
  return _internal_bitresolution();
}
inline void VideoFrame::_internal_set_bitresolution(::com::zhichenhaixin::proto::RES value) {
  assert(::com::zhichenhaixin::proto::RES_IsValid(value));
  _has_bits_[0] |= 0x00000100u;
  bitresolution_ = value;
}
inline void VideoFrame::set_bitresolution(::com::zhichenhaixin::proto::RES value) {
  _internal_set_bitresolution(value);
  // @@protoc_insertion_point(field_set:com.zhichenhaixin.proto.VideoFrame.bitResolution)
}

// required int32 timeOfDay = 9;
inline bool VideoFrame::_internal_has_timeofday() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool VideoFrame::has_timeofday() const {
  return _internal_has_timeofday();
}
inline void VideoFrame::clear_timeofday() {
  timeofday_ = 0;
  _has_bits_[0] &= ~0x00000080u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 VideoFrame::_internal_timeofday() const {
  return timeofday_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 VideoFrame::timeofday() const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.proto.VideoFrame.timeOfDay)
  return _internal_timeofday();
}
inline void VideoFrame::_internal_set_timeofday(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000080u;
  timeofday_ = value;
}
inline void VideoFrame::set_timeofday(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_timeofday(value);
  // @@protoc_insertion_point(field_set:com.zhichenhaixin.proto.VideoFrame.timeOfDay)
}

// repeated int32 amplitude = 10;
inline int VideoFrame::_internal_amplitude_size() const {
  return amplitude_.size();
}
inline int VideoFrame::amplitude_size() const {
  return _internal_amplitude_size();
}
inline void VideoFrame::clear_amplitude() {
  amplitude_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 VideoFrame::_internal_amplitude(int index) const {
  return amplitude_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int32 VideoFrame::amplitude(int index) const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.proto.VideoFrame.amplitude)
  return _internal_amplitude(index);
}
inline void VideoFrame::set_amplitude(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  amplitude_.Set(index, value);
  // @@protoc_insertion_point(field_set:com.zhichenhaixin.proto.VideoFrame.amplitude)
}
inline void VideoFrame::_internal_add_amplitude(::PROTOBUF_NAMESPACE_ID::int32 value) {
  amplitude_.Add(value);
}
inline void VideoFrame::add_amplitude(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_add_amplitude(value);
  // @@protoc_insertion_point(field_add:com.zhichenhaixin.proto.VideoFrame.amplitude)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
VideoFrame::_internal_amplitude() const {
  return amplitude_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
VideoFrame::amplitude() const {
  // @@protoc_insertion_point(field_list:com.zhichenhaixin.proto.VideoFrame.amplitude)
  return _internal_amplitude();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
VideoFrame::_internal_mutable_amplitude() {
  return &amplitude_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
VideoFrame::mutable_amplitude() {
  // @@protoc_insertion_point(field_mutable_list:com.zhichenhaixin.proto.VideoFrame.amplitude)
  return _internal_mutable_amplitude();
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace zhichenhaixin
}  // namespace com

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::com::zhichenhaixin::proto::MSGTYP> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::com::zhichenhaixin::proto::MSGTYP>() {
  return ::com::zhichenhaixin::proto::MSGTYP_descriptor();
}
template <> struct is_proto_enum< ::com::zhichenhaixin::proto::CNF> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::com::zhichenhaixin::proto::CNF>() {
  return ::com::zhichenhaixin::proto::CNF_descriptor();
}
template <> struct is_proto_enum< ::com::zhichenhaixin::proto::CST> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::com::zhichenhaixin::proto::CST>() {
  return ::com::zhichenhaixin::proto::CST_descriptor();
}
template <> struct is_proto_enum< ::com::zhichenhaixin::proto::STH> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::com::zhichenhaixin::proto::STH>() {
  return ::com::zhichenhaixin::proto::STH_descriptor();
}
template <> struct is_proto_enum< ::com::zhichenhaixin::proto::RES> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::com::zhichenhaixin::proto::RES>() {
  return ::com::zhichenhaixin::proto::RES_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_ZCHXRadar_2eproto
