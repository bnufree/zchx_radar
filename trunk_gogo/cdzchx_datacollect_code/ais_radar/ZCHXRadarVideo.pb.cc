// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ZCHXRadarVideo.proto

#include "ZCHXRadarVideo.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_ZCHXRadarVideo_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_RadarRect_ZCHXRadarVideo_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ZCHXRadarVideo_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_RadarRectDef_ZCHXRadarVideo_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ZCHXRadarVideo_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_pixelPoint_ZCHXRadarVideo_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ZCHXRadarVideo_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_predictionArea_ZCHXRadarVideo_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_ZCHXRadarVideo_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_singleVideoBlock_ZCHXRadarVideo_2eproto;
namespace com {
namespace zhichenhaixin {
namespace proto {
class singleVideoBlockDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<singleVideoBlock> _instance;
} _singleVideoBlock_default_instance_;
class pixelPointDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<pixelPoint> _instance;
} _pixelPoint_default_instance_;
class fixRectPixelImgDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<fixRectPixelImg> _instance;
} _fixRectPixelImg_default_instance_;
class predictionAreaDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<predictionArea> _instance;
} _predictionArea_default_instance_;
class RadarRectDefDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RadarRectDef> _instance;
} _RadarRectDef_default_instance_;
class RadarRectDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RadarRect> _instance;
} _RadarRect_default_instance_;
class RadarRectsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RadarRects> _instance;
} _RadarRects_default_instance_;
class RadarVideoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RadarVideo> _instance;
} _RadarVideo_default_instance_;
class RadarVideoPointDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RadarVideoPoint> _instance;
} _RadarVideoPoint_default_instance_;
}  // namespace proto
}  // namespace zhichenhaixin
}  // namespace com
static void InitDefaultsscc_info_RadarRect_ZCHXRadarVideo_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::zhichenhaixin::proto::_RadarRect_default_instance_;
    new (ptr) ::com::zhichenhaixin::proto::RadarRect();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::zhichenhaixin::proto::RadarRect::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_RadarRect_ZCHXRadarVideo_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_RadarRect_ZCHXRadarVideo_2eproto}, {
      &scc_info_RadarRectDef_ZCHXRadarVideo_2eproto.base,}};

static void InitDefaultsscc_info_RadarRectDef_ZCHXRadarVideo_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::zhichenhaixin::proto::_RadarRectDef_default_instance_;
    new (ptr) ::com::zhichenhaixin::proto::RadarRectDef();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::zhichenhaixin::proto::RadarRectDef::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<3> scc_info_RadarRectDef_ZCHXRadarVideo_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 3, 0, InitDefaultsscc_info_RadarRectDef_ZCHXRadarVideo_2eproto}, {
      &scc_info_singleVideoBlock_ZCHXRadarVideo_2eproto.base,
      &scc_info_pixelPoint_ZCHXRadarVideo_2eproto.base,
      &scc_info_predictionArea_ZCHXRadarVideo_2eproto.base,}};

static void InitDefaultsscc_info_RadarRects_ZCHXRadarVideo_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::zhichenhaixin::proto::_RadarRects_default_instance_;
    new (ptr) ::com::zhichenhaixin::proto::RadarRects();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::zhichenhaixin::proto::RadarRects::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_RadarRects_ZCHXRadarVideo_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_RadarRects_ZCHXRadarVideo_2eproto}, {
      &scc_info_RadarRect_ZCHXRadarVideo_2eproto.base,}};

static void InitDefaultsscc_info_RadarVideo_ZCHXRadarVideo_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::zhichenhaixin::proto::_RadarVideo_default_instance_;
    new (ptr) ::com::zhichenhaixin::proto::RadarVideo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::zhichenhaixin::proto::RadarVideo::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RadarVideo_ZCHXRadarVideo_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_RadarVideo_ZCHXRadarVideo_2eproto}, {}};

static void InitDefaultsscc_info_RadarVideoPoint_ZCHXRadarVideo_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::zhichenhaixin::proto::_RadarVideoPoint_default_instance_;
    new (ptr) ::com::zhichenhaixin::proto::RadarVideoPoint();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::zhichenhaixin::proto::RadarVideoPoint::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_RadarVideoPoint_ZCHXRadarVideo_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_RadarVideoPoint_ZCHXRadarVideo_2eproto}, {}};

static void InitDefaultsscc_info_fixRectPixelImg_ZCHXRadarVideo_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::zhichenhaixin::proto::_fixRectPixelImg_default_instance_;
    new (ptr) ::com::zhichenhaixin::proto::fixRectPixelImg();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::zhichenhaixin::proto::fixRectPixelImg::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_fixRectPixelImg_ZCHXRadarVideo_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_fixRectPixelImg_ZCHXRadarVideo_2eproto}, {
      &scc_info_pixelPoint_ZCHXRadarVideo_2eproto.base,}};

static void InitDefaultsscc_info_pixelPoint_ZCHXRadarVideo_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::zhichenhaixin::proto::_pixelPoint_default_instance_;
    new (ptr) ::com::zhichenhaixin::proto::pixelPoint();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::zhichenhaixin::proto::pixelPoint::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_pixelPoint_ZCHXRadarVideo_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_pixelPoint_ZCHXRadarVideo_2eproto}, {}};

static void InitDefaultsscc_info_predictionArea_ZCHXRadarVideo_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::zhichenhaixin::proto::_predictionArea_default_instance_;
    new (ptr) ::com::zhichenhaixin::proto::predictionArea();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::zhichenhaixin::proto::predictionArea::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_predictionArea_ZCHXRadarVideo_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_predictionArea_ZCHXRadarVideo_2eproto}, {
      &scc_info_singleVideoBlock_ZCHXRadarVideo_2eproto.base,}};

static void InitDefaultsscc_info_singleVideoBlock_ZCHXRadarVideo_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::com::zhichenhaixin::proto::_singleVideoBlock_default_instance_;
    new (ptr) ::com::zhichenhaixin::proto::singleVideoBlock();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::com::zhichenhaixin::proto::singleVideoBlock::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_singleVideoBlock_ZCHXRadarVideo_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_singleVideoBlock_ZCHXRadarVideo_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_ZCHXRadarVideo_2eproto[9];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_ZCHXRadarVideo_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_ZCHXRadarVideo_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_ZCHXRadarVideo_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::com::zhichenhaixin::proto::singleVideoBlock, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::com::zhichenhaixin::proto::singleVideoBlock, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::com::zhichenhaixin::proto::singleVideoBlock, latitude_),
  PROTOBUF_FIELD_OFFSET(::com::zhichenhaixin::proto::singleVideoBlock, longitude_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::com::zhichenhaixin::proto::pixelPoint, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::com::zhichenhaixin::proto::pixelPoint, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::com::zhichenhaixin::proto::pixelPoint, x_),
  PROTOBUF_FIELD_OFFSET(::com::zhichenhaixin::proto::pixelPoint, y_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::com::zhichenhaixin::proto::fixRectPixelImg, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::com::zhichenhaixin::proto::fixRectPixelImg, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::com::zhichenhaixin::proto::fixRectPixelImg, width_),
  PROTOBUF_FIELD_OFFSET(::com::zhichenhaixin::proto::fixRectPixelImg, height_),
  PROTOBUF_FIELD_OFFSET(::com::zhichenhaixin::proto::fixRectPixelImg, points_),
  0,
  1,
  ~0u,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::com::zhichenhaixin::proto::predictionArea, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::com::zhichenhaixin::proto::predictionArea, area_),
  PROTOBUF_FIELD_OFFSET(::com::zhichenhaixin::proto::RadarRectDef, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::com::zhichenhaixin::proto::RadarRectDef, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::com::zhichenhaixin::proto::RadarRectDef, rectnumber_),
  PROTOBUF_FIELD_OFFSET(::com::zhichenhaixin::proto::RadarRectDef, topleftlatitude_),
  PROTOBUF_FIELD_OFFSET(::com::zhichenhaixin::proto::RadarRectDef, topleftlongitude_),
  PROTOBUF_FIELD_OFFSET(::com::zhichenhaixin::proto::RadarRectDef, bottomrightlatitude_),
  PROTOBUF_FIELD_OFFSET(::com::zhichenhaixin::proto::RadarRectDef, bottomrightlongitude_),
  PROTOBUF_FIELD_OFFSET(::com::zhichenhaixin::proto::RadarRectDef, centerlatitude_),
  PROTOBUF_FIELD_OFFSET(::com::zhichenhaixin::proto::RadarRectDef, centerlongitude_),
  PROTOBUF_FIELD_OFFSET(::com::zhichenhaixin::proto::RadarRectDef, updatetime_),
  PROTOBUF_FIELD_OFFSET(::com::zhichenhaixin::proto::RadarRectDef, diameter_),
  PROTOBUF_FIELD_OFFSET(::com::zhichenhaixin::proto::RadarRectDef, blocks_),
  PROTOBUF_FIELD_OFFSET(::com::zhichenhaixin::proto::RadarRectDef, startlatitude_),
  PROTOBUF_FIELD_OFFSET(::com::zhichenhaixin::proto::RadarRectDef, startlongitude_),
  PROTOBUF_FIELD_OFFSET(::com::zhichenhaixin::proto::RadarRectDef, endlatitude_),
  PROTOBUF_FIELD_OFFSET(::com::zhichenhaixin::proto::RadarRectDef, endlongitude_),
  PROTOBUF_FIELD_OFFSET(::com::zhichenhaixin::proto::RadarRectDef, angle_),
  PROTOBUF_FIELD_OFFSET(::com::zhichenhaixin::proto::RadarRectDef, sog_),
  PROTOBUF_FIELD_OFFSET(::com::zhichenhaixin::proto::RadarRectDef, cog_),
  PROTOBUF_FIELD_OFFSET(::com::zhichenhaixin::proto::RadarRectDef, pixelpnts_),
  PROTOBUF_FIELD_OFFSET(::com::zhichenhaixin::proto::RadarRectDef, realdata_),
  PROTOBUF_FIELD_OFFSET(::com::zhichenhaixin::proto::RadarRectDef, predictionareas_),
  3,
  0,
  1,
  2,
  5,
  6,
  7,
  4,
  12,
  ~0u,
  8,
  9,
  10,
  11,
  14,
  15,
  16,
  ~0u,
  13,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::com::zhichenhaixin::proto::RadarRect, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::com::zhichenhaixin::proto::RadarRect, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::com::zhichenhaixin::proto::RadarRect, currentrect_),
  PROTOBUF_FIELD_OFFSET(::com::zhichenhaixin::proto::RadarRect, historyrects_),
  PROTOBUF_FIELD_OFFSET(::com::zhichenhaixin::proto::RadarRect, dirconfirmed_),
  PROTOBUF_FIELD_OFFSET(::com::zhichenhaixin::proto::RadarRect, estcount_),
  0,
  ~0u,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::com::zhichenhaixin::proto::RadarRects, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::com::zhichenhaixin::proto::RadarRects, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::com::zhichenhaixin::proto::RadarRects, utc_),
  PROTOBUF_FIELD_OFFSET(::com::zhichenhaixin::proto::RadarRects, length_),
  PROTOBUF_FIELD_OFFSET(::com::zhichenhaixin::proto::RadarRects, rects_),
  0,
  1,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::com::zhichenhaixin::proto::RadarVideo, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::com::zhichenhaixin::proto::RadarVideo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::com::zhichenhaixin::proto::RadarVideo, radarid_),
  PROTOBUF_FIELD_OFFSET(::com::zhichenhaixin::proto::RadarVideo, radarname_),
  PROTOBUF_FIELD_OFFSET(::com::zhichenhaixin::proto::RadarVideo, latitude_),
  PROTOBUF_FIELD_OFFSET(::com::zhichenhaixin::proto::RadarVideo, longitude_),
  PROTOBUF_FIELD_OFFSET(::com::zhichenhaixin::proto::RadarVideo, utc_),
  PROTOBUF_FIELD_OFFSET(::com::zhichenhaixin::proto::RadarVideo, imagedata_),
  PROTOBUF_FIELD_OFFSET(::com::zhichenhaixin::proto::RadarVideo, curimagedata_),
  PROTOBUF_FIELD_OFFSET(::com::zhichenhaixin::proto::RadarVideo, preimagedata_),
  PROTOBUF_FIELD_OFFSET(::com::zhichenhaixin::proto::RadarVideo, width_),
  PROTOBUF_FIELD_OFFSET(::com::zhichenhaixin::proto::RadarVideo, height_),
  PROTOBUF_FIELD_OFFSET(::com::zhichenhaixin::proto::RadarVideo, radius_),
  PROTOBUF_FIELD_OFFSET(::com::zhichenhaixin::proto::RadarVideo, curindex_),
  PROTOBUF_FIELD_OFFSET(::com::zhichenhaixin::proto::RadarVideo, loopnum_),
  4,
  0,
  5,
  6,
  7,
  1,
  2,
  3,
  8,
  9,
  10,
  11,
  12,
  PROTOBUF_FIELD_OFFSET(::com::zhichenhaixin::proto::RadarVideoPoint, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::com::zhichenhaixin::proto::RadarVideoPoint, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::com::zhichenhaixin::proto::RadarVideoPoint, radarname_),
  PROTOBUF_FIELD_OFFSET(::com::zhichenhaixin::proto::RadarVideoPoint, latitude_),
  PROTOBUF_FIELD_OFFSET(::com::zhichenhaixin::proto::RadarVideoPoint, longitude_),
  PROTOBUF_FIELD_OFFSET(::com::zhichenhaixin::proto::RadarVideoPoint, utc_),
  PROTOBUF_FIELD_OFFSET(::com::zhichenhaixin::proto::RadarVideoPoint, imagedata_),
  PROTOBUF_FIELD_OFFSET(::com::zhichenhaixin::proto::RadarVideoPoint, preimagedata_),
  PROTOBUF_FIELD_OFFSET(::com::zhichenhaixin::proto::RadarVideoPoint, width_),
  PROTOBUF_FIELD_OFFSET(::com::zhichenhaixin::proto::RadarVideoPoint, height_),
  PROTOBUF_FIELD_OFFSET(::com::zhichenhaixin::proto::RadarVideoPoint, radius_),
  PROTOBUF_FIELD_OFFSET(::com::zhichenhaixin::proto::RadarVideoPoint, curindex_),
  PROTOBUF_FIELD_OFFSET(::com::zhichenhaixin::proto::RadarVideoPoint, loopnum_),
  0,
  3,
  4,
  5,
  1,
  2,
  6,
  7,
  8,
  9,
  10,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 7, sizeof(::com::zhichenhaixin::proto::singleVideoBlock)},
  { 9, 16, sizeof(::com::zhichenhaixin::proto::pixelPoint)},
  { 18, 26, sizeof(::com::zhichenhaixin::proto::fixRectPixelImg)},
  { 29, -1, sizeof(::com::zhichenhaixin::proto::predictionArea)},
  { 35, 60, sizeof(::com::zhichenhaixin::proto::RadarRectDef)},
  { 80, 89, sizeof(::com::zhichenhaixin::proto::RadarRect)},
  { 93, 101, sizeof(::com::zhichenhaixin::proto::RadarRects)},
  { 104, 122, sizeof(::com::zhichenhaixin::proto::RadarVideo)},
  { 135, 151, sizeof(::com::zhichenhaixin::proto::RadarVideoPoint)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::com::zhichenhaixin::proto::_singleVideoBlock_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::com::zhichenhaixin::proto::_pixelPoint_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::com::zhichenhaixin::proto::_fixRectPixelImg_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::com::zhichenhaixin::proto::_predictionArea_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::com::zhichenhaixin::proto::_RadarRectDef_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::com::zhichenhaixin::proto::_RadarRect_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::com::zhichenhaixin::proto::_RadarRects_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::com::zhichenhaixin::proto::_RadarVideo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::com::zhichenhaixin::proto::_RadarVideoPoint_default_instance_),
};

const char descriptor_table_protodef_ZCHXRadarVideo_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\024ZCHXRadarVideo.proto\022\027com.zhichenhaixi"
  "n.proto\"7\n\020singleVideoBlock\022\020\n\010latitude\030"
  "\001 \002(\001\022\021\n\tlongitude\030\002 \002(\001\"\"\n\npixelPoint\022\t"
  "\n\001x\030\001 \002(\r\022\t\n\001y\030\002 \002(\r\"e\n\017fixRectPixelImg\022"
  "\r\n\005width\030\001 \002(\r\022\016\n\006height\030\002 \002(\r\0223\n\006points"
  "\030\003 \003(\0132#.com.zhichenhaixin.proto.pixelPo"
  "int\"I\n\016predictionArea\0227\n\004area\030\001 \003(\0132).co"
  "m.zhichenhaixin.proto.singleVideoBlock\"\261"
  "\004\n\014RadarRectDef\022\022\n\nrectNumber\030\001 \002(\r\022\027\n\017t"
  "opLeftlatitude\030\002 \002(\001\022\030\n\020topLeftlongitude"
  "\030\003 \002(\001\022\033\n\023bottomRightlatitude\030\004 \002(\001\022\034\n\024b"
  "ottomRightlongitude\030\005 \002(\001\022\026\n\016centerlatit"
  "ude\030\006 \002(\001\022\027\n\017centerlongitude\030\007 \002(\001\022\022\n\nup"
  "dateTime\030\010 \002(\r\022\020\n\010diameter\030\t \001(\005\0229\n\006Bloc"
  "ks\030\n \003(\0132).com.zhichenhaixin.proto.singl"
  "eVideoBlock\022\025\n\rstartlatitude\030\013 \001(\001\022\026\n\016st"
  "artlongitude\030\014 \001(\001\022\023\n\013endlatitude\030\r \001(\001\022"
  "\024\n\014endlongitude\030\016 \001(\001\022\r\n\005angle\030\017 \001(\001\022\013\n\003"
  "sog\030\020 \002(\001\022\013\n\003cog\030\021 \002(\001\0226\n\tpixelPnts\030\022 \003("
  "\0132#.com.zhichenhaixin.proto.pixelPoint\022\020"
  "\n\010realData\030\023 \002(\010\022@\n\017predictionAreas\030\024 \003("
  "\0132\'.com.zhichenhaixin.proto.predictionAr"
  "ea\"\254\001\n\tRadarRect\022:\n\013currentRect\030\001 \002(\0132%."
  "com.zhichenhaixin.proto.RadarRectDef\022;\n\014"
  "historyRects\030\002 \003(\0132%.com.zhichenhaixin.p"
  "roto.RadarRectDef\022\024\n\014dirConfirmed\030\003 \002(\010\022"
  "\020\n\010estcount\030\004 \002(\r\"\\\n\nRadarRects\022\013\n\003UTC\030\001"
  " \002(\004\022\016\n\006length\030\002 \002(\005\0221\n\005rects\030\003 \003(\0132\".co"
  "m.zhichenhaixin.proto.RadarRect\"\363\001\n\nRada"
  "rVideo\022\017\n\007radarId\030\001 \002(\004\022\021\n\tradarName\030\002 \002"
  "(\t\022\020\n\010latitude\030\003 \002(\001\022\021\n\tlongitude\030\004 \002(\001\022"
  "\013\n\003UTC\030\005 \002(\004\022\021\n\timageData\030\006 \002(\014\022\024\n\014curIm"
  "ageData\030\007 \002(\014\022\024\n\014preImageData\030\010 \002(\014\022\r\n\005w"
  "idth\030\t \002(\r\022\016\n\006height\030\n \002(\r\022\016\n\006radius\030\013 \002"
  "(\001\022\020\n\010curIndex\030\014 \002(\r\022\017\n\007loopNum\030\r \002(\r\"\321\001"
  "\n\017RadarVideoPoint\022\021\n\tradarName\030\002 \002(\t\022\020\n\010"
  "latitude\030\003 \002(\001\022\021\n\tlongitude\030\004 \002(\001\022\013\n\003UTC"
  "\030\005 \002(\004\022\021\n\timageData\030\006 \002(\014\022\024\n\014preImageDat"
  "a\030\007 \002(\014\022\r\n\005width\030\010 \002(\r\022\016\n\006height\030\t \002(\r\022\016"
  "\n\006radius\030\n \002(\001\022\020\n\010curIndex\030\013 \002(\r\022\017\n\007loop"
  "Num\030\014 \002(\r"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_ZCHXRadarVideo_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_ZCHXRadarVideo_2eproto_sccs[9] = {
  &scc_info_RadarRect_ZCHXRadarVideo_2eproto.base,
  &scc_info_RadarRectDef_ZCHXRadarVideo_2eproto.base,
  &scc_info_RadarRects_ZCHXRadarVideo_2eproto.base,
  &scc_info_RadarVideo_ZCHXRadarVideo_2eproto.base,
  &scc_info_RadarVideoPoint_ZCHXRadarVideo_2eproto.base,
  &scc_info_fixRectPixelImg_ZCHXRadarVideo_2eproto.base,
  &scc_info_pixelPoint_ZCHXRadarVideo_2eproto.base,
  &scc_info_predictionArea_ZCHXRadarVideo_2eproto.base,
  &scc_info_singleVideoBlock_ZCHXRadarVideo_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_ZCHXRadarVideo_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_ZCHXRadarVideo_2eproto = {
  false, false, descriptor_table_protodef_ZCHXRadarVideo_2eproto, "ZCHXRadarVideo.proto", 1609,
  &descriptor_table_ZCHXRadarVideo_2eproto_once, descriptor_table_ZCHXRadarVideo_2eproto_sccs, descriptor_table_ZCHXRadarVideo_2eproto_deps, 9, 0,
  schemas, file_default_instances, TableStruct_ZCHXRadarVideo_2eproto::offsets,
  file_level_metadata_ZCHXRadarVideo_2eproto, 9, file_level_enum_descriptors_ZCHXRadarVideo_2eproto, file_level_service_descriptors_ZCHXRadarVideo_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_ZCHXRadarVideo_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_ZCHXRadarVideo_2eproto)), true);
namespace com {
namespace zhichenhaixin {
namespace proto {

// ===================================================================

void singleVideoBlock::InitAsDefaultInstance() {
}
class singleVideoBlock::_Internal {
 public:
  using HasBits = decltype(std::declval<singleVideoBlock>()._has_bits_);
  static void set_has_latitude(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_longitude(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

singleVideoBlock::singleVideoBlock(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.zhichenhaixin.proto.singleVideoBlock)
}
singleVideoBlock::singleVideoBlock(const singleVideoBlock& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&latitude_, &from.latitude_,
    static_cast<size_t>(reinterpret_cast<char*>(&longitude_) -
    reinterpret_cast<char*>(&latitude_)) + sizeof(longitude_));
  // @@protoc_insertion_point(copy_constructor:com.zhichenhaixin.proto.singleVideoBlock)
}

void singleVideoBlock::SharedCtor() {
  ::memset(&latitude_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&longitude_) -
      reinterpret_cast<char*>(&latitude_)) + sizeof(longitude_));
}

singleVideoBlock::~singleVideoBlock() {
  // @@protoc_insertion_point(destructor:com.zhichenhaixin.proto.singleVideoBlock)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void singleVideoBlock::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void singleVideoBlock::ArenaDtor(void* object) {
  singleVideoBlock* _this = reinterpret_cast< singleVideoBlock* >(object);
  (void)_this;
}
void singleVideoBlock::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void singleVideoBlock::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const singleVideoBlock& singleVideoBlock::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_singleVideoBlock_ZCHXRadarVideo_2eproto.base);
  return *internal_default_instance();
}


void singleVideoBlock::Clear() {
// @@protoc_insertion_point(message_clear_start:com.zhichenhaixin.proto.singleVideoBlock)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&latitude_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&longitude_) -
        reinterpret_cast<char*>(&latitude_)) + sizeof(longitude_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* singleVideoBlock::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required double latitude = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 9)) {
          _Internal::set_has_latitude(&has_bits);
          latitude_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // required double longitude = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          _Internal::set_has_longitude(&has_bits);
          longitude_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* singleVideoBlock::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.zhichenhaixin.proto.singleVideoBlock)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required double latitude = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(1, this->_internal_latitude(), target);
  }

  // required double longitude = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_longitude(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.zhichenhaixin.proto.singleVideoBlock)
  return target;
}

size_t singleVideoBlock::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:com.zhichenhaixin.proto.singleVideoBlock)
  size_t total_size = 0;

  if (_internal_has_latitude()) {
    // required double latitude = 1;
    total_size += 1 + 8;
  }

  if (_internal_has_longitude()) {
    // required double longitude = 2;
    total_size += 1 + 8;
  }

  return total_size;
}
size_t singleVideoBlock::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.zhichenhaixin.proto.singleVideoBlock)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required double latitude = 1;
    total_size += 1 + 8;

    // required double longitude = 2;
    total_size += 1 + 8;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void singleVideoBlock::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.zhichenhaixin.proto.singleVideoBlock)
  GOOGLE_DCHECK_NE(&from, this);
  const singleVideoBlock* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<singleVideoBlock>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.zhichenhaixin.proto.singleVideoBlock)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.zhichenhaixin.proto.singleVideoBlock)
    MergeFrom(*source);
  }
}

void singleVideoBlock::MergeFrom(const singleVideoBlock& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.zhichenhaixin.proto.singleVideoBlock)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      latitude_ = from.latitude_;
    }
    if (cached_has_bits & 0x00000002u) {
      longitude_ = from.longitude_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void singleVideoBlock::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.zhichenhaixin.proto.singleVideoBlock)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void singleVideoBlock::CopyFrom(const singleVideoBlock& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.zhichenhaixin.proto.singleVideoBlock)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool singleVideoBlock::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void singleVideoBlock::InternalSwap(singleVideoBlock* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(singleVideoBlock, longitude_)
      + sizeof(singleVideoBlock::longitude_)
      - PROTOBUF_FIELD_OFFSET(singleVideoBlock, latitude_)>(
          reinterpret_cast<char*>(&latitude_),
          reinterpret_cast<char*>(&other->latitude_));
}

::PROTOBUF_NAMESPACE_ID::Metadata singleVideoBlock::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void pixelPoint::InitAsDefaultInstance() {
}
class pixelPoint::_Internal {
 public:
  using HasBits = decltype(std::declval<pixelPoint>()._has_bits_);
  static void set_has_x(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_y(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

pixelPoint::pixelPoint(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.zhichenhaixin.proto.pixelPoint)
}
pixelPoint::pixelPoint(const pixelPoint& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&x_, &from.x_,
    static_cast<size_t>(reinterpret_cast<char*>(&y_) -
    reinterpret_cast<char*>(&x_)) + sizeof(y_));
  // @@protoc_insertion_point(copy_constructor:com.zhichenhaixin.proto.pixelPoint)
}

void pixelPoint::SharedCtor() {
  ::memset(&x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&y_) -
      reinterpret_cast<char*>(&x_)) + sizeof(y_));
}

pixelPoint::~pixelPoint() {
  // @@protoc_insertion_point(destructor:com.zhichenhaixin.proto.pixelPoint)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void pixelPoint::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void pixelPoint::ArenaDtor(void* object) {
  pixelPoint* _this = reinterpret_cast< pixelPoint* >(object);
  (void)_this;
}
void pixelPoint::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void pixelPoint::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const pixelPoint& pixelPoint::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_pixelPoint_ZCHXRadarVideo_2eproto.base);
  return *internal_default_instance();
}


void pixelPoint::Clear() {
// @@protoc_insertion_point(message_clear_start:com.zhichenhaixin.proto.pixelPoint)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&x_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&y_) -
        reinterpret_cast<char*>(&x_)) + sizeof(y_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* pixelPoint::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required uint32 x = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_x(&has_bits);
          x_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 y = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_y(&has_bits);
          y_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* pixelPoint::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.zhichenhaixin.proto.pixelPoint)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 x = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_x(), target);
  }

  // required uint32 y = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_y(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.zhichenhaixin.proto.pixelPoint)
  return target;
}

size_t pixelPoint::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:com.zhichenhaixin.proto.pixelPoint)
  size_t total_size = 0;

  if (_internal_has_x()) {
    // required uint32 x = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_x());
  }

  if (_internal_has_y()) {
    // required uint32 y = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_y());
  }

  return total_size;
}
size_t pixelPoint::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.zhichenhaixin.proto.pixelPoint)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required uint32 x = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_x());

    // required uint32 y = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_y());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void pixelPoint::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.zhichenhaixin.proto.pixelPoint)
  GOOGLE_DCHECK_NE(&from, this);
  const pixelPoint* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<pixelPoint>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.zhichenhaixin.proto.pixelPoint)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.zhichenhaixin.proto.pixelPoint)
    MergeFrom(*source);
  }
}

void pixelPoint::MergeFrom(const pixelPoint& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.zhichenhaixin.proto.pixelPoint)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      x_ = from.x_;
    }
    if (cached_has_bits & 0x00000002u) {
      y_ = from.y_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void pixelPoint::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.zhichenhaixin.proto.pixelPoint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void pixelPoint::CopyFrom(const pixelPoint& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.zhichenhaixin.proto.pixelPoint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool pixelPoint::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void pixelPoint::InternalSwap(pixelPoint* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(pixelPoint, y_)
      + sizeof(pixelPoint::y_)
      - PROTOBUF_FIELD_OFFSET(pixelPoint, x_)>(
          reinterpret_cast<char*>(&x_),
          reinterpret_cast<char*>(&other->x_));
}

::PROTOBUF_NAMESPACE_ID::Metadata pixelPoint::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void fixRectPixelImg::InitAsDefaultInstance() {
}
class fixRectPixelImg::_Internal {
 public:
  using HasBits = decltype(std::declval<fixRectPixelImg>()._has_bits_);
  static void set_has_width(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_height(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

fixRectPixelImg::fixRectPixelImg(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  points_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.zhichenhaixin.proto.fixRectPixelImg)
}
fixRectPixelImg::fixRectPixelImg(const fixRectPixelImg& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      points_(from.points_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&width_, &from.width_,
    static_cast<size_t>(reinterpret_cast<char*>(&height_) -
    reinterpret_cast<char*>(&width_)) + sizeof(height_));
  // @@protoc_insertion_point(copy_constructor:com.zhichenhaixin.proto.fixRectPixelImg)
}

void fixRectPixelImg::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_fixRectPixelImg_ZCHXRadarVideo_2eproto.base);
  ::memset(&width_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&height_) -
      reinterpret_cast<char*>(&width_)) + sizeof(height_));
}

fixRectPixelImg::~fixRectPixelImg() {
  // @@protoc_insertion_point(destructor:com.zhichenhaixin.proto.fixRectPixelImg)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void fixRectPixelImg::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void fixRectPixelImg::ArenaDtor(void* object) {
  fixRectPixelImg* _this = reinterpret_cast< fixRectPixelImg* >(object);
  (void)_this;
}
void fixRectPixelImg::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void fixRectPixelImg::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const fixRectPixelImg& fixRectPixelImg::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_fixRectPixelImg_ZCHXRadarVideo_2eproto.base);
  return *internal_default_instance();
}


void fixRectPixelImg::Clear() {
// @@protoc_insertion_point(message_clear_start:com.zhichenhaixin.proto.fixRectPixelImg)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  points_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&width_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&height_) -
        reinterpret_cast<char*>(&width_)) + sizeof(height_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* fixRectPixelImg::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required uint32 width = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_width(&has_bits);
          width_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 height = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_height(&has_bits);
          height_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .com.zhichenhaixin.proto.pixelPoint points = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_points(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* fixRectPixelImg::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.zhichenhaixin.proto.fixRectPixelImg)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 width = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_width(), target);
  }

  // required uint32 height = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_height(), target);
  }

  // repeated .com.zhichenhaixin.proto.pixelPoint points = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_points_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_points(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.zhichenhaixin.proto.fixRectPixelImg)
  return target;
}

size_t fixRectPixelImg::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:com.zhichenhaixin.proto.fixRectPixelImg)
  size_t total_size = 0;

  if (_internal_has_width()) {
    // required uint32 width = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_width());
  }

  if (_internal_has_height()) {
    // required uint32 height = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_height());
  }

  return total_size;
}
size_t fixRectPixelImg::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.zhichenhaixin.proto.fixRectPixelImg)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required uint32 width = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_width());

    // required uint32 height = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_height());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .com.zhichenhaixin.proto.pixelPoint points = 3;
  total_size += 1UL * this->_internal_points_size();
  for (const auto& msg : this->points_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void fixRectPixelImg::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.zhichenhaixin.proto.fixRectPixelImg)
  GOOGLE_DCHECK_NE(&from, this);
  const fixRectPixelImg* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<fixRectPixelImg>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.zhichenhaixin.proto.fixRectPixelImg)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.zhichenhaixin.proto.fixRectPixelImg)
    MergeFrom(*source);
  }
}

void fixRectPixelImg::MergeFrom(const fixRectPixelImg& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.zhichenhaixin.proto.fixRectPixelImg)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  points_.MergeFrom(from.points_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      width_ = from.width_;
    }
    if (cached_has_bits & 0x00000002u) {
      height_ = from.height_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void fixRectPixelImg::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.zhichenhaixin.proto.fixRectPixelImg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void fixRectPixelImg::CopyFrom(const fixRectPixelImg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.zhichenhaixin.proto.fixRectPixelImg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool fixRectPixelImg::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(points_)) return false;
  return true;
}

void fixRectPixelImg::InternalSwap(fixRectPixelImg* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  points_.InternalSwap(&other->points_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(fixRectPixelImg, height_)
      + sizeof(fixRectPixelImg::height_)
      - PROTOBUF_FIELD_OFFSET(fixRectPixelImg, width_)>(
          reinterpret_cast<char*>(&width_),
          reinterpret_cast<char*>(&other->width_));
}

::PROTOBUF_NAMESPACE_ID::Metadata fixRectPixelImg::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void predictionArea::InitAsDefaultInstance() {
}
class predictionArea::_Internal {
 public:
};

predictionArea::predictionArea(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  area_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.zhichenhaixin.proto.predictionArea)
}
predictionArea::predictionArea(const predictionArea& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      area_(from.area_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:com.zhichenhaixin.proto.predictionArea)
}

void predictionArea::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_predictionArea_ZCHXRadarVideo_2eproto.base);
}

predictionArea::~predictionArea() {
  // @@protoc_insertion_point(destructor:com.zhichenhaixin.proto.predictionArea)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void predictionArea::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void predictionArea::ArenaDtor(void* object) {
  predictionArea* _this = reinterpret_cast< predictionArea* >(object);
  (void)_this;
}
void predictionArea::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void predictionArea::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const predictionArea& predictionArea::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_predictionArea_ZCHXRadarVideo_2eproto.base);
  return *internal_default_instance();
}


void predictionArea::Clear() {
// @@protoc_insertion_point(message_clear_start:com.zhichenhaixin.proto.predictionArea)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  area_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* predictionArea::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .com.zhichenhaixin.proto.singleVideoBlock area = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_area(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* predictionArea::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.zhichenhaixin.proto.predictionArea)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .com.zhichenhaixin.proto.singleVideoBlock area = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_area_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_area(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.zhichenhaixin.proto.predictionArea)
  return target;
}

size_t predictionArea::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.zhichenhaixin.proto.predictionArea)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .com.zhichenhaixin.proto.singleVideoBlock area = 1;
  total_size += 1UL * this->_internal_area_size();
  for (const auto& msg : this->area_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void predictionArea::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.zhichenhaixin.proto.predictionArea)
  GOOGLE_DCHECK_NE(&from, this);
  const predictionArea* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<predictionArea>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.zhichenhaixin.proto.predictionArea)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.zhichenhaixin.proto.predictionArea)
    MergeFrom(*source);
  }
}

void predictionArea::MergeFrom(const predictionArea& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.zhichenhaixin.proto.predictionArea)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  area_.MergeFrom(from.area_);
}

void predictionArea::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.zhichenhaixin.proto.predictionArea)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void predictionArea::CopyFrom(const predictionArea& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.zhichenhaixin.proto.predictionArea)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool predictionArea::IsInitialized() const {
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(area_)) return false;
  return true;
}

void predictionArea::InternalSwap(predictionArea* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  area_.InternalSwap(&other->area_);
}

::PROTOBUF_NAMESPACE_ID::Metadata predictionArea::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RadarRectDef::InitAsDefaultInstance() {
}
class RadarRectDef::_Internal {
 public:
  using HasBits = decltype(std::declval<RadarRectDef>()._has_bits_);
  static void set_has_rectnumber(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_topleftlatitude(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_topleftlongitude(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_bottomrightlatitude(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_bottomrightlongitude(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_centerlatitude(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_centerlongitude(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_updatetime(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_diameter(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_startlatitude(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_startlongitude(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_endlatitude(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_endlongitude(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_angle(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static void set_has_sog(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static void set_has_cog(HasBits* has_bits) {
    (*has_bits)[0] |= 65536u;
  }
  static void set_has_realdata(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x0001a0ff) ^ 0x0001a0ff) != 0;
  }
};

RadarRectDef::RadarRectDef(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  blocks_(arena),
  pixelpnts_(arena),
  predictionareas_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.zhichenhaixin.proto.RadarRectDef)
}
RadarRectDef::RadarRectDef(const RadarRectDef& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      blocks_(from.blocks_),
      pixelpnts_(from.pixelpnts_),
      predictionareas_(from.predictionareas_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&topleftlatitude_, &from.topleftlatitude_,
    static_cast<size_t>(reinterpret_cast<char*>(&cog_) -
    reinterpret_cast<char*>(&topleftlatitude_)) + sizeof(cog_));
  // @@protoc_insertion_point(copy_constructor:com.zhichenhaixin.proto.RadarRectDef)
}

void RadarRectDef::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_RadarRectDef_ZCHXRadarVideo_2eproto.base);
  ::memset(&topleftlatitude_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&cog_) -
      reinterpret_cast<char*>(&topleftlatitude_)) + sizeof(cog_));
}

RadarRectDef::~RadarRectDef() {
  // @@protoc_insertion_point(destructor:com.zhichenhaixin.proto.RadarRectDef)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void RadarRectDef::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void RadarRectDef::ArenaDtor(void* object) {
  RadarRectDef* _this = reinterpret_cast< RadarRectDef* >(object);
  (void)_this;
}
void RadarRectDef::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RadarRectDef::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RadarRectDef& RadarRectDef::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RadarRectDef_ZCHXRadarVideo_2eproto.base);
  return *internal_default_instance();
}


void RadarRectDef::Clear() {
// @@protoc_insertion_point(message_clear_start:com.zhichenhaixin.proto.RadarRectDef)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  blocks_.Clear();
  pixelpnts_.Clear();
  predictionareas_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&topleftlatitude_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&centerlongitude_) -
        reinterpret_cast<char*>(&topleftlatitude_)) + sizeof(centerlongitude_));
  }
  if (cached_has_bits & 0x0000ff00u) {
    ::memset(&startlatitude_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&sog_) -
        reinterpret_cast<char*>(&startlatitude_)) + sizeof(sog_));
  }
  cog_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RadarRectDef::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required uint32 rectNumber = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_rectnumber(&has_bits);
          rectnumber_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required double topLeftlatitude = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 17)) {
          _Internal::set_has_topleftlatitude(&has_bits);
          topleftlatitude_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // required double topLeftlongitude = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          _Internal::set_has_topleftlongitude(&has_bits);
          topleftlongitude_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // required double bottomRightlatitude = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 33)) {
          _Internal::set_has_bottomrightlatitude(&has_bits);
          bottomrightlatitude_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // required double bottomRightlongitude = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 41)) {
          _Internal::set_has_bottomrightlongitude(&has_bits);
          bottomrightlongitude_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // required double centerlatitude = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 49)) {
          _Internal::set_has_centerlatitude(&has_bits);
          centerlatitude_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // required double centerlongitude = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 57)) {
          _Internal::set_has_centerlongitude(&has_bits);
          centerlongitude_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // required uint32 updateTime = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_updatetime(&has_bits);
          updatetime_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 diameter = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          _Internal::set_has_diameter(&has_bits);
          diameter_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .com.zhichenhaixin.proto.singleVideoBlock Blocks = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_blocks(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<82>(ptr));
        } else goto handle_unusual;
        continue;
      // optional double startlatitude = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 89)) {
          _Internal::set_has_startlatitude(&has_bits);
          startlatitude_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double startlongitude = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 97)) {
          _Internal::set_has_startlongitude(&has_bits);
          startlongitude_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double endlatitude = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 105)) {
          _Internal::set_has_endlatitude(&has_bits);
          endlatitude_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double endlongitude = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 113)) {
          _Internal::set_has_endlongitude(&has_bits);
          endlongitude_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double angle = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 121)) {
          _Internal::set_has_angle(&has_bits);
          angle_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // required double sog = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 129)) {
          _Internal::set_has_sog(&has_bits);
          sog_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // required double cog = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 137)) {
          _Internal::set_has_cog(&has_bits);
          cog_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // repeated .com.zhichenhaixin.proto.pixelPoint pixelPnts = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 146)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_pixelpnts(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<146>(ptr));
        } else goto handle_unusual;
        continue;
      // required bool realData = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 152)) {
          _Internal::set_has_realdata(&has_bits);
          realdata_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .com.zhichenhaixin.proto.predictionArea predictionAreas = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 162)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_predictionareas(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<162>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RadarRectDef::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.zhichenhaixin.proto.RadarRectDef)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 rectNumber = 1;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_rectnumber(), target);
  }

  // required double topLeftlatitude = 2;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(2, this->_internal_topleftlatitude(), target);
  }

  // required double topLeftlongitude = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_topleftlongitude(), target);
  }

  // required double bottomRightlatitude = 4;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(4, this->_internal_bottomrightlatitude(), target);
  }

  // required double bottomRightlongitude = 5;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(5, this->_internal_bottomrightlongitude(), target);
  }

  // required double centerlatitude = 6;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(6, this->_internal_centerlatitude(), target);
  }

  // required double centerlongitude = 7;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(7, this->_internal_centerlongitude(), target);
  }

  // required uint32 updateTime = 8;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(8, this->_internal_updatetime(), target);
  }

  // optional int32 diameter = 9;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(9, this->_internal_diameter(), target);
  }

  // repeated .com.zhichenhaixin.proto.singleVideoBlock Blocks = 10;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_blocks_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(10, this->_internal_blocks(i), target, stream);
  }

  // optional double startlatitude = 11;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(11, this->_internal_startlatitude(), target);
  }

  // optional double startlongitude = 12;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(12, this->_internal_startlongitude(), target);
  }

  // optional double endlatitude = 13;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(13, this->_internal_endlatitude(), target);
  }

  // optional double endlongitude = 14;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(14, this->_internal_endlongitude(), target);
  }

  // optional double angle = 15;
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(15, this->_internal_angle(), target);
  }

  // required double sog = 16;
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(16, this->_internal_sog(), target);
  }

  // required double cog = 17;
  if (cached_has_bits & 0x00010000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(17, this->_internal_cog(), target);
  }

  // repeated .com.zhichenhaixin.proto.pixelPoint pixelPnts = 18;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_pixelpnts_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(18, this->_internal_pixelpnts(i), target, stream);
  }

  // required bool realData = 19;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(19, this->_internal_realdata(), target);
  }

  // repeated .com.zhichenhaixin.proto.predictionArea predictionAreas = 20;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_predictionareas_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(20, this->_internal_predictionareas(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.zhichenhaixin.proto.RadarRectDef)
  return target;
}

size_t RadarRectDef::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:com.zhichenhaixin.proto.RadarRectDef)
  size_t total_size = 0;

  if (_internal_has_topleftlatitude()) {
    // required double topLeftlatitude = 2;
    total_size += 1 + 8;
  }

  if (_internal_has_topleftlongitude()) {
    // required double topLeftlongitude = 3;
    total_size += 1 + 8;
  }

  if (_internal_has_bottomrightlatitude()) {
    // required double bottomRightlatitude = 4;
    total_size += 1 + 8;
  }

  if (_internal_has_rectnumber()) {
    // required uint32 rectNumber = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_rectnumber());
  }

  if (_internal_has_updatetime()) {
    // required uint32 updateTime = 8;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_updatetime());
  }

  if (_internal_has_bottomrightlongitude()) {
    // required double bottomRightlongitude = 5;
    total_size += 1 + 8;
  }

  if (_internal_has_centerlatitude()) {
    // required double centerlatitude = 6;
    total_size += 1 + 8;
  }

  if (_internal_has_centerlongitude()) {
    // required double centerlongitude = 7;
    total_size += 1 + 8;
  }

  if (_internal_has_realdata()) {
    // required bool realData = 19;
    total_size += 2 + 1;
  }

  if (_internal_has_sog()) {
    // required double sog = 16;
    total_size += 2 + 8;
  }

  if (_internal_has_cog()) {
    // required double cog = 17;
    total_size += 2 + 8;
  }

  return total_size;
}
size_t RadarRectDef::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.zhichenhaixin.proto.RadarRectDef)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x0001a0ff) ^ 0x0001a0ff) == 0) {  // All required fields are present.
    // required double topLeftlatitude = 2;
    total_size += 1 + 8;

    // required double topLeftlongitude = 3;
    total_size += 1 + 8;

    // required double bottomRightlatitude = 4;
    total_size += 1 + 8;

    // required uint32 rectNumber = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_rectnumber());

    // required uint32 updateTime = 8;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_updatetime());

    // required double bottomRightlongitude = 5;
    total_size += 1 + 8;

    // required double centerlatitude = 6;
    total_size += 1 + 8;

    // required double centerlongitude = 7;
    total_size += 1 + 8;

    // required bool realData = 19;
    total_size += 2 + 1;

    // required double sog = 16;
    total_size += 2 + 8;

    // required double cog = 17;
    total_size += 2 + 8;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .com.zhichenhaixin.proto.singleVideoBlock Blocks = 10;
  total_size += 1UL * this->_internal_blocks_size();
  for (const auto& msg : this->blocks_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .com.zhichenhaixin.proto.pixelPoint pixelPnts = 18;
  total_size += 2UL * this->_internal_pixelpnts_size();
  for (const auto& msg : this->pixelpnts_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .com.zhichenhaixin.proto.predictionArea predictionAreas = 20;
  total_size += 2UL * this->_internal_predictionareas_size();
  for (const auto& msg : this->predictionareas_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00001f00u) {
    // optional double startlatitude = 11;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 + 8;
    }

    // optional double startlongitude = 12;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 + 8;
    }

    // optional double endlatitude = 13;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 + 8;
    }

    // optional double endlongitude = 14;
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 + 8;
    }

    // optional int32 diameter = 9;
    if (cached_has_bits & 0x00001000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
          this->_internal_diameter());
    }

  }
  // optional double angle = 15;
  if (cached_has_bits & 0x00004000u) {
    total_size += 1 + 8;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RadarRectDef::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.zhichenhaixin.proto.RadarRectDef)
  GOOGLE_DCHECK_NE(&from, this);
  const RadarRectDef* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RadarRectDef>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.zhichenhaixin.proto.RadarRectDef)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.zhichenhaixin.proto.RadarRectDef)
    MergeFrom(*source);
  }
}

void RadarRectDef::MergeFrom(const RadarRectDef& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.zhichenhaixin.proto.RadarRectDef)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  blocks_.MergeFrom(from.blocks_);
  pixelpnts_.MergeFrom(from.pixelpnts_);
  predictionareas_.MergeFrom(from.predictionareas_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      topleftlatitude_ = from.topleftlatitude_;
    }
    if (cached_has_bits & 0x00000002u) {
      topleftlongitude_ = from.topleftlongitude_;
    }
    if (cached_has_bits & 0x00000004u) {
      bottomrightlatitude_ = from.bottomrightlatitude_;
    }
    if (cached_has_bits & 0x00000008u) {
      rectnumber_ = from.rectnumber_;
    }
    if (cached_has_bits & 0x00000010u) {
      updatetime_ = from.updatetime_;
    }
    if (cached_has_bits & 0x00000020u) {
      bottomrightlongitude_ = from.bottomrightlongitude_;
    }
    if (cached_has_bits & 0x00000040u) {
      centerlatitude_ = from.centerlatitude_;
    }
    if (cached_has_bits & 0x00000080u) {
      centerlongitude_ = from.centerlongitude_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      startlatitude_ = from.startlatitude_;
    }
    if (cached_has_bits & 0x00000200u) {
      startlongitude_ = from.startlongitude_;
    }
    if (cached_has_bits & 0x00000400u) {
      endlatitude_ = from.endlatitude_;
    }
    if (cached_has_bits & 0x00000800u) {
      endlongitude_ = from.endlongitude_;
    }
    if (cached_has_bits & 0x00001000u) {
      diameter_ = from.diameter_;
    }
    if (cached_has_bits & 0x00002000u) {
      realdata_ = from.realdata_;
    }
    if (cached_has_bits & 0x00004000u) {
      angle_ = from.angle_;
    }
    if (cached_has_bits & 0x00008000u) {
      sog_ = from.sog_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00010000u) {
    _internal_set_cog(from._internal_cog());
  }
}

void RadarRectDef::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.zhichenhaixin.proto.RadarRectDef)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RadarRectDef::CopyFrom(const RadarRectDef& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.zhichenhaixin.proto.RadarRectDef)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RadarRectDef::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(blocks_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(pixelpnts_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(predictionareas_)) return false;
  return true;
}

void RadarRectDef::InternalSwap(RadarRectDef* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  blocks_.InternalSwap(&other->blocks_);
  pixelpnts_.InternalSwap(&other->pixelpnts_);
  predictionareas_.InternalSwap(&other->predictionareas_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RadarRectDef, cog_)
      + sizeof(RadarRectDef::cog_)
      - PROTOBUF_FIELD_OFFSET(RadarRectDef, topleftlatitude_)>(
          reinterpret_cast<char*>(&topleftlatitude_),
          reinterpret_cast<char*>(&other->topleftlatitude_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RadarRectDef::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RadarRect::InitAsDefaultInstance() {
  ::com::zhichenhaixin::proto::_RadarRect_default_instance_._instance.get_mutable()->currentrect_ = const_cast< ::com::zhichenhaixin::proto::RadarRectDef*>(
      ::com::zhichenhaixin::proto::RadarRectDef::internal_default_instance());
}
class RadarRect::_Internal {
 public:
  using HasBits = decltype(std::declval<RadarRect>()._has_bits_);
  static const ::com::zhichenhaixin::proto::RadarRectDef& currentrect(const RadarRect* msg);
  static void set_has_currentrect(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_dirconfirmed(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_estcount(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000007) ^ 0x00000007) != 0;
  }
};

const ::com::zhichenhaixin::proto::RadarRectDef&
RadarRect::_Internal::currentrect(const RadarRect* msg) {
  return *msg->currentrect_;
}
RadarRect::RadarRect(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  historyrects_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.zhichenhaixin.proto.RadarRect)
}
RadarRect::RadarRect(const RadarRect& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      historyrects_(from.historyrects_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_currentrect()) {
    currentrect_ = new ::com::zhichenhaixin::proto::RadarRectDef(*from.currentrect_);
  } else {
    currentrect_ = nullptr;
  }
  ::memcpy(&dirconfirmed_, &from.dirconfirmed_,
    static_cast<size_t>(reinterpret_cast<char*>(&estcount_) -
    reinterpret_cast<char*>(&dirconfirmed_)) + sizeof(estcount_));
  // @@protoc_insertion_point(copy_constructor:com.zhichenhaixin.proto.RadarRect)
}

void RadarRect::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_RadarRect_ZCHXRadarVideo_2eproto.base);
  ::memset(&currentrect_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&estcount_) -
      reinterpret_cast<char*>(&currentrect_)) + sizeof(estcount_));
}

RadarRect::~RadarRect() {
  // @@protoc_insertion_point(destructor:com.zhichenhaixin.proto.RadarRect)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void RadarRect::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete currentrect_;
}

void RadarRect::ArenaDtor(void* object) {
  RadarRect* _this = reinterpret_cast< RadarRect* >(object);
  (void)_this;
}
void RadarRect::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RadarRect::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RadarRect& RadarRect::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RadarRect_ZCHXRadarVideo_2eproto.base);
  return *internal_default_instance();
}


void RadarRect::Clear() {
// @@protoc_insertion_point(message_clear_start:com.zhichenhaixin.proto.RadarRect)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  historyrects_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(currentrect_ != nullptr);
    currentrect_->Clear();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&dirconfirmed_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&estcount_) -
        reinterpret_cast<char*>(&dirconfirmed_)) + sizeof(estcount_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RadarRect::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required .com.zhichenhaixin.proto.RadarRectDef currentRect = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_currentrect(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .com.zhichenhaixin.proto.RadarRectDef historyRects = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_historyrects(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // required bool dirConfirmed = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_dirconfirmed(&has_bits);
          dirconfirmed_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 estcount = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_estcount(&has_bits);
          estcount_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RadarRect::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.zhichenhaixin.proto.RadarRect)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .com.zhichenhaixin.proto.RadarRectDef currentRect = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::currentrect(this), target, stream);
  }

  // repeated .com.zhichenhaixin.proto.RadarRectDef historyRects = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_historyrects_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_historyrects(i), target, stream);
  }

  // required bool dirConfirmed = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(3, this->_internal_dirconfirmed(), target);
  }

  // required uint32 estcount = 4;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_estcount(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.zhichenhaixin.proto.RadarRect)
  return target;
}

size_t RadarRect::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:com.zhichenhaixin.proto.RadarRect)
  size_t total_size = 0;

  if (_internal_has_currentrect()) {
    // required .com.zhichenhaixin.proto.RadarRectDef currentRect = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *currentrect_);
  }

  if (_internal_has_dirconfirmed()) {
    // required bool dirConfirmed = 3;
    total_size += 1 + 1;
  }

  if (_internal_has_estcount()) {
    // required uint32 estcount = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_estcount());
  }

  return total_size;
}
size_t RadarRect::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.zhichenhaixin.proto.RadarRect)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required .com.zhichenhaixin.proto.RadarRectDef currentRect = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *currentrect_);

    // required bool dirConfirmed = 3;
    total_size += 1 + 1;

    // required uint32 estcount = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_estcount());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .com.zhichenhaixin.proto.RadarRectDef historyRects = 2;
  total_size += 1UL * this->_internal_historyrects_size();
  for (const auto& msg : this->historyrects_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RadarRect::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.zhichenhaixin.proto.RadarRect)
  GOOGLE_DCHECK_NE(&from, this);
  const RadarRect* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RadarRect>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.zhichenhaixin.proto.RadarRect)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.zhichenhaixin.proto.RadarRect)
    MergeFrom(*source);
  }
}

void RadarRect::MergeFrom(const RadarRect& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.zhichenhaixin.proto.RadarRect)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  historyrects_.MergeFrom(from.historyrects_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_mutable_currentrect()->::com::zhichenhaixin::proto::RadarRectDef::MergeFrom(from._internal_currentrect());
    }
    if (cached_has_bits & 0x00000002u) {
      dirconfirmed_ = from.dirconfirmed_;
    }
    if (cached_has_bits & 0x00000004u) {
      estcount_ = from.estcount_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void RadarRect::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.zhichenhaixin.proto.RadarRect)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RadarRect::CopyFrom(const RadarRect& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.zhichenhaixin.proto.RadarRect)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RadarRect::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(historyrects_)) return false;
  if (_internal_has_currentrect()) {
    if (!currentrect_->IsInitialized()) return false;
  }
  return true;
}

void RadarRect::InternalSwap(RadarRect* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  historyrects_.InternalSwap(&other->historyrects_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RadarRect, estcount_)
      + sizeof(RadarRect::estcount_)
      - PROTOBUF_FIELD_OFFSET(RadarRect, currentrect_)>(
          reinterpret_cast<char*>(&currentrect_),
          reinterpret_cast<char*>(&other->currentrect_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RadarRect::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RadarRects::InitAsDefaultInstance() {
}
class RadarRects::_Internal {
 public:
  using HasBits = decltype(std::declval<RadarRects>()._has_bits_);
  static void set_has_utc(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_length(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

RadarRects::RadarRects(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  rects_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.zhichenhaixin.proto.RadarRects)
}
RadarRects::RadarRects(const RadarRects& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      rects_(from.rects_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&utc_, &from.utc_,
    static_cast<size_t>(reinterpret_cast<char*>(&length_) -
    reinterpret_cast<char*>(&utc_)) + sizeof(length_));
  // @@protoc_insertion_point(copy_constructor:com.zhichenhaixin.proto.RadarRects)
}

void RadarRects::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_RadarRects_ZCHXRadarVideo_2eproto.base);
  ::memset(&utc_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&length_) -
      reinterpret_cast<char*>(&utc_)) + sizeof(length_));
}

RadarRects::~RadarRects() {
  // @@protoc_insertion_point(destructor:com.zhichenhaixin.proto.RadarRects)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void RadarRects::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void RadarRects::ArenaDtor(void* object) {
  RadarRects* _this = reinterpret_cast< RadarRects* >(object);
  (void)_this;
}
void RadarRects::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RadarRects::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RadarRects& RadarRects::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RadarRects_ZCHXRadarVideo_2eproto.base);
  return *internal_default_instance();
}


void RadarRects::Clear() {
// @@protoc_insertion_point(message_clear_start:com.zhichenhaixin.proto.RadarRects)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  rects_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&utc_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&length_) -
        reinterpret_cast<char*>(&utc_)) + sizeof(length_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RadarRects::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required uint64 UTC = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_utc(&has_bits);
          utc_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int32 length = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_length(&has_bits);
          length_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .com.zhichenhaixin.proto.RadarRect rects = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_rects(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RadarRects::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.zhichenhaixin.proto.RadarRects)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint64 UTC = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_utc(), target);
  }

  // required int32 length = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_length(), target);
  }

  // repeated .com.zhichenhaixin.proto.RadarRect rects = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_rects_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_rects(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.zhichenhaixin.proto.RadarRects)
  return target;
}

size_t RadarRects::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:com.zhichenhaixin.proto.RadarRects)
  size_t total_size = 0;

  if (_internal_has_utc()) {
    // required uint64 UTC = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_utc());
  }

  if (_internal_has_length()) {
    // required int32 length = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_length());
  }

  return total_size;
}
size_t RadarRects::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.zhichenhaixin.proto.RadarRects)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required uint64 UTC = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_utc());

    // required int32 length = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_length());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .com.zhichenhaixin.proto.RadarRect rects = 3;
  total_size += 1UL * this->_internal_rects_size();
  for (const auto& msg : this->rects_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RadarRects::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.zhichenhaixin.proto.RadarRects)
  GOOGLE_DCHECK_NE(&from, this);
  const RadarRects* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RadarRects>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.zhichenhaixin.proto.RadarRects)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.zhichenhaixin.proto.RadarRects)
    MergeFrom(*source);
  }
}

void RadarRects::MergeFrom(const RadarRects& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.zhichenhaixin.proto.RadarRects)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  rects_.MergeFrom(from.rects_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      utc_ = from.utc_;
    }
    if (cached_has_bits & 0x00000002u) {
      length_ = from.length_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void RadarRects::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.zhichenhaixin.proto.RadarRects)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RadarRects::CopyFrom(const RadarRects& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.zhichenhaixin.proto.RadarRects)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RadarRects::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(rects_)) return false;
  return true;
}

void RadarRects::InternalSwap(RadarRects* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  rects_.InternalSwap(&other->rects_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RadarRects, length_)
      + sizeof(RadarRects::length_)
      - PROTOBUF_FIELD_OFFSET(RadarRects, utc_)>(
          reinterpret_cast<char*>(&utc_),
          reinterpret_cast<char*>(&other->utc_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RadarRects::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RadarVideo::InitAsDefaultInstance() {
}
class RadarVideo::_Internal {
 public:
  using HasBits = decltype(std::declval<RadarVideo>()._has_bits_);
  static void set_has_radarid(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_radarname(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_latitude(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_longitude(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_utc(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_imagedata(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_curimagedata(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_preimagedata(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_width(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_height(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_radius(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_curindex(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_loopnum(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00001fff) ^ 0x00001fff) != 0;
  }
};

RadarVideo::RadarVideo(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.zhichenhaixin.proto.RadarVideo)
}
RadarVideo::RadarVideo(const RadarVideo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  radarname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_radarname()) {
    radarname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_radarname(),
      GetArena());
  }
  imagedata_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_imagedata()) {
    imagedata_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_imagedata(),
      GetArena());
  }
  curimagedata_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_curimagedata()) {
    curimagedata_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_curimagedata(),
      GetArena());
  }
  preimagedata_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_preimagedata()) {
    preimagedata_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_preimagedata(),
      GetArena());
  }
  ::memcpy(&radarid_, &from.radarid_,
    static_cast<size_t>(reinterpret_cast<char*>(&loopnum_) -
    reinterpret_cast<char*>(&radarid_)) + sizeof(loopnum_));
  // @@protoc_insertion_point(copy_constructor:com.zhichenhaixin.proto.RadarVideo)
}

void RadarVideo::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_RadarVideo_ZCHXRadarVideo_2eproto.base);
  radarname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  imagedata_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  curimagedata_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  preimagedata_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&radarid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&loopnum_) -
      reinterpret_cast<char*>(&radarid_)) + sizeof(loopnum_));
}

RadarVideo::~RadarVideo() {
  // @@protoc_insertion_point(destructor:com.zhichenhaixin.proto.RadarVideo)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void RadarVideo::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  radarname_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  imagedata_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  curimagedata_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  preimagedata_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void RadarVideo::ArenaDtor(void* object) {
  RadarVideo* _this = reinterpret_cast< RadarVideo* >(object);
  (void)_this;
}
void RadarVideo::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RadarVideo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RadarVideo& RadarVideo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RadarVideo_ZCHXRadarVideo_2eproto.base);
  return *internal_default_instance();
}


void RadarVideo::Clear() {
// @@protoc_insertion_point(message_clear_start:com.zhichenhaixin.proto.RadarVideo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      radarname_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      imagedata_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      curimagedata_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      preimagedata_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x000000f0u) {
    ::memset(&radarid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&utc_) -
        reinterpret_cast<char*>(&radarid_)) + sizeof(utc_));
  }
  if (cached_has_bits & 0x00001f00u) {
    ::memset(&width_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&loopnum_) -
        reinterpret_cast<char*>(&width_)) + sizeof(loopnum_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RadarVideo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required uint64 radarId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_radarid(&has_bits);
          radarid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required string radarName = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_radarname();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "com.zhichenhaixin.proto.RadarVideo.radarName");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required double latitude = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          _Internal::set_has_latitude(&has_bits);
          latitude_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // required double longitude = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 33)) {
          _Internal::set_has_longitude(&has_bits);
          longitude_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // required uint64 UTC = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_utc(&has_bits);
          utc_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required bytes imageData = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_imagedata();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required bytes curImageData = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          auto str = _internal_mutable_curimagedata();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required bytes preImageData = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          auto str = _internal_mutable_preimagedata();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 width = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          _Internal::set_has_width(&has_bits);
          width_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 height = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          _Internal::set_has_height(&has_bits);
          height_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required double radius = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 89)) {
          _Internal::set_has_radius(&has_bits);
          radius_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // required uint32 curIndex = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          _Internal::set_has_curindex(&has_bits);
          curindex_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 loopNum = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          _Internal::set_has_loopnum(&has_bits);
          loopnum_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RadarVideo::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.zhichenhaixin.proto.RadarVideo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint64 radarId = 1;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(1, this->_internal_radarid(), target);
  }

  // required string radarName = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_radarname().data(), static_cast<int>(this->_internal_radarname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "com.zhichenhaixin.proto.RadarVideo.radarName");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_radarname(), target);
  }

  // required double latitude = 3;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_latitude(), target);
  }

  // required double longitude = 4;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(4, this->_internal_longitude(), target);
  }

  // required uint64 UTC = 5;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(5, this->_internal_utc(), target);
  }

  // required bytes imageData = 6;
  if (cached_has_bits & 0x00000002u) {
    target = stream->WriteBytesMaybeAliased(
        6, this->_internal_imagedata(), target);
  }

  // required bytes curImageData = 7;
  if (cached_has_bits & 0x00000004u) {
    target = stream->WriteBytesMaybeAliased(
        7, this->_internal_curimagedata(), target);
  }

  // required bytes preImageData = 8;
  if (cached_has_bits & 0x00000008u) {
    target = stream->WriteBytesMaybeAliased(
        8, this->_internal_preimagedata(), target);
  }

  // required uint32 width = 9;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(9, this->_internal_width(), target);
  }

  // required uint32 height = 10;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(10, this->_internal_height(), target);
  }

  // required double radius = 11;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(11, this->_internal_radius(), target);
  }

  // required uint32 curIndex = 12;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(12, this->_internal_curindex(), target);
  }

  // required uint32 loopNum = 13;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(13, this->_internal_loopnum(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.zhichenhaixin.proto.RadarVideo)
  return target;
}

size_t RadarVideo::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:com.zhichenhaixin.proto.RadarVideo)
  size_t total_size = 0;

  if (_internal_has_radarname()) {
    // required string radarName = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_radarname());
  }

  if (_internal_has_imagedata()) {
    // required bytes imageData = 6;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_imagedata());
  }

  if (_internal_has_curimagedata()) {
    // required bytes curImageData = 7;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_curimagedata());
  }

  if (_internal_has_preimagedata()) {
    // required bytes preImageData = 8;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_preimagedata());
  }

  if (_internal_has_radarid()) {
    // required uint64 radarId = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_radarid());
  }

  if (_internal_has_latitude()) {
    // required double latitude = 3;
    total_size += 1 + 8;
  }

  if (_internal_has_longitude()) {
    // required double longitude = 4;
    total_size += 1 + 8;
  }

  if (_internal_has_utc()) {
    // required uint64 UTC = 5;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_utc());
  }

  if (_internal_has_width()) {
    // required uint32 width = 9;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_width());
  }

  if (_internal_has_height()) {
    // required uint32 height = 10;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_height());
  }

  if (_internal_has_radius()) {
    // required double radius = 11;
    total_size += 1 + 8;
  }

  if (_internal_has_curindex()) {
    // required uint32 curIndex = 12;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_curindex());
  }

  if (_internal_has_loopnum()) {
    // required uint32 loopNum = 13;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_loopnum());
  }

  return total_size;
}
size_t RadarVideo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.zhichenhaixin.proto.RadarVideo)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00001fff) ^ 0x00001fff) == 0) {  // All required fields are present.
    // required string radarName = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_radarname());

    // required bytes imageData = 6;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_imagedata());

    // required bytes curImageData = 7;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_curimagedata());

    // required bytes preImageData = 8;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_preimagedata());

    // required uint64 radarId = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_radarid());

    // required double latitude = 3;
    total_size += 1 + 8;

    // required double longitude = 4;
    total_size += 1 + 8;

    // required uint64 UTC = 5;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_utc());

    // required uint32 width = 9;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_width());

    // required uint32 height = 10;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_height());

    // required double radius = 11;
    total_size += 1 + 8;

    // required uint32 curIndex = 12;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_curindex());

    // required uint32 loopNum = 13;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_loopnum());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RadarVideo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.zhichenhaixin.proto.RadarVideo)
  GOOGLE_DCHECK_NE(&from, this);
  const RadarVideo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RadarVideo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.zhichenhaixin.proto.RadarVideo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.zhichenhaixin.proto.RadarVideo)
    MergeFrom(*source);
  }
}

void RadarVideo::MergeFrom(const RadarVideo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.zhichenhaixin.proto.RadarVideo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_radarname(from._internal_radarname());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_imagedata(from._internal_imagedata());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_curimagedata(from._internal_curimagedata());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_set_preimagedata(from._internal_preimagedata());
    }
    if (cached_has_bits & 0x00000010u) {
      radarid_ = from.radarid_;
    }
    if (cached_has_bits & 0x00000020u) {
      latitude_ = from.latitude_;
    }
    if (cached_has_bits & 0x00000040u) {
      longitude_ = from.longitude_;
    }
    if (cached_has_bits & 0x00000080u) {
      utc_ = from.utc_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00001f00u) {
    if (cached_has_bits & 0x00000100u) {
      width_ = from.width_;
    }
    if (cached_has_bits & 0x00000200u) {
      height_ = from.height_;
    }
    if (cached_has_bits & 0x00000400u) {
      radius_ = from.radius_;
    }
    if (cached_has_bits & 0x00000800u) {
      curindex_ = from.curindex_;
    }
    if (cached_has_bits & 0x00001000u) {
      loopnum_ = from.loopnum_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void RadarVideo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.zhichenhaixin.proto.RadarVideo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RadarVideo::CopyFrom(const RadarVideo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.zhichenhaixin.proto.RadarVideo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RadarVideo::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void RadarVideo::InternalSwap(RadarVideo* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  radarname_.Swap(&other->radarname_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  imagedata_.Swap(&other->imagedata_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  curimagedata_.Swap(&other->curimagedata_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  preimagedata_.Swap(&other->preimagedata_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RadarVideo, loopnum_)
      + sizeof(RadarVideo::loopnum_)
      - PROTOBUF_FIELD_OFFSET(RadarVideo, radarid_)>(
          reinterpret_cast<char*>(&radarid_),
          reinterpret_cast<char*>(&other->radarid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RadarVideo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void RadarVideoPoint::InitAsDefaultInstance() {
}
class RadarVideoPoint::_Internal {
 public:
  using HasBits = decltype(std::declval<RadarVideoPoint>()._has_bits_);
  static void set_has_radarname(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_latitude(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_longitude(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_utc(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_imagedata(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_preimagedata(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_width(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_height(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_radius(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_curindex(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_loopnum(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x000007ff) ^ 0x000007ff) != 0;
  }
};

RadarVideoPoint::RadarVideoPoint(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:com.zhichenhaixin.proto.RadarVideoPoint)
}
RadarVideoPoint::RadarVideoPoint(const RadarVideoPoint& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  radarname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_radarname()) {
    radarname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_radarname(),
      GetArena());
  }
  imagedata_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_imagedata()) {
    imagedata_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_imagedata(),
      GetArena());
  }
  preimagedata_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_preimagedata()) {
    preimagedata_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_preimagedata(),
      GetArena());
  }
  ::memcpy(&latitude_, &from.latitude_,
    static_cast<size_t>(reinterpret_cast<char*>(&loopnum_) -
    reinterpret_cast<char*>(&latitude_)) + sizeof(loopnum_));
  // @@protoc_insertion_point(copy_constructor:com.zhichenhaixin.proto.RadarVideoPoint)
}

void RadarVideoPoint::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_RadarVideoPoint_ZCHXRadarVideo_2eproto.base);
  radarname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  imagedata_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  preimagedata_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&latitude_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&loopnum_) -
      reinterpret_cast<char*>(&latitude_)) + sizeof(loopnum_));
}

RadarVideoPoint::~RadarVideoPoint() {
  // @@protoc_insertion_point(destructor:com.zhichenhaixin.proto.RadarVideoPoint)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void RadarVideoPoint::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  radarname_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  imagedata_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  preimagedata_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void RadarVideoPoint::ArenaDtor(void* object) {
  RadarVideoPoint* _this = reinterpret_cast< RadarVideoPoint* >(object);
  (void)_this;
}
void RadarVideoPoint::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RadarVideoPoint::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RadarVideoPoint& RadarVideoPoint::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RadarVideoPoint_ZCHXRadarVideo_2eproto.base);
  return *internal_default_instance();
}


void RadarVideoPoint::Clear() {
// @@protoc_insertion_point(message_clear_start:com.zhichenhaixin.proto.RadarVideoPoint)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      radarname_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      imagedata_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      preimagedata_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x000000f8u) {
    ::memset(&latitude_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&height_) -
        reinterpret_cast<char*>(&latitude_)) + sizeof(height_));
  }
  if (cached_has_bits & 0x00000700u) {
    ::memset(&radius_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&loopnum_) -
        reinterpret_cast<char*>(&radius_)) + sizeof(loopnum_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RadarVideoPoint::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required string radarName = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_radarname();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "com.zhichenhaixin.proto.RadarVideoPoint.radarName");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required double latitude = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          _Internal::set_has_latitude(&has_bits);
          latitude_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // required double longitude = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 33)) {
          _Internal::set_has_longitude(&has_bits);
          longitude_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // required uint64 UTC = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_utc(&has_bits);
          utc_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required bytes imageData = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_imagedata();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required bytes preImageData = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          auto str = _internal_mutable_preimagedata();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 width = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_width(&has_bits);
          width_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 height = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          _Internal::set_has_height(&has_bits);
          height_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required double radius = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 81)) {
          _Internal::set_has_radius(&has_bits);
          radius_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // required uint32 curIndex = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          _Internal::set_has_curindex(&has_bits);
          curindex_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 loopNum = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          _Internal::set_has_loopnum(&has_bits);
          loopnum_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RadarVideoPoint::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.zhichenhaixin.proto.RadarVideoPoint)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string radarName = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_radarname().data(), static_cast<int>(this->_internal_radarname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "com.zhichenhaixin.proto.RadarVideoPoint.radarName");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_radarname(), target);
  }

  // required double latitude = 3;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_latitude(), target);
  }

  // required double longitude = 4;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(4, this->_internal_longitude(), target);
  }

  // required uint64 UTC = 5;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(5, this->_internal_utc(), target);
  }

  // required bytes imageData = 6;
  if (cached_has_bits & 0x00000002u) {
    target = stream->WriteBytesMaybeAliased(
        6, this->_internal_imagedata(), target);
  }

  // required bytes preImageData = 7;
  if (cached_has_bits & 0x00000004u) {
    target = stream->WriteBytesMaybeAliased(
        7, this->_internal_preimagedata(), target);
  }

  // required uint32 width = 8;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(8, this->_internal_width(), target);
  }

  // required uint32 height = 9;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(9, this->_internal_height(), target);
  }

  // required double radius = 10;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(10, this->_internal_radius(), target);
  }

  // required uint32 curIndex = 11;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(11, this->_internal_curindex(), target);
  }

  // required uint32 loopNum = 12;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(12, this->_internal_loopnum(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.zhichenhaixin.proto.RadarVideoPoint)
  return target;
}

size_t RadarVideoPoint::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:com.zhichenhaixin.proto.RadarVideoPoint)
  size_t total_size = 0;

  if (_internal_has_radarname()) {
    // required string radarName = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_radarname());
  }

  if (_internal_has_imagedata()) {
    // required bytes imageData = 6;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_imagedata());
  }

  if (_internal_has_preimagedata()) {
    // required bytes preImageData = 7;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_preimagedata());
  }

  if (_internal_has_latitude()) {
    // required double latitude = 3;
    total_size += 1 + 8;
  }

  if (_internal_has_longitude()) {
    // required double longitude = 4;
    total_size += 1 + 8;
  }

  if (_internal_has_utc()) {
    // required uint64 UTC = 5;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_utc());
  }

  if (_internal_has_width()) {
    // required uint32 width = 8;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_width());
  }

  if (_internal_has_height()) {
    // required uint32 height = 9;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_height());
  }

  if (_internal_has_radius()) {
    // required double radius = 10;
    total_size += 1 + 8;
  }

  if (_internal_has_curindex()) {
    // required uint32 curIndex = 11;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_curindex());
  }

  if (_internal_has_loopnum()) {
    // required uint32 loopNum = 12;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_loopnum());
  }

  return total_size;
}
size_t RadarVideoPoint::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:com.zhichenhaixin.proto.RadarVideoPoint)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x000007ff) ^ 0x000007ff) == 0) {  // All required fields are present.
    // required string radarName = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_radarname());

    // required bytes imageData = 6;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_imagedata());

    // required bytes preImageData = 7;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_preimagedata());

    // required double latitude = 3;
    total_size += 1 + 8;

    // required double longitude = 4;
    total_size += 1 + 8;

    // required uint64 UTC = 5;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->_internal_utc());

    // required uint32 width = 8;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_width());

    // required uint32 height = 9;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_height());

    // required double radius = 10;
    total_size += 1 + 8;

    // required uint32 curIndex = 11;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_curindex());

    // required uint32 loopNum = 12;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_loopnum());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RadarVideoPoint::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:com.zhichenhaixin.proto.RadarVideoPoint)
  GOOGLE_DCHECK_NE(&from, this);
  const RadarVideoPoint* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RadarVideoPoint>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:com.zhichenhaixin.proto.RadarVideoPoint)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:com.zhichenhaixin.proto.RadarVideoPoint)
    MergeFrom(*source);
  }
}

void RadarVideoPoint::MergeFrom(const RadarVideoPoint& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:com.zhichenhaixin.proto.RadarVideoPoint)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_radarname(from._internal_radarname());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_imagedata(from._internal_imagedata());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_preimagedata(from._internal_preimagedata());
    }
    if (cached_has_bits & 0x00000008u) {
      latitude_ = from.latitude_;
    }
    if (cached_has_bits & 0x00000010u) {
      longitude_ = from.longitude_;
    }
    if (cached_has_bits & 0x00000020u) {
      utc_ = from.utc_;
    }
    if (cached_has_bits & 0x00000040u) {
      width_ = from.width_;
    }
    if (cached_has_bits & 0x00000080u) {
      height_ = from.height_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000700u) {
    if (cached_has_bits & 0x00000100u) {
      radius_ = from.radius_;
    }
    if (cached_has_bits & 0x00000200u) {
      curindex_ = from.curindex_;
    }
    if (cached_has_bits & 0x00000400u) {
      loopnum_ = from.loopnum_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void RadarVideoPoint::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:com.zhichenhaixin.proto.RadarVideoPoint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RadarVideoPoint::CopyFrom(const RadarVideoPoint& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:com.zhichenhaixin.proto.RadarVideoPoint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RadarVideoPoint::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void RadarVideoPoint::InternalSwap(RadarVideoPoint* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  radarname_.Swap(&other->radarname_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  imagedata_.Swap(&other->imagedata_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  preimagedata_.Swap(&other->preimagedata_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RadarVideoPoint, loopnum_)
      + sizeof(RadarVideoPoint::loopnum_)
      - PROTOBUF_FIELD_OFFSET(RadarVideoPoint, latitude_)>(
          reinterpret_cast<char*>(&latitude_),
          reinterpret_cast<char*>(&other->latitude_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RadarVideoPoint::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace proto
}  // namespace zhichenhaixin
}  // namespace com
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::com::zhichenhaixin::proto::singleVideoBlock* Arena::CreateMaybeMessage< ::com::zhichenhaixin::proto::singleVideoBlock >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::zhichenhaixin::proto::singleVideoBlock >(arena);
}
template<> PROTOBUF_NOINLINE ::com::zhichenhaixin::proto::pixelPoint* Arena::CreateMaybeMessage< ::com::zhichenhaixin::proto::pixelPoint >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::zhichenhaixin::proto::pixelPoint >(arena);
}
template<> PROTOBUF_NOINLINE ::com::zhichenhaixin::proto::fixRectPixelImg* Arena::CreateMaybeMessage< ::com::zhichenhaixin::proto::fixRectPixelImg >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::zhichenhaixin::proto::fixRectPixelImg >(arena);
}
template<> PROTOBUF_NOINLINE ::com::zhichenhaixin::proto::predictionArea* Arena::CreateMaybeMessage< ::com::zhichenhaixin::proto::predictionArea >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::zhichenhaixin::proto::predictionArea >(arena);
}
template<> PROTOBUF_NOINLINE ::com::zhichenhaixin::proto::RadarRectDef* Arena::CreateMaybeMessage< ::com::zhichenhaixin::proto::RadarRectDef >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::zhichenhaixin::proto::RadarRectDef >(arena);
}
template<> PROTOBUF_NOINLINE ::com::zhichenhaixin::proto::RadarRect* Arena::CreateMaybeMessage< ::com::zhichenhaixin::proto::RadarRect >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::zhichenhaixin::proto::RadarRect >(arena);
}
template<> PROTOBUF_NOINLINE ::com::zhichenhaixin::proto::RadarRects* Arena::CreateMaybeMessage< ::com::zhichenhaixin::proto::RadarRects >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::zhichenhaixin::proto::RadarRects >(arena);
}
template<> PROTOBUF_NOINLINE ::com::zhichenhaixin::proto::RadarVideo* Arena::CreateMaybeMessage< ::com::zhichenhaixin::proto::RadarVideo >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::zhichenhaixin::proto::RadarVideo >(arena);
}
template<> PROTOBUF_NOINLINE ::com::zhichenhaixin::proto::RadarVideoPoint* Arena::CreateMaybeMessage< ::com::zhichenhaixin::proto::RadarVideoPoint >(Arena* arena) {
  return Arena::CreateMessageInternal< ::com::zhichenhaixin::proto::RadarVideoPoint >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
