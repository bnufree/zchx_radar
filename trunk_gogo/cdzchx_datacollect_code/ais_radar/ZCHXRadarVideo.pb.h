// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ZCHXRadarVideo.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_ZCHXRadarVideo_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_ZCHXRadarVideo_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3012000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3012001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_ZCHXRadarVideo_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_ZCHXRadarVideo_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[9]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_ZCHXRadarVideo_2eproto;
namespace com {
namespace zhichenhaixin {
namespace proto {
class RadarRect;
class RadarRectDefaultTypeInternal;
extern RadarRectDefaultTypeInternal _RadarRect_default_instance_;
class RadarRectDef;
class RadarRectDefDefaultTypeInternal;
extern RadarRectDefDefaultTypeInternal _RadarRectDef_default_instance_;
class RadarRects;
class RadarRectsDefaultTypeInternal;
extern RadarRectsDefaultTypeInternal _RadarRects_default_instance_;
class RadarVideo;
class RadarVideoDefaultTypeInternal;
extern RadarVideoDefaultTypeInternal _RadarVideo_default_instance_;
class RadarVideoPoint;
class RadarVideoPointDefaultTypeInternal;
extern RadarVideoPointDefaultTypeInternal _RadarVideoPoint_default_instance_;
class fixRectPixelImg;
class fixRectPixelImgDefaultTypeInternal;
extern fixRectPixelImgDefaultTypeInternal _fixRectPixelImg_default_instance_;
class pixelPoint;
class pixelPointDefaultTypeInternal;
extern pixelPointDefaultTypeInternal _pixelPoint_default_instance_;
class predictionArea;
class predictionAreaDefaultTypeInternal;
extern predictionAreaDefaultTypeInternal _predictionArea_default_instance_;
class singleVideoBlock;
class singleVideoBlockDefaultTypeInternal;
extern singleVideoBlockDefaultTypeInternal _singleVideoBlock_default_instance_;
}  // namespace proto
}  // namespace zhichenhaixin
}  // namespace com
PROTOBUF_NAMESPACE_OPEN
template<> ::com::zhichenhaixin::proto::RadarRect* Arena::CreateMaybeMessage<::com::zhichenhaixin::proto::RadarRect>(Arena*);
template<> ::com::zhichenhaixin::proto::RadarRectDef* Arena::CreateMaybeMessage<::com::zhichenhaixin::proto::RadarRectDef>(Arena*);
template<> ::com::zhichenhaixin::proto::RadarRects* Arena::CreateMaybeMessage<::com::zhichenhaixin::proto::RadarRects>(Arena*);
template<> ::com::zhichenhaixin::proto::RadarVideo* Arena::CreateMaybeMessage<::com::zhichenhaixin::proto::RadarVideo>(Arena*);
template<> ::com::zhichenhaixin::proto::RadarVideoPoint* Arena::CreateMaybeMessage<::com::zhichenhaixin::proto::RadarVideoPoint>(Arena*);
template<> ::com::zhichenhaixin::proto::fixRectPixelImg* Arena::CreateMaybeMessage<::com::zhichenhaixin::proto::fixRectPixelImg>(Arena*);
template<> ::com::zhichenhaixin::proto::pixelPoint* Arena::CreateMaybeMessage<::com::zhichenhaixin::proto::pixelPoint>(Arena*);
template<> ::com::zhichenhaixin::proto::predictionArea* Arena::CreateMaybeMessage<::com::zhichenhaixin::proto::predictionArea>(Arena*);
template<> ::com::zhichenhaixin::proto::singleVideoBlock* Arena::CreateMaybeMessage<::com::zhichenhaixin::proto::singleVideoBlock>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace com {
namespace zhichenhaixin {
namespace proto {

// ===================================================================

class singleVideoBlock PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:com.zhichenhaixin.proto.singleVideoBlock) */ {
 public:
  inline singleVideoBlock() : singleVideoBlock(nullptr) {};
  virtual ~singleVideoBlock();

  singleVideoBlock(const singleVideoBlock& from);
  singleVideoBlock(singleVideoBlock&& from) noexcept
    : singleVideoBlock() {
    *this = ::std::move(from);
  }

  inline singleVideoBlock& operator=(const singleVideoBlock& from) {
    CopyFrom(from);
    return *this;
  }
  inline singleVideoBlock& operator=(singleVideoBlock&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const singleVideoBlock& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const singleVideoBlock* internal_default_instance() {
    return reinterpret_cast<const singleVideoBlock*>(
               &_singleVideoBlock_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(singleVideoBlock& a, singleVideoBlock& b) {
    a.Swap(&b);
  }
  inline void Swap(singleVideoBlock* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(singleVideoBlock* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline singleVideoBlock* New() const final {
    return CreateMaybeMessage<singleVideoBlock>(nullptr);
  }

  singleVideoBlock* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<singleVideoBlock>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const singleVideoBlock& from);
  void MergeFrom(const singleVideoBlock& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(singleVideoBlock* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "com.zhichenhaixin.proto.singleVideoBlock";
  }
  protected:
  explicit singleVideoBlock(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ZCHXRadarVideo_2eproto);
    return ::descriptor_table_ZCHXRadarVideo_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLatitudeFieldNumber = 1,
    kLongitudeFieldNumber = 2,
  };
  // required double latitude = 1;
  bool has_latitude() const;
  private:
  bool _internal_has_latitude() const;
  public:
  void clear_latitude();
  double latitude() const;
  void set_latitude(double value);
  private:
  double _internal_latitude() const;
  void _internal_set_latitude(double value);
  public:

  // required double longitude = 2;
  bool has_longitude() const;
  private:
  bool _internal_has_longitude() const;
  public:
  void clear_longitude();
  double longitude() const;
  void set_longitude(double value);
  private:
  double _internal_longitude() const;
  void _internal_set_longitude(double value);
  public:

  // @@protoc_insertion_point(class_scope:com.zhichenhaixin.proto.singleVideoBlock)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  double latitude_;
  double longitude_;
  friend struct ::TableStruct_ZCHXRadarVideo_2eproto;
};
// -------------------------------------------------------------------

class pixelPoint PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:com.zhichenhaixin.proto.pixelPoint) */ {
 public:
  inline pixelPoint() : pixelPoint(nullptr) {};
  virtual ~pixelPoint();

  pixelPoint(const pixelPoint& from);
  pixelPoint(pixelPoint&& from) noexcept
    : pixelPoint() {
    *this = ::std::move(from);
  }

  inline pixelPoint& operator=(const pixelPoint& from) {
    CopyFrom(from);
    return *this;
  }
  inline pixelPoint& operator=(pixelPoint&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const pixelPoint& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const pixelPoint* internal_default_instance() {
    return reinterpret_cast<const pixelPoint*>(
               &_pixelPoint_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(pixelPoint& a, pixelPoint& b) {
    a.Swap(&b);
  }
  inline void Swap(pixelPoint* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(pixelPoint* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline pixelPoint* New() const final {
    return CreateMaybeMessage<pixelPoint>(nullptr);
  }

  pixelPoint* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<pixelPoint>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const pixelPoint& from);
  void MergeFrom(const pixelPoint& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(pixelPoint* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "com.zhichenhaixin.proto.pixelPoint";
  }
  protected:
  explicit pixelPoint(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ZCHXRadarVideo_2eproto);
    return ::descriptor_table_ZCHXRadarVideo_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXFieldNumber = 1,
    kYFieldNumber = 2,
  };
  // required uint32 x = 1;
  bool has_x() const;
  private:
  bool _internal_has_x() const;
  public:
  void clear_x();
  ::PROTOBUF_NAMESPACE_ID::uint32 x() const;
  void set_x(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_x() const;
  void _internal_set_x(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // required uint32 y = 2;
  bool has_y() const;
  private:
  bool _internal_has_y() const;
  public:
  void clear_y();
  ::PROTOBUF_NAMESPACE_ID::uint32 y() const;
  void set_y(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_y() const;
  void _internal_set_y(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:com.zhichenhaixin.proto.pixelPoint)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 x_;
  ::PROTOBUF_NAMESPACE_ID::uint32 y_;
  friend struct ::TableStruct_ZCHXRadarVideo_2eproto;
};
// -------------------------------------------------------------------

class fixRectPixelImg PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:com.zhichenhaixin.proto.fixRectPixelImg) */ {
 public:
  inline fixRectPixelImg() : fixRectPixelImg(nullptr) {};
  virtual ~fixRectPixelImg();

  fixRectPixelImg(const fixRectPixelImg& from);
  fixRectPixelImg(fixRectPixelImg&& from) noexcept
    : fixRectPixelImg() {
    *this = ::std::move(from);
  }

  inline fixRectPixelImg& operator=(const fixRectPixelImg& from) {
    CopyFrom(from);
    return *this;
  }
  inline fixRectPixelImg& operator=(fixRectPixelImg&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const fixRectPixelImg& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const fixRectPixelImg* internal_default_instance() {
    return reinterpret_cast<const fixRectPixelImg*>(
               &_fixRectPixelImg_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(fixRectPixelImg& a, fixRectPixelImg& b) {
    a.Swap(&b);
  }
  inline void Swap(fixRectPixelImg* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(fixRectPixelImg* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline fixRectPixelImg* New() const final {
    return CreateMaybeMessage<fixRectPixelImg>(nullptr);
  }

  fixRectPixelImg* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<fixRectPixelImg>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const fixRectPixelImg& from);
  void MergeFrom(const fixRectPixelImg& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(fixRectPixelImg* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "com.zhichenhaixin.proto.fixRectPixelImg";
  }
  protected:
  explicit fixRectPixelImg(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ZCHXRadarVideo_2eproto);
    return ::descriptor_table_ZCHXRadarVideo_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPointsFieldNumber = 3,
    kWidthFieldNumber = 1,
    kHeightFieldNumber = 2,
  };
  // repeated .com.zhichenhaixin.proto.pixelPoint points = 3;
  int points_size() const;
  private:
  int _internal_points_size() const;
  public:
  void clear_points();
  ::com::zhichenhaixin::proto::pixelPoint* mutable_points(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::zhichenhaixin::proto::pixelPoint >*
      mutable_points();
  private:
  const ::com::zhichenhaixin::proto::pixelPoint& _internal_points(int index) const;
  ::com::zhichenhaixin::proto::pixelPoint* _internal_add_points();
  public:
  const ::com::zhichenhaixin::proto::pixelPoint& points(int index) const;
  ::com::zhichenhaixin::proto::pixelPoint* add_points();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::zhichenhaixin::proto::pixelPoint >&
      points() const;

  // required uint32 width = 1;
  bool has_width() const;
  private:
  bool _internal_has_width() const;
  public:
  void clear_width();
  ::PROTOBUF_NAMESPACE_ID::uint32 width() const;
  void set_width(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_width() const;
  void _internal_set_width(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // required uint32 height = 2;
  bool has_height() const;
  private:
  bool _internal_has_height() const;
  public:
  void clear_height();
  ::PROTOBUF_NAMESPACE_ID::uint32 height() const;
  void set_height(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_height() const;
  void _internal_set_height(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:com.zhichenhaixin.proto.fixRectPixelImg)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::zhichenhaixin::proto::pixelPoint > points_;
  ::PROTOBUF_NAMESPACE_ID::uint32 width_;
  ::PROTOBUF_NAMESPACE_ID::uint32 height_;
  friend struct ::TableStruct_ZCHXRadarVideo_2eproto;
};
// -------------------------------------------------------------------

class predictionArea PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:com.zhichenhaixin.proto.predictionArea) */ {
 public:
  inline predictionArea() : predictionArea(nullptr) {};
  virtual ~predictionArea();

  predictionArea(const predictionArea& from);
  predictionArea(predictionArea&& from) noexcept
    : predictionArea() {
    *this = ::std::move(from);
  }

  inline predictionArea& operator=(const predictionArea& from) {
    CopyFrom(from);
    return *this;
  }
  inline predictionArea& operator=(predictionArea&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const predictionArea& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const predictionArea* internal_default_instance() {
    return reinterpret_cast<const predictionArea*>(
               &_predictionArea_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(predictionArea& a, predictionArea& b) {
    a.Swap(&b);
  }
  inline void Swap(predictionArea* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(predictionArea* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline predictionArea* New() const final {
    return CreateMaybeMessage<predictionArea>(nullptr);
  }

  predictionArea* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<predictionArea>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const predictionArea& from);
  void MergeFrom(const predictionArea& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(predictionArea* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "com.zhichenhaixin.proto.predictionArea";
  }
  protected:
  explicit predictionArea(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ZCHXRadarVideo_2eproto);
    return ::descriptor_table_ZCHXRadarVideo_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAreaFieldNumber = 1,
  };
  // repeated .com.zhichenhaixin.proto.singleVideoBlock area = 1;
  int area_size() const;
  private:
  int _internal_area_size() const;
  public:
  void clear_area();
  ::com::zhichenhaixin::proto::singleVideoBlock* mutable_area(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::zhichenhaixin::proto::singleVideoBlock >*
      mutable_area();
  private:
  const ::com::zhichenhaixin::proto::singleVideoBlock& _internal_area(int index) const;
  ::com::zhichenhaixin::proto::singleVideoBlock* _internal_add_area();
  public:
  const ::com::zhichenhaixin::proto::singleVideoBlock& area(int index) const;
  ::com::zhichenhaixin::proto::singleVideoBlock* add_area();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::zhichenhaixin::proto::singleVideoBlock >&
      area() const;

  // @@protoc_insertion_point(class_scope:com.zhichenhaixin.proto.predictionArea)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::zhichenhaixin::proto::singleVideoBlock > area_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_ZCHXRadarVideo_2eproto;
};
// -------------------------------------------------------------------

class RadarRectDef PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:com.zhichenhaixin.proto.RadarRectDef) */ {
 public:
  inline RadarRectDef() : RadarRectDef(nullptr) {};
  virtual ~RadarRectDef();

  RadarRectDef(const RadarRectDef& from);
  RadarRectDef(RadarRectDef&& from) noexcept
    : RadarRectDef() {
    *this = ::std::move(from);
  }

  inline RadarRectDef& operator=(const RadarRectDef& from) {
    CopyFrom(from);
    return *this;
  }
  inline RadarRectDef& operator=(RadarRectDef&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RadarRectDef& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RadarRectDef* internal_default_instance() {
    return reinterpret_cast<const RadarRectDef*>(
               &_RadarRectDef_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(RadarRectDef& a, RadarRectDef& b) {
    a.Swap(&b);
  }
  inline void Swap(RadarRectDef* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RadarRectDef* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RadarRectDef* New() const final {
    return CreateMaybeMessage<RadarRectDef>(nullptr);
  }

  RadarRectDef* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RadarRectDef>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RadarRectDef& from);
  void MergeFrom(const RadarRectDef& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RadarRectDef* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "com.zhichenhaixin.proto.RadarRectDef";
  }
  protected:
  explicit RadarRectDef(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ZCHXRadarVideo_2eproto);
    return ::descriptor_table_ZCHXRadarVideo_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBlocksFieldNumber = 10,
    kPixelPntsFieldNumber = 18,
    kPredictionAreasFieldNumber = 20,
    kTopLeftlatitudeFieldNumber = 2,
    kTopLeftlongitudeFieldNumber = 3,
    kBottomRightlatitudeFieldNumber = 4,
    kRectNumberFieldNumber = 1,
    kUpdateTimeFieldNumber = 8,
    kBottomRightlongitudeFieldNumber = 5,
    kCenterlatitudeFieldNumber = 6,
    kCenterlongitudeFieldNumber = 7,
    kStartlatitudeFieldNumber = 11,
    kStartlongitudeFieldNumber = 12,
    kEndlatitudeFieldNumber = 13,
    kEndlongitudeFieldNumber = 14,
    kDiameterFieldNumber = 9,
    kRealDataFieldNumber = 19,
    kAngleFieldNumber = 15,
    kSogFieldNumber = 16,
    kCogFieldNumber = 17,
  };
  // repeated .com.zhichenhaixin.proto.singleVideoBlock Blocks = 10;
  int blocks_size() const;
  private:
  int _internal_blocks_size() const;
  public:
  void clear_blocks();
  ::com::zhichenhaixin::proto::singleVideoBlock* mutable_blocks(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::zhichenhaixin::proto::singleVideoBlock >*
      mutable_blocks();
  private:
  const ::com::zhichenhaixin::proto::singleVideoBlock& _internal_blocks(int index) const;
  ::com::zhichenhaixin::proto::singleVideoBlock* _internal_add_blocks();
  public:
  const ::com::zhichenhaixin::proto::singleVideoBlock& blocks(int index) const;
  ::com::zhichenhaixin::proto::singleVideoBlock* add_blocks();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::zhichenhaixin::proto::singleVideoBlock >&
      blocks() const;

  // repeated .com.zhichenhaixin.proto.pixelPoint pixelPnts = 18;
  int pixelpnts_size() const;
  private:
  int _internal_pixelpnts_size() const;
  public:
  void clear_pixelpnts();
  ::com::zhichenhaixin::proto::pixelPoint* mutable_pixelpnts(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::zhichenhaixin::proto::pixelPoint >*
      mutable_pixelpnts();
  private:
  const ::com::zhichenhaixin::proto::pixelPoint& _internal_pixelpnts(int index) const;
  ::com::zhichenhaixin::proto::pixelPoint* _internal_add_pixelpnts();
  public:
  const ::com::zhichenhaixin::proto::pixelPoint& pixelpnts(int index) const;
  ::com::zhichenhaixin::proto::pixelPoint* add_pixelpnts();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::zhichenhaixin::proto::pixelPoint >&
      pixelpnts() const;

  // repeated .com.zhichenhaixin.proto.predictionArea predictionAreas = 20;
  int predictionareas_size() const;
  private:
  int _internal_predictionareas_size() const;
  public:
  void clear_predictionareas();
  ::com::zhichenhaixin::proto::predictionArea* mutable_predictionareas(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::zhichenhaixin::proto::predictionArea >*
      mutable_predictionareas();
  private:
  const ::com::zhichenhaixin::proto::predictionArea& _internal_predictionareas(int index) const;
  ::com::zhichenhaixin::proto::predictionArea* _internal_add_predictionareas();
  public:
  const ::com::zhichenhaixin::proto::predictionArea& predictionareas(int index) const;
  ::com::zhichenhaixin::proto::predictionArea* add_predictionareas();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::zhichenhaixin::proto::predictionArea >&
      predictionareas() const;

  // required double topLeftlatitude = 2;
  bool has_topleftlatitude() const;
  private:
  bool _internal_has_topleftlatitude() const;
  public:
  void clear_topleftlatitude();
  double topleftlatitude() const;
  void set_topleftlatitude(double value);
  private:
  double _internal_topleftlatitude() const;
  void _internal_set_topleftlatitude(double value);
  public:

  // required double topLeftlongitude = 3;
  bool has_topleftlongitude() const;
  private:
  bool _internal_has_topleftlongitude() const;
  public:
  void clear_topleftlongitude();
  double topleftlongitude() const;
  void set_topleftlongitude(double value);
  private:
  double _internal_topleftlongitude() const;
  void _internal_set_topleftlongitude(double value);
  public:

  // required double bottomRightlatitude = 4;
  bool has_bottomrightlatitude() const;
  private:
  bool _internal_has_bottomrightlatitude() const;
  public:
  void clear_bottomrightlatitude();
  double bottomrightlatitude() const;
  void set_bottomrightlatitude(double value);
  private:
  double _internal_bottomrightlatitude() const;
  void _internal_set_bottomrightlatitude(double value);
  public:

  // required uint32 rectNumber = 1;
  bool has_rectnumber() const;
  private:
  bool _internal_has_rectnumber() const;
  public:
  void clear_rectnumber();
  ::PROTOBUF_NAMESPACE_ID::uint32 rectnumber() const;
  void set_rectnumber(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_rectnumber() const;
  void _internal_set_rectnumber(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // required uint32 updateTime = 8;
  bool has_updatetime() const;
  private:
  bool _internal_has_updatetime() const;
  public:
  void clear_updatetime();
  ::PROTOBUF_NAMESPACE_ID::uint32 updatetime() const;
  void set_updatetime(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_updatetime() const;
  void _internal_set_updatetime(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // required double bottomRightlongitude = 5;
  bool has_bottomrightlongitude() const;
  private:
  bool _internal_has_bottomrightlongitude() const;
  public:
  void clear_bottomrightlongitude();
  double bottomrightlongitude() const;
  void set_bottomrightlongitude(double value);
  private:
  double _internal_bottomrightlongitude() const;
  void _internal_set_bottomrightlongitude(double value);
  public:

  // required double centerlatitude = 6;
  bool has_centerlatitude() const;
  private:
  bool _internal_has_centerlatitude() const;
  public:
  void clear_centerlatitude();
  double centerlatitude() const;
  void set_centerlatitude(double value);
  private:
  double _internal_centerlatitude() const;
  void _internal_set_centerlatitude(double value);
  public:

  // required double centerlongitude = 7;
  bool has_centerlongitude() const;
  private:
  bool _internal_has_centerlongitude() const;
  public:
  void clear_centerlongitude();
  double centerlongitude() const;
  void set_centerlongitude(double value);
  private:
  double _internal_centerlongitude() const;
  void _internal_set_centerlongitude(double value);
  public:

  // optional double startlatitude = 11;
  bool has_startlatitude() const;
  private:
  bool _internal_has_startlatitude() const;
  public:
  void clear_startlatitude();
  double startlatitude() const;
  void set_startlatitude(double value);
  private:
  double _internal_startlatitude() const;
  void _internal_set_startlatitude(double value);
  public:

  // optional double startlongitude = 12;
  bool has_startlongitude() const;
  private:
  bool _internal_has_startlongitude() const;
  public:
  void clear_startlongitude();
  double startlongitude() const;
  void set_startlongitude(double value);
  private:
  double _internal_startlongitude() const;
  void _internal_set_startlongitude(double value);
  public:

  // optional double endlatitude = 13;
  bool has_endlatitude() const;
  private:
  bool _internal_has_endlatitude() const;
  public:
  void clear_endlatitude();
  double endlatitude() const;
  void set_endlatitude(double value);
  private:
  double _internal_endlatitude() const;
  void _internal_set_endlatitude(double value);
  public:

  // optional double endlongitude = 14;
  bool has_endlongitude() const;
  private:
  bool _internal_has_endlongitude() const;
  public:
  void clear_endlongitude();
  double endlongitude() const;
  void set_endlongitude(double value);
  private:
  double _internal_endlongitude() const;
  void _internal_set_endlongitude(double value);
  public:

  // optional int32 diameter = 9;
  bool has_diameter() const;
  private:
  bool _internal_has_diameter() const;
  public:
  void clear_diameter();
  ::PROTOBUF_NAMESPACE_ID::int32 diameter() const;
  void set_diameter(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_diameter() const;
  void _internal_set_diameter(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // required bool realData = 19;
  bool has_realdata() const;
  private:
  bool _internal_has_realdata() const;
  public:
  void clear_realdata();
  bool realdata() const;
  void set_realdata(bool value);
  private:
  bool _internal_realdata() const;
  void _internal_set_realdata(bool value);
  public:

  // optional double angle = 15;
  bool has_angle() const;
  private:
  bool _internal_has_angle() const;
  public:
  void clear_angle();
  double angle() const;
  void set_angle(double value);
  private:
  double _internal_angle() const;
  void _internal_set_angle(double value);
  public:

  // required double sog = 16;
  bool has_sog() const;
  private:
  bool _internal_has_sog() const;
  public:
  void clear_sog();
  double sog() const;
  void set_sog(double value);
  private:
  double _internal_sog() const;
  void _internal_set_sog(double value);
  public:

  // required double cog = 17;
  bool has_cog() const;
  private:
  bool _internal_has_cog() const;
  public:
  void clear_cog();
  double cog() const;
  void set_cog(double value);
  private:
  double _internal_cog() const;
  void _internal_set_cog(double value);
  public:

  // @@protoc_insertion_point(class_scope:com.zhichenhaixin.proto.RadarRectDef)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::zhichenhaixin::proto::singleVideoBlock > blocks_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::zhichenhaixin::proto::pixelPoint > pixelpnts_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::zhichenhaixin::proto::predictionArea > predictionareas_;
  double topleftlatitude_;
  double topleftlongitude_;
  double bottomrightlatitude_;
  ::PROTOBUF_NAMESPACE_ID::uint32 rectnumber_;
  ::PROTOBUF_NAMESPACE_ID::uint32 updatetime_;
  double bottomrightlongitude_;
  double centerlatitude_;
  double centerlongitude_;
  double startlatitude_;
  double startlongitude_;
  double endlatitude_;
  double endlongitude_;
  ::PROTOBUF_NAMESPACE_ID::int32 diameter_;
  bool realdata_;
  double angle_;
  double sog_;
  double cog_;
  friend struct ::TableStruct_ZCHXRadarVideo_2eproto;
};
// -------------------------------------------------------------------

class RadarRect PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:com.zhichenhaixin.proto.RadarRect) */ {
 public:
  inline RadarRect() : RadarRect(nullptr) {};
  virtual ~RadarRect();

  RadarRect(const RadarRect& from);
  RadarRect(RadarRect&& from) noexcept
    : RadarRect() {
    *this = ::std::move(from);
  }

  inline RadarRect& operator=(const RadarRect& from) {
    CopyFrom(from);
    return *this;
  }
  inline RadarRect& operator=(RadarRect&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RadarRect& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RadarRect* internal_default_instance() {
    return reinterpret_cast<const RadarRect*>(
               &_RadarRect_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(RadarRect& a, RadarRect& b) {
    a.Swap(&b);
  }
  inline void Swap(RadarRect* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RadarRect* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RadarRect* New() const final {
    return CreateMaybeMessage<RadarRect>(nullptr);
  }

  RadarRect* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RadarRect>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RadarRect& from);
  void MergeFrom(const RadarRect& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RadarRect* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "com.zhichenhaixin.proto.RadarRect";
  }
  protected:
  explicit RadarRect(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ZCHXRadarVideo_2eproto);
    return ::descriptor_table_ZCHXRadarVideo_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kHistoryRectsFieldNumber = 2,
    kCurrentRectFieldNumber = 1,
    kDirConfirmedFieldNumber = 3,
    kEstcountFieldNumber = 4,
  };
  // repeated .com.zhichenhaixin.proto.RadarRectDef historyRects = 2;
  int historyrects_size() const;
  private:
  int _internal_historyrects_size() const;
  public:
  void clear_historyrects();
  ::com::zhichenhaixin::proto::RadarRectDef* mutable_historyrects(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::zhichenhaixin::proto::RadarRectDef >*
      mutable_historyrects();
  private:
  const ::com::zhichenhaixin::proto::RadarRectDef& _internal_historyrects(int index) const;
  ::com::zhichenhaixin::proto::RadarRectDef* _internal_add_historyrects();
  public:
  const ::com::zhichenhaixin::proto::RadarRectDef& historyrects(int index) const;
  ::com::zhichenhaixin::proto::RadarRectDef* add_historyrects();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::zhichenhaixin::proto::RadarRectDef >&
      historyrects() const;

  // required .com.zhichenhaixin.proto.RadarRectDef currentRect = 1;
  bool has_currentrect() const;
  private:
  bool _internal_has_currentrect() const;
  public:
  void clear_currentrect();
  const ::com::zhichenhaixin::proto::RadarRectDef& currentrect() const;
  ::com::zhichenhaixin::proto::RadarRectDef* release_currentrect();
  ::com::zhichenhaixin::proto::RadarRectDef* mutable_currentrect();
  void set_allocated_currentrect(::com::zhichenhaixin::proto::RadarRectDef* currentrect);
  private:
  const ::com::zhichenhaixin::proto::RadarRectDef& _internal_currentrect() const;
  ::com::zhichenhaixin::proto::RadarRectDef* _internal_mutable_currentrect();
  public:
  void unsafe_arena_set_allocated_currentrect(
      ::com::zhichenhaixin::proto::RadarRectDef* currentrect);
  ::com::zhichenhaixin::proto::RadarRectDef* unsafe_arena_release_currentrect();

  // required bool dirConfirmed = 3;
  bool has_dirconfirmed() const;
  private:
  bool _internal_has_dirconfirmed() const;
  public:
  void clear_dirconfirmed();
  bool dirconfirmed() const;
  void set_dirconfirmed(bool value);
  private:
  bool _internal_dirconfirmed() const;
  void _internal_set_dirconfirmed(bool value);
  public:

  // required uint32 estcount = 4;
  bool has_estcount() const;
  private:
  bool _internal_has_estcount() const;
  public:
  void clear_estcount();
  ::PROTOBUF_NAMESPACE_ID::uint32 estcount() const;
  void set_estcount(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_estcount() const;
  void _internal_set_estcount(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:com.zhichenhaixin.proto.RadarRect)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::zhichenhaixin::proto::RadarRectDef > historyrects_;
  ::com::zhichenhaixin::proto::RadarRectDef* currentrect_;
  bool dirconfirmed_;
  ::PROTOBUF_NAMESPACE_ID::uint32 estcount_;
  friend struct ::TableStruct_ZCHXRadarVideo_2eproto;
};
// -------------------------------------------------------------------

class RadarRects PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:com.zhichenhaixin.proto.RadarRects) */ {
 public:
  inline RadarRects() : RadarRects(nullptr) {};
  virtual ~RadarRects();

  RadarRects(const RadarRects& from);
  RadarRects(RadarRects&& from) noexcept
    : RadarRects() {
    *this = ::std::move(from);
  }

  inline RadarRects& operator=(const RadarRects& from) {
    CopyFrom(from);
    return *this;
  }
  inline RadarRects& operator=(RadarRects&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RadarRects& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RadarRects* internal_default_instance() {
    return reinterpret_cast<const RadarRects*>(
               &_RadarRects_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(RadarRects& a, RadarRects& b) {
    a.Swap(&b);
  }
  inline void Swap(RadarRects* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RadarRects* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RadarRects* New() const final {
    return CreateMaybeMessage<RadarRects>(nullptr);
  }

  RadarRects* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RadarRects>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RadarRects& from);
  void MergeFrom(const RadarRects& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RadarRects* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "com.zhichenhaixin.proto.RadarRects";
  }
  protected:
  explicit RadarRects(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ZCHXRadarVideo_2eproto);
    return ::descriptor_table_ZCHXRadarVideo_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRectsFieldNumber = 3,
    kUTCFieldNumber = 1,
    kLengthFieldNumber = 2,
  };
  // repeated .com.zhichenhaixin.proto.RadarRect rects = 3;
  int rects_size() const;
  private:
  int _internal_rects_size() const;
  public:
  void clear_rects();
  ::com::zhichenhaixin::proto::RadarRect* mutable_rects(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::zhichenhaixin::proto::RadarRect >*
      mutable_rects();
  private:
  const ::com::zhichenhaixin::proto::RadarRect& _internal_rects(int index) const;
  ::com::zhichenhaixin::proto::RadarRect* _internal_add_rects();
  public:
  const ::com::zhichenhaixin::proto::RadarRect& rects(int index) const;
  ::com::zhichenhaixin::proto::RadarRect* add_rects();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::zhichenhaixin::proto::RadarRect >&
      rects() const;

  // required uint64 UTC = 1;
  bool has_utc() const;
  private:
  bool _internal_has_utc() const;
  public:
  void clear_utc();
  ::PROTOBUF_NAMESPACE_ID::uint64 utc() const;
  void set_utc(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_utc() const;
  void _internal_set_utc(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // required int32 length = 2;
  bool has_length() const;
  private:
  bool _internal_has_length() const;
  public:
  void clear_length();
  ::PROTOBUF_NAMESPACE_ID::int32 length() const;
  void set_length(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_length() const;
  void _internal_set_length(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:com.zhichenhaixin.proto.RadarRects)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::zhichenhaixin::proto::RadarRect > rects_;
  ::PROTOBUF_NAMESPACE_ID::uint64 utc_;
  ::PROTOBUF_NAMESPACE_ID::int32 length_;
  friend struct ::TableStruct_ZCHXRadarVideo_2eproto;
};
// -------------------------------------------------------------------

class RadarVideo PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:com.zhichenhaixin.proto.RadarVideo) */ {
 public:
  inline RadarVideo() : RadarVideo(nullptr) {};
  virtual ~RadarVideo();

  RadarVideo(const RadarVideo& from);
  RadarVideo(RadarVideo&& from) noexcept
    : RadarVideo() {
    *this = ::std::move(from);
  }

  inline RadarVideo& operator=(const RadarVideo& from) {
    CopyFrom(from);
    return *this;
  }
  inline RadarVideo& operator=(RadarVideo&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RadarVideo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RadarVideo* internal_default_instance() {
    return reinterpret_cast<const RadarVideo*>(
               &_RadarVideo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(RadarVideo& a, RadarVideo& b) {
    a.Swap(&b);
  }
  inline void Swap(RadarVideo* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RadarVideo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RadarVideo* New() const final {
    return CreateMaybeMessage<RadarVideo>(nullptr);
  }

  RadarVideo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RadarVideo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RadarVideo& from);
  void MergeFrom(const RadarVideo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RadarVideo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "com.zhichenhaixin.proto.RadarVideo";
  }
  protected:
  explicit RadarVideo(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ZCHXRadarVideo_2eproto);
    return ::descriptor_table_ZCHXRadarVideo_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRadarNameFieldNumber = 2,
    kImageDataFieldNumber = 6,
    kCurImageDataFieldNumber = 7,
    kPreImageDataFieldNumber = 8,
    kRadarIdFieldNumber = 1,
    kLatitudeFieldNumber = 3,
    kLongitudeFieldNumber = 4,
    kUTCFieldNumber = 5,
    kWidthFieldNumber = 9,
    kHeightFieldNumber = 10,
    kRadiusFieldNumber = 11,
    kCurIndexFieldNumber = 12,
    kLoopNumFieldNumber = 13,
  };
  // required string radarName = 2;
  bool has_radarname() const;
  private:
  bool _internal_has_radarname() const;
  public:
  void clear_radarname();
  const std::string& radarname() const;
  void set_radarname(const std::string& value);
  void set_radarname(std::string&& value);
  void set_radarname(const char* value);
  void set_radarname(const char* value, size_t size);
  std::string* mutable_radarname();
  std::string* release_radarname();
  void set_allocated_radarname(std::string* radarname);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_radarname();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_radarname(
      std::string* radarname);
  private:
  const std::string& _internal_radarname() const;
  void _internal_set_radarname(const std::string& value);
  std::string* _internal_mutable_radarname();
  public:

  // required bytes imageData = 6;
  bool has_imagedata() const;
  private:
  bool _internal_has_imagedata() const;
  public:
  void clear_imagedata();
  const std::string& imagedata() const;
  void set_imagedata(const std::string& value);
  void set_imagedata(std::string&& value);
  void set_imagedata(const char* value);
  void set_imagedata(const void* value, size_t size);
  std::string* mutable_imagedata();
  std::string* release_imagedata();
  void set_allocated_imagedata(std::string* imagedata);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_imagedata();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_imagedata(
      std::string* imagedata);
  private:
  const std::string& _internal_imagedata() const;
  void _internal_set_imagedata(const std::string& value);
  std::string* _internal_mutable_imagedata();
  public:

  // required bytes curImageData = 7;
  bool has_curimagedata() const;
  private:
  bool _internal_has_curimagedata() const;
  public:
  void clear_curimagedata();
  const std::string& curimagedata() const;
  void set_curimagedata(const std::string& value);
  void set_curimagedata(std::string&& value);
  void set_curimagedata(const char* value);
  void set_curimagedata(const void* value, size_t size);
  std::string* mutable_curimagedata();
  std::string* release_curimagedata();
  void set_allocated_curimagedata(std::string* curimagedata);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_curimagedata();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_curimagedata(
      std::string* curimagedata);
  private:
  const std::string& _internal_curimagedata() const;
  void _internal_set_curimagedata(const std::string& value);
  std::string* _internal_mutable_curimagedata();
  public:

  // required bytes preImageData = 8;
  bool has_preimagedata() const;
  private:
  bool _internal_has_preimagedata() const;
  public:
  void clear_preimagedata();
  const std::string& preimagedata() const;
  void set_preimagedata(const std::string& value);
  void set_preimagedata(std::string&& value);
  void set_preimagedata(const char* value);
  void set_preimagedata(const void* value, size_t size);
  std::string* mutable_preimagedata();
  std::string* release_preimagedata();
  void set_allocated_preimagedata(std::string* preimagedata);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_preimagedata();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_preimagedata(
      std::string* preimagedata);
  private:
  const std::string& _internal_preimagedata() const;
  void _internal_set_preimagedata(const std::string& value);
  std::string* _internal_mutable_preimagedata();
  public:

  // required uint64 radarId = 1;
  bool has_radarid() const;
  private:
  bool _internal_has_radarid() const;
  public:
  void clear_radarid();
  ::PROTOBUF_NAMESPACE_ID::uint64 radarid() const;
  void set_radarid(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_radarid() const;
  void _internal_set_radarid(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // required double latitude = 3;
  bool has_latitude() const;
  private:
  bool _internal_has_latitude() const;
  public:
  void clear_latitude();
  double latitude() const;
  void set_latitude(double value);
  private:
  double _internal_latitude() const;
  void _internal_set_latitude(double value);
  public:

  // required double longitude = 4;
  bool has_longitude() const;
  private:
  bool _internal_has_longitude() const;
  public:
  void clear_longitude();
  double longitude() const;
  void set_longitude(double value);
  private:
  double _internal_longitude() const;
  void _internal_set_longitude(double value);
  public:

  // required uint64 UTC = 5;
  bool has_utc() const;
  private:
  bool _internal_has_utc() const;
  public:
  void clear_utc();
  ::PROTOBUF_NAMESPACE_ID::uint64 utc() const;
  void set_utc(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_utc() const;
  void _internal_set_utc(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // required uint32 width = 9;
  bool has_width() const;
  private:
  bool _internal_has_width() const;
  public:
  void clear_width();
  ::PROTOBUF_NAMESPACE_ID::uint32 width() const;
  void set_width(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_width() const;
  void _internal_set_width(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // required uint32 height = 10;
  bool has_height() const;
  private:
  bool _internal_has_height() const;
  public:
  void clear_height();
  ::PROTOBUF_NAMESPACE_ID::uint32 height() const;
  void set_height(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_height() const;
  void _internal_set_height(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // required double radius = 11;
  bool has_radius() const;
  private:
  bool _internal_has_radius() const;
  public:
  void clear_radius();
  double radius() const;
  void set_radius(double value);
  private:
  double _internal_radius() const;
  void _internal_set_radius(double value);
  public:

  // required uint32 curIndex = 12;
  bool has_curindex() const;
  private:
  bool _internal_has_curindex() const;
  public:
  void clear_curindex();
  ::PROTOBUF_NAMESPACE_ID::uint32 curindex() const;
  void set_curindex(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_curindex() const;
  void _internal_set_curindex(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // required uint32 loopNum = 13;
  bool has_loopnum() const;
  private:
  bool _internal_has_loopnum() const;
  public:
  void clear_loopnum();
  ::PROTOBUF_NAMESPACE_ID::uint32 loopnum() const;
  void set_loopnum(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_loopnum() const;
  void _internal_set_loopnum(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:com.zhichenhaixin.proto.RadarVideo)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr radarname_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr imagedata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr curimagedata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr preimagedata_;
  ::PROTOBUF_NAMESPACE_ID::uint64 radarid_;
  double latitude_;
  double longitude_;
  ::PROTOBUF_NAMESPACE_ID::uint64 utc_;
  ::PROTOBUF_NAMESPACE_ID::uint32 width_;
  ::PROTOBUF_NAMESPACE_ID::uint32 height_;
  double radius_;
  ::PROTOBUF_NAMESPACE_ID::uint32 curindex_;
  ::PROTOBUF_NAMESPACE_ID::uint32 loopnum_;
  friend struct ::TableStruct_ZCHXRadarVideo_2eproto;
};
// -------------------------------------------------------------------

class RadarVideoPoint PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:com.zhichenhaixin.proto.RadarVideoPoint) */ {
 public:
  inline RadarVideoPoint() : RadarVideoPoint(nullptr) {};
  virtual ~RadarVideoPoint();

  RadarVideoPoint(const RadarVideoPoint& from);
  RadarVideoPoint(RadarVideoPoint&& from) noexcept
    : RadarVideoPoint() {
    *this = ::std::move(from);
  }

  inline RadarVideoPoint& operator=(const RadarVideoPoint& from) {
    CopyFrom(from);
    return *this;
  }
  inline RadarVideoPoint& operator=(RadarVideoPoint&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RadarVideoPoint& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RadarVideoPoint* internal_default_instance() {
    return reinterpret_cast<const RadarVideoPoint*>(
               &_RadarVideoPoint_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(RadarVideoPoint& a, RadarVideoPoint& b) {
    a.Swap(&b);
  }
  inline void Swap(RadarVideoPoint* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RadarVideoPoint* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RadarVideoPoint* New() const final {
    return CreateMaybeMessage<RadarVideoPoint>(nullptr);
  }

  RadarVideoPoint* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RadarVideoPoint>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RadarVideoPoint& from);
  void MergeFrom(const RadarVideoPoint& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RadarVideoPoint* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "com.zhichenhaixin.proto.RadarVideoPoint";
  }
  protected:
  explicit RadarVideoPoint(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_ZCHXRadarVideo_2eproto);
    return ::descriptor_table_ZCHXRadarVideo_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRadarNameFieldNumber = 2,
    kImageDataFieldNumber = 6,
    kPreImageDataFieldNumber = 7,
    kLatitudeFieldNumber = 3,
    kLongitudeFieldNumber = 4,
    kUTCFieldNumber = 5,
    kWidthFieldNumber = 8,
    kHeightFieldNumber = 9,
    kRadiusFieldNumber = 10,
    kCurIndexFieldNumber = 11,
    kLoopNumFieldNumber = 12,
  };
  // required string radarName = 2;
  bool has_radarname() const;
  private:
  bool _internal_has_radarname() const;
  public:
  void clear_radarname();
  const std::string& radarname() const;
  void set_radarname(const std::string& value);
  void set_radarname(std::string&& value);
  void set_radarname(const char* value);
  void set_radarname(const char* value, size_t size);
  std::string* mutable_radarname();
  std::string* release_radarname();
  void set_allocated_radarname(std::string* radarname);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_radarname();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_radarname(
      std::string* radarname);
  private:
  const std::string& _internal_radarname() const;
  void _internal_set_radarname(const std::string& value);
  std::string* _internal_mutable_radarname();
  public:

  // required bytes imageData = 6;
  bool has_imagedata() const;
  private:
  bool _internal_has_imagedata() const;
  public:
  void clear_imagedata();
  const std::string& imagedata() const;
  void set_imagedata(const std::string& value);
  void set_imagedata(std::string&& value);
  void set_imagedata(const char* value);
  void set_imagedata(const void* value, size_t size);
  std::string* mutable_imagedata();
  std::string* release_imagedata();
  void set_allocated_imagedata(std::string* imagedata);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_imagedata();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_imagedata(
      std::string* imagedata);
  private:
  const std::string& _internal_imagedata() const;
  void _internal_set_imagedata(const std::string& value);
  std::string* _internal_mutable_imagedata();
  public:

  // required bytes preImageData = 7;
  bool has_preimagedata() const;
  private:
  bool _internal_has_preimagedata() const;
  public:
  void clear_preimagedata();
  const std::string& preimagedata() const;
  void set_preimagedata(const std::string& value);
  void set_preimagedata(std::string&& value);
  void set_preimagedata(const char* value);
  void set_preimagedata(const void* value, size_t size);
  std::string* mutable_preimagedata();
  std::string* release_preimagedata();
  void set_allocated_preimagedata(std::string* preimagedata);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_preimagedata();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_preimagedata(
      std::string* preimagedata);
  private:
  const std::string& _internal_preimagedata() const;
  void _internal_set_preimagedata(const std::string& value);
  std::string* _internal_mutable_preimagedata();
  public:

  // required double latitude = 3;
  bool has_latitude() const;
  private:
  bool _internal_has_latitude() const;
  public:
  void clear_latitude();
  double latitude() const;
  void set_latitude(double value);
  private:
  double _internal_latitude() const;
  void _internal_set_latitude(double value);
  public:

  // required double longitude = 4;
  bool has_longitude() const;
  private:
  bool _internal_has_longitude() const;
  public:
  void clear_longitude();
  double longitude() const;
  void set_longitude(double value);
  private:
  double _internal_longitude() const;
  void _internal_set_longitude(double value);
  public:

  // required uint64 UTC = 5;
  bool has_utc() const;
  private:
  bool _internal_has_utc() const;
  public:
  void clear_utc();
  ::PROTOBUF_NAMESPACE_ID::uint64 utc() const;
  void set_utc(::PROTOBUF_NAMESPACE_ID::uint64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint64 _internal_utc() const;
  void _internal_set_utc(::PROTOBUF_NAMESPACE_ID::uint64 value);
  public:

  // required uint32 width = 8;
  bool has_width() const;
  private:
  bool _internal_has_width() const;
  public:
  void clear_width();
  ::PROTOBUF_NAMESPACE_ID::uint32 width() const;
  void set_width(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_width() const;
  void _internal_set_width(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // required uint32 height = 9;
  bool has_height() const;
  private:
  bool _internal_has_height() const;
  public:
  void clear_height();
  ::PROTOBUF_NAMESPACE_ID::uint32 height() const;
  void set_height(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_height() const;
  void _internal_set_height(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // required double radius = 10;
  bool has_radius() const;
  private:
  bool _internal_has_radius() const;
  public:
  void clear_radius();
  double radius() const;
  void set_radius(double value);
  private:
  double _internal_radius() const;
  void _internal_set_radius(double value);
  public:

  // required uint32 curIndex = 11;
  bool has_curindex() const;
  private:
  bool _internal_has_curindex() const;
  public:
  void clear_curindex();
  ::PROTOBUF_NAMESPACE_ID::uint32 curindex() const;
  void set_curindex(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_curindex() const;
  void _internal_set_curindex(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // required uint32 loopNum = 12;
  bool has_loopnum() const;
  private:
  bool _internal_has_loopnum() const;
  public:
  void clear_loopnum();
  ::PROTOBUF_NAMESPACE_ID::uint32 loopnum() const;
  void set_loopnum(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_loopnum() const;
  void _internal_set_loopnum(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:com.zhichenhaixin.proto.RadarVideoPoint)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr radarname_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr imagedata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr preimagedata_;
  double latitude_;
  double longitude_;
  ::PROTOBUF_NAMESPACE_ID::uint64 utc_;
  ::PROTOBUF_NAMESPACE_ID::uint32 width_;
  ::PROTOBUF_NAMESPACE_ID::uint32 height_;
  double radius_;
  ::PROTOBUF_NAMESPACE_ID::uint32 curindex_;
  ::PROTOBUF_NAMESPACE_ID::uint32 loopnum_;
  friend struct ::TableStruct_ZCHXRadarVideo_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// singleVideoBlock

// required double latitude = 1;
inline bool singleVideoBlock::_internal_has_latitude() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool singleVideoBlock::has_latitude() const {
  return _internal_has_latitude();
}
inline void singleVideoBlock::clear_latitude() {
  latitude_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline double singleVideoBlock::_internal_latitude() const {
  return latitude_;
}
inline double singleVideoBlock::latitude() const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.proto.singleVideoBlock.latitude)
  return _internal_latitude();
}
inline void singleVideoBlock::_internal_set_latitude(double value) {
  _has_bits_[0] |= 0x00000001u;
  latitude_ = value;
}
inline void singleVideoBlock::set_latitude(double value) {
  _internal_set_latitude(value);
  // @@protoc_insertion_point(field_set:com.zhichenhaixin.proto.singleVideoBlock.latitude)
}

// required double longitude = 2;
inline bool singleVideoBlock::_internal_has_longitude() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool singleVideoBlock::has_longitude() const {
  return _internal_has_longitude();
}
inline void singleVideoBlock::clear_longitude() {
  longitude_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline double singleVideoBlock::_internal_longitude() const {
  return longitude_;
}
inline double singleVideoBlock::longitude() const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.proto.singleVideoBlock.longitude)
  return _internal_longitude();
}
inline void singleVideoBlock::_internal_set_longitude(double value) {
  _has_bits_[0] |= 0x00000002u;
  longitude_ = value;
}
inline void singleVideoBlock::set_longitude(double value) {
  _internal_set_longitude(value);
  // @@protoc_insertion_point(field_set:com.zhichenhaixin.proto.singleVideoBlock.longitude)
}

// -------------------------------------------------------------------

// pixelPoint

// required uint32 x = 1;
inline bool pixelPoint::_internal_has_x() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool pixelPoint::has_x() const {
  return _internal_has_x();
}
inline void pixelPoint::clear_x() {
  x_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 pixelPoint::_internal_x() const {
  return x_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 pixelPoint::x() const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.proto.pixelPoint.x)
  return _internal_x();
}
inline void pixelPoint::_internal_set_x(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000001u;
  x_ = value;
}
inline void pixelPoint::set_x(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:com.zhichenhaixin.proto.pixelPoint.x)
}

// required uint32 y = 2;
inline bool pixelPoint::_internal_has_y() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool pixelPoint::has_y() const {
  return _internal_has_y();
}
inline void pixelPoint::clear_y() {
  y_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 pixelPoint::_internal_y() const {
  return y_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 pixelPoint::y() const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.proto.pixelPoint.y)
  return _internal_y();
}
inline void pixelPoint::_internal_set_y(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  y_ = value;
}
inline void pixelPoint::set_y(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:com.zhichenhaixin.proto.pixelPoint.y)
}

// -------------------------------------------------------------------

// fixRectPixelImg

// required uint32 width = 1;
inline bool fixRectPixelImg::_internal_has_width() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool fixRectPixelImg::has_width() const {
  return _internal_has_width();
}
inline void fixRectPixelImg::clear_width() {
  width_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 fixRectPixelImg::_internal_width() const {
  return width_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 fixRectPixelImg::width() const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.proto.fixRectPixelImg.width)
  return _internal_width();
}
inline void fixRectPixelImg::_internal_set_width(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000001u;
  width_ = value;
}
inline void fixRectPixelImg::set_width(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_width(value);
  // @@protoc_insertion_point(field_set:com.zhichenhaixin.proto.fixRectPixelImg.width)
}

// required uint32 height = 2;
inline bool fixRectPixelImg::_internal_has_height() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool fixRectPixelImg::has_height() const {
  return _internal_has_height();
}
inline void fixRectPixelImg::clear_height() {
  height_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 fixRectPixelImg::_internal_height() const {
  return height_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 fixRectPixelImg::height() const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.proto.fixRectPixelImg.height)
  return _internal_height();
}
inline void fixRectPixelImg::_internal_set_height(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  height_ = value;
}
inline void fixRectPixelImg::set_height(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_height(value);
  // @@protoc_insertion_point(field_set:com.zhichenhaixin.proto.fixRectPixelImg.height)
}

// repeated .com.zhichenhaixin.proto.pixelPoint points = 3;
inline int fixRectPixelImg::_internal_points_size() const {
  return points_.size();
}
inline int fixRectPixelImg::points_size() const {
  return _internal_points_size();
}
inline void fixRectPixelImg::clear_points() {
  points_.Clear();
}
inline ::com::zhichenhaixin::proto::pixelPoint* fixRectPixelImg::mutable_points(int index) {
  // @@protoc_insertion_point(field_mutable:com.zhichenhaixin.proto.fixRectPixelImg.points)
  return points_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::zhichenhaixin::proto::pixelPoint >*
fixRectPixelImg::mutable_points() {
  // @@protoc_insertion_point(field_mutable_list:com.zhichenhaixin.proto.fixRectPixelImg.points)
  return &points_;
}
inline const ::com::zhichenhaixin::proto::pixelPoint& fixRectPixelImg::_internal_points(int index) const {
  return points_.Get(index);
}
inline const ::com::zhichenhaixin::proto::pixelPoint& fixRectPixelImg::points(int index) const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.proto.fixRectPixelImg.points)
  return _internal_points(index);
}
inline ::com::zhichenhaixin::proto::pixelPoint* fixRectPixelImg::_internal_add_points() {
  return points_.Add();
}
inline ::com::zhichenhaixin::proto::pixelPoint* fixRectPixelImg::add_points() {
  // @@protoc_insertion_point(field_add:com.zhichenhaixin.proto.fixRectPixelImg.points)
  return _internal_add_points();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::zhichenhaixin::proto::pixelPoint >&
fixRectPixelImg::points() const {
  // @@protoc_insertion_point(field_list:com.zhichenhaixin.proto.fixRectPixelImg.points)
  return points_;
}

// -------------------------------------------------------------------

// predictionArea

// repeated .com.zhichenhaixin.proto.singleVideoBlock area = 1;
inline int predictionArea::_internal_area_size() const {
  return area_.size();
}
inline int predictionArea::area_size() const {
  return _internal_area_size();
}
inline void predictionArea::clear_area() {
  area_.Clear();
}
inline ::com::zhichenhaixin::proto::singleVideoBlock* predictionArea::mutable_area(int index) {
  // @@protoc_insertion_point(field_mutable:com.zhichenhaixin.proto.predictionArea.area)
  return area_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::zhichenhaixin::proto::singleVideoBlock >*
predictionArea::mutable_area() {
  // @@protoc_insertion_point(field_mutable_list:com.zhichenhaixin.proto.predictionArea.area)
  return &area_;
}
inline const ::com::zhichenhaixin::proto::singleVideoBlock& predictionArea::_internal_area(int index) const {
  return area_.Get(index);
}
inline const ::com::zhichenhaixin::proto::singleVideoBlock& predictionArea::area(int index) const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.proto.predictionArea.area)
  return _internal_area(index);
}
inline ::com::zhichenhaixin::proto::singleVideoBlock* predictionArea::_internal_add_area() {
  return area_.Add();
}
inline ::com::zhichenhaixin::proto::singleVideoBlock* predictionArea::add_area() {
  // @@protoc_insertion_point(field_add:com.zhichenhaixin.proto.predictionArea.area)
  return _internal_add_area();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::zhichenhaixin::proto::singleVideoBlock >&
predictionArea::area() const {
  // @@protoc_insertion_point(field_list:com.zhichenhaixin.proto.predictionArea.area)
  return area_;
}

// -------------------------------------------------------------------

// RadarRectDef

// required uint32 rectNumber = 1;
inline bool RadarRectDef::_internal_has_rectnumber() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool RadarRectDef::has_rectnumber() const {
  return _internal_has_rectnumber();
}
inline void RadarRectDef::clear_rectnumber() {
  rectnumber_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 RadarRectDef::_internal_rectnumber() const {
  return rectnumber_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 RadarRectDef::rectnumber() const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.proto.RadarRectDef.rectNumber)
  return _internal_rectnumber();
}
inline void RadarRectDef::_internal_set_rectnumber(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000008u;
  rectnumber_ = value;
}
inline void RadarRectDef::set_rectnumber(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_rectnumber(value);
  // @@protoc_insertion_point(field_set:com.zhichenhaixin.proto.RadarRectDef.rectNumber)
}

// required double topLeftlatitude = 2;
inline bool RadarRectDef::_internal_has_topleftlatitude() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool RadarRectDef::has_topleftlatitude() const {
  return _internal_has_topleftlatitude();
}
inline void RadarRectDef::clear_topleftlatitude() {
  topleftlatitude_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline double RadarRectDef::_internal_topleftlatitude() const {
  return topleftlatitude_;
}
inline double RadarRectDef::topleftlatitude() const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.proto.RadarRectDef.topLeftlatitude)
  return _internal_topleftlatitude();
}
inline void RadarRectDef::_internal_set_topleftlatitude(double value) {
  _has_bits_[0] |= 0x00000001u;
  topleftlatitude_ = value;
}
inline void RadarRectDef::set_topleftlatitude(double value) {
  _internal_set_topleftlatitude(value);
  // @@protoc_insertion_point(field_set:com.zhichenhaixin.proto.RadarRectDef.topLeftlatitude)
}

// required double topLeftlongitude = 3;
inline bool RadarRectDef::_internal_has_topleftlongitude() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool RadarRectDef::has_topleftlongitude() const {
  return _internal_has_topleftlongitude();
}
inline void RadarRectDef::clear_topleftlongitude() {
  topleftlongitude_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline double RadarRectDef::_internal_topleftlongitude() const {
  return topleftlongitude_;
}
inline double RadarRectDef::topleftlongitude() const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.proto.RadarRectDef.topLeftlongitude)
  return _internal_topleftlongitude();
}
inline void RadarRectDef::_internal_set_topleftlongitude(double value) {
  _has_bits_[0] |= 0x00000002u;
  topleftlongitude_ = value;
}
inline void RadarRectDef::set_topleftlongitude(double value) {
  _internal_set_topleftlongitude(value);
  // @@protoc_insertion_point(field_set:com.zhichenhaixin.proto.RadarRectDef.topLeftlongitude)
}

// required double bottomRightlatitude = 4;
inline bool RadarRectDef::_internal_has_bottomrightlatitude() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool RadarRectDef::has_bottomrightlatitude() const {
  return _internal_has_bottomrightlatitude();
}
inline void RadarRectDef::clear_bottomrightlatitude() {
  bottomrightlatitude_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline double RadarRectDef::_internal_bottomrightlatitude() const {
  return bottomrightlatitude_;
}
inline double RadarRectDef::bottomrightlatitude() const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.proto.RadarRectDef.bottomRightlatitude)
  return _internal_bottomrightlatitude();
}
inline void RadarRectDef::_internal_set_bottomrightlatitude(double value) {
  _has_bits_[0] |= 0x00000004u;
  bottomrightlatitude_ = value;
}
inline void RadarRectDef::set_bottomrightlatitude(double value) {
  _internal_set_bottomrightlatitude(value);
  // @@protoc_insertion_point(field_set:com.zhichenhaixin.proto.RadarRectDef.bottomRightlatitude)
}

// required double bottomRightlongitude = 5;
inline bool RadarRectDef::_internal_has_bottomrightlongitude() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool RadarRectDef::has_bottomrightlongitude() const {
  return _internal_has_bottomrightlongitude();
}
inline void RadarRectDef::clear_bottomrightlongitude() {
  bottomrightlongitude_ = 0;
  _has_bits_[0] &= ~0x00000020u;
}
inline double RadarRectDef::_internal_bottomrightlongitude() const {
  return bottomrightlongitude_;
}
inline double RadarRectDef::bottomrightlongitude() const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.proto.RadarRectDef.bottomRightlongitude)
  return _internal_bottomrightlongitude();
}
inline void RadarRectDef::_internal_set_bottomrightlongitude(double value) {
  _has_bits_[0] |= 0x00000020u;
  bottomrightlongitude_ = value;
}
inline void RadarRectDef::set_bottomrightlongitude(double value) {
  _internal_set_bottomrightlongitude(value);
  // @@protoc_insertion_point(field_set:com.zhichenhaixin.proto.RadarRectDef.bottomRightlongitude)
}

// required double centerlatitude = 6;
inline bool RadarRectDef::_internal_has_centerlatitude() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool RadarRectDef::has_centerlatitude() const {
  return _internal_has_centerlatitude();
}
inline void RadarRectDef::clear_centerlatitude() {
  centerlatitude_ = 0;
  _has_bits_[0] &= ~0x00000040u;
}
inline double RadarRectDef::_internal_centerlatitude() const {
  return centerlatitude_;
}
inline double RadarRectDef::centerlatitude() const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.proto.RadarRectDef.centerlatitude)
  return _internal_centerlatitude();
}
inline void RadarRectDef::_internal_set_centerlatitude(double value) {
  _has_bits_[0] |= 0x00000040u;
  centerlatitude_ = value;
}
inline void RadarRectDef::set_centerlatitude(double value) {
  _internal_set_centerlatitude(value);
  // @@protoc_insertion_point(field_set:com.zhichenhaixin.proto.RadarRectDef.centerlatitude)
}

// required double centerlongitude = 7;
inline bool RadarRectDef::_internal_has_centerlongitude() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool RadarRectDef::has_centerlongitude() const {
  return _internal_has_centerlongitude();
}
inline void RadarRectDef::clear_centerlongitude() {
  centerlongitude_ = 0;
  _has_bits_[0] &= ~0x00000080u;
}
inline double RadarRectDef::_internal_centerlongitude() const {
  return centerlongitude_;
}
inline double RadarRectDef::centerlongitude() const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.proto.RadarRectDef.centerlongitude)
  return _internal_centerlongitude();
}
inline void RadarRectDef::_internal_set_centerlongitude(double value) {
  _has_bits_[0] |= 0x00000080u;
  centerlongitude_ = value;
}
inline void RadarRectDef::set_centerlongitude(double value) {
  _internal_set_centerlongitude(value);
  // @@protoc_insertion_point(field_set:com.zhichenhaixin.proto.RadarRectDef.centerlongitude)
}

// required uint32 updateTime = 8;
inline bool RadarRectDef::_internal_has_updatetime() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool RadarRectDef::has_updatetime() const {
  return _internal_has_updatetime();
}
inline void RadarRectDef::clear_updatetime() {
  updatetime_ = 0u;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 RadarRectDef::_internal_updatetime() const {
  return updatetime_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 RadarRectDef::updatetime() const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.proto.RadarRectDef.updateTime)
  return _internal_updatetime();
}
inline void RadarRectDef::_internal_set_updatetime(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000010u;
  updatetime_ = value;
}
inline void RadarRectDef::set_updatetime(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_updatetime(value);
  // @@protoc_insertion_point(field_set:com.zhichenhaixin.proto.RadarRectDef.updateTime)
}

// optional int32 diameter = 9;
inline bool RadarRectDef::_internal_has_diameter() const {
  bool value = (_has_bits_[0] & 0x00001000u) != 0;
  return value;
}
inline bool RadarRectDef::has_diameter() const {
  return _internal_has_diameter();
}
inline void RadarRectDef::clear_diameter() {
  diameter_ = 0;
  _has_bits_[0] &= ~0x00001000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RadarRectDef::_internal_diameter() const {
  return diameter_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RadarRectDef::diameter() const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.proto.RadarRectDef.diameter)
  return _internal_diameter();
}
inline void RadarRectDef::_internal_set_diameter(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00001000u;
  diameter_ = value;
}
inline void RadarRectDef::set_diameter(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_diameter(value);
  // @@protoc_insertion_point(field_set:com.zhichenhaixin.proto.RadarRectDef.diameter)
}

// repeated .com.zhichenhaixin.proto.singleVideoBlock Blocks = 10;
inline int RadarRectDef::_internal_blocks_size() const {
  return blocks_.size();
}
inline int RadarRectDef::blocks_size() const {
  return _internal_blocks_size();
}
inline void RadarRectDef::clear_blocks() {
  blocks_.Clear();
}
inline ::com::zhichenhaixin::proto::singleVideoBlock* RadarRectDef::mutable_blocks(int index) {
  // @@protoc_insertion_point(field_mutable:com.zhichenhaixin.proto.RadarRectDef.Blocks)
  return blocks_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::zhichenhaixin::proto::singleVideoBlock >*
RadarRectDef::mutable_blocks() {
  // @@protoc_insertion_point(field_mutable_list:com.zhichenhaixin.proto.RadarRectDef.Blocks)
  return &blocks_;
}
inline const ::com::zhichenhaixin::proto::singleVideoBlock& RadarRectDef::_internal_blocks(int index) const {
  return blocks_.Get(index);
}
inline const ::com::zhichenhaixin::proto::singleVideoBlock& RadarRectDef::blocks(int index) const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.proto.RadarRectDef.Blocks)
  return _internal_blocks(index);
}
inline ::com::zhichenhaixin::proto::singleVideoBlock* RadarRectDef::_internal_add_blocks() {
  return blocks_.Add();
}
inline ::com::zhichenhaixin::proto::singleVideoBlock* RadarRectDef::add_blocks() {
  // @@protoc_insertion_point(field_add:com.zhichenhaixin.proto.RadarRectDef.Blocks)
  return _internal_add_blocks();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::zhichenhaixin::proto::singleVideoBlock >&
RadarRectDef::blocks() const {
  // @@protoc_insertion_point(field_list:com.zhichenhaixin.proto.RadarRectDef.Blocks)
  return blocks_;
}

// optional double startlatitude = 11;
inline bool RadarRectDef::_internal_has_startlatitude() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool RadarRectDef::has_startlatitude() const {
  return _internal_has_startlatitude();
}
inline void RadarRectDef::clear_startlatitude() {
  startlatitude_ = 0;
  _has_bits_[0] &= ~0x00000100u;
}
inline double RadarRectDef::_internal_startlatitude() const {
  return startlatitude_;
}
inline double RadarRectDef::startlatitude() const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.proto.RadarRectDef.startlatitude)
  return _internal_startlatitude();
}
inline void RadarRectDef::_internal_set_startlatitude(double value) {
  _has_bits_[0] |= 0x00000100u;
  startlatitude_ = value;
}
inline void RadarRectDef::set_startlatitude(double value) {
  _internal_set_startlatitude(value);
  // @@protoc_insertion_point(field_set:com.zhichenhaixin.proto.RadarRectDef.startlatitude)
}

// optional double startlongitude = 12;
inline bool RadarRectDef::_internal_has_startlongitude() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool RadarRectDef::has_startlongitude() const {
  return _internal_has_startlongitude();
}
inline void RadarRectDef::clear_startlongitude() {
  startlongitude_ = 0;
  _has_bits_[0] &= ~0x00000200u;
}
inline double RadarRectDef::_internal_startlongitude() const {
  return startlongitude_;
}
inline double RadarRectDef::startlongitude() const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.proto.RadarRectDef.startlongitude)
  return _internal_startlongitude();
}
inline void RadarRectDef::_internal_set_startlongitude(double value) {
  _has_bits_[0] |= 0x00000200u;
  startlongitude_ = value;
}
inline void RadarRectDef::set_startlongitude(double value) {
  _internal_set_startlongitude(value);
  // @@protoc_insertion_point(field_set:com.zhichenhaixin.proto.RadarRectDef.startlongitude)
}

// optional double endlatitude = 13;
inline bool RadarRectDef::_internal_has_endlatitude() const {
  bool value = (_has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool RadarRectDef::has_endlatitude() const {
  return _internal_has_endlatitude();
}
inline void RadarRectDef::clear_endlatitude() {
  endlatitude_ = 0;
  _has_bits_[0] &= ~0x00000400u;
}
inline double RadarRectDef::_internal_endlatitude() const {
  return endlatitude_;
}
inline double RadarRectDef::endlatitude() const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.proto.RadarRectDef.endlatitude)
  return _internal_endlatitude();
}
inline void RadarRectDef::_internal_set_endlatitude(double value) {
  _has_bits_[0] |= 0x00000400u;
  endlatitude_ = value;
}
inline void RadarRectDef::set_endlatitude(double value) {
  _internal_set_endlatitude(value);
  // @@protoc_insertion_point(field_set:com.zhichenhaixin.proto.RadarRectDef.endlatitude)
}

// optional double endlongitude = 14;
inline bool RadarRectDef::_internal_has_endlongitude() const {
  bool value = (_has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline bool RadarRectDef::has_endlongitude() const {
  return _internal_has_endlongitude();
}
inline void RadarRectDef::clear_endlongitude() {
  endlongitude_ = 0;
  _has_bits_[0] &= ~0x00000800u;
}
inline double RadarRectDef::_internal_endlongitude() const {
  return endlongitude_;
}
inline double RadarRectDef::endlongitude() const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.proto.RadarRectDef.endlongitude)
  return _internal_endlongitude();
}
inline void RadarRectDef::_internal_set_endlongitude(double value) {
  _has_bits_[0] |= 0x00000800u;
  endlongitude_ = value;
}
inline void RadarRectDef::set_endlongitude(double value) {
  _internal_set_endlongitude(value);
  // @@protoc_insertion_point(field_set:com.zhichenhaixin.proto.RadarRectDef.endlongitude)
}

// optional double angle = 15;
inline bool RadarRectDef::_internal_has_angle() const {
  bool value = (_has_bits_[0] & 0x00004000u) != 0;
  return value;
}
inline bool RadarRectDef::has_angle() const {
  return _internal_has_angle();
}
inline void RadarRectDef::clear_angle() {
  angle_ = 0;
  _has_bits_[0] &= ~0x00004000u;
}
inline double RadarRectDef::_internal_angle() const {
  return angle_;
}
inline double RadarRectDef::angle() const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.proto.RadarRectDef.angle)
  return _internal_angle();
}
inline void RadarRectDef::_internal_set_angle(double value) {
  _has_bits_[0] |= 0x00004000u;
  angle_ = value;
}
inline void RadarRectDef::set_angle(double value) {
  _internal_set_angle(value);
  // @@protoc_insertion_point(field_set:com.zhichenhaixin.proto.RadarRectDef.angle)
}

// required double sog = 16;
inline bool RadarRectDef::_internal_has_sog() const {
  bool value = (_has_bits_[0] & 0x00008000u) != 0;
  return value;
}
inline bool RadarRectDef::has_sog() const {
  return _internal_has_sog();
}
inline void RadarRectDef::clear_sog() {
  sog_ = 0;
  _has_bits_[0] &= ~0x00008000u;
}
inline double RadarRectDef::_internal_sog() const {
  return sog_;
}
inline double RadarRectDef::sog() const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.proto.RadarRectDef.sog)
  return _internal_sog();
}
inline void RadarRectDef::_internal_set_sog(double value) {
  _has_bits_[0] |= 0x00008000u;
  sog_ = value;
}
inline void RadarRectDef::set_sog(double value) {
  _internal_set_sog(value);
  // @@protoc_insertion_point(field_set:com.zhichenhaixin.proto.RadarRectDef.sog)
}

// required double cog = 17;
inline bool RadarRectDef::_internal_has_cog() const {
  bool value = (_has_bits_[0] & 0x00010000u) != 0;
  return value;
}
inline bool RadarRectDef::has_cog() const {
  return _internal_has_cog();
}
inline void RadarRectDef::clear_cog() {
  cog_ = 0;
  _has_bits_[0] &= ~0x00010000u;
}
inline double RadarRectDef::_internal_cog() const {
  return cog_;
}
inline double RadarRectDef::cog() const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.proto.RadarRectDef.cog)
  return _internal_cog();
}
inline void RadarRectDef::_internal_set_cog(double value) {
  _has_bits_[0] |= 0x00010000u;
  cog_ = value;
}
inline void RadarRectDef::set_cog(double value) {
  _internal_set_cog(value);
  // @@protoc_insertion_point(field_set:com.zhichenhaixin.proto.RadarRectDef.cog)
}

// repeated .com.zhichenhaixin.proto.pixelPoint pixelPnts = 18;
inline int RadarRectDef::_internal_pixelpnts_size() const {
  return pixelpnts_.size();
}
inline int RadarRectDef::pixelpnts_size() const {
  return _internal_pixelpnts_size();
}
inline void RadarRectDef::clear_pixelpnts() {
  pixelpnts_.Clear();
}
inline ::com::zhichenhaixin::proto::pixelPoint* RadarRectDef::mutable_pixelpnts(int index) {
  // @@protoc_insertion_point(field_mutable:com.zhichenhaixin.proto.RadarRectDef.pixelPnts)
  return pixelpnts_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::zhichenhaixin::proto::pixelPoint >*
RadarRectDef::mutable_pixelpnts() {
  // @@protoc_insertion_point(field_mutable_list:com.zhichenhaixin.proto.RadarRectDef.pixelPnts)
  return &pixelpnts_;
}
inline const ::com::zhichenhaixin::proto::pixelPoint& RadarRectDef::_internal_pixelpnts(int index) const {
  return pixelpnts_.Get(index);
}
inline const ::com::zhichenhaixin::proto::pixelPoint& RadarRectDef::pixelpnts(int index) const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.proto.RadarRectDef.pixelPnts)
  return _internal_pixelpnts(index);
}
inline ::com::zhichenhaixin::proto::pixelPoint* RadarRectDef::_internal_add_pixelpnts() {
  return pixelpnts_.Add();
}
inline ::com::zhichenhaixin::proto::pixelPoint* RadarRectDef::add_pixelpnts() {
  // @@protoc_insertion_point(field_add:com.zhichenhaixin.proto.RadarRectDef.pixelPnts)
  return _internal_add_pixelpnts();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::zhichenhaixin::proto::pixelPoint >&
RadarRectDef::pixelpnts() const {
  // @@protoc_insertion_point(field_list:com.zhichenhaixin.proto.RadarRectDef.pixelPnts)
  return pixelpnts_;
}

// required bool realData = 19;
inline bool RadarRectDef::_internal_has_realdata() const {
  bool value = (_has_bits_[0] & 0x00002000u) != 0;
  return value;
}
inline bool RadarRectDef::has_realdata() const {
  return _internal_has_realdata();
}
inline void RadarRectDef::clear_realdata() {
  realdata_ = false;
  _has_bits_[0] &= ~0x00002000u;
}
inline bool RadarRectDef::_internal_realdata() const {
  return realdata_;
}
inline bool RadarRectDef::realdata() const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.proto.RadarRectDef.realData)
  return _internal_realdata();
}
inline void RadarRectDef::_internal_set_realdata(bool value) {
  _has_bits_[0] |= 0x00002000u;
  realdata_ = value;
}
inline void RadarRectDef::set_realdata(bool value) {
  _internal_set_realdata(value);
  // @@protoc_insertion_point(field_set:com.zhichenhaixin.proto.RadarRectDef.realData)
}

// repeated .com.zhichenhaixin.proto.predictionArea predictionAreas = 20;
inline int RadarRectDef::_internal_predictionareas_size() const {
  return predictionareas_.size();
}
inline int RadarRectDef::predictionareas_size() const {
  return _internal_predictionareas_size();
}
inline void RadarRectDef::clear_predictionareas() {
  predictionareas_.Clear();
}
inline ::com::zhichenhaixin::proto::predictionArea* RadarRectDef::mutable_predictionareas(int index) {
  // @@protoc_insertion_point(field_mutable:com.zhichenhaixin.proto.RadarRectDef.predictionAreas)
  return predictionareas_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::zhichenhaixin::proto::predictionArea >*
RadarRectDef::mutable_predictionareas() {
  // @@protoc_insertion_point(field_mutable_list:com.zhichenhaixin.proto.RadarRectDef.predictionAreas)
  return &predictionareas_;
}
inline const ::com::zhichenhaixin::proto::predictionArea& RadarRectDef::_internal_predictionareas(int index) const {
  return predictionareas_.Get(index);
}
inline const ::com::zhichenhaixin::proto::predictionArea& RadarRectDef::predictionareas(int index) const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.proto.RadarRectDef.predictionAreas)
  return _internal_predictionareas(index);
}
inline ::com::zhichenhaixin::proto::predictionArea* RadarRectDef::_internal_add_predictionareas() {
  return predictionareas_.Add();
}
inline ::com::zhichenhaixin::proto::predictionArea* RadarRectDef::add_predictionareas() {
  // @@protoc_insertion_point(field_add:com.zhichenhaixin.proto.RadarRectDef.predictionAreas)
  return _internal_add_predictionareas();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::zhichenhaixin::proto::predictionArea >&
RadarRectDef::predictionareas() const {
  // @@protoc_insertion_point(field_list:com.zhichenhaixin.proto.RadarRectDef.predictionAreas)
  return predictionareas_;
}

// -------------------------------------------------------------------

// RadarRect

// required .com.zhichenhaixin.proto.RadarRectDef currentRect = 1;
inline bool RadarRect::_internal_has_currentrect() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || currentrect_ != nullptr);
  return value;
}
inline bool RadarRect::has_currentrect() const {
  return _internal_has_currentrect();
}
inline void RadarRect::clear_currentrect() {
  if (currentrect_ != nullptr) currentrect_->Clear();
  _has_bits_[0] &= ~0x00000001u;
}
inline const ::com::zhichenhaixin::proto::RadarRectDef& RadarRect::_internal_currentrect() const {
  const ::com::zhichenhaixin::proto::RadarRectDef* p = currentrect_;
  return p != nullptr ? *p : *reinterpret_cast<const ::com::zhichenhaixin::proto::RadarRectDef*>(
      &::com::zhichenhaixin::proto::_RadarRectDef_default_instance_);
}
inline const ::com::zhichenhaixin::proto::RadarRectDef& RadarRect::currentrect() const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.proto.RadarRect.currentRect)
  return _internal_currentrect();
}
inline void RadarRect::unsafe_arena_set_allocated_currentrect(
    ::com::zhichenhaixin::proto::RadarRectDef* currentrect) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(currentrect_);
  }
  currentrect_ = currentrect;
  if (currentrect) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.zhichenhaixin.proto.RadarRect.currentRect)
}
inline ::com::zhichenhaixin::proto::RadarRectDef* RadarRect::release_currentrect() {
  auto temp = unsafe_arena_release_currentrect();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::com::zhichenhaixin::proto::RadarRectDef* RadarRect::unsafe_arena_release_currentrect() {
  // @@protoc_insertion_point(field_release:com.zhichenhaixin.proto.RadarRect.currentRect)
  _has_bits_[0] &= ~0x00000001u;
  ::com::zhichenhaixin::proto::RadarRectDef* temp = currentrect_;
  currentrect_ = nullptr;
  return temp;
}
inline ::com::zhichenhaixin::proto::RadarRectDef* RadarRect::_internal_mutable_currentrect() {
  _has_bits_[0] |= 0x00000001u;
  if (currentrect_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::zhichenhaixin::proto::RadarRectDef>(GetArena());
    currentrect_ = p;
  }
  return currentrect_;
}
inline ::com::zhichenhaixin::proto::RadarRectDef* RadarRect::mutable_currentrect() {
  // @@protoc_insertion_point(field_mutable:com.zhichenhaixin.proto.RadarRect.currentRect)
  return _internal_mutable_currentrect();
}
inline void RadarRect::set_allocated_currentrect(::com::zhichenhaixin::proto::RadarRectDef* currentrect) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete currentrect_;
  }
  if (currentrect) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(currentrect);
    if (message_arena != submessage_arena) {
      currentrect = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, currentrect, submessage_arena);
    }
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  currentrect_ = currentrect;
  // @@protoc_insertion_point(field_set_allocated:com.zhichenhaixin.proto.RadarRect.currentRect)
}

// repeated .com.zhichenhaixin.proto.RadarRectDef historyRects = 2;
inline int RadarRect::_internal_historyrects_size() const {
  return historyrects_.size();
}
inline int RadarRect::historyrects_size() const {
  return _internal_historyrects_size();
}
inline void RadarRect::clear_historyrects() {
  historyrects_.Clear();
}
inline ::com::zhichenhaixin::proto::RadarRectDef* RadarRect::mutable_historyrects(int index) {
  // @@protoc_insertion_point(field_mutable:com.zhichenhaixin.proto.RadarRect.historyRects)
  return historyrects_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::zhichenhaixin::proto::RadarRectDef >*
RadarRect::mutable_historyrects() {
  // @@protoc_insertion_point(field_mutable_list:com.zhichenhaixin.proto.RadarRect.historyRects)
  return &historyrects_;
}
inline const ::com::zhichenhaixin::proto::RadarRectDef& RadarRect::_internal_historyrects(int index) const {
  return historyrects_.Get(index);
}
inline const ::com::zhichenhaixin::proto::RadarRectDef& RadarRect::historyrects(int index) const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.proto.RadarRect.historyRects)
  return _internal_historyrects(index);
}
inline ::com::zhichenhaixin::proto::RadarRectDef* RadarRect::_internal_add_historyrects() {
  return historyrects_.Add();
}
inline ::com::zhichenhaixin::proto::RadarRectDef* RadarRect::add_historyrects() {
  // @@protoc_insertion_point(field_add:com.zhichenhaixin.proto.RadarRect.historyRects)
  return _internal_add_historyrects();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::zhichenhaixin::proto::RadarRectDef >&
RadarRect::historyrects() const {
  // @@protoc_insertion_point(field_list:com.zhichenhaixin.proto.RadarRect.historyRects)
  return historyrects_;
}

// required bool dirConfirmed = 3;
inline bool RadarRect::_internal_has_dirconfirmed() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool RadarRect::has_dirconfirmed() const {
  return _internal_has_dirconfirmed();
}
inline void RadarRect::clear_dirconfirmed() {
  dirconfirmed_ = false;
  _has_bits_[0] &= ~0x00000002u;
}
inline bool RadarRect::_internal_dirconfirmed() const {
  return dirconfirmed_;
}
inline bool RadarRect::dirconfirmed() const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.proto.RadarRect.dirConfirmed)
  return _internal_dirconfirmed();
}
inline void RadarRect::_internal_set_dirconfirmed(bool value) {
  _has_bits_[0] |= 0x00000002u;
  dirconfirmed_ = value;
}
inline void RadarRect::set_dirconfirmed(bool value) {
  _internal_set_dirconfirmed(value);
  // @@protoc_insertion_point(field_set:com.zhichenhaixin.proto.RadarRect.dirConfirmed)
}

// required uint32 estcount = 4;
inline bool RadarRect::_internal_has_estcount() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool RadarRect::has_estcount() const {
  return _internal_has_estcount();
}
inline void RadarRect::clear_estcount() {
  estcount_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 RadarRect::_internal_estcount() const {
  return estcount_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 RadarRect::estcount() const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.proto.RadarRect.estcount)
  return _internal_estcount();
}
inline void RadarRect::_internal_set_estcount(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  estcount_ = value;
}
inline void RadarRect::set_estcount(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_estcount(value);
  // @@protoc_insertion_point(field_set:com.zhichenhaixin.proto.RadarRect.estcount)
}

// -------------------------------------------------------------------

// RadarRects

// required uint64 UTC = 1;
inline bool RadarRects::_internal_has_utc() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool RadarRects::has_utc() const {
  return _internal_has_utc();
}
inline void RadarRects::clear_utc() {
  utc_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 RadarRects::_internal_utc() const {
  return utc_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 RadarRects::utc() const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.proto.RadarRects.UTC)
  return _internal_utc();
}
inline void RadarRects::_internal_set_utc(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000001u;
  utc_ = value;
}
inline void RadarRects::set_utc(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_utc(value);
  // @@protoc_insertion_point(field_set:com.zhichenhaixin.proto.RadarRects.UTC)
}

// required int32 length = 2;
inline bool RadarRects::_internal_has_length() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool RadarRects::has_length() const {
  return _internal_has_length();
}
inline void RadarRects::clear_length() {
  length_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RadarRects::_internal_length() const {
  return length_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 RadarRects::length() const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.proto.RadarRects.length)
  return _internal_length();
}
inline void RadarRects::_internal_set_length(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  length_ = value;
}
inline void RadarRects::set_length(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_length(value);
  // @@protoc_insertion_point(field_set:com.zhichenhaixin.proto.RadarRects.length)
}

// repeated .com.zhichenhaixin.proto.RadarRect rects = 3;
inline int RadarRects::_internal_rects_size() const {
  return rects_.size();
}
inline int RadarRects::rects_size() const {
  return _internal_rects_size();
}
inline void RadarRects::clear_rects() {
  rects_.Clear();
}
inline ::com::zhichenhaixin::proto::RadarRect* RadarRects::mutable_rects(int index) {
  // @@protoc_insertion_point(field_mutable:com.zhichenhaixin.proto.RadarRects.rects)
  return rects_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::zhichenhaixin::proto::RadarRect >*
RadarRects::mutable_rects() {
  // @@protoc_insertion_point(field_mutable_list:com.zhichenhaixin.proto.RadarRects.rects)
  return &rects_;
}
inline const ::com::zhichenhaixin::proto::RadarRect& RadarRects::_internal_rects(int index) const {
  return rects_.Get(index);
}
inline const ::com::zhichenhaixin::proto::RadarRect& RadarRects::rects(int index) const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.proto.RadarRects.rects)
  return _internal_rects(index);
}
inline ::com::zhichenhaixin::proto::RadarRect* RadarRects::_internal_add_rects() {
  return rects_.Add();
}
inline ::com::zhichenhaixin::proto::RadarRect* RadarRects::add_rects() {
  // @@protoc_insertion_point(field_add:com.zhichenhaixin.proto.RadarRects.rects)
  return _internal_add_rects();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::zhichenhaixin::proto::RadarRect >&
RadarRects::rects() const {
  // @@protoc_insertion_point(field_list:com.zhichenhaixin.proto.RadarRects.rects)
  return rects_;
}

// -------------------------------------------------------------------

// RadarVideo

// required uint64 radarId = 1;
inline bool RadarVideo::_internal_has_radarid() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool RadarVideo::has_radarid() const {
  return _internal_has_radarid();
}
inline void RadarVideo::clear_radarid() {
  radarid_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 RadarVideo::_internal_radarid() const {
  return radarid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 RadarVideo::radarid() const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.proto.RadarVideo.radarId)
  return _internal_radarid();
}
inline void RadarVideo::_internal_set_radarid(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000010u;
  radarid_ = value;
}
inline void RadarVideo::set_radarid(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_radarid(value);
  // @@protoc_insertion_point(field_set:com.zhichenhaixin.proto.RadarVideo.radarId)
}

// required string radarName = 2;
inline bool RadarVideo::_internal_has_radarname() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool RadarVideo::has_radarname() const {
  return _internal_has_radarname();
}
inline void RadarVideo::clear_radarname() {
  radarname_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& RadarVideo::radarname() const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.proto.RadarVideo.radarName)
  return _internal_radarname();
}
inline void RadarVideo::set_radarname(const std::string& value) {
  _internal_set_radarname(value);
  // @@protoc_insertion_point(field_set:com.zhichenhaixin.proto.RadarVideo.radarName)
}
inline std::string* RadarVideo::mutable_radarname() {
  // @@protoc_insertion_point(field_mutable:com.zhichenhaixin.proto.RadarVideo.radarName)
  return _internal_mutable_radarname();
}
inline const std::string& RadarVideo::_internal_radarname() const {
  return radarname_.Get();
}
inline void RadarVideo::_internal_set_radarname(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  radarname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void RadarVideo::set_radarname(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  radarname_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:com.zhichenhaixin.proto.RadarVideo.radarName)
}
inline void RadarVideo::set_radarname(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  radarname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:com.zhichenhaixin.proto.RadarVideo.radarName)
}
inline void RadarVideo::set_radarname(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  radarname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:com.zhichenhaixin.proto.RadarVideo.radarName)
}
inline std::string* RadarVideo::_internal_mutable_radarname() {
  _has_bits_[0] |= 0x00000001u;
  return radarname_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* RadarVideo::release_radarname() {
  // @@protoc_insertion_point(field_release:com.zhichenhaixin.proto.RadarVideo.radarName)
  if (!_internal_has_radarname()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return radarname_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void RadarVideo::set_allocated_radarname(std::string* radarname) {
  if (radarname != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  radarname_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), radarname,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:com.zhichenhaixin.proto.RadarVideo.radarName)
}
inline std::string* RadarVideo::unsafe_arena_release_radarname() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.zhichenhaixin.proto.RadarVideo.radarName)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000001u;
  return radarname_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void RadarVideo::unsafe_arena_set_allocated_radarname(
    std::string* radarname) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (radarname != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  radarname_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      radarname, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.zhichenhaixin.proto.RadarVideo.radarName)
}

// required double latitude = 3;
inline bool RadarVideo::_internal_has_latitude() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool RadarVideo::has_latitude() const {
  return _internal_has_latitude();
}
inline void RadarVideo::clear_latitude() {
  latitude_ = 0;
  _has_bits_[0] &= ~0x00000020u;
}
inline double RadarVideo::_internal_latitude() const {
  return latitude_;
}
inline double RadarVideo::latitude() const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.proto.RadarVideo.latitude)
  return _internal_latitude();
}
inline void RadarVideo::_internal_set_latitude(double value) {
  _has_bits_[0] |= 0x00000020u;
  latitude_ = value;
}
inline void RadarVideo::set_latitude(double value) {
  _internal_set_latitude(value);
  // @@protoc_insertion_point(field_set:com.zhichenhaixin.proto.RadarVideo.latitude)
}

// required double longitude = 4;
inline bool RadarVideo::_internal_has_longitude() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool RadarVideo::has_longitude() const {
  return _internal_has_longitude();
}
inline void RadarVideo::clear_longitude() {
  longitude_ = 0;
  _has_bits_[0] &= ~0x00000040u;
}
inline double RadarVideo::_internal_longitude() const {
  return longitude_;
}
inline double RadarVideo::longitude() const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.proto.RadarVideo.longitude)
  return _internal_longitude();
}
inline void RadarVideo::_internal_set_longitude(double value) {
  _has_bits_[0] |= 0x00000040u;
  longitude_ = value;
}
inline void RadarVideo::set_longitude(double value) {
  _internal_set_longitude(value);
  // @@protoc_insertion_point(field_set:com.zhichenhaixin.proto.RadarVideo.longitude)
}

// required uint64 UTC = 5;
inline bool RadarVideo::_internal_has_utc() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool RadarVideo::has_utc() const {
  return _internal_has_utc();
}
inline void RadarVideo::clear_utc() {
  utc_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000080u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 RadarVideo::_internal_utc() const {
  return utc_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 RadarVideo::utc() const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.proto.RadarVideo.UTC)
  return _internal_utc();
}
inline void RadarVideo::_internal_set_utc(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000080u;
  utc_ = value;
}
inline void RadarVideo::set_utc(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_utc(value);
  // @@protoc_insertion_point(field_set:com.zhichenhaixin.proto.RadarVideo.UTC)
}

// required bytes imageData = 6;
inline bool RadarVideo::_internal_has_imagedata() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool RadarVideo::has_imagedata() const {
  return _internal_has_imagedata();
}
inline void RadarVideo::clear_imagedata() {
  imagedata_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& RadarVideo::imagedata() const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.proto.RadarVideo.imageData)
  return _internal_imagedata();
}
inline void RadarVideo::set_imagedata(const std::string& value) {
  _internal_set_imagedata(value);
  // @@protoc_insertion_point(field_set:com.zhichenhaixin.proto.RadarVideo.imageData)
}
inline std::string* RadarVideo::mutable_imagedata() {
  // @@protoc_insertion_point(field_mutable:com.zhichenhaixin.proto.RadarVideo.imageData)
  return _internal_mutable_imagedata();
}
inline const std::string& RadarVideo::_internal_imagedata() const {
  return imagedata_.Get();
}
inline void RadarVideo::_internal_set_imagedata(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  imagedata_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void RadarVideo::set_imagedata(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  imagedata_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:com.zhichenhaixin.proto.RadarVideo.imageData)
}
inline void RadarVideo::set_imagedata(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  imagedata_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:com.zhichenhaixin.proto.RadarVideo.imageData)
}
inline void RadarVideo::set_imagedata(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x00000002u;
  imagedata_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:com.zhichenhaixin.proto.RadarVideo.imageData)
}
inline std::string* RadarVideo::_internal_mutable_imagedata() {
  _has_bits_[0] |= 0x00000002u;
  return imagedata_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* RadarVideo::release_imagedata() {
  // @@protoc_insertion_point(field_release:com.zhichenhaixin.proto.RadarVideo.imageData)
  if (!_internal_has_imagedata()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return imagedata_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void RadarVideo::set_allocated_imagedata(std::string* imagedata) {
  if (imagedata != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  imagedata_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), imagedata,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:com.zhichenhaixin.proto.RadarVideo.imageData)
}
inline std::string* RadarVideo::unsafe_arena_release_imagedata() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.zhichenhaixin.proto.RadarVideo.imageData)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000002u;
  return imagedata_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void RadarVideo::unsafe_arena_set_allocated_imagedata(
    std::string* imagedata) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (imagedata != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  imagedata_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      imagedata, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.zhichenhaixin.proto.RadarVideo.imageData)
}

// required bytes curImageData = 7;
inline bool RadarVideo::_internal_has_curimagedata() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool RadarVideo::has_curimagedata() const {
  return _internal_has_curimagedata();
}
inline void RadarVideo::clear_curimagedata() {
  curimagedata_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& RadarVideo::curimagedata() const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.proto.RadarVideo.curImageData)
  return _internal_curimagedata();
}
inline void RadarVideo::set_curimagedata(const std::string& value) {
  _internal_set_curimagedata(value);
  // @@protoc_insertion_point(field_set:com.zhichenhaixin.proto.RadarVideo.curImageData)
}
inline std::string* RadarVideo::mutable_curimagedata() {
  // @@protoc_insertion_point(field_mutable:com.zhichenhaixin.proto.RadarVideo.curImageData)
  return _internal_mutable_curimagedata();
}
inline const std::string& RadarVideo::_internal_curimagedata() const {
  return curimagedata_.Get();
}
inline void RadarVideo::_internal_set_curimagedata(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  curimagedata_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void RadarVideo::set_curimagedata(std::string&& value) {
  _has_bits_[0] |= 0x00000004u;
  curimagedata_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:com.zhichenhaixin.proto.RadarVideo.curImageData)
}
inline void RadarVideo::set_curimagedata(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000004u;
  curimagedata_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:com.zhichenhaixin.proto.RadarVideo.curImageData)
}
inline void RadarVideo::set_curimagedata(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x00000004u;
  curimagedata_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:com.zhichenhaixin.proto.RadarVideo.curImageData)
}
inline std::string* RadarVideo::_internal_mutable_curimagedata() {
  _has_bits_[0] |= 0x00000004u;
  return curimagedata_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* RadarVideo::release_curimagedata() {
  // @@protoc_insertion_point(field_release:com.zhichenhaixin.proto.RadarVideo.curImageData)
  if (!_internal_has_curimagedata()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return curimagedata_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void RadarVideo::set_allocated_curimagedata(std::string* curimagedata) {
  if (curimagedata != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  curimagedata_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), curimagedata,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:com.zhichenhaixin.proto.RadarVideo.curImageData)
}
inline std::string* RadarVideo::unsafe_arena_release_curimagedata() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.zhichenhaixin.proto.RadarVideo.curImageData)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000004u;
  return curimagedata_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void RadarVideo::unsafe_arena_set_allocated_curimagedata(
    std::string* curimagedata) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (curimagedata != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  curimagedata_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      curimagedata, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.zhichenhaixin.proto.RadarVideo.curImageData)
}

// required bytes preImageData = 8;
inline bool RadarVideo::_internal_has_preimagedata() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool RadarVideo::has_preimagedata() const {
  return _internal_has_preimagedata();
}
inline void RadarVideo::clear_preimagedata() {
  preimagedata_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000008u;
}
inline const std::string& RadarVideo::preimagedata() const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.proto.RadarVideo.preImageData)
  return _internal_preimagedata();
}
inline void RadarVideo::set_preimagedata(const std::string& value) {
  _internal_set_preimagedata(value);
  // @@protoc_insertion_point(field_set:com.zhichenhaixin.proto.RadarVideo.preImageData)
}
inline std::string* RadarVideo::mutable_preimagedata() {
  // @@protoc_insertion_point(field_mutable:com.zhichenhaixin.proto.RadarVideo.preImageData)
  return _internal_mutable_preimagedata();
}
inline const std::string& RadarVideo::_internal_preimagedata() const {
  return preimagedata_.Get();
}
inline void RadarVideo::_internal_set_preimagedata(const std::string& value) {
  _has_bits_[0] |= 0x00000008u;
  preimagedata_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void RadarVideo::set_preimagedata(std::string&& value) {
  _has_bits_[0] |= 0x00000008u;
  preimagedata_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:com.zhichenhaixin.proto.RadarVideo.preImageData)
}
inline void RadarVideo::set_preimagedata(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000008u;
  preimagedata_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:com.zhichenhaixin.proto.RadarVideo.preImageData)
}
inline void RadarVideo::set_preimagedata(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x00000008u;
  preimagedata_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:com.zhichenhaixin.proto.RadarVideo.preImageData)
}
inline std::string* RadarVideo::_internal_mutable_preimagedata() {
  _has_bits_[0] |= 0x00000008u;
  return preimagedata_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* RadarVideo::release_preimagedata() {
  // @@protoc_insertion_point(field_release:com.zhichenhaixin.proto.RadarVideo.preImageData)
  if (!_internal_has_preimagedata()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000008u;
  return preimagedata_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void RadarVideo::set_allocated_preimagedata(std::string* preimagedata) {
  if (preimagedata != nullptr) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  preimagedata_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), preimagedata,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:com.zhichenhaixin.proto.RadarVideo.preImageData)
}
inline std::string* RadarVideo::unsafe_arena_release_preimagedata() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.zhichenhaixin.proto.RadarVideo.preImageData)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000008u;
  return preimagedata_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void RadarVideo::unsafe_arena_set_allocated_preimagedata(
    std::string* preimagedata) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (preimagedata != nullptr) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  preimagedata_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      preimagedata, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.zhichenhaixin.proto.RadarVideo.preImageData)
}

// required uint32 width = 9;
inline bool RadarVideo::_internal_has_width() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool RadarVideo::has_width() const {
  return _internal_has_width();
}
inline void RadarVideo::clear_width() {
  width_ = 0u;
  _has_bits_[0] &= ~0x00000100u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 RadarVideo::_internal_width() const {
  return width_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 RadarVideo::width() const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.proto.RadarVideo.width)
  return _internal_width();
}
inline void RadarVideo::_internal_set_width(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000100u;
  width_ = value;
}
inline void RadarVideo::set_width(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_width(value);
  // @@protoc_insertion_point(field_set:com.zhichenhaixin.proto.RadarVideo.width)
}

// required uint32 height = 10;
inline bool RadarVideo::_internal_has_height() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool RadarVideo::has_height() const {
  return _internal_has_height();
}
inline void RadarVideo::clear_height() {
  height_ = 0u;
  _has_bits_[0] &= ~0x00000200u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 RadarVideo::_internal_height() const {
  return height_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 RadarVideo::height() const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.proto.RadarVideo.height)
  return _internal_height();
}
inline void RadarVideo::_internal_set_height(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000200u;
  height_ = value;
}
inline void RadarVideo::set_height(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_height(value);
  // @@protoc_insertion_point(field_set:com.zhichenhaixin.proto.RadarVideo.height)
}

// required double radius = 11;
inline bool RadarVideo::_internal_has_radius() const {
  bool value = (_has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool RadarVideo::has_radius() const {
  return _internal_has_radius();
}
inline void RadarVideo::clear_radius() {
  radius_ = 0;
  _has_bits_[0] &= ~0x00000400u;
}
inline double RadarVideo::_internal_radius() const {
  return radius_;
}
inline double RadarVideo::radius() const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.proto.RadarVideo.radius)
  return _internal_radius();
}
inline void RadarVideo::_internal_set_radius(double value) {
  _has_bits_[0] |= 0x00000400u;
  radius_ = value;
}
inline void RadarVideo::set_radius(double value) {
  _internal_set_radius(value);
  // @@protoc_insertion_point(field_set:com.zhichenhaixin.proto.RadarVideo.radius)
}

// required uint32 curIndex = 12;
inline bool RadarVideo::_internal_has_curindex() const {
  bool value = (_has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline bool RadarVideo::has_curindex() const {
  return _internal_has_curindex();
}
inline void RadarVideo::clear_curindex() {
  curindex_ = 0u;
  _has_bits_[0] &= ~0x00000800u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 RadarVideo::_internal_curindex() const {
  return curindex_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 RadarVideo::curindex() const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.proto.RadarVideo.curIndex)
  return _internal_curindex();
}
inline void RadarVideo::_internal_set_curindex(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000800u;
  curindex_ = value;
}
inline void RadarVideo::set_curindex(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_curindex(value);
  // @@protoc_insertion_point(field_set:com.zhichenhaixin.proto.RadarVideo.curIndex)
}

// required uint32 loopNum = 13;
inline bool RadarVideo::_internal_has_loopnum() const {
  bool value = (_has_bits_[0] & 0x00001000u) != 0;
  return value;
}
inline bool RadarVideo::has_loopnum() const {
  return _internal_has_loopnum();
}
inline void RadarVideo::clear_loopnum() {
  loopnum_ = 0u;
  _has_bits_[0] &= ~0x00001000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 RadarVideo::_internal_loopnum() const {
  return loopnum_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 RadarVideo::loopnum() const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.proto.RadarVideo.loopNum)
  return _internal_loopnum();
}
inline void RadarVideo::_internal_set_loopnum(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00001000u;
  loopnum_ = value;
}
inline void RadarVideo::set_loopnum(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_loopnum(value);
  // @@protoc_insertion_point(field_set:com.zhichenhaixin.proto.RadarVideo.loopNum)
}

// -------------------------------------------------------------------

// RadarVideoPoint

// required string radarName = 2;
inline bool RadarVideoPoint::_internal_has_radarname() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool RadarVideoPoint::has_radarname() const {
  return _internal_has_radarname();
}
inline void RadarVideoPoint::clear_radarname() {
  radarname_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& RadarVideoPoint::radarname() const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.proto.RadarVideoPoint.radarName)
  return _internal_radarname();
}
inline void RadarVideoPoint::set_radarname(const std::string& value) {
  _internal_set_radarname(value);
  // @@protoc_insertion_point(field_set:com.zhichenhaixin.proto.RadarVideoPoint.radarName)
}
inline std::string* RadarVideoPoint::mutable_radarname() {
  // @@protoc_insertion_point(field_mutable:com.zhichenhaixin.proto.RadarVideoPoint.radarName)
  return _internal_mutable_radarname();
}
inline const std::string& RadarVideoPoint::_internal_radarname() const {
  return radarname_.Get();
}
inline void RadarVideoPoint::_internal_set_radarname(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  radarname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void RadarVideoPoint::set_radarname(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  radarname_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:com.zhichenhaixin.proto.RadarVideoPoint.radarName)
}
inline void RadarVideoPoint::set_radarname(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  radarname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:com.zhichenhaixin.proto.RadarVideoPoint.radarName)
}
inline void RadarVideoPoint::set_radarname(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  radarname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:com.zhichenhaixin.proto.RadarVideoPoint.radarName)
}
inline std::string* RadarVideoPoint::_internal_mutable_radarname() {
  _has_bits_[0] |= 0x00000001u;
  return radarname_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* RadarVideoPoint::release_radarname() {
  // @@protoc_insertion_point(field_release:com.zhichenhaixin.proto.RadarVideoPoint.radarName)
  if (!_internal_has_radarname()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return radarname_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void RadarVideoPoint::set_allocated_radarname(std::string* radarname) {
  if (radarname != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  radarname_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), radarname,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:com.zhichenhaixin.proto.RadarVideoPoint.radarName)
}
inline std::string* RadarVideoPoint::unsafe_arena_release_radarname() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.zhichenhaixin.proto.RadarVideoPoint.radarName)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000001u;
  return radarname_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void RadarVideoPoint::unsafe_arena_set_allocated_radarname(
    std::string* radarname) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (radarname != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  radarname_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      radarname, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.zhichenhaixin.proto.RadarVideoPoint.radarName)
}

// required double latitude = 3;
inline bool RadarVideoPoint::_internal_has_latitude() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool RadarVideoPoint::has_latitude() const {
  return _internal_has_latitude();
}
inline void RadarVideoPoint::clear_latitude() {
  latitude_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline double RadarVideoPoint::_internal_latitude() const {
  return latitude_;
}
inline double RadarVideoPoint::latitude() const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.proto.RadarVideoPoint.latitude)
  return _internal_latitude();
}
inline void RadarVideoPoint::_internal_set_latitude(double value) {
  _has_bits_[0] |= 0x00000008u;
  latitude_ = value;
}
inline void RadarVideoPoint::set_latitude(double value) {
  _internal_set_latitude(value);
  // @@protoc_insertion_point(field_set:com.zhichenhaixin.proto.RadarVideoPoint.latitude)
}

// required double longitude = 4;
inline bool RadarVideoPoint::_internal_has_longitude() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool RadarVideoPoint::has_longitude() const {
  return _internal_has_longitude();
}
inline void RadarVideoPoint::clear_longitude() {
  longitude_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline double RadarVideoPoint::_internal_longitude() const {
  return longitude_;
}
inline double RadarVideoPoint::longitude() const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.proto.RadarVideoPoint.longitude)
  return _internal_longitude();
}
inline void RadarVideoPoint::_internal_set_longitude(double value) {
  _has_bits_[0] |= 0x00000010u;
  longitude_ = value;
}
inline void RadarVideoPoint::set_longitude(double value) {
  _internal_set_longitude(value);
  // @@protoc_insertion_point(field_set:com.zhichenhaixin.proto.RadarVideoPoint.longitude)
}

// required uint64 UTC = 5;
inline bool RadarVideoPoint::_internal_has_utc() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool RadarVideoPoint::has_utc() const {
  return _internal_has_utc();
}
inline void RadarVideoPoint::clear_utc() {
  utc_ = PROTOBUF_ULONGLONG(0);
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 RadarVideoPoint::_internal_utc() const {
  return utc_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 RadarVideoPoint::utc() const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.proto.RadarVideoPoint.UTC)
  return _internal_utc();
}
inline void RadarVideoPoint::_internal_set_utc(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _has_bits_[0] |= 0x00000020u;
  utc_ = value;
}
inline void RadarVideoPoint::set_utc(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  _internal_set_utc(value);
  // @@protoc_insertion_point(field_set:com.zhichenhaixin.proto.RadarVideoPoint.UTC)
}

// required bytes imageData = 6;
inline bool RadarVideoPoint::_internal_has_imagedata() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool RadarVideoPoint::has_imagedata() const {
  return _internal_has_imagedata();
}
inline void RadarVideoPoint::clear_imagedata() {
  imagedata_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& RadarVideoPoint::imagedata() const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.proto.RadarVideoPoint.imageData)
  return _internal_imagedata();
}
inline void RadarVideoPoint::set_imagedata(const std::string& value) {
  _internal_set_imagedata(value);
  // @@protoc_insertion_point(field_set:com.zhichenhaixin.proto.RadarVideoPoint.imageData)
}
inline std::string* RadarVideoPoint::mutable_imagedata() {
  // @@protoc_insertion_point(field_mutable:com.zhichenhaixin.proto.RadarVideoPoint.imageData)
  return _internal_mutable_imagedata();
}
inline const std::string& RadarVideoPoint::_internal_imagedata() const {
  return imagedata_.Get();
}
inline void RadarVideoPoint::_internal_set_imagedata(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  imagedata_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void RadarVideoPoint::set_imagedata(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  imagedata_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:com.zhichenhaixin.proto.RadarVideoPoint.imageData)
}
inline void RadarVideoPoint::set_imagedata(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  imagedata_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:com.zhichenhaixin.proto.RadarVideoPoint.imageData)
}
inline void RadarVideoPoint::set_imagedata(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x00000002u;
  imagedata_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:com.zhichenhaixin.proto.RadarVideoPoint.imageData)
}
inline std::string* RadarVideoPoint::_internal_mutable_imagedata() {
  _has_bits_[0] |= 0x00000002u;
  return imagedata_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* RadarVideoPoint::release_imagedata() {
  // @@protoc_insertion_point(field_release:com.zhichenhaixin.proto.RadarVideoPoint.imageData)
  if (!_internal_has_imagedata()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return imagedata_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void RadarVideoPoint::set_allocated_imagedata(std::string* imagedata) {
  if (imagedata != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  imagedata_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), imagedata,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:com.zhichenhaixin.proto.RadarVideoPoint.imageData)
}
inline std::string* RadarVideoPoint::unsafe_arena_release_imagedata() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.zhichenhaixin.proto.RadarVideoPoint.imageData)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000002u;
  return imagedata_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void RadarVideoPoint::unsafe_arena_set_allocated_imagedata(
    std::string* imagedata) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (imagedata != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  imagedata_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      imagedata, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.zhichenhaixin.proto.RadarVideoPoint.imageData)
}

// required bytes preImageData = 7;
inline bool RadarVideoPoint::_internal_has_preimagedata() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool RadarVideoPoint::has_preimagedata() const {
  return _internal_has_preimagedata();
}
inline void RadarVideoPoint::clear_preimagedata() {
  preimagedata_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& RadarVideoPoint::preimagedata() const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.proto.RadarVideoPoint.preImageData)
  return _internal_preimagedata();
}
inline void RadarVideoPoint::set_preimagedata(const std::string& value) {
  _internal_set_preimagedata(value);
  // @@protoc_insertion_point(field_set:com.zhichenhaixin.proto.RadarVideoPoint.preImageData)
}
inline std::string* RadarVideoPoint::mutable_preimagedata() {
  // @@protoc_insertion_point(field_mutable:com.zhichenhaixin.proto.RadarVideoPoint.preImageData)
  return _internal_mutable_preimagedata();
}
inline const std::string& RadarVideoPoint::_internal_preimagedata() const {
  return preimagedata_.Get();
}
inline void RadarVideoPoint::_internal_set_preimagedata(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  preimagedata_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void RadarVideoPoint::set_preimagedata(std::string&& value) {
  _has_bits_[0] |= 0x00000004u;
  preimagedata_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:com.zhichenhaixin.proto.RadarVideoPoint.preImageData)
}
inline void RadarVideoPoint::set_preimagedata(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000004u;
  preimagedata_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:com.zhichenhaixin.proto.RadarVideoPoint.preImageData)
}
inline void RadarVideoPoint::set_preimagedata(const void* value,
    size_t size) {
  _has_bits_[0] |= 0x00000004u;
  preimagedata_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:com.zhichenhaixin.proto.RadarVideoPoint.preImageData)
}
inline std::string* RadarVideoPoint::_internal_mutable_preimagedata() {
  _has_bits_[0] |= 0x00000004u;
  return preimagedata_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* RadarVideoPoint::release_preimagedata() {
  // @@protoc_insertion_point(field_release:com.zhichenhaixin.proto.RadarVideoPoint.preImageData)
  if (!_internal_has_preimagedata()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return preimagedata_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void RadarVideoPoint::set_allocated_preimagedata(std::string* preimagedata) {
  if (preimagedata != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  preimagedata_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), preimagedata,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:com.zhichenhaixin.proto.RadarVideoPoint.preImageData)
}
inline std::string* RadarVideoPoint::unsafe_arena_release_preimagedata() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.zhichenhaixin.proto.RadarVideoPoint.preImageData)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000004u;
  return preimagedata_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void RadarVideoPoint::unsafe_arena_set_allocated_preimagedata(
    std::string* preimagedata) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (preimagedata != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  preimagedata_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      preimagedata, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.zhichenhaixin.proto.RadarVideoPoint.preImageData)
}

// required uint32 width = 8;
inline bool RadarVideoPoint::_internal_has_width() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool RadarVideoPoint::has_width() const {
  return _internal_has_width();
}
inline void RadarVideoPoint::clear_width() {
  width_ = 0u;
  _has_bits_[0] &= ~0x00000040u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 RadarVideoPoint::_internal_width() const {
  return width_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 RadarVideoPoint::width() const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.proto.RadarVideoPoint.width)
  return _internal_width();
}
inline void RadarVideoPoint::_internal_set_width(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000040u;
  width_ = value;
}
inline void RadarVideoPoint::set_width(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_width(value);
  // @@protoc_insertion_point(field_set:com.zhichenhaixin.proto.RadarVideoPoint.width)
}

// required uint32 height = 9;
inline bool RadarVideoPoint::_internal_has_height() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool RadarVideoPoint::has_height() const {
  return _internal_has_height();
}
inline void RadarVideoPoint::clear_height() {
  height_ = 0u;
  _has_bits_[0] &= ~0x00000080u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 RadarVideoPoint::_internal_height() const {
  return height_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 RadarVideoPoint::height() const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.proto.RadarVideoPoint.height)
  return _internal_height();
}
inline void RadarVideoPoint::_internal_set_height(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000080u;
  height_ = value;
}
inline void RadarVideoPoint::set_height(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_height(value);
  // @@protoc_insertion_point(field_set:com.zhichenhaixin.proto.RadarVideoPoint.height)
}

// required double radius = 10;
inline bool RadarVideoPoint::_internal_has_radius() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool RadarVideoPoint::has_radius() const {
  return _internal_has_radius();
}
inline void RadarVideoPoint::clear_radius() {
  radius_ = 0;
  _has_bits_[0] &= ~0x00000100u;
}
inline double RadarVideoPoint::_internal_radius() const {
  return radius_;
}
inline double RadarVideoPoint::radius() const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.proto.RadarVideoPoint.radius)
  return _internal_radius();
}
inline void RadarVideoPoint::_internal_set_radius(double value) {
  _has_bits_[0] |= 0x00000100u;
  radius_ = value;
}
inline void RadarVideoPoint::set_radius(double value) {
  _internal_set_radius(value);
  // @@protoc_insertion_point(field_set:com.zhichenhaixin.proto.RadarVideoPoint.radius)
}

// required uint32 curIndex = 11;
inline bool RadarVideoPoint::_internal_has_curindex() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool RadarVideoPoint::has_curindex() const {
  return _internal_has_curindex();
}
inline void RadarVideoPoint::clear_curindex() {
  curindex_ = 0u;
  _has_bits_[0] &= ~0x00000200u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 RadarVideoPoint::_internal_curindex() const {
  return curindex_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 RadarVideoPoint::curindex() const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.proto.RadarVideoPoint.curIndex)
  return _internal_curindex();
}
inline void RadarVideoPoint::_internal_set_curindex(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000200u;
  curindex_ = value;
}
inline void RadarVideoPoint::set_curindex(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_curindex(value);
  // @@protoc_insertion_point(field_set:com.zhichenhaixin.proto.RadarVideoPoint.curIndex)
}

// required uint32 loopNum = 12;
inline bool RadarVideoPoint::_internal_has_loopnum() const {
  bool value = (_has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool RadarVideoPoint::has_loopnum() const {
  return _internal_has_loopnum();
}
inline void RadarVideoPoint::clear_loopnum() {
  loopnum_ = 0u;
  _has_bits_[0] &= ~0x00000400u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 RadarVideoPoint::_internal_loopnum() const {
  return loopnum_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 RadarVideoPoint::loopnum() const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.proto.RadarVideoPoint.loopNum)
  return _internal_loopnum();
}
inline void RadarVideoPoint::_internal_set_loopnum(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000400u;
  loopnum_ = value;
}
inline void RadarVideoPoint::set_loopnum(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_loopnum(value);
  // @@protoc_insertion_point(field_set:com.zhichenhaixin.proto.RadarVideoPoint.loopNum)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace zhichenhaixin
}  // namespace com

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_ZCHXRadarVideo_2eproto
