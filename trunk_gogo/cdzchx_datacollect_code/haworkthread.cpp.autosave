#include "haworkthread.h"
#include "profiles.h"
#include "dataserverutils.h"

HAWorkThread::HAWorkThread(QObject *parent) : QObject(parent)
{
    mReady = false;

}

void HAWorkThread::readySetVirtualIp()
{
    mReady = true;
}

void HAWorkThread::run()
{
    //取得当前配置主备模式
    QString  masterIP = Utils::Profiles::instance()->value("Host", "MasterIP", "192.168.8.220").toString();
    bool     isMaster = Utils::Profiles::instance()->value("Host", "Master", 0).toBool();
    QString  virtualIp = Utils::Profiles::instance()->value("Host", "PublishIP", "192.168.8.110").toString();

    if(isMaster)
    {
        emit startSetVirtualIp();
        //检测当前的主机是否配置了虚拟ip
        while(!DataServerUtils::isVirtualIpExist(virtualIp))
        {
            //等待备份机释放虚拟ip, 这里不断地删除和释放，等待建立成功
            DataServerUtils::delVirtualIp(virtualIp);
            QThread::msleep(200);
            DataServerUtils::setVirtualIp(virtualIp);
            QThread::msleep(500);
        }
        emit addVirtualIPSuccess();
    } else
    {
        //作为备份机使用, 先删除可能的虚拟ip
        DataServerUtils::delVirtualIp(virtualIp);
        //
        url.sprintf("tcp://%s:%d", masterIP.toUtf8().data(), portNum);
        res = zmq_connect (pair, url.toUtf8().data());
        LOG(LOG_RTM, "start zmq pair port = %d. connect returned:%d", portNum, res);

        int timeout = 10 * 1000; //10s超时限制，没有收到消息就退出
        zmq_setsockopt(pair, ZMQ_RCVTIMEO, &timeout, sizeof(timeout));
        mIsPublish = false;

        //接收消息，超出时间限制，认为主服务器已经下线。备份服务器开始开始启动发送数据
        while(mRunning)
        {
            zmq_msg_t reply;
            zmq_msg_init(&reply);
            zmq_recvmsg(pair, &reply, 0);
            QByteArray bytes2 = QByteArray((char*)zmq_msg_data(&reply),(int)(zmq_msg_size(&reply)));
            zmq_msg_close(&reply);
            if(bytes2.length() == 0)
            {
                LOG(LOG_RTM, "receive nothing data from master server");
                //没有收到主服务器的数据
                if(mIsPublish == false)
                {
                    //开始启动备份服务器往外提供数据服务
                    DataServerUtils::delVirtualIp(virtualIp);
                    DataServerUtils::setVirtualIp(virtualIp);
                    while(!(mIsPublish = DataServerUtils::isVirtualIpExist(virtualIp)))
                    {
                        DataServerUtils::delVirtualIp(virtualIp);
                        DataServerUtils::setVirtualIp(virtualIp);
                    }
                    LOG(LOG_RTM, "start data services");
                    //mIsPublish = true;

                    qDebug()<<"emit start signal";
                    //emit startPublish();
                }

                //关闭socket重新连接
                zmq_close(pair);
                pair = zmq_socket (context, ZMQ_PAIR);
                res = zmq_connect (pair, url.toUtf8().data());
                zmq_setsockopt(pair, ZMQ_RCVTIMEO, &timeout, sizeof(timeout));
            } else
            {
                LOG(LOG_RTM, "receive data from master server:%s", bytes2.data());
                //主服务器正在运行，结束当前正在提供的数据服务
                if(mIsPublish)
                {
                    LOG(LOG_RTM, "stop data services");
                    //emit stopPublish();
                    DataServerUtils::delVirtualIp(virtualIp);
                    QByteArray byte = QString::number(22222).toUtf8();
                    zmq_send(pair, byte.data(), byte.length(), 0);
                    mIsPublish = false;
                }

            }
        }

    }
    

}
