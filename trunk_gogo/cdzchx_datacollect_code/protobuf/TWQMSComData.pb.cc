// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: TWQMSComData.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "TWQMSComData.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace com {
namespace zhichenhaixin {
namespace gps {
namespace proto {

namespace {

const ::google::protobuf::Descriptor* GPS_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GPS_reflection_ = NULL;
const ::google::protobuf::Descriptor* ZS_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ZS_reflection_ = NULL;
const ::google::protobuf::Descriptor* RDO_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RDO_reflection_ = NULL;
const ::google::protobuf::Descriptor* ORP_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ORP_reflection_ = NULL;
const ::google::protobuf::Descriptor* DDM_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DDM_reflection_ = NULL;
const ::google::protobuf::Descriptor* NHN_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NHN_reflection_ = NULL;
const ::google::protobuf::Descriptor* WL_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  WL_reflection_ = NULL;
const ::google::protobuf::Descriptor* DevInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DevInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* DevInfoList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DevInfoList_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_TWQMSComData_2eproto() {
  protobuf_AddDesc_TWQMSComData_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "TWQMSComData.proto");
  GOOGLE_CHECK(file != NULL);
  GPS_descriptor_ = file->message_type(0);
  static const int GPS_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GPS, ship_update_time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GPS, ship_lat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GPS, ship_lon_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GPS, ship_speed_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GPS, ship_head_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GPS, ship_course_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GPS, sts_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GPS, ship_id_),
  };
  GPS_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GPS_descriptor_,
      GPS::default_instance_,
      GPS_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GPS, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GPS, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GPS));
  ZS_descriptor_ = file->message_type(1);
  static const int ZS_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ZS, zs_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ZS, temp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ZS, time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ZS, sts_),
  };
  ZS_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ZS_descriptor_,
      ZS::default_instance_,
      ZS_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ZS, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ZS, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ZS));
  RDO_descriptor_ = file->message_type(2);
  static const int RDO_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RDO, rdo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RDO, temp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RDO, time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RDO, sts_),
  };
  RDO_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RDO_descriptor_,
      RDO::default_instance_,
      RDO_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RDO, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RDO, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RDO));
  ORP_descriptor_ = file->message_type(3);
  static const int ORP_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ORP, orp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ORP, time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ORP, sts_),
  };
  ORP_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ORP_descriptor_,
      ORP::default_instance_,
      ORP_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ORP, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ORP, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ORP));
  DDM_descriptor_ = file->message_type(4);
  static const int DDM_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DDM, ddm_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DDM, temp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DDM, time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DDM, sts_),
  };
  DDM_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DDM_descriptor_,
      DDM::default_instance_,
      DDM_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DDM, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DDM, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DDM));
  NHN_descriptor_ = file->message_type(5);
  static const int NHN_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NHN, nhn_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NHN, temp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NHN, time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NHN, sts_),
  };
  NHN_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NHN_descriptor_,
      NHN::default_instance_,
      NHN_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NHN, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NHN, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NHN));
  WL_descriptor_ = file->message_type(6);
  static const int WL_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WL, press_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WL, temp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WL, lvl_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WL, time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WL, sts_),
  };
  WL_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      WL_descriptor_,
      WL::default_instance_,
      WL_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WL, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WL, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(WL));
  DevInfo_descriptor_ = file->message_type(7);
  static const int DevInfo_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DevInfo, gps_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DevInfo, zs_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DevInfo, rdo_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DevInfo, orp_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DevInfo, ddm_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DevInfo, nhn_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DevInfo, wl_info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DevInfo, site_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DevInfo, cur_utc_time_),
  };
  DevInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DevInfo_descriptor_,
      DevInfo::default_instance_,
      DevInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DevInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DevInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DevInfo));
  DevInfoList_descriptor_ = file->message_type(8);
  static const int DevInfoList_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DevInfoList, devinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DevInfoList, length_),
  };
  DevInfoList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DevInfoList_descriptor_,
      DevInfoList::default_instance_,
      DevInfoList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DevInfoList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DevInfoList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DevInfoList));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_TWQMSComData_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GPS_descriptor_, &GPS::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ZS_descriptor_, &ZS::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RDO_descriptor_, &RDO::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ORP_descriptor_, &ORP::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DDM_descriptor_, &DDM::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NHN_descriptor_, &NHN::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    WL_descriptor_, &WL::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DevInfo_descriptor_, &DevInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DevInfoList_descriptor_, &DevInfoList::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_TWQMSComData_2eproto() {
  delete GPS::default_instance_;
  delete GPS_reflection_;
  delete ZS::default_instance_;
  delete ZS_reflection_;
  delete RDO::default_instance_;
  delete RDO_reflection_;
  delete ORP::default_instance_;
  delete ORP_reflection_;
  delete DDM::default_instance_;
  delete DDM_reflection_;
  delete NHN::default_instance_;
  delete NHN_reflection_;
  delete WL::default_instance_;
  delete WL_reflection_;
  delete DevInfo::default_instance_;
  delete DevInfo_reflection_;
  delete DevInfoList::default_instance_;
  delete DevInfoList_reflection_;
}

void protobuf_AddDesc_TWQMSComData_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\022TWQMSComData.proto\022\033com.zhichenhaixin."
    "gps.proto\"\235\001\n\003GPS\022\030\n\020ship_update_time\030\001 "
    "\002(\003\022\020\n\010ship_lat\030\002 \002(\001\022\020\n\010ship_lon\030\003 \002(\001\022"
    "\022\n\nship_speed\030\004 \002(\001\022\021\n\tship_head\030\005 \002(\001\022\023"
    "\n\013ship_course\030\006 \002(\001\022\013\n\003sts\030\007 \002(\010\022\017\n\007ship"
    "_id\030\010 \002(\t\"9\n\002ZS\022\n\n\002ZS\030\001 \002(\001\022\014\n\004TEMP\030\002 \002("
    "\001\022\014\n\004time\030\003 \002(\003\022\013\n\003sts\030\004 \002(\010\";\n\003RDO\022\013\n\003R"
    "DO\030\001 \002(\001\022\014\n\004TEMP\030\002 \002(\001\022\014\n\004time\030\003 \002(\003\022\013\n\003"
    "sts\030\004 \002(\010\"-\n\003ORP\022\013\n\003ORP\030\001 \002(\001\022\014\n\004time\030\002 "
    "\002(\003\022\013\n\003sts\030\003 \002(\010\";\n\003DDM\022\013\n\003DDM\030\001 \002(\001\022\014\n\004"
    "TEMP\030\002 \002(\001\022\014\n\004time\030\003 \002(\003\022\013\n\003sts\030\004 \002(\010\";\n"
    "\003NHN\022\013\n\003NHN\030\001 \002(\001\022\014\n\004TEMP\030\002 \002(\001\022\014\n\004time\030"
    "\003 \002(\003\022\013\n\003sts\030\004 \002(\010\"I\n\002WL\022\r\n\005PRESS\030\001 \002(\001\022"
    "\014\n\004TEMP\030\002 \002(\001\022\013\n\003LVL\030\003 \002(\001\022\014\n\004time\030\004 \002(\003"
    "\022\013\n\003sts\030\005 \002(\010\"\230\003\n\007DevInfo\0222\n\010gps_info\030\001 "
    "\002(\0132 .com.zhichenhaixin.gps.proto.GPS\0220\n"
    "\007zs_info\030\002 \002(\0132\037.com.zhichenhaixin.gps.p"
    "roto.ZS\0222\n\010rdo_info\030\003 \002(\0132 .com.zhichenh"
    "aixin.gps.proto.RDO\0222\n\010orp_info\030\004 \002(\0132 ."
    "com.zhichenhaixin.gps.proto.ORP\0222\n\010ddm_i"
    "nfo\030\005 \002(\0132 .com.zhichenhaixin.gps.proto."
    "DDM\0222\n\010nhn_info\030\007 \002(\0132 .com.zhichenhaixi"
    "n.gps.proto.NHN\0220\n\007wl_info\030\010 \002(\0132\037.com.z"
    "hichenhaixin.gps.proto.WL\022\017\n\007site_id\030\t \002"
    "(\t\022\024\n\014cur_utc_time\030\n \002(\003\"T\n\013DevInfoList\022"
    "5\n\007devInfo\030\001 \003(\0132$.com.zhichenhaixin.gps"
    ".proto.DevInfo\022\016\n\006length\030\002 \001(\005", 1070);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "TWQMSComData.proto", &protobuf_RegisterTypes);
  GPS::default_instance_ = new GPS();
  ZS::default_instance_ = new ZS();
  RDO::default_instance_ = new RDO();
  ORP::default_instance_ = new ORP();
  DDM::default_instance_ = new DDM();
  NHN::default_instance_ = new NHN();
  WL::default_instance_ = new WL();
  DevInfo::default_instance_ = new DevInfo();
  DevInfoList::default_instance_ = new DevInfoList();
  GPS::default_instance_->InitAsDefaultInstance();
  ZS::default_instance_->InitAsDefaultInstance();
  RDO::default_instance_->InitAsDefaultInstance();
  ORP::default_instance_->InitAsDefaultInstance();
  DDM::default_instance_->InitAsDefaultInstance();
  NHN::default_instance_->InitAsDefaultInstance();
  WL::default_instance_->InitAsDefaultInstance();
  DevInfo::default_instance_->InitAsDefaultInstance();
  DevInfoList::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_TWQMSComData_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_TWQMSComData_2eproto {
  StaticDescriptorInitializer_TWQMSComData_2eproto() {
    protobuf_AddDesc_TWQMSComData_2eproto();
  }
} static_descriptor_initializer_TWQMSComData_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int GPS::kShipUpdateTimeFieldNumber;
const int GPS::kShipLatFieldNumber;
const int GPS::kShipLonFieldNumber;
const int GPS::kShipSpeedFieldNumber;
const int GPS::kShipHeadFieldNumber;
const int GPS::kShipCourseFieldNumber;
const int GPS::kStsFieldNumber;
const int GPS::kShipIdFieldNumber;
#endif  // !_MSC_VER

GPS::GPS()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.zhichenhaixin.gps.proto.GPS)
}

void GPS::InitAsDefaultInstance() {
}

GPS::GPS(const GPS& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:com.zhichenhaixin.gps.proto.GPS)
}

void GPS::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  ship_update_time_ = GOOGLE_LONGLONG(0);
  ship_lat_ = 0;
  ship_lon_ = 0;
  ship_speed_ = 0;
  ship_head_ = 0;
  ship_course_ = 0;
  sts_ = false;
  ship_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GPS::~GPS() {
  // @@protoc_insertion_point(destructor:com.zhichenhaixin.gps.proto.GPS)
  SharedDtor();
}

void GPS::SharedDtor() {
  if (ship_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete ship_id_;
  }
  if (this != default_instance_) {
  }
}

void GPS::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GPS::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GPS_descriptor_;
}

const GPS& GPS::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TWQMSComData_2eproto();
  return *default_instance_;
}

GPS* GPS::default_instance_ = NULL;

GPS* GPS::New() const {
  return new GPS;
}

void GPS::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<GPS*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(ship_update_time_, ship_course_);
    sts_ = false;
    if (has_ship_id()) {
      if (ship_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        ship_id_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GPS::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.zhichenhaixin.gps.proto.GPS)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 ship_update_time = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &ship_update_time_)));
          set_has_ship_update_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(17)) goto parse_ship_lat;
        break;
      }

      // required double ship_lat = 2;
      case 2: {
        if (tag == 17) {
         parse_ship_lat:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &ship_lat_)));
          set_has_ship_lat();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(25)) goto parse_ship_lon;
        break;
      }

      // required double ship_lon = 3;
      case 3: {
        if (tag == 25) {
         parse_ship_lon:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &ship_lon_)));
          set_has_ship_lon();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(33)) goto parse_ship_speed;
        break;
      }

      // required double ship_speed = 4;
      case 4: {
        if (tag == 33) {
         parse_ship_speed:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &ship_speed_)));
          set_has_ship_speed();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(41)) goto parse_ship_head;
        break;
      }

      // required double ship_head = 5;
      case 5: {
        if (tag == 41) {
         parse_ship_head:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &ship_head_)));
          set_has_ship_head();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(49)) goto parse_ship_course;
        break;
      }

      // required double ship_course = 6;
      case 6: {
        if (tag == 49) {
         parse_ship_course:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &ship_course_)));
          set_has_ship_course();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_sts;
        break;
      }

      // required bool sts = 7;
      case 7: {
        if (tag == 56) {
         parse_sts:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &sts_)));
          set_has_sts();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_ship_id;
        break;
      }

      // required string ship_id = 8;
      case 8: {
        if (tag == 66) {
         parse_ship_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ship_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->ship_id().data(), this->ship_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ship_id");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.zhichenhaixin.gps.proto.GPS)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.zhichenhaixin.gps.proto.GPS)
  return false;
#undef DO_
}

void GPS::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.zhichenhaixin.gps.proto.GPS)
  // required int64 ship_update_time = 1;
  if (has_ship_update_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->ship_update_time(), output);
  }

  // required double ship_lat = 2;
  if (has_ship_lat()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->ship_lat(), output);
  }

  // required double ship_lon = 3;
  if (has_ship_lon()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->ship_lon(), output);
  }

  // required double ship_speed = 4;
  if (has_ship_speed()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->ship_speed(), output);
  }

  // required double ship_head = 5;
  if (has_ship_head()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(5, this->ship_head(), output);
  }

  // required double ship_course = 6;
  if (has_ship_course()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(6, this->ship_course(), output);
  }

  // required bool sts = 7;
  if (has_sts()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->sts(), output);
  }

  // required string ship_id = 8;
  if (has_ship_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->ship_id().data(), this->ship_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ship_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->ship_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.zhichenhaixin.gps.proto.GPS)
}

::google::protobuf::uint8* GPS::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.zhichenhaixin.gps.proto.GPS)
  // required int64 ship_update_time = 1;
  if (has_ship_update_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->ship_update_time(), target);
  }

  // required double ship_lat = 2;
  if (has_ship_lat()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->ship_lat(), target);
  }

  // required double ship_lon = 3;
  if (has_ship_lon()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->ship_lon(), target);
  }

  // required double ship_speed = 4;
  if (has_ship_speed()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->ship_speed(), target);
  }

  // required double ship_head = 5;
  if (has_ship_head()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(5, this->ship_head(), target);
  }

  // required double ship_course = 6;
  if (has_ship_course()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(6, this->ship_course(), target);
  }

  // required bool sts = 7;
  if (has_sts()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->sts(), target);
  }

  // required string ship_id = 8;
  if (has_ship_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->ship_id().data(), this->ship_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ship_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->ship_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.zhichenhaixin.gps.proto.GPS)
  return target;
}

int GPS::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 ship_update_time = 1;
    if (has_ship_update_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->ship_update_time());
    }

    // required double ship_lat = 2;
    if (has_ship_lat()) {
      total_size += 1 + 8;
    }

    // required double ship_lon = 3;
    if (has_ship_lon()) {
      total_size += 1 + 8;
    }

    // required double ship_speed = 4;
    if (has_ship_speed()) {
      total_size += 1 + 8;
    }

    // required double ship_head = 5;
    if (has_ship_head()) {
      total_size += 1 + 8;
    }

    // required double ship_course = 6;
    if (has_ship_course()) {
      total_size += 1 + 8;
    }

    // required bool sts = 7;
    if (has_sts()) {
      total_size += 1 + 1;
    }

    // required string ship_id = 8;
    if (has_ship_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ship_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GPS::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GPS* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GPS*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GPS::MergeFrom(const GPS& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ship_update_time()) {
      set_ship_update_time(from.ship_update_time());
    }
    if (from.has_ship_lat()) {
      set_ship_lat(from.ship_lat());
    }
    if (from.has_ship_lon()) {
      set_ship_lon(from.ship_lon());
    }
    if (from.has_ship_speed()) {
      set_ship_speed(from.ship_speed());
    }
    if (from.has_ship_head()) {
      set_ship_head(from.ship_head());
    }
    if (from.has_ship_course()) {
      set_ship_course(from.ship_course());
    }
    if (from.has_sts()) {
      set_sts(from.sts());
    }
    if (from.has_ship_id()) {
      set_ship_id(from.ship_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GPS::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GPS::CopyFrom(const GPS& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GPS::IsInitialized() const {
  if ((_has_bits_[0] & 0x000000ff) != 0x000000ff) return false;

  return true;
}

void GPS::Swap(GPS* other) {
  if (other != this) {
    std::swap(ship_update_time_, other->ship_update_time_);
    std::swap(ship_lat_, other->ship_lat_);
    std::swap(ship_lon_, other->ship_lon_);
    std::swap(ship_speed_, other->ship_speed_);
    std::swap(ship_head_, other->ship_head_);
    std::swap(ship_course_, other->ship_course_);
    std::swap(sts_, other->sts_);
    std::swap(ship_id_, other->ship_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GPS::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GPS_descriptor_;
  metadata.reflection = GPS_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ZS::kZSFieldNumber;
const int ZS::kTEMPFieldNumber;
const int ZS::kTimeFieldNumber;
const int ZS::kStsFieldNumber;
#endif  // !_MSC_VER

ZS::ZS()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.zhichenhaixin.gps.proto.ZS)
}

void ZS::InitAsDefaultInstance() {
}

ZS::ZS(const ZS& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:com.zhichenhaixin.gps.proto.ZS)
}

void ZS::SharedCtor() {
  _cached_size_ = 0;
  zs_ = 0;
  temp_ = 0;
  time_ = GOOGLE_LONGLONG(0);
  sts_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ZS::~ZS() {
  // @@protoc_insertion_point(destructor:com.zhichenhaixin.gps.proto.ZS)
  SharedDtor();
}

void ZS::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ZS::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ZS::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ZS_descriptor_;
}

const ZS& ZS::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TWQMSComData_2eproto();
  return *default_instance_;
}

ZS* ZS::default_instance_ = NULL;

ZS* ZS::New() const {
  return new ZS;
}

void ZS::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<ZS*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(zs_, sts_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ZS::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.zhichenhaixin.gps.proto.ZS)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required double ZS = 1;
      case 1: {
        if (tag == 9) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &zs_)));
          set_has_zs();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(17)) goto parse_TEMP;
        break;
      }

      // required double TEMP = 2;
      case 2: {
        if (tag == 17) {
         parse_TEMP:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &temp_)));
          set_has_temp();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_time;
        break;
      }

      // required int64 time = 3;
      case 3: {
        if (tag == 24) {
         parse_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_sts;
        break;
      }

      // required bool sts = 4;
      case 4: {
        if (tag == 32) {
         parse_sts:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &sts_)));
          set_has_sts();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.zhichenhaixin.gps.proto.ZS)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.zhichenhaixin.gps.proto.ZS)
  return false;
#undef DO_
}

void ZS::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.zhichenhaixin.gps.proto.ZS)
  // required double ZS = 1;
  if (has_zs()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->zs(), output);
  }

  // required double TEMP = 2;
  if (has_temp()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->temp(), output);
  }

  // required int64 time = 3;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->time(), output);
  }

  // required bool sts = 4;
  if (has_sts()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->sts(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.zhichenhaixin.gps.proto.ZS)
}

::google::protobuf::uint8* ZS::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.zhichenhaixin.gps.proto.ZS)
  // required double ZS = 1;
  if (has_zs()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->zs(), target);
  }

  // required double TEMP = 2;
  if (has_temp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->temp(), target);
  }

  // required int64 time = 3;
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->time(), target);
  }

  // required bool sts = 4;
  if (has_sts()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->sts(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.zhichenhaixin.gps.proto.ZS)
  return target;
}

int ZS::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required double ZS = 1;
    if (has_zs()) {
      total_size += 1 + 8;
    }

    // required double TEMP = 2;
    if (has_temp()) {
      total_size += 1 + 8;
    }

    // required int64 time = 3;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->time());
    }

    // required bool sts = 4;
    if (has_sts()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ZS::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ZS* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ZS*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ZS::MergeFrom(const ZS& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_zs()) {
      set_zs(from.zs());
    }
    if (from.has_temp()) {
      set_temp(from.temp());
    }
    if (from.has_time()) {
      set_time(from.time());
    }
    if (from.has_sts()) {
      set_sts(from.sts());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ZS::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ZS::CopyFrom(const ZS& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ZS::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void ZS::Swap(ZS* other) {
  if (other != this) {
    std::swap(zs_, other->zs_);
    std::swap(temp_, other->temp_);
    std::swap(time_, other->time_);
    std::swap(sts_, other->sts_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ZS::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ZS_descriptor_;
  metadata.reflection = ZS_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RDO::kRDOFieldNumber;
const int RDO::kTEMPFieldNumber;
const int RDO::kTimeFieldNumber;
const int RDO::kStsFieldNumber;
#endif  // !_MSC_VER

RDO::RDO()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.zhichenhaixin.gps.proto.RDO)
}

void RDO::InitAsDefaultInstance() {
}

RDO::RDO(const RDO& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:com.zhichenhaixin.gps.proto.RDO)
}

void RDO::SharedCtor() {
  _cached_size_ = 0;
  rdo_ = 0;
  temp_ = 0;
  time_ = GOOGLE_LONGLONG(0);
  sts_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RDO::~RDO() {
  // @@protoc_insertion_point(destructor:com.zhichenhaixin.gps.proto.RDO)
  SharedDtor();
}

void RDO::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RDO::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RDO::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RDO_descriptor_;
}

const RDO& RDO::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TWQMSComData_2eproto();
  return *default_instance_;
}

RDO* RDO::default_instance_ = NULL;

RDO* RDO::New() const {
  return new RDO;
}

void RDO::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<RDO*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(rdo_, sts_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RDO::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.zhichenhaixin.gps.proto.RDO)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required double RDO = 1;
      case 1: {
        if (tag == 9) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &rdo_)));
          set_has_rdo();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(17)) goto parse_TEMP;
        break;
      }

      // required double TEMP = 2;
      case 2: {
        if (tag == 17) {
         parse_TEMP:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &temp_)));
          set_has_temp();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_time;
        break;
      }

      // required int64 time = 3;
      case 3: {
        if (tag == 24) {
         parse_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_sts;
        break;
      }

      // required bool sts = 4;
      case 4: {
        if (tag == 32) {
         parse_sts:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &sts_)));
          set_has_sts();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.zhichenhaixin.gps.proto.RDO)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.zhichenhaixin.gps.proto.RDO)
  return false;
#undef DO_
}

void RDO::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.zhichenhaixin.gps.proto.RDO)
  // required double RDO = 1;
  if (has_rdo()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->rdo(), output);
  }

  // required double TEMP = 2;
  if (has_temp()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->temp(), output);
  }

  // required int64 time = 3;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->time(), output);
  }

  // required bool sts = 4;
  if (has_sts()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->sts(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.zhichenhaixin.gps.proto.RDO)
}

::google::protobuf::uint8* RDO::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.zhichenhaixin.gps.proto.RDO)
  // required double RDO = 1;
  if (has_rdo()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->rdo(), target);
  }

  // required double TEMP = 2;
  if (has_temp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->temp(), target);
  }

  // required int64 time = 3;
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->time(), target);
  }

  // required bool sts = 4;
  if (has_sts()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->sts(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.zhichenhaixin.gps.proto.RDO)
  return target;
}

int RDO::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required double RDO = 1;
    if (has_rdo()) {
      total_size += 1 + 8;
    }

    // required double TEMP = 2;
    if (has_temp()) {
      total_size += 1 + 8;
    }

    // required int64 time = 3;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->time());
    }

    // required bool sts = 4;
    if (has_sts()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RDO::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RDO* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RDO*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RDO::MergeFrom(const RDO& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_rdo()) {
      set_rdo(from.rdo());
    }
    if (from.has_temp()) {
      set_temp(from.temp());
    }
    if (from.has_time()) {
      set_time(from.time());
    }
    if (from.has_sts()) {
      set_sts(from.sts());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RDO::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RDO::CopyFrom(const RDO& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RDO::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void RDO::Swap(RDO* other) {
  if (other != this) {
    std::swap(rdo_, other->rdo_);
    std::swap(temp_, other->temp_);
    std::swap(time_, other->time_);
    std::swap(sts_, other->sts_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RDO::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RDO_descriptor_;
  metadata.reflection = RDO_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ORP::kORPFieldNumber;
const int ORP::kTimeFieldNumber;
const int ORP::kStsFieldNumber;
#endif  // !_MSC_VER

ORP::ORP()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.zhichenhaixin.gps.proto.ORP)
}

void ORP::InitAsDefaultInstance() {
}

ORP::ORP(const ORP& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:com.zhichenhaixin.gps.proto.ORP)
}

void ORP::SharedCtor() {
  _cached_size_ = 0;
  orp_ = 0;
  time_ = GOOGLE_LONGLONG(0);
  sts_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ORP::~ORP() {
  // @@protoc_insertion_point(destructor:com.zhichenhaixin.gps.proto.ORP)
  SharedDtor();
}

void ORP::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ORP::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ORP::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ORP_descriptor_;
}

const ORP& ORP::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TWQMSComData_2eproto();
  return *default_instance_;
}

ORP* ORP::default_instance_ = NULL;

ORP* ORP::New() const {
  return new ORP;
}

void ORP::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<ORP*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(orp_, sts_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ORP::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.zhichenhaixin.gps.proto.ORP)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required double ORP = 1;
      case 1: {
        if (tag == 9) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &orp_)));
          set_has_orp();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_time;
        break;
      }

      // required int64 time = 2;
      case 2: {
        if (tag == 16) {
         parse_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_sts;
        break;
      }

      // required bool sts = 3;
      case 3: {
        if (tag == 24) {
         parse_sts:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &sts_)));
          set_has_sts();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.zhichenhaixin.gps.proto.ORP)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.zhichenhaixin.gps.proto.ORP)
  return false;
#undef DO_
}

void ORP::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.zhichenhaixin.gps.proto.ORP)
  // required double ORP = 1;
  if (has_orp()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->orp(), output);
  }

  // required int64 time = 2;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->time(), output);
  }

  // required bool sts = 3;
  if (has_sts()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->sts(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.zhichenhaixin.gps.proto.ORP)
}

::google::protobuf::uint8* ORP::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.zhichenhaixin.gps.proto.ORP)
  // required double ORP = 1;
  if (has_orp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->orp(), target);
  }

  // required int64 time = 2;
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->time(), target);
  }

  // required bool sts = 3;
  if (has_sts()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->sts(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.zhichenhaixin.gps.proto.ORP)
  return target;
}

int ORP::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required double ORP = 1;
    if (has_orp()) {
      total_size += 1 + 8;
    }

    // required int64 time = 2;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->time());
    }

    // required bool sts = 3;
    if (has_sts()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ORP::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ORP* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ORP*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ORP::MergeFrom(const ORP& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_orp()) {
      set_orp(from.orp());
    }
    if (from.has_time()) {
      set_time(from.time());
    }
    if (from.has_sts()) {
      set_sts(from.sts());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ORP::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ORP::CopyFrom(const ORP& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ORP::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void ORP::Swap(ORP* other) {
  if (other != this) {
    std::swap(orp_, other->orp_);
    std::swap(time_, other->time_);
    std::swap(sts_, other->sts_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ORP::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ORP_descriptor_;
  metadata.reflection = ORP_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DDM::kDDMFieldNumber;
const int DDM::kTEMPFieldNumber;
const int DDM::kTimeFieldNumber;
const int DDM::kStsFieldNumber;
#endif  // !_MSC_VER

DDM::DDM()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.zhichenhaixin.gps.proto.DDM)
}

void DDM::InitAsDefaultInstance() {
}

DDM::DDM(const DDM& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:com.zhichenhaixin.gps.proto.DDM)
}

void DDM::SharedCtor() {
  _cached_size_ = 0;
  ddm_ = 0;
  temp_ = 0;
  time_ = GOOGLE_LONGLONG(0);
  sts_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DDM::~DDM() {
  // @@protoc_insertion_point(destructor:com.zhichenhaixin.gps.proto.DDM)
  SharedDtor();
}

void DDM::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DDM::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DDM::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DDM_descriptor_;
}

const DDM& DDM::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TWQMSComData_2eproto();
  return *default_instance_;
}

DDM* DDM::default_instance_ = NULL;

DDM* DDM::New() const {
  return new DDM;
}

void DDM::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<DDM*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(ddm_, sts_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DDM::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.zhichenhaixin.gps.proto.DDM)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required double DDM = 1;
      case 1: {
        if (tag == 9) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &ddm_)));
          set_has_ddm();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(17)) goto parse_TEMP;
        break;
      }

      // required double TEMP = 2;
      case 2: {
        if (tag == 17) {
         parse_TEMP:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &temp_)));
          set_has_temp();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_time;
        break;
      }

      // required int64 time = 3;
      case 3: {
        if (tag == 24) {
         parse_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_sts;
        break;
      }

      // required bool sts = 4;
      case 4: {
        if (tag == 32) {
         parse_sts:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &sts_)));
          set_has_sts();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.zhichenhaixin.gps.proto.DDM)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.zhichenhaixin.gps.proto.DDM)
  return false;
#undef DO_
}

void DDM::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.zhichenhaixin.gps.proto.DDM)
  // required double DDM = 1;
  if (has_ddm()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->ddm(), output);
  }

  // required double TEMP = 2;
  if (has_temp()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->temp(), output);
  }

  // required int64 time = 3;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->time(), output);
  }

  // required bool sts = 4;
  if (has_sts()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->sts(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.zhichenhaixin.gps.proto.DDM)
}

::google::protobuf::uint8* DDM::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.zhichenhaixin.gps.proto.DDM)
  // required double DDM = 1;
  if (has_ddm()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->ddm(), target);
  }

  // required double TEMP = 2;
  if (has_temp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->temp(), target);
  }

  // required int64 time = 3;
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->time(), target);
  }

  // required bool sts = 4;
  if (has_sts()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->sts(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.zhichenhaixin.gps.proto.DDM)
  return target;
}

int DDM::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required double DDM = 1;
    if (has_ddm()) {
      total_size += 1 + 8;
    }

    // required double TEMP = 2;
    if (has_temp()) {
      total_size += 1 + 8;
    }

    // required int64 time = 3;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->time());
    }

    // required bool sts = 4;
    if (has_sts()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DDM::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DDM* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DDM*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DDM::MergeFrom(const DDM& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ddm()) {
      set_ddm(from.ddm());
    }
    if (from.has_temp()) {
      set_temp(from.temp());
    }
    if (from.has_time()) {
      set_time(from.time());
    }
    if (from.has_sts()) {
      set_sts(from.sts());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DDM::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DDM::CopyFrom(const DDM& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DDM::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void DDM::Swap(DDM* other) {
  if (other != this) {
    std::swap(ddm_, other->ddm_);
    std::swap(temp_, other->temp_);
    std::swap(time_, other->time_);
    std::swap(sts_, other->sts_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DDM::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DDM_descriptor_;
  metadata.reflection = DDM_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int NHN::kNHNFieldNumber;
const int NHN::kTEMPFieldNumber;
const int NHN::kTimeFieldNumber;
const int NHN::kStsFieldNumber;
#endif  // !_MSC_VER

NHN::NHN()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.zhichenhaixin.gps.proto.NHN)
}

void NHN::InitAsDefaultInstance() {
}

NHN::NHN(const NHN& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:com.zhichenhaixin.gps.proto.NHN)
}

void NHN::SharedCtor() {
  _cached_size_ = 0;
  nhn_ = 0;
  temp_ = 0;
  time_ = GOOGLE_LONGLONG(0);
  sts_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NHN::~NHN() {
  // @@protoc_insertion_point(destructor:com.zhichenhaixin.gps.proto.NHN)
  SharedDtor();
}

void NHN::SharedDtor() {
  if (this != default_instance_) {
  }
}

void NHN::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NHN::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NHN_descriptor_;
}

const NHN& NHN::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TWQMSComData_2eproto();
  return *default_instance_;
}

NHN* NHN::default_instance_ = NULL;

NHN* NHN::New() const {
  return new NHN;
}

void NHN::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<NHN*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  ZR_(nhn_, sts_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NHN::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.zhichenhaixin.gps.proto.NHN)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required double NHN = 1;
      case 1: {
        if (tag == 9) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &nhn_)));
          set_has_nhn();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(17)) goto parse_TEMP;
        break;
      }

      // required double TEMP = 2;
      case 2: {
        if (tag == 17) {
         parse_TEMP:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &temp_)));
          set_has_temp();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_time;
        break;
      }

      // required int64 time = 3;
      case 3: {
        if (tag == 24) {
         parse_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_sts;
        break;
      }

      // required bool sts = 4;
      case 4: {
        if (tag == 32) {
         parse_sts:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &sts_)));
          set_has_sts();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.zhichenhaixin.gps.proto.NHN)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.zhichenhaixin.gps.proto.NHN)
  return false;
#undef DO_
}

void NHN::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.zhichenhaixin.gps.proto.NHN)
  // required double NHN = 1;
  if (has_nhn()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->nhn(), output);
  }

  // required double TEMP = 2;
  if (has_temp()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->temp(), output);
  }

  // required int64 time = 3;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->time(), output);
  }

  // required bool sts = 4;
  if (has_sts()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->sts(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.zhichenhaixin.gps.proto.NHN)
}

::google::protobuf::uint8* NHN::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.zhichenhaixin.gps.proto.NHN)
  // required double NHN = 1;
  if (has_nhn()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->nhn(), target);
  }

  // required double TEMP = 2;
  if (has_temp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->temp(), target);
  }

  // required int64 time = 3;
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->time(), target);
  }

  // required bool sts = 4;
  if (has_sts()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->sts(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.zhichenhaixin.gps.proto.NHN)
  return target;
}

int NHN::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required double NHN = 1;
    if (has_nhn()) {
      total_size += 1 + 8;
    }

    // required double TEMP = 2;
    if (has_temp()) {
      total_size += 1 + 8;
    }

    // required int64 time = 3;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->time());
    }

    // required bool sts = 4;
    if (has_sts()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NHN::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NHN* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NHN*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NHN::MergeFrom(const NHN& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_nhn()) {
      set_nhn(from.nhn());
    }
    if (from.has_temp()) {
      set_temp(from.temp());
    }
    if (from.has_time()) {
      set_time(from.time());
    }
    if (from.has_sts()) {
      set_sts(from.sts());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NHN::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NHN::CopyFrom(const NHN& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NHN::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void NHN::Swap(NHN* other) {
  if (other != this) {
    std::swap(nhn_, other->nhn_);
    std::swap(temp_, other->temp_);
    std::swap(time_, other->time_);
    std::swap(sts_, other->sts_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NHN::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NHN_descriptor_;
  metadata.reflection = NHN_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int WL::kPRESSFieldNumber;
const int WL::kTEMPFieldNumber;
const int WL::kLVLFieldNumber;
const int WL::kTimeFieldNumber;
const int WL::kStsFieldNumber;
#endif  // !_MSC_VER

WL::WL()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.zhichenhaixin.gps.proto.WL)
}

void WL::InitAsDefaultInstance() {
}

WL::WL(const WL& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:com.zhichenhaixin.gps.proto.WL)
}

void WL::SharedCtor() {
  _cached_size_ = 0;
  press_ = 0;
  temp_ = 0;
  lvl_ = 0;
  time_ = GOOGLE_LONGLONG(0);
  sts_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

WL::~WL() {
  // @@protoc_insertion_point(destructor:com.zhichenhaixin.gps.proto.WL)
  SharedDtor();
}

void WL::SharedDtor() {
  if (this != default_instance_) {
  }
}

void WL::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WL::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WL_descriptor_;
}

const WL& WL::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TWQMSComData_2eproto();
  return *default_instance_;
}

WL* WL::default_instance_ = NULL;

WL* WL::New() const {
  return new WL;
}

void WL::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<WL*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(press_, sts_);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool WL::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.zhichenhaixin.gps.proto.WL)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required double PRESS = 1;
      case 1: {
        if (tag == 9) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &press_)));
          set_has_press();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(17)) goto parse_TEMP;
        break;
      }

      // required double TEMP = 2;
      case 2: {
        if (tag == 17) {
         parse_TEMP:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &temp_)));
          set_has_temp();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(25)) goto parse_LVL;
        break;
      }

      // required double LVL = 3;
      case 3: {
        if (tag == 25) {
         parse_LVL:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &lvl_)));
          set_has_lvl();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_time;
        break;
      }

      // required int64 time = 4;
      case 4: {
        if (tag == 32) {
         parse_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_sts;
        break;
      }

      // required bool sts = 5;
      case 5: {
        if (tag == 40) {
         parse_sts:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &sts_)));
          set_has_sts();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.zhichenhaixin.gps.proto.WL)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.zhichenhaixin.gps.proto.WL)
  return false;
#undef DO_
}

void WL::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.zhichenhaixin.gps.proto.WL)
  // required double PRESS = 1;
  if (has_press()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(1, this->press(), output);
  }

  // required double TEMP = 2;
  if (has_temp()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->temp(), output);
  }

  // required double LVL = 3;
  if (has_lvl()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->lvl(), output);
  }

  // required int64 time = 4;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->time(), output);
  }

  // required bool sts = 5;
  if (has_sts()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->sts(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.zhichenhaixin.gps.proto.WL)
}

::google::protobuf::uint8* WL::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.zhichenhaixin.gps.proto.WL)
  // required double PRESS = 1;
  if (has_press()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(1, this->press(), target);
  }

  // required double TEMP = 2;
  if (has_temp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->temp(), target);
  }

  // required double LVL = 3;
  if (has_lvl()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->lvl(), target);
  }

  // required int64 time = 4;
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->time(), target);
  }

  // required bool sts = 5;
  if (has_sts()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->sts(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.zhichenhaixin.gps.proto.WL)
  return target;
}

int WL::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required double PRESS = 1;
    if (has_press()) {
      total_size += 1 + 8;
    }

    // required double TEMP = 2;
    if (has_temp()) {
      total_size += 1 + 8;
    }

    // required double LVL = 3;
    if (has_lvl()) {
      total_size += 1 + 8;
    }

    // required int64 time = 4;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->time());
    }

    // required bool sts = 5;
    if (has_sts()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WL::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const WL* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const WL*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void WL::MergeFrom(const WL& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_press()) {
      set_press(from.press());
    }
    if (from.has_temp()) {
      set_temp(from.temp());
    }
    if (from.has_lvl()) {
      set_lvl(from.lvl());
    }
    if (from.has_time()) {
      set_time(from.time());
    }
    if (from.has_sts()) {
      set_sts(from.sts());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void WL::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WL::CopyFrom(const WL& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WL::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;

  return true;
}

void WL::Swap(WL* other) {
  if (other != this) {
    std::swap(press_, other->press_);
    std::swap(temp_, other->temp_);
    std::swap(lvl_, other->lvl_);
    std::swap(time_, other->time_);
    std::swap(sts_, other->sts_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata WL::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = WL_descriptor_;
  metadata.reflection = WL_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DevInfo::kGpsInfoFieldNumber;
const int DevInfo::kZsInfoFieldNumber;
const int DevInfo::kRdoInfoFieldNumber;
const int DevInfo::kOrpInfoFieldNumber;
const int DevInfo::kDdmInfoFieldNumber;
const int DevInfo::kNhnInfoFieldNumber;
const int DevInfo::kWlInfoFieldNumber;
const int DevInfo::kSiteIdFieldNumber;
const int DevInfo::kCurUtcTimeFieldNumber;
#endif  // !_MSC_VER

DevInfo::DevInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.zhichenhaixin.gps.proto.DevInfo)
}

void DevInfo::InitAsDefaultInstance() {
  gps_info_ = const_cast< ::com::zhichenhaixin::gps::proto::GPS*>(&::com::zhichenhaixin::gps::proto::GPS::default_instance());
  zs_info_ = const_cast< ::com::zhichenhaixin::gps::proto::ZS*>(&::com::zhichenhaixin::gps::proto::ZS::default_instance());
  rdo_info_ = const_cast< ::com::zhichenhaixin::gps::proto::RDO*>(&::com::zhichenhaixin::gps::proto::RDO::default_instance());
  orp_info_ = const_cast< ::com::zhichenhaixin::gps::proto::ORP*>(&::com::zhichenhaixin::gps::proto::ORP::default_instance());
  ddm_info_ = const_cast< ::com::zhichenhaixin::gps::proto::DDM*>(&::com::zhichenhaixin::gps::proto::DDM::default_instance());
  nhn_info_ = const_cast< ::com::zhichenhaixin::gps::proto::NHN*>(&::com::zhichenhaixin::gps::proto::NHN::default_instance());
  wl_info_ = const_cast< ::com::zhichenhaixin::gps::proto::WL*>(&::com::zhichenhaixin::gps::proto::WL::default_instance());
}

DevInfo::DevInfo(const DevInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:com.zhichenhaixin.gps.proto.DevInfo)
}

void DevInfo::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  gps_info_ = NULL;
  zs_info_ = NULL;
  rdo_info_ = NULL;
  orp_info_ = NULL;
  ddm_info_ = NULL;
  nhn_info_ = NULL;
  wl_info_ = NULL;
  site_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  cur_utc_time_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DevInfo::~DevInfo() {
  // @@protoc_insertion_point(destructor:com.zhichenhaixin.gps.proto.DevInfo)
  SharedDtor();
}

void DevInfo::SharedDtor() {
  if (site_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete site_id_;
  }
  if (this != default_instance_) {
    delete gps_info_;
    delete zs_info_;
    delete rdo_info_;
    delete orp_info_;
    delete ddm_info_;
    delete nhn_info_;
    delete wl_info_;
  }
}

void DevInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DevInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DevInfo_descriptor_;
}

const DevInfo& DevInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TWQMSComData_2eproto();
  return *default_instance_;
}

DevInfo* DevInfo::default_instance_ = NULL;

DevInfo* DevInfo::New() const {
  return new DevInfo;
}

void DevInfo::Clear() {
  if (_has_bits_[0 / 32] & 255) {
    if (has_gps_info()) {
      if (gps_info_ != NULL) gps_info_->::com::zhichenhaixin::gps::proto::GPS::Clear();
    }
    if (has_zs_info()) {
      if (zs_info_ != NULL) zs_info_->::com::zhichenhaixin::gps::proto::ZS::Clear();
    }
    if (has_rdo_info()) {
      if (rdo_info_ != NULL) rdo_info_->::com::zhichenhaixin::gps::proto::RDO::Clear();
    }
    if (has_orp_info()) {
      if (orp_info_ != NULL) orp_info_->::com::zhichenhaixin::gps::proto::ORP::Clear();
    }
    if (has_ddm_info()) {
      if (ddm_info_ != NULL) ddm_info_->::com::zhichenhaixin::gps::proto::DDM::Clear();
    }
    if (has_nhn_info()) {
      if (nhn_info_ != NULL) nhn_info_->::com::zhichenhaixin::gps::proto::NHN::Clear();
    }
    if (has_wl_info()) {
      if (wl_info_ != NULL) wl_info_->::com::zhichenhaixin::gps::proto::WL::Clear();
    }
    if (has_site_id()) {
      if (site_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        site_id_->clear();
      }
    }
  }
  cur_utc_time_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DevInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.zhichenhaixin.gps.proto.DevInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .com.zhichenhaixin.gps.proto.GPS gps_info = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_gps_info()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_zs_info;
        break;
      }

      // required .com.zhichenhaixin.gps.proto.ZS zs_info = 2;
      case 2: {
        if (tag == 18) {
         parse_zs_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_zs_info()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_rdo_info;
        break;
      }

      // required .com.zhichenhaixin.gps.proto.RDO rdo_info = 3;
      case 3: {
        if (tag == 26) {
         parse_rdo_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_rdo_info()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_orp_info;
        break;
      }

      // required .com.zhichenhaixin.gps.proto.ORP orp_info = 4;
      case 4: {
        if (tag == 34) {
         parse_orp_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_orp_info()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_ddm_info;
        break;
      }

      // required .com.zhichenhaixin.gps.proto.DDM ddm_info = 5;
      case 5: {
        if (tag == 42) {
         parse_ddm_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_ddm_info()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_nhn_info;
        break;
      }

      // required .com.zhichenhaixin.gps.proto.NHN nhn_info = 7;
      case 7: {
        if (tag == 58) {
         parse_nhn_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_nhn_info()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_wl_info;
        break;
      }

      // required .com.zhichenhaixin.gps.proto.WL wl_info = 8;
      case 8: {
        if (tag == 66) {
         parse_wl_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_wl_info()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_site_id;
        break;
      }

      // required string site_id = 9;
      case 9: {
        if (tag == 74) {
         parse_site_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_site_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->site_id().data(), this->site_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "site_id");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_cur_utc_time;
        break;
      }

      // required int64 cur_utc_time = 10;
      case 10: {
        if (tag == 80) {
         parse_cur_utc_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &cur_utc_time_)));
          set_has_cur_utc_time();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.zhichenhaixin.gps.proto.DevInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.zhichenhaixin.gps.proto.DevInfo)
  return false;
#undef DO_
}

void DevInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.zhichenhaixin.gps.proto.DevInfo)
  // required .com.zhichenhaixin.gps.proto.GPS gps_info = 1;
  if (has_gps_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->gps_info(), output);
  }

  // required .com.zhichenhaixin.gps.proto.ZS zs_info = 2;
  if (has_zs_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->zs_info(), output);
  }

  // required .com.zhichenhaixin.gps.proto.RDO rdo_info = 3;
  if (has_rdo_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->rdo_info(), output);
  }

  // required .com.zhichenhaixin.gps.proto.ORP orp_info = 4;
  if (has_orp_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->orp_info(), output);
  }

  // required .com.zhichenhaixin.gps.proto.DDM ddm_info = 5;
  if (has_ddm_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->ddm_info(), output);
  }

  // required .com.zhichenhaixin.gps.proto.NHN nhn_info = 7;
  if (has_nhn_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->nhn_info(), output);
  }

  // required .com.zhichenhaixin.gps.proto.WL wl_info = 8;
  if (has_wl_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->wl_info(), output);
  }

  // required string site_id = 9;
  if (has_site_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->site_id().data(), this->site_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "site_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      9, this->site_id(), output);
  }

  // required int64 cur_utc_time = 10;
  if (has_cur_utc_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(10, this->cur_utc_time(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.zhichenhaixin.gps.proto.DevInfo)
}

::google::protobuf::uint8* DevInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.zhichenhaixin.gps.proto.DevInfo)
  // required .com.zhichenhaixin.gps.proto.GPS gps_info = 1;
  if (has_gps_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->gps_info(), target);
  }

  // required .com.zhichenhaixin.gps.proto.ZS zs_info = 2;
  if (has_zs_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->zs_info(), target);
  }

  // required .com.zhichenhaixin.gps.proto.RDO rdo_info = 3;
  if (has_rdo_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->rdo_info(), target);
  }

  // required .com.zhichenhaixin.gps.proto.ORP orp_info = 4;
  if (has_orp_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->orp_info(), target);
  }

  // required .com.zhichenhaixin.gps.proto.DDM ddm_info = 5;
  if (has_ddm_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->ddm_info(), target);
  }

  // required .com.zhichenhaixin.gps.proto.NHN nhn_info = 7;
  if (has_nhn_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->nhn_info(), target);
  }

  // required .com.zhichenhaixin.gps.proto.WL wl_info = 8;
  if (has_wl_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->wl_info(), target);
  }

  // required string site_id = 9;
  if (has_site_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->site_id().data(), this->site_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "site_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->site_id(), target);
  }

  // required int64 cur_utc_time = 10;
  if (has_cur_utc_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(10, this->cur_utc_time(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.zhichenhaixin.gps.proto.DevInfo)
  return target;
}

int DevInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .com.zhichenhaixin.gps.proto.GPS gps_info = 1;
    if (has_gps_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->gps_info());
    }

    // required .com.zhichenhaixin.gps.proto.ZS zs_info = 2;
    if (has_zs_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->zs_info());
    }

    // required .com.zhichenhaixin.gps.proto.RDO rdo_info = 3;
    if (has_rdo_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->rdo_info());
    }

    // required .com.zhichenhaixin.gps.proto.ORP orp_info = 4;
    if (has_orp_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->orp_info());
    }

    // required .com.zhichenhaixin.gps.proto.DDM ddm_info = 5;
    if (has_ddm_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->ddm_info());
    }

    // required .com.zhichenhaixin.gps.proto.NHN nhn_info = 7;
    if (has_nhn_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->nhn_info());
    }

    // required .com.zhichenhaixin.gps.proto.WL wl_info = 8;
    if (has_wl_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->wl_info());
    }

    // required string site_id = 9;
    if (has_site_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->site_id());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required int64 cur_utc_time = 10;
    if (has_cur_utc_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->cur_utc_time());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DevInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DevInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DevInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DevInfo::MergeFrom(const DevInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_gps_info()) {
      mutable_gps_info()->::com::zhichenhaixin::gps::proto::GPS::MergeFrom(from.gps_info());
    }
    if (from.has_zs_info()) {
      mutable_zs_info()->::com::zhichenhaixin::gps::proto::ZS::MergeFrom(from.zs_info());
    }
    if (from.has_rdo_info()) {
      mutable_rdo_info()->::com::zhichenhaixin::gps::proto::RDO::MergeFrom(from.rdo_info());
    }
    if (from.has_orp_info()) {
      mutable_orp_info()->::com::zhichenhaixin::gps::proto::ORP::MergeFrom(from.orp_info());
    }
    if (from.has_ddm_info()) {
      mutable_ddm_info()->::com::zhichenhaixin::gps::proto::DDM::MergeFrom(from.ddm_info());
    }
    if (from.has_nhn_info()) {
      mutable_nhn_info()->::com::zhichenhaixin::gps::proto::NHN::MergeFrom(from.nhn_info());
    }
    if (from.has_wl_info()) {
      mutable_wl_info()->::com::zhichenhaixin::gps::proto::WL::MergeFrom(from.wl_info());
    }
    if (from.has_site_id()) {
      set_site_id(from.site_id());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_cur_utc_time()) {
      set_cur_utc_time(from.cur_utc_time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DevInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DevInfo::CopyFrom(const DevInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DevInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x000001ff) != 0x000001ff) return false;

  if (has_gps_info()) {
    if (!this->gps_info().IsInitialized()) return false;
  }
  if (has_zs_info()) {
    if (!this->zs_info().IsInitialized()) return false;
  }
  if (has_rdo_info()) {
    if (!this->rdo_info().IsInitialized()) return false;
  }
  if (has_orp_info()) {
    if (!this->orp_info().IsInitialized()) return false;
  }
  if (has_ddm_info()) {
    if (!this->ddm_info().IsInitialized()) return false;
  }
  if (has_nhn_info()) {
    if (!this->nhn_info().IsInitialized()) return false;
  }
  if (has_wl_info()) {
    if (!this->wl_info().IsInitialized()) return false;
  }
  return true;
}

void DevInfo::Swap(DevInfo* other) {
  if (other != this) {
    std::swap(gps_info_, other->gps_info_);
    std::swap(zs_info_, other->zs_info_);
    std::swap(rdo_info_, other->rdo_info_);
    std::swap(orp_info_, other->orp_info_);
    std::swap(ddm_info_, other->ddm_info_);
    std::swap(nhn_info_, other->nhn_info_);
    std::swap(wl_info_, other->wl_info_);
    std::swap(site_id_, other->site_id_);
    std::swap(cur_utc_time_, other->cur_utc_time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DevInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DevInfo_descriptor_;
  metadata.reflection = DevInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DevInfoList::kDevInfoFieldNumber;
const int DevInfoList::kLengthFieldNumber;
#endif  // !_MSC_VER

DevInfoList::DevInfoList()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.zhichenhaixin.gps.proto.DevInfoList)
}

void DevInfoList::InitAsDefaultInstance() {
}

DevInfoList::DevInfoList(const DevInfoList& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:com.zhichenhaixin.gps.proto.DevInfoList)
}

void DevInfoList::SharedCtor() {
  _cached_size_ = 0;
  length_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DevInfoList::~DevInfoList() {
  // @@protoc_insertion_point(destructor:com.zhichenhaixin.gps.proto.DevInfoList)
  SharedDtor();
}

void DevInfoList::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DevInfoList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DevInfoList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DevInfoList_descriptor_;
}

const DevInfoList& DevInfoList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_TWQMSComData_2eproto();
  return *default_instance_;
}

DevInfoList* DevInfoList::default_instance_ = NULL;

DevInfoList* DevInfoList::New() const {
  return new DevInfoList;
}

void DevInfoList::Clear() {
  length_ = 0;
  devinfo_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DevInfoList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.zhichenhaixin.gps.proto.DevInfoList)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .com.zhichenhaixin.gps.proto.DevInfo devInfo = 1;
      case 1: {
        if (tag == 10) {
         parse_devInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_devinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_devInfo;
        if (input->ExpectTag(16)) goto parse_length;
        break;
      }

      // optional int32 length = 2;
      case 2: {
        if (tag == 16) {
         parse_length:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &length_)));
          set_has_length();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.zhichenhaixin.gps.proto.DevInfoList)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.zhichenhaixin.gps.proto.DevInfoList)
  return false;
#undef DO_
}

void DevInfoList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.zhichenhaixin.gps.proto.DevInfoList)
  // repeated .com.zhichenhaixin.gps.proto.DevInfo devInfo = 1;
  for (int i = 0; i < this->devinfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->devinfo(i), output);
  }

  // optional int32 length = 2;
  if (has_length()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->length(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.zhichenhaixin.gps.proto.DevInfoList)
}

::google::protobuf::uint8* DevInfoList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.zhichenhaixin.gps.proto.DevInfoList)
  // repeated .com.zhichenhaixin.gps.proto.DevInfo devInfo = 1;
  for (int i = 0; i < this->devinfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->devinfo(i), target);
  }

  // optional int32 length = 2;
  if (has_length()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->length(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.zhichenhaixin.gps.proto.DevInfoList)
  return target;
}

int DevInfoList::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional int32 length = 2;
    if (has_length()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->length());
    }

  }
  // repeated .com.zhichenhaixin.gps.proto.DevInfo devInfo = 1;
  total_size += 1 * this->devinfo_size();
  for (int i = 0; i < this->devinfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->devinfo(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DevInfoList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DevInfoList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DevInfoList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DevInfoList::MergeFrom(const DevInfoList& from) {
  GOOGLE_CHECK_NE(&from, this);
  devinfo_.MergeFrom(from.devinfo_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_length()) {
      set_length(from.length());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DevInfoList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DevInfoList::CopyFrom(const DevInfoList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DevInfoList::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->devinfo())) return false;
  return true;
}

void DevInfoList::Swap(DevInfoList* other) {
  if (other != this) {
    devinfo_.Swap(&other->devinfo_);
    std::swap(length_, other->length_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DevInfoList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DevInfoList_descriptor_;
  metadata.reflection = DevInfoList_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace gps
}  // namespace zhichenhaixin
}  // namespace com

// @@protoc_insertion_point(global_scope)
