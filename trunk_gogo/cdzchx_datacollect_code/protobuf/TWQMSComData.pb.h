// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: TWQMSComData.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_TWQMSComData_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_TWQMSComData_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3012000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3012001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_TWQMSComData_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_TWQMSComData_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[9]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_TWQMSComData_2eproto;
namespace com {
namespace zhichenhaixin {
namespace gps {
namespace proto {
class DDM;
class DDMDefaultTypeInternal;
extern DDMDefaultTypeInternal _DDM_default_instance_;
class DevInfo;
class DevInfoDefaultTypeInternal;
extern DevInfoDefaultTypeInternal _DevInfo_default_instance_;
class DevInfoList;
class DevInfoListDefaultTypeInternal;
extern DevInfoListDefaultTypeInternal _DevInfoList_default_instance_;
class GPS;
class GPSDefaultTypeInternal;
extern GPSDefaultTypeInternal _GPS_default_instance_;
class NHN;
class NHNDefaultTypeInternal;
extern NHNDefaultTypeInternal _NHN_default_instance_;
class ORP;
class ORPDefaultTypeInternal;
extern ORPDefaultTypeInternal _ORP_default_instance_;
class RDO;
class RDODefaultTypeInternal;
extern RDODefaultTypeInternal _RDO_default_instance_;
class WL;
class WLDefaultTypeInternal;
extern WLDefaultTypeInternal _WL_default_instance_;
class ZS;
class ZSDefaultTypeInternal;
extern ZSDefaultTypeInternal _ZS_default_instance_;
}  // namespace proto
}  // namespace gps
}  // namespace zhichenhaixin
}  // namespace com
PROTOBUF_NAMESPACE_OPEN
template<> ::com::zhichenhaixin::gps::proto::DDM* Arena::CreateMaybeMessage<::com::zhichenhaixin::gps::proto::DDM>(Arena*);
template<> ::com::zhichenhaixin::gps::proto::DevInfo* Arena::CreateMaybeMessage<::com::zhichenhaixin::gps::proto::DevInfo>(Arena*);
template<> ::com::zhichenhaixin::gps::proto::DevInfoList* Arena::CreateMaybeMessage<::com::zhichenhaixin::gps::proto::DevInfoList>(Arena*);
template<> ::com::zhichenhaixin::gps::proto::GPS* Arena::CreateMaybeMessage<::com::zhichenhaixin::gps::proto::GPS>(Arena*);
template<> ::com::zhichenhaixin::gps::proto::NHN* Arena::CreateMaybeMessage<::com::zhichenhaixin::gps::proto::NHN>(Arena*);
template<> ::com::zhichenhaixin::gps::proto::ORP* Arena::CreateMaybeMessage<::com::zhichenhaixin::gps::proto::ORP>(Arena*);
template<> ::com::zhichenhaixin::gps::proto::RDO* Arena::CreateMaybeMessage<::com::zhichenhaixin::gps::proto::RDO>(Arena*);
template<> ::com::zhichenhaixin::gps::proto::WL* Arena::CreateMaybeMessage<::com::zhichenhaixin::gps::proto::WL>(Arena*);
template<> ::com::zhichenhaixin::gps::proto::ZS* Arena::CreateMaybeMessage<::com::zhichenhaixin::gps::proto::ZS>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace com {
namespace zhichenhaixin {
namespace gps {
namespace proto {

// ===================================================================

class GPS PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:com.zhichenhaixin.gps.proto.GPS) */ {
 public:
  inline GPS() : GPS(nullptr) {};
  virtual ~GPS();

  GPS(const GPS& from);
  GPS(GPS&& from) noexcept
    : GPS() {
    *this = ::std::move(from);
  }

  inline GPS& operator=(const GPS& from) {
    CopyFrom(from);
    return *this;
  }
  inline GPS& operator=(GPS&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GPS& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GPS* internal_default_instance() {
    return reinterpret_cast<const GPS*>(
               &_GPS_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(GPS& a, GPS& b) {
    a.Swap(&b);
  }
  inline void Swap(GPS* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GPS* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GPS* New() const final {
    return CreateMaybeMessage<GPS>(nullptr);
  }

  GPS* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GPS>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GPS& from);
  void MergeFrom(const GPS& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GPS* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "com.zhichenhaixin.gps.proto.GPS";
  }
  protected:
  explicit GPS(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_TWQMSComData_2eproto);
    return ::descriptor_table_TWQMSComData_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kShipIdFieldNumber = 8,
    kShipUpdateTimeFieldNumber = 1,
    kShipLatFieldNumber = 2,
    kShipLonFieldNumber = 3,
    kShipSpeedFieldNumber = 4,
    kShipHeadFieldNumber = 5,
    kShipCourseFieldNumber = 6,
    kStsFieldNumber = 7,
  };
  // required string ship_id = 8;
  bool has_ship_id() const;
  private:
  bool _internal_has_ship_id() const;
  public:
  void clear_ship_id();
  const std::string& ship_id() const;
  void set_ship_id(const std::string& value);
  void set_ship_id(std::string&& value);
  void set_ship_id(const char* value);
  void set_ship_id(const char* value, size_t size);
  std::string* mutable_ship_id();
  std::string* release_ship_id();
  void set_allocated_ship_id(std::string* ship_id);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_ship_id();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_ship_id(
      std::string* ship_id);
  private:
  const std::string& _internal_ship_id() const;
  void _internal_set_ship_id(const std::string& value);
  std::string* _internal_mutable_ship_id();
  public:

  // required int64 ship_update_time = 1;
  bool has_ship_update_time() const;
  private:
  bool _internal_has_ship_update_time() const;
  public:
  void clear_ship_update_time();
  ::PROTOBUF_NAMESPACE_ID::int64 ship_update_time() const;
  void set_ship_update_time(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_ship_update_time() const;
  void _internal_set_ship_update_time(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // required double ship_lat = 2;
  bool has_ship_lat() const;
  private:
  bool _internal_has_ship_lat() const;
  public:
  void clear_ship_lat();
  double ship_lat() const;
  void set_ship_lat(double value);
  private:
  double _internal_ship_lat() const;
  void _internal_set_ship_lat(double value);
  public:

  // required double ship_lon = 3;
  bool has_ship_lon() const;
  private:
  bool _internal_has_ship_lon() const;
  public:
  void clear_ship_lon();
  double ship_lon() const;
  void set_ship_lon(double value);
  private:
  double _internal_ship_lon() const;
  void _internal_set_ship_lon(double value);
  public:

  // required double ship_speed = 4;
  bool has_ship_speed() const;
  private:
  bool _internal_has_ship_speed() const;
  public:
  void clear_ship_speed();
  double ship_speed() const;
  void set_ship_speed(double value);
  private:
  double _internal_ship_speed() const;
  void _internal_set_ship_speed(double value);
  public:

  // required double ship_head = 5;
  bool has_ship_head() const;
  private:
  bool _internal_has_ship_head() const;
  public:
  void clear_ship_head();
  double ship_head() const;
  void set_ship_head(double value);
  private:
  double _internal_ship_head() const;
  void _internal_set_ship_head(double value);
  public:

  // required double ship_course = 6;
  bool has_ship_course() const;
  private:
  bool _internal_has_ship_course() const;
  public:
  void clear_ship_course();
  double ship_course() const;
  void set_ship_course(double value);
  private:
  double _internal_ship_course() const;
  void _internal_set_ship_course(double value);
  public:

  // required bool sts = 7;
  bool has_sts() const;
  private:
  bool _internal_has_sts() const;
  public:
  void clear_sts();
  bool sts() const;
  void set_sts(bool value);
  private:
  bool _internal_sts() const;
  void _internal_set_sts(bool value);
  public:

  // @@protoc_insertion_point(class_scope:com.zhichenhaixin.gps.proto.GPS)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ship_id_;
  ::PROTOBUF_NAMESPACE_ID::int64 ship_update_time_;
  double ship_lat_;
  double ship_lon_;
  double ship_speed_;
  double ship_head_;
  double ship_course_;
  bool sts_;
  friend struct ::TableStruct_TWQMSComData_2eproto;
};
// -------------------------------------------------------------------

class ZS PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:com.zhichenhaixin.gps.proto.ZS) */ {
 public:
  inline ZS() : ZS(nullptr) {};
  virtual ~ZS();

  ZS(const ZS& from);
  ZS(ZS&& from) noexcept
    : ZS() {
    *this = ::std::move(from);
  }

  inline ZS& operator=(const ZS& from) {
    CopyFrom(from);
    return *this;
  }
  inline ZS& operator=(ZS&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ZS& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ZS* internal_default_instance() {
    return reinterpret_cast<const ZS*>(
               &_ZS_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(ZS& a, ZS& b) {
    a.Swap(&b);
  }
  inline void Swap(ZS* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ZS* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ZS* New() const final {
    return CreateMaybeMessage<ZS>(nullptr);
  }

  ZS* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ZS>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ZS& from);
  void MergeFrom(const ZS& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ZS* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "com.zhichenhaixin.gps.proto.ZS";
  }
  protected:
  explicit ZS(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_TWQMSComData_2eproto);
    return ::descriptor_table_TWQMSComData_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kZSFieldNumber = 1,
    kTEMPFieldNumber = 2,
    kTimeFieldNumber = 3,
    kStsFieldNumber = 4,
  };
  // required double ZS = 1;
  bool has_zs() const;
  private:
  bool _internal_has_zs() const;
  public:
  void clear_zs();
  double zs() const;
  void set_zs(double value);
  private:
  double _internal_zs() const;
  void _internal_set_zs(double value);
  public:

  // required double TEMP = 2;
  bool has_temp() const;
  private:
  bool _internal_has_temp() const;
  public:
  void clear_temp();
  double temp() const;
  void set_temp(double value);
  private:
  double _internal_temp() const;
  void _internal_set_temp(double value);
  public:

  // required int64 time = 3;
  bool has_time() const;
  private:
  bool _internal_has_time() const;
  public:
  void clear_time();
  ::PROTOBUF_NAMESPACE_ID::int64 time() const;
  void set_time(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_time() const;
  void _internal_set_time(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // required bool sts = 4;
  bool has_sts() const;
  private:
  bool _internal_has_sts() const;
  public:
  void clear_sts();
  bool sts() const;
  void set_sts(bool value);
  private:
  bool _internal_sts() const;
  void _internal_set_sts(bool value);
  public:

  // @@protoc_insertion_point(class_scope:com.zhichenhaixin.gps.proto.ZS)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  double zs_;
  double temp_;
  ::PROTOBUF_NAMESPACE_ID::int64 time_;
  bool sts_;
  friend struct ::TableStruct_TWQMSComData_2eproto;
};
// -------------------------------------------------------------------

class RDO PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:com.zhichenhaixin.gps.proto.RDO) */ {
 public:
  inline RDO() : RDO(nullptr) {};
  virtual ~RDO();

  RDO(const RDO& from);
  RDO(RDO&& from) noexcept
    : RDO() {
    *this = ::std::move(from);
  }

  inline RDO& operator=(const RDO& from) {
    CopyFrom(from);
    return *this;
  }
  inline RDO& operator=(RDO&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RDO& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RDO* internal_default_instance() {
    return reinterpret_cast<const RDO*>(
               &_RDO_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(RDO& a, RDO& b) {
    a.Swap(&b);
  }
  inline void Swap(RDO* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RDO* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RDO* New() const final {
    return CreateMaybeMessage<RDO>(nullptr);
  }

  RDO* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RDO>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RDO& from);
  void MergeFrom(const RDO& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RDO* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "com.zhichenhaixin.gps.proto.RDO";
  }
  protected:
  explicit RDO(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_TWQMSComData_2eproto);
    return ::descriptor_table_TWQMSComData_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRDOFieldNumber = 1,
    kTEMPFieldNumber = 2,
    kTimeFieldNumber = 3,
    kStsFieldNumber = 4,
  };
  // required double RDO = 1;
  bool has_rdo() const;
  private:
  bool _internal_has_rdo() const;
  public:
  void clear_rdo();
  double rdo() const;
  void set_rdo(double value);
  private:
  double _internal_rdo() const;
  void _internal_set_rdo(double value);
  public:

  // required double TEMP = 2;
  bool has_temp() const;
  private:
  bool _internal_has_temp() const;
  public:
  void clear_temp();
  double temp() const;
  void set_temp(double value);
  private:
  double _internal_temp() const;
  void _internal_set_temp(double value);
  public:

  // required int64 time = 3;
  bool has_time() const;
  private:
  bool _internal_has_time() const;
  public:
  void clear_time();
  ::PROTOBUF_NAMESPACE_ID::int64 time() const;
  void set_time(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_time() const;
  void _internal_set_time(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // required bool sts = 4;
  bool has_sts() const;
  private:
  bool _internal_has_sts() const;
  public:
  void clear_sts();
  bool sts() const;
  void set_sts(bool value);
  private:
  bool _internal_sts() const;
  void _internal_set_sts(bool value);
  public:

  // @@protoc_insertion_point(class_scope:com.zhichenhaixin.gps.proto.RDO)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  double rdo_;
  double temp_;
  ::PROTOBUF_NAMESPACE_ID::int64 time_;
  bool sts_;
  friend struct ::TableStruct_TWQMSComData_2eproto;
};
// -------------------------------------------------------------------

class ORP PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:com.zhichenhaixin.gps.proto.ORP) */ {
 public:
  inline ORP() : ORP(nullptr) {};
  virtual ~ORP();

  ORP(const ORP& from);
  ORP(ORP&& from) noexcept
    : ORP() {
    *this = ::std::move(from);
  }

  inline ORP& operator=(const ORP& from) {
    CopyFrom(from);
    return *this;
  }
  inline ORP& operator=(ORP&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ORP& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ORP* internal_default_instance() {
    return reinterpret_cast<const ORP*>(
               &_ORP_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(ORP& a, ORP& b) {
    a.Swap(&b);
  }
  inline void Swap(ORP* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ORP* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ORP* New() const final {
    return CreateMaybeMessage<ORP>(nullptr);
  }

  ORP* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ORP>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ORP& from);
  void MergeFrom(const ORP& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ORP* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "com.zhichenhaixin.gps.proto.ORP";
  }
  protected:
  explicit ORP(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_TWQMSComData_2eproto);
    return ::descriptor_table_TWQMSComData_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kORPFieldNumber = 1,
    kTimeFieldNumber = 2,
    kStsFieldNumber = 3,
  };
  // required double ORP = 1;
  bool has_orp() const;
  private:
  bool _internal_has_orp() const;
  public:
  void clear_orp();
  double orp() const;
  void set_orp(double value);
  private:
  double _internal_orp() const;
  void _internal_set_orp(double value);
  public:

  // required int64 time = 2;
  bool has_time() const;
  private:
  bool _internal_has_time() const;
  public:
  void clear_time();
  ::PROTOBUF_NAMESPACE_ID::int64 time() const;
  void set_time(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_time() const;
  void _internal_set_time(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // required bool sts = 3;
  bool has_sts() const;
  private:
  bool _internal_has_sts() const;
  public:
  void clear_sts();
  bool sts() const;
  void set_sts(bool value);
  private:
  bool _internal_sts() const;
  void _internal_set_sts(bool value);
  public:

  // @@protoc_insertion_point(class_scope:com.zhichenhaixin.gps.proto.ORP)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  double orp_;
  ::PROTOBUF_NAMESPACE_ID::int64 time_;
  bool sts_;
  friend struct ::TableStruct_TWQMSComData_2eproto;
};
// -------------------------------------------------------------------

class DDM PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:com.zhichenhaixin.gps.proto.DDM) */ {
 public:
  inline DDM() : DDM(nullptr) {};
  virtual ~DDM();

  DDM(const DDM& from);
  DDM(DDM&& from) noexcept
    : DDM() {
    *this = ::std::move(from);
  }

  inline DDM& operator=(const DDM& from) {
    CopyFrom(from);
    return *this;
  }
  inline DDM& operator=(DDM&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DDM& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DDM* internal_default_instance() {
    return reinterpret_cast<const DDM*>(
               &_DDM_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(DDM& a, DDM& b) {
    a.Swap(&b);
  }
  inline void Swap(DDM* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DDM* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DDM* New() const final {
    return CreateMaybeMessage<DDM>(nullptr);
  }

  DDM* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DDM>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DDM& from);
  void MergeFrom(const DDM& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DDM* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "com.zhichenhaixin.gps.proto.DDM";
  }
  protected:
  explicit DDM(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_TWQMSComData_2eproto);
    return ::descriptor_table_TWQMSComData_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDDMFieldNumber = 1,
    kTEMPFieldNumber = 2,
    kTimeFieldNumber = 3,
    kStsFieldNumber = 4,
  };
  // required double DDM = 1;
  bool has_ddm() const;
  private:
  bool _internal_has_ddm() const;
  public:
  void clear_ddm();
  double ddm() const;
  void set_ddm(double value);
  private:
  double _internal_ddm() const;
  void _internal_set_ddm(double value);
  public:

  // required double TEMP = 2;
  bool has_temp() const;
  private:
  bool _internal_has_temp() const;
  public:
  void clear_temp();
  double temp() const;
  void set_temp(double value);
  private:
  double _internal_temp() const;
  void _internal_set_temp(double value);
  public:

  // required int64 time = 3;
  bool has_time() const;
  private:
  bool _internal_has_time() const;
  public:
  void clear_time();
  ::PROTOBUF_NAMESPACE_ID::int64 time() const;
  void set_time(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_time() const;
  void _internal_set_time(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // required bool sts = 4;
  bool has_sts() const;
  private:
  bool _internal_has_sts() const;
  public:
  void clear_sts();
  bool sts() const;
  void set_sts(bool value);
  private:
  bool _internal_sts() const;
  void _internal_set_sts(bool value);
  public:

  // @@protoc_insertion_point(class_scope:com.zhichenhaixin.gps.proto.DDM)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  double ddm_;
  double temp_;
  ::PROTOBUF_NAMESPACE_ID::int64 time_;
  bool sts_;
  friend struct ::TableStruct_TWQMSComData_2eproto;
};
// -------------------------------------------------------------------

class NHN PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:com.zhichenhaixin.gps.proto.NHN) */ {
 public:
  inline NHN() : NHN(nullptr) {};
  virtual ~NHN();

  NHN(const NHN& from);
  NHN(NHN&& from) noexcept
    : NHN() {
    *this = ::std::move(from);
  }

  inline NHN& operator=(const NHN& from) {
    CopyFrom(from);
    return *this;
  }
  inline NHN& operator=(NHN&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const NHN& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const NHN* internal_default_instance() {
    return reinterpret_cast<const NHN*>(
               &_NHN_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(NHN& a, NHN& b) {
    a.Swap(&b);
  }
  inline void Swap(NHN* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(NHN* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline NHN* New() const final {
    return CreateMaybeMessage<NHN>(nullptr);
  }

  NHN* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<NHN>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const NHN& from);
  void MergeFrom(const NHN& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NHN* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "com.zhichenhaixin.gps.proto.NHN";
  }
  protected:
  explicit NHN(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_TWQMSComData_2eproto);
    return ::descriptor_table_TWQMSComData_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNHNFieldNumber = 1,
    kTEMPFieldNumber = 2,
    kTimeFieldNumber = 3,
    kStsFieldNumber = 4,
  };
  // required double NHN = 1;
  bool has_nhn() const;
  private:
  bool _internal_has_nhn() const;
  public:
  void clear_nhn();
  double nhn() const;
  void set_nhn(double value);
  private:
  double _internal_nhn() const;
  void _internal_set_nhn(double value);
  public:

  // required double TEMP = 2;
  bool has_temp() const;
  private:
  bool _internal_has_temp() const;
  public:
  void clear_temp();
  double temp() const;
  void set_temp(double value);
  private:
  double _internal_temp() const;
  void _internal_set_temp(double value);
  public:

  // required int64 time = 3;
  bool has_time() const;
  private:
  bool _internal_has_time() const;
  public:
  void clear_time();
  ::PROTOBUF_NAMESPACE_ID::int64 time() const;
  void set_time(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_time() const;
  void _internal_set_time(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // required bool sts = 4;
  bool has_sts() const;
  private:
  bool _internal_has_sts() const;
  public:
  void clear_sts();
  bool sts() const;
  void set_sts(bool value);
  private:
  bool _internal_sts() const;
  void _internal_set_sts(bool value);
  public:

  // @@protoc_insertion_point(class_scope:com.zhichenhaixin.gps.proto.NHN)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  double nhn_;
  double temp_;
  ::PROTOBUF_NAMESPACE_ID::int64 time_;
  bool sts_;
  friend struct ::TableStruct_TWQMSComData_2eproto;
};
// -------------------------------------------------------------------

class WL PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:com.zhichenhaixin.gps.proto.WL) */ {
 public:
  inline WL() : WL(nullptr) {};
  virtual ~WL();

  WL(const WL& from);
  WL(WL&& from) noexcept
    : WL() {
    *this = ::std::move(from);
  }

  inline WL& operator=(const WL& from) {
    CopyFrom(from);
    return *this;
  }
  inline WL& operator=(WL&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const WL& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const WL* internal_default_instance() {
    return reinterpret_cast<const WL*>(
               &_WL_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(WL& a, WL& b) {
    a.Swap(&b);
  }
  inline void Swap(WL* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(WL* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline WL* New() const final {
    return CreateMaybeMessage<WL>(nullptr);
  }

  WL* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<WL>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const WL& from);
  void MergeFrom(const WL& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(WL* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "com.zhichenhaixin.gps.proto.WL";
  }
  protected:
  explicit WL(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_TWQMSComData_2eproto);
    return ::descriptor_table_TWQMSComData_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPRESSFieldNumber = 1,
    kTEMPFieldNumber = 2,
    kLVLFieldNumber = 3,
    kTimeFieldNumber = 4,
    kStsFieldNumber = 5,
  };
  // required double PRESS = 1;
  bool has_press() const;
  private:
  bool _internal_has_press() const;
  public:
  void clear_press();
  double press() const;
  void set_press(double value);
  private:
  double _internal_press() const;
  void _internal_set_press(double value);
  public:

  // required double TEMP = 2;
  bool has_temp() const;
  private:
  bool _internal_has_temp() const;
  public:
  void clear_temp();
  double temp() const;
  void set_temp(double value);
  private:
  double _internal_temp() const;
  void _internal_set_temp(double value);
  public:

  // required double LVL = 3;
  bool has_lvl() const;
  private:
  bool _internal_has_lvl() const;
  public:
  void clear_lvl();
  double lvl() const;
  void set_lvl(double value);
  private:
  double _internal_lvl() const;
  void _internal_set_lvl(double value);
  public:

  // required int64 time = 4;
  bool has_time() const;
  private:
  bool _internal_has_time() const;
  public:
  void clear_time();
  ::PROTOBUF_NAMESPACE_ID::int64 time() const;
  void set_time(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_time() const;
  void _internal_set_time(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // required bool sts = 5;
  bool has_sts() const;
  private:
  bool _internal_has_sts() const;
  public:
  void clear_sts();
  bool sts() const;
  void set_sts(bool value);
  private:
  bool _internal_sts() const;
  void _internal_set_sts(bool value);
  public:

  // @@protoc_insertion_point(class_scope:com.zhichenhaixin.gps.proto.WL)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  double press_;
  double temp_;
  double lvl_;
  ::PROTOBUF_NAMESPACE_ID::int64 time_;
  bool sts_;
  friend struct ::TableStruct_TWQMSComData_2eproto;
};
// -------------------------------------------------------------------

class DevInfo PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:com.zhichenhaixin.gps.proto.DevInfo) */ {
 public:
  inline DevInfo() : DevInfo(nullptr) {};
  virtual ~DevInfo();

  DevInfo(const DevInfo& from);
  DevInfo(DevInfo&& from) noexcept
    : DevInfo() {
    *this = ::std::move(from);
  }

  inline DevInfo& operator=(const DevInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline DevInfo& operator=(DevInfo&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DevInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DevInfo* internal_default_instance() {
    return reinterpret_cast<const DevInfo*>(
               &_DevInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(DevInfo& a, DevInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(DevInfo* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DevInfo* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DevInfo* New() const final {
    return CreateMaybeMessage<DevInfo>(nullptr);
  }

  DevInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DevInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DevInfo& from);
  void MergeFrom(const DevInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DevInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "com.zhichenhaixin.gps.proto.DevInfo";
  }
  protected:
  explicit DevInfo(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_TWQMSComData_2eproto);
    return ::descriptor_table_TWQMSComData_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSiteIdFieldNumber = 9,
    kGpsInfoFieldNumber = 1,
    kZsInfoFieldNumber = 2,
    kRdoInfoFieldNumber = 3,
    kOrpInfoFieldNumber = 4,
    kDdmInfoFieldNumber = 5,
    kNhnInfoFieldNumber = 7,
    kWlInfoFieldNumber = 8,
    kCurUtcTimeFieldNumber = 10,
  };
  // required string site_id = 9;
  bool has_site_id() const;
  private:
  bool _internal_has_site_id() const;
  public:
  void clear_site_id();
  const std::string& site_id() const;
  void set_site_id(const std::string& value);
  void set_site_id(std::string&& value);
  void set_site_id(const char* value);
  void set_site_id(const char* value, size_t size);
  std::string* mutable_site_id();
  std::string* release_site_id();
  void set_allocated_site_id(std::string* site_id);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_site_id();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_site_id(
      std::string* site_id);
  private:
  const std::string& _internal_site_id() const;
  void _internal_set_site_id(const std::string& value);
  std::string* _internal_mutable_site_id();
  public:

  // required .com.zhichenhaixin.gps.proto.GPS gps_info = 1;
  bool has_gps_info() const;
  private:
  bool _internal_has_gps_info() const;
  public:
  void clear_gps_info();
  const ::com::zhichenhaixin::gps::proto::GPS& gps_info() const;
  ::com::zhichenhaixin::gps::proto::GPS* release_gps_info();
  ::com::zhichenhaixin::gps::proto::GPS* mutable_gps_info();
  void set_allocated_gps_info(::com::zhichenhaixin::gps::proto::GPS* gps_info);
  private:
  const ::com::zhichenhaixin::gps::proto::GPS& _internal_gps_info() const;
  ::com::zhichenhaixin::gps::proto::GPS* _internal_mutable_gps_info();
  public:
  void unsafe_arena_set_allocated_gps_info(
      ::com::zhichenhaixin::gps::proto::GPS* gps_info);
  ::com::zhichenhaixin::gps::proto::GPS* unsafe_arena_release_gps_info();

  // required .com.zhichenhaixin.gps.proto.ZS zs_info = 2;
  bool has_zs_info() const;
  private:
  bool _internal_has_zs_info() const;
  public:
  void clear_zs_info();
  const ::com::zhichenhaixin::gps::proto::ZS& zs_info() const;
  ::com::zhichenhaixin::gps::proto::ZS* release_zs_info();
  ::com::zhichenhaixin::gps::proto::ZS* mutable_zs_info();
  void set_allocated_zs_info(::com::zhichenhaixin::gps::proto::ZS* zs_info);
  private:
  const ::com::zhichenhaixin::gps::proto::ZS& _internal_zs_info() const;
  ::com::zhichenhaixin::gps::proto::ZS* _internal_mutable_zs_info();
  public:
  void unsafe_arena_set_allocated_zs_info(
      ::com::zhichenhaixin::gps::proto::ZS* zs_info);
  ::com::zhichenhaixin::gps::proto::ZS* unsafe_arena_release_zs_info();

  // required .com.zhichenhaixin.gps.proto.RDO rdo_info = 3;
  bool has_rdo_info() const;
  private:
  bool _internal_has_rdo_info() const;
  public:
  void clear_rdo_info();
  const ::com::zhichenhaixin::gps::proto::RDO& rdo_info() const;
  ::com::zhichenhaixin::gps::proto::RDO* release_rdo_info();
  ::com::zhichenhaixin::gps::proto::RDO* mutable_rdo_info();
  void set_allocated_rdo_info(::com::zhichenhaixin::gps::proto::RDO* rdo_info);
  private:
  const ::com::zhichenhaixin::gps::proto::RDO& _internal_rdo_info() const;
  ::com::zhichenhaixin::gps::proto::RDO* _internal_mutable_rdo_info();
  public:
  void unsafe_arena_set_allocated_rdo_info(
      ::com::zhichenhaixin::gps::proto::RDO* rdo_info);
  ::com::zhichenhaixin::gps::proto::RDO* unsafe_arena_release_rdo_info();

  // required .com.zhichenhaixin.gps.proto.ORP orp_info = 4;
  bool has_orp_info() const;
  private:
  bool _internal_has_orp_info() const;
  public:
  void clear_orp_info();
  const ::com::zhichenhaixin::gps::proto::ORP& orp_info() const;
  ::com::zhichenhaixin::gps::proto::ORP* release_orp_info();
  ::com::zhichenhaixin::gps::proto::ORP* mutable_orp_info();
  void set_allocated_orp_info(::com::zhichenhaixin::gps::proto::ORP* orp_info);
  private:
  const ::com::zhichenhaixin::gps::proto::ORP& _internal_orp_info() const;
  ::com::zhichenhaixin::gps::proto::ORP* _internal_mutable_orp_info();
  public:
  void unsafe_arena_set_allocated_orp_info(
      ::com::zhichenhaixin::gps::proto::ORP* orp_info);
  ::com::zhichenhaixin::gps::proto::ORP* unsafe_arena_release_orp_info();

  // required .com.zhichenhaixin.gps.proto.DDM ddm_info = 5;
  bool has_ddm_info() const;
  private:
  bool _internal_has_ddm_info() const;
  public:
  void clear_ddm_info();
  const ::com::zhichenhaixin::gps::proto::DDM& ddm_info() const;
  ::com::zhichenhaixin::gps::proto::DDM* release_ddm_info();
  ::com::zhichenhaixin::gps::proto::DDM* mutable_ddm_info();
  void set_allocated_ddm_info(::com::zhichenhaixin::gps::proto::DDM* ddm_info);
  private:
  const ::com::zhichenhaixin::gps::proto::DDM& _internal_ddm_info() const;
  ::com::zhichenhaixin::gps::proto::DDM* _internal_mutable_ddm_info();
  public:
  void unsafe_arena_set_allocated_ddm_info(
      ::com::zhichenhaixin::gps::proto::DDM* ddm_info);
  ::com::zhichenhaixin::gps::proto::DDM* unsafe_arena_release_ddm_info();

  // required .com.zhichenhaixin.gps.proto.NHN nhn_info = 7;
  bool has_nhn_info() const;
  private:
  bool _internal_has_nhn_info() const;
  public:
  void clear_nhn_info();
  const ::com::zhichenhaixin::gps::proto::NHN& nhn_info() const;
  ::com::zhichenhaixin::gps::proto::NHN* release_nhn_info();
  ::com::zhichenhaixin::gps::proto::NHN* mutable_nhn_info();
  void set_allocated_nhn_info(::com::zhichenhaixin::gps::proto::NHN* nhn_info);
  private:
  const ::com::zhichenhaixin::gps::proto::NHN& _internal_nhn_info() const;
  ::com::zhichenhaixin::gps::proto::NHN* _internal_mutable_nhn_info();
  public:
  void unsafe_arena_set_allocated_nhn_info(
      ::com::zhichenhaixin::gps::proto::NHN* nhn_info);
  ::com::zhichenhaixin::gps::proto::NHN* unsafe_arena_release_nhn_info();

  // required .com.zhichenhaixin.gps.proto.WL wl_info = 8;
  bool has_wl_info() const;
  private:
  bool _internal_has_wl_info() const;
  public:
  void clear_wl_info();
  const ::com::zhichenhaixin::gps::proto::WL& wl_info() const;
  ::com::zhichenhaixin::gps::proto::WL* release_wl_info();
  ::com::zhichenhaixin::gps::proto::WL* mutable_wl_info();
  void set_allocated_wl_info(::com::zhichenhaixin::gps::proto::WL* wl_info);
  private:
  const ::com::zhichenhaixin::gps::proto::WL& _internal_wl_info() const;
  ::com::zhichenhaixin::gps::proto::WL* _internal_mutable_wl_info();
  public:
  void unsafe_arena_set_allocated_wl_info(
      ::com::zhichenhaixin::gps::proto::WL* wl_info);
  ::com::zhichenhaixin::gps::proto::WL* unsafe_arena_release_wl_info();

  // required int64 cur_utc_time = 10;
  bool has_cur_utc_time() const;
  private:
  bool _internal_has_cur_utc_time() const;
  public:
  void clear_cur_utc_time();
  ::PROTOBUF_NAMESPACE_ID::int64 cur_utc_time() const;
  void set_cur_utc_time(::PROTOBUF_NAMESPACE_ID::int64 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int64 _internal_cur_utc_time() const;
  void _internal_set_cur_utc_time(::PROTOBUF_NAMESPACE_ID::int64 value);
  public:

  // @@protoc_insertion_point(class_scope:com.zhichenhaixin.gps.proto.DevInfo)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr site_id_;
  ::com::zhichenhaixin::gps::proto::GPS* gps_info_;
  ::com::zhichenhaixin::gps::proto::ZS* zs_info_;
  ::com::zhichenhaixin::gps::proto::RDO* rdo_info_;
  ::com::zhichenhaixin::gps::proto::ORP* orp_info_;
  ::com::zhichenhaixin::gps::proto::DDM* ddm_info_;
  ::com::zhichenhaixin::gps::proto::NHN* nhn_info_;
  ::com::zhichenhaixin::gps::proto::WL* wl_info_;
  ::PROTOBUF_NAMESPACE_ID::int64 cur_utc_time_;
  friend struct ::TableStruct_TWQMSComData_2eproto;
};
// -------------------------------------------------------------------

class DevInfoList PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:com.zhichenhaixin.gps.proto.DevInfoList) */ {
 public:
  inline DevInfoList() : DevInfoList(nullptr) {};
  virtual ~DevInfoList();

  DevInfoList(const DevInfoList& from);
  DevInfoList(DevInfoList&& from) noexcept
    : DevInfoList() {
    *this = ::std::move(from);
  }

  inline DevInfoList& operator=(const DevInfoList& from) {
    CopyFrom(from);
    return *this;
  }
  inline DevInfoList& operator=(DevInfoList&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DevInfoList& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DevInfoList* internal_default_instance() {
    return reinterpret_cast<const DevInfoList*>(
               &_DevInfoList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(DevInfoList& a, DevInfoList& b) {
    a.Swap(&b);
  }
  inline void Swap(DevInfoList* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DevInfoList* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DevInfoList* New() const final {
    return CreateMaybeMessage<DevInfoList>(nullptr);
  }

  DevInfoList* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DevInfoList>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DevInfoList& from);
  void MergeFrom(const DevInfoList& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DevInfoList* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "com.zhichenhaixin.gps.proto.DevInfoList";
  }
  protected:
  explicit DevInfoList(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_TWQMSComData_2eproto);
    return ::descriptor_table_TWQMSComData_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDevInfoFieldNumber = 1,
    kLengthFieldNumber = 2,
  };
  // repeated .com.zhichenhaixin.gps.proto.DevInfo devInfo = 1;
  int devinfo_size() const;
  private:
  int _internal_devinfo_size() const;
  public:
  void clear_devinfo();
  ::com::zhichenhaixin::gps::proto::DevInfo* mutable_devinfo(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::zhichenhaixin::gps::proto::DevInfo >*
      mutable_devinfo();
  private:
  const ::com::zhichenhaixin::gps::proto::DevInfo& _internal_devinfo(int index) const;
  ::com::zhichenhaixin::gps::proto::DevInfo* _internal_add_devinfo();
  public:
  const ::com::zhichenhaixin::gps::proto::DevInfo& devinfo(int index) const;
  ::com::zhichenhaixin::gps::proto::DevInfo* add_devinfo();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::zhichenhaixin::gps::proto::DevInfo >&
      devinfo() const;

  // optional int32 length = 2;
  bool has_length() const;
  private:
  bool _internal_has_length() const;
  public:
  void clear_length();
  ::PROTOBUF_NAMESPACE_ID::int32 length() const;
  void set_length(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_length() const;
  void _internal_set_length(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:com.zhichenhaixin.gps.proto.DevInfoList)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::zhichenhaixin::gps::proto::DevInfo > devinfo_;
  ::PROTOBUF_NAMESPACE_ID::int32 length_;
  friend struct ::TableStruct_TWQMSComData_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// GPS

// required int64 ship_update_time = 1;
inline bool GPS::_internal_has_ship_update_time() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool GPS::has_ship_update_time() const {
  return _internal_has_ship_update_time();
}
inline void GPS::clear_ship_update_time() {
  ship_update_time_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 GPS::_internal_ship_update_time() const {
  return ship_update_time_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 GPS::ship_update_time() const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.gps.proto.GPS.ship_update_time)
  return _internal_ship_update_time();
}
inline void GPS::_internal_set_ship_update_time(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000002u;
  ship_update_time_ = value;
}
inline void GPS::set_ship_update_time(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_ship_update_time(value);
  // @@protoc_insertion_point(field_set:com.zhichenhaixin.gps.proto.GPS.ship_update_time)
}

// required double ship_lat = 2;
inline bool GPS::_internal_has_ship_lat() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool GPS::has_ship_lat() const {
  return _internal_has_ship_lat();
}
inline void GPS::clear_ship_lat() {
  ship_lat_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline double GPS::_internal_ship_lat() const {
  return ship_lat_;
}
inline double GPS::ship_lat() const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.gps.proto.GPS.ship_lat)
  return _internal_ship_lat();
}
inline void GPS::_internal_set_ship_lat(double value) {
  _has_bits_[0] |= 0x00000004u;
  ship_lat_ = value;
}
inline void GPS::set_ship_lat(double value) {
  _internal_set_ship_lat(value);
  // @@protoc_insertion_point(field_set:com.zhichenhaixin.gps.proto.GPS.ship_lat)
}

// required double ship_lon = 3;
inline bool GPS::_internal_has_ship_lon() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool GPS::has_ship_lon() const {
  return _internal_has_ship_lon();
}
inline void GPS::clear_ship_lon() {
  ship_lon_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline double GPS::_internal_ship_lon() const {
  return ship_lon_;
}
inline double GPS::ship_lon() const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.gps.proto.GPS.ship_lon)
  return _internal_ship_lon();
}
inline void GPS::_internal_set_ship_lon(double value) {
  _has_bits_[0] |= 0x00000008u;
  ship_lon_ = value;
}
inline void GPS::set_ship_lon(double value) {
  _internal_set_ship_lon(value);
  // @@protoc_insertion_point(field_set:com.zhichenhaixin.gps.proto.GPS.ship_lon)
}

// required double ship_speed = 4;
inline bool GPS::_internal_has_ship_speed() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool GPS::has_ship_speed() const {
  return _internal_has_ship_speed();
}
inline void GPS::clear_ship_speed() {
  ship_speed_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline double GPS::_internal_ship_speed() const {
  return ship_speed_;
}
inline double GPS::ship_speed() const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.gps.proto.GPS.ship_speed)
  return _internal_ship_speed();
}
inline void GPS::_internal_set_ship_speed(double value) {
  _has_bits_[0] |= 0x00000010u;
  ship_speed_ = value;
}
inline void GPS::set_ship_speed(double value) {
  _internal_set_ship_speed(value);
  // @@protoc_insertion_point(field_set:com.zhichenhaixin.gps.proto.GPS.ship_speed)
}

// required double ship_head = 5;
inline bool GPS::_internal_has_ship_head() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool GPS::has_ship_head() const {
  return _internal_has_ship_head();
}
inline void GPS::clear_ship_head() {
  ship_head_ = 0;
  _has_bits_[0] &= ~0x00000020u;
}
inline double GPS::_internal_ship_head() const {
  return ship_head_;
}
inline double GPS::ship_head() const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.gps.proto.GPS.ship_head)
  return _internal_ship_head();
}
inline void GPS::_internal_set_ship_head(double value) {
  _has_bits_[0] |= 0x00000020u;
  ship_head_ = value;
}
inline void GPS::set_ship_head(double value) {
  _internal_set_ship_head(value);
  // @@protoc_insertion_point(field_set:com.zhichenhaixin.gps.proto.GPS.ship_head)
}

// required double ship_course = 6;
inline bool GPS::_internal_has_ship_course() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool GPS::has_ship_course() const {
  return _internal_has_ship_course();
}
inline void GPS::clear_ship_course() {
  ship_course_ = 0;
  _has_bits_[0] &= ~0x00000040u;
}
inline double GPS::_internal_ship_course() const {
  return ship_course_;
}
inline double GPS::ship_course() const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.gps.proto.GPS.ship_course)
  return _internal_ship_course();
}
inline void GPS::_internal_set_ship_course(double value) {
  _has_bits_[0] |= 0x00000040u;
  ship_course_ = value;
}
inline void GPS::set_ship_course(double value) {
  _internal_set_ship_course(value);
  // @@protoc_insertion_point(field_set:com.zhichenhaixin.gps.proto.GPS.ship_course)
}

// required bool sts = 7;
inline bool GPS::_internal_has_sts() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool GPS::has_sts() const {
  return _internal_has_sts();
}
inline void GPS::clear_sts() {
  sts_ = false;
  _has_bits_[0] &= ~0x00000080u;
}
inline bool GPS::_internal_sts() const {
  return sts_;
}
inline bool GPS::sts() const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.gps.proto.GPS.sts)
  return _internal_sts();
}
inline void GPS::_internal_set_sts(bool value) {
  _has_bits_[0] |= 0x00000080u;
  sts_ = value;
}
inline void GPS::set_sts(bool value) {
  _internal_set_sts(value);
  // @@protoc_insertion_point(field_set:com.zhichenhaixin.gps.proto.GPS.sts)
}

// required string ship_id = 8;
inline bool GPS::_internal_has_ship_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool GPS::has_ship_id() const {
  return _internal_has_ship_id();
}
inline void GPS::clear_ship_id() {
  ship_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& GPS::ship_id() const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.gps.proto.GPS.ship_id)
  return _internal_ship_id();
}
inline void GPS::set_ship_id(const std::string& value) {
  _internal_set_ship_id(value);
  // @@protoc_insertion_point(field_set:com.zhichenhaixin.gps.proto.GPS.ship_id)
}
inline std::string* GPS::mutable_ship_id() {
  // @@protoc_insertion_point(field_mutable:com.zhichenhaixin.gps.proto.GPS.ship_id)
  return _internal_mutable_ship_id();
}
inline const std::string& GPS::_internal_ship_id() const {
  return ship_id_.Get();
}
inline void GPS::_internal_set_ship_id(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  ship_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void GPS::set_ship_id(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  ship_id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:com.zhichenhaixin.gps.proto.GPS.ship_id)
}
inline void GPS::set_ship_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  ship_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:com.zhichenhaixin.gps.proto.GPS.ship_id)
}
inline void GPS::set_ship_id(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  ship_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:com.zhichenhaixin.gps.proto.GPS.ship_id)
}
inline std::string* GPS::_internal_mutable_ship_id() {
  _has_bits_[0] |= 0x00000001u;
  return ship_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* GPS::release_ship_id() {
  // @@protoc_insertion_point(field_release:com.zhichenhaixin.gps.proto.GPS.ship_id)
  if (!_internal_has_ship_id()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return ship_id_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void GPS::set_allocated_ship_id(std::string* ship_id) {
  if (ship_id != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  ship_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ship_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:com.zhichenhaixin.gps.proto.GPS.ship_id)
}
inline std::string* GPS::unsafe_arena_release_ship_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.zhichenhaixin.gps.proto.GPS.ship_id)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000001u;
  return ship_id_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void GPS::unsafe_arena_set_allocated_ship_id(
    std::string* ship_id) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (ship_id != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  ship_id_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ship_id, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.zhichenhaixin.gps.proto.GPS.ship_id)
}

// -------------------------------------------------------------------

// ZS

// required double ZS = 1;
inline bool ZS::_internal_has_zs() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ZS::has_zs() const {
  return _internal_has_zs();
}
inline void ZS::clear_zs() {
  zs_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline double ZS::_internal_zs() const {
  return zs_;
}
inline double ZS::zs() const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.gps.proto.ZS.ZS)
  return _internal_zs();
}
inline void ZS::_internal_set_zs(double value) {
  _has_bits_[0] |= 0x00000001u;
  zs_ = value;
}
inline void ZS::set_zs(double value) {
  _internal_set_zs(value);
  // @@protoc_insertion_point(field_set:com.zhichenhaixin.gps.proto.ZS.ZS)
}

// required double TEMP = 2;
inline bool ZS::_internal_has_temp() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool ZS::has_temp() const {
  return _internal_has_temp();
}
inline void ZS::clear_temp() {
  temp_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline double ZS::_internal_temp() const {
  return temp_;
}
inline double ZS::temp() const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.gps.proto.ZS.TEMP)
  return _internal_temp();
}
inline void ZS::_internal_set_temp(double value) {
  _has_bits_[0] |= 0x00000002u;
  temp_ = value;
}
inline void ZS::set_temp(double value) {
  _internal_set_temp(value);
  // @@protoc_insertion_point(field_set:com.zhichenhaixin.gps.proto.ZS.TEMP)
}

// required int64 time = 3;
inline bool ZS::_internal_has_time() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool ZS::has_time() const {
  return _internal_has_time();
}
inline void ZS::clear_time() {
  time_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ZS::_internal_time() const {
  return time_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ZS::time() const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.gps.proto.ZS.time)
  return _internal_time();
}
inline void ZS::_internal_set_time(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000004u;
  time_ = value;
}
inline void ZS::set_time(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_time(value);
  // @@protoc_insertion_point(field_set:com.zhichenhaixin.gps.proto.ZS.time)
}

// required bool sts = 4;
inline bool ZS::_internal_has_sts() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool ZS::has_sts() const {
  return _internal_has_sts();
}
inline void ZS::clear_sts() {
  sts_ = false;
  _has_bits_[0] &= ~0x00000008u;
}
inline bool ZS::_internal_sts() const {
  return sts_;
}
inline bool ZS::sts() const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.gps.proto.ZS.sts)
  return _internal_sts();
}
inline void ZS::_internal_set_sts(bool value) {
  _has_bits_[0] |= 0x00000008u;
  sts_ = value;
}
inline void ZS::set_sts(bool value) {
  _internal_set_sts(value);
  // @@protoc_insertion_point(field_set:com.zhichenhaixin.gps.proto.ZS.sts)
}

// -------------------------------------------------------------------

// RDO

// required double RDO = 1;
inline bool RDO::_internal_has_rdo() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool RDO::has_rdo() const {
  return _internal_has_rdo();
}
inline void RDO::clear_rdo() {
  rdo_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline double RDO::_internal_rdo() const {
  return rdo_;
}
inline double RDO::rdo() const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.gps.proto.RDO.RDO)
  return _internal_rdo();
}
inline void RDO::_internal_set_rdo(double value) {
  _has_bits_[0] |= 0x00000001u;
  rdo_ = value;
}
inline void RDO::set_rdo(double value) {
  _internal_set_rdo(value);
  // @@protoc_insertion_point(field_set:com.zhichenhaixin.gps.proto.RDO.RDO)
}

// required double TEMP = 2;
inline bool RDO::_internal_has_temp() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool RDO::has_temp() const {
  return _internal_has_temp();
}
inline void RDO::clear_temp() {
  temp_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline double RDO::_internal_temp() const {
  return temp_;
}
inline double RDO::temp() const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.gps.proto.RDO.TEMP)
  return _internal_temp();
}
inline void RDO::_internal_set_temp(double value) {
  _has_bits_[0] |= 0x00000002u;
  temp_ = value;
}
inline void RDO::set_temp(double value) {
  _internal_set_temp(value);
  // @@protoc_insertion_point(field_set:com.zhichenhaixin.gps.proto.RDO.TEMP)
}

// required int64 time = 3;
inline bool RDO::_internal_has_time() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool RDO::has_time() const {
  return _internal_has_time();
}
inline void RDO::clear_time() {
  time_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 RDO::_internal_time() const {
  return time_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 RDO::time() const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.gps.proto.RDO.time)
  return _internal_time();
}
inline void RDO::_internal_set_time(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000004u;
  time_ = value;
}
inline void RDO::set_time(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_time(value);
  // @@protoc_insertion_point(field_set:com.zhichenhaixin.gps.proto.RDO.time)
}

// required bool sts = 4;
inline bool RDO::_internal_has_sts() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool RDO::has_sts() const {
  return _internal_has_sts();
}
inline void RDO::clear_sts() {
  sts_ = false;
  _has_bits_[0] &= ~0x00000008u;
}
inline bool RDO::_internal_sts() const {
  return sts_;
}
inline bool RDO::sts() const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.gps.proto.RDO.sts)
  return _internal_sts();
}
inline void RDO::_internal_set_sts(bool value) {
  _has_bits_[0] |= 0x00000008u;
  sts_ = value;
}
inline void RDO::set_sts(bool value) {
  _internal_set_sts(value);
  // @@protoc_insertion_point(field_set:com.zhichenhaixin.gps.proto.RDO.sts)
}

// -------------------------------------------------------------------

// ORP

// required double ORP = 1;
inline bool ORP::_internal_has_orp() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ORP::has_orp() const {
  return _internal_has_orp();
}
inline void ORP::clear_orp() {
  orp_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline double ORP::_internal_orp() const {
  return orp_;
}
inline double ORP::orp() const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.gps.proto.ORP.ORP)
  return _internal_orp();
}
inline void ORP::_internal_set_orp(double value) {
  _has_bits_[0] |= 0x00000001u;
  orp_ = value;
}
inline void ORP::set_orp(double value) {
  _internal_set_orp(value);
  // @@protoc_insertion_point(field_set:com.zhichenhaixin.gps.proto.ORP.ORP)
}

// required int64 time = 2;
inline bool ORP::_internal_has_time() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool ORP::has_time() const {
  return _internal_has_time();
}
inline void ORP::clear_time() {
  time_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ORP::_internal_time() const {
  return time_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 ORP::time() const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.gps.proto.ORP.time)
  return _internal_time();
}
inline void ORP::_internal_set_time(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000002u;
  time_ = value;
}
inline void ORP::set_time(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_time(value);
  // @@protoc_insertion_point(field_set:com.zhichenhaixin.gps.proto.ORP.time)
}

// required bool sts = 3;
inline bool ORP::_internal_has_sts() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool ORP::has_sts() const {
  return _internal_has_sts();
}
inline void ORP::clear_sts() {
  sts_ = false;
  _has_bits_[0] &= ~0x00000004u;
}
inline bool ORP::_internal_sts() const {
  return sts_;
}
inline bool ORP::sts() const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.gps.proto.ORP.sts)
  return _internal_sts();
}
inline void ORP::_internal_set_sts(bool value) {
  _has_bits_[0] |= 0x00000004u;
  sts_ = value;
}
inline void ORP::set_sts(bool value) {
  _internal_set_sts(value);
  // @@protoc_insertion_point(field_set:com.zhichenhaixin.gps.proto.ORP.sts)
}

// -------------------------------------------------------------------

// DDM

// required double DDM = 1;
inline bool DDM::_internal_has_ddm() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool DDM::has_ddm() const {
  return _internal_has_ddm();
}
inline void DDM::clear_ddm() {
  ddm_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline double DDM::_internal_ddm() const {
  return ddm_;
}
inline double DDM::ddm() const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.gps.proto.DDM.DDM)
  return _internal_ddm();
}
inline void DDM::_internal_set_ddm(double value) {
  _has_bits_[0] |= 0x00000001u;
  ddm_ = value;
}
inline void DDM::set_ddm(double value) {
  _internal_set_ddm(value);
  // @@protoc_insertion_point(field_set:com.zhichenhaixin.gps.proto.DDM.DDM)
}

// required double TEMP = 2;
inline bool DDM::_internal_has_temp() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool DDM::has_temp() const {
  return _internal_has_temp();
}
inline void DDM::clear_temp() {
  temp_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline double DDM::_internal_temp() const {
  return temp_;
}
inline double DDM::temp() const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.gps.proto.DDM.TEMP)
  return _internal_temp();
}
inline void DDM::_internal_set_temp(double value) {
  _has_bits_[0] |= 0x00000002u;
  temp_ = value;
}
inline void DDM::set_temp(double value) {
  _internal_set_temp(value);
  // @@protoc_insertion_point(field_set:com.zhichenhaixin.gps.proto.DDM.TEMP)
}

// required int64 time = 3;
inline bool DDM::_internal_has_time() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool DDM::has_time() const {
  return _internal_has_time();
}
inline void DDM::clear_time() {
  time_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 DDM::_internal_time() const {
  return time_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 DDM::time() const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.gps.proto.DDM.time)
  return _internal_time();
}
inline void DDM::_internal_set_time(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000004u;
  time_ = value;
}
inline void DDM::set_time(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_time(value);
  // @@protoc_insertion_point(field_set:com.zhichenhaixin.gps.proto.DDM.time)
}

// required bool sts = 4;
inline bool DDM::_internal_has_sts() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool DDM::has_sts() const {
  return _internal_has_sts();
}
inline void DDM::clear_sts() {
  sts_ = false;
  _has_bits_[0] &= ~0x00000008u;
}
inline bool DDM::_internal_sts() const {
  return sts_;
}
inline bool DDM::sts() const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.gps.proto.DDM.sts)
  return _internal_sts();
}
inline void DDM::_internal_set_sts(bool value) {
  _has_bits_[0] |= 0x00000008u;
  sts_ = value;
}
inline void DDM::set_sts(bool value) {
  _internal_set_sts(value);
  // @@protoc_insertion_point(field_set:com.zhichenhaixin.gps.proto.DDM.sts)
}

// -------------------------------------------------------------------

// NHN

// required double NHN = 1;
inline bool NHN::_internal_has_nhn() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool NHN::has_nhn() const {
  return _internal_has_nhn();
}
inline void NHN::clear_nhn() {
  nhn_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline double NHN::_internal_nhn() const {
  return nhn_;
}
inline double NHN::nhn() const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.gps.proto.NHN.NHN)
  return _internal_nhn();
}
inline void NHN::_internal_set_nhn(double value) {
  _has_bits_[0] |= 0x00000001u;
  nhn_ = value;
}
inline void NHN::set_nhn(double value) {
  _internal_set_nhn(value);
  // @@protoc_insertion_point(field_set:com.zhichenhaixin.gps.proto.NHN.NHN)
}

// required double TEMP = 2;
inline bool NHN::_internal_has_temp() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool NHN::has_temp() const {
  return _internal_has_temp();
}
inline void NHN::clear_temp() {
  temp_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline double NHN::_internal_temp() const {
  return temp_;
}
inline double NHN::temp() const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.gps.proto.NHN.TEMP)
  return _internal_temp();
}
inline void NHN::_internal_set_temp(double value) {
  _has_bits_[0] |= 0x00000002u;
  temp_ = value;
}
inline void NHN::set_temp(double value) {
  _internal_set_temp(value);
  // @@protoc_insertion_point(field_set:com.zhichenhaixin.gps.proto.NHN.TEMP)
}

// required int64 time = 3;
inline bool NHN::_internal_has_time() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool NHN::has_time() const {
  return _internal_has_time();
}
inline void NHN::clear_time() {
  time_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 NHN::_internal_time() const {
  return time_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 NHN::time() const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.gps.proto.NHN.time)
  return _internal_time();
}
inline void NHN::_internal_set_time(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000004u;
  time_ = value;
}
inline void NHN::set_time(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_time(value);
  // @@protoc_insertion_point(field_set:com.zhichenhaixin.gps.proto.NHN.time)
}

// required bool sts = 4;
inline bool NHN::_internal_has_sts() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool NHN::has_sts() const {
  return _internal_has_sts();
}
inline void NHN::clear_sts() {
  sts_ = false;
  _has_bits_[0] &= ~0x00000008u;
}
inline bool NHN::_internal_sts() const {
  return sts_;
}
inline bool NHN::sts() const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.gps.proto.NHN.sts)
  return _internal_sts();
}
inline void NHN::_internal_set_sts(bool value) {
  _has_bits_[0] |= 0x00000008u;
  sts_ = value;
}
inline void NHN::set_sts(bool value) {
  _internal_set_sts(value);
  // @@protoc_insertion_point(field_set:com.zhichenhaixin.gps.proto.NHN.sts)
}

// -------------------------------------------------------------------

// WL

// required double PRESS = 1;
inline bool WL::_internal_has_press() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool WL::has_press() const {
  return _internal_has_press();
}
inline void WL::clear_press() {
  press_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline double WL::_internal_press() const {
  return press_;
}
inline double WL::press() const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.gps.proto.WL.PRESS)
  return _internal_press();
}
inline void WL::_internal_set_press(double value) {
  _has_bits_[0] |= 0x00000001u;
  press_ = value;
}
inline void WL::set_press(double value) {
  _internal_set_press(value);
  // @@protoc_insertion_point(field_set:com.zhichenhaixin.gps.proto.WL.PRESS)
}

// required double TEMP = 2;
inline bool WL::_internal_has_temp() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool WL::has_temp() const {
  return _internal_has_temp();
}
inline void WL::clear_temp() {
  temp_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline double WL::_internal_temp() const {
  return temp_;
}
inline double WL::temp() const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.gps.proto.WL.TEMP)
  return _internal_temp();
}
inline void WL::_internal_set_temp(double value) {
  _has_bits_[0] |= 0x00000002u;
  temp_ = value;
}
inline void WL::set_temp(double value) {
  _internal_set_temp(value);
  // @@protoc_insertion_point(field_set:com.zhichenhaixin.gps.proto.WL.TEMP)
}

// required double LVL = 3;
inline bool WL::_internal_has_lvl() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool WL::has_lvl() const {
  return _internal_has_lvl();
}
inline void WL::clear_lvl() {
  lvl_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline double WL::_internal_lvl() const {
  return lvl_;
}
inline double WL::lvl() const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.gps.proto.WL.LVL)
  return _internal_lvl();
}
inline void WL::_internal_set_lvl(double value) {
  _has_bits_[0] |= 0x00000004u;
  lvl_ = value;
}
inline void WL::set_lvl(double value) {
  _internal_set_lvl(value);
  // @@protoc_insertion_point(field_set:com.zhichenhaixin.gps.proto.WL.LVL)
}

// required int64 time = 4;
inline bool WL::_internal_has_time() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool WL::has_time() const {
  return _internal_has_time();
}
inline void WL::clear_time() {
  time_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 WL::_internal_time() const {
  return time_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 WL::time() const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.gps.proto.WL.time)
  return _internal_time();
}
inline void WL::_internal_set_time(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000008u;
  time_ = value;
}
inline void WL::set_time(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_time(value);
  // @@protoc_insertion_point(field_set:com.zhichenhaixin.gps.proto.WL.time)
}

// required bool sts = 5;
inline bool WL::_internal_has_sts() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool WL::has_sts() const {
  return _internal_has_sts();
}
inline void WL::clear_sts() {
  sts_ = false;
  _has_bits_[0] &= ~0x00000010u;
}
inline bool WL::_internal_sts() const {
  return sts_;
}
inline bool WL::sts() const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.gps.proto.WL.sts)
  return _internal_sts();
}
inline void WL::_internal_set_sts(bool value) {
  _has_bits_[0] |= 0x00000010u;
  sts_ = value;
}
inline void WL::set_sts(bool value) {
  _internal_set_sts(value);
  // @@protoc_insertion_point(field_set:com.zhichenhaixin.gps.proto.WL.sts)
}

// -------------------------------------------------------------------

// DevInfo

// required .com.zhichenhaixin.gps.proto.GPS gps_info = 1;
inline bool DevInfo::_internal_has_gps_info() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || gps_info_ != nullptr);
  return value;
}
inline bool DevInfo::has_gps_info() const {
  return _internal_has_gps_info();
}
inline void DevInfo::clear_gps_info() {
  if (gps_info_ != nullptr) gps_info_->Clear();
  _has_bits_[0] &= ~0x00000002u;
}
inline const ::com::zhichenhaixin::gps::proto::GPS& DevInfo::_internal_gps_info() const {
  const ::com::zhichenhaixin::gps::proto::GPS* p = gps_info_;
  return p != nullptr ? *p : *reinterpret_cast<const ::com::zhichenhaixin::gps::proto::GPS*>(
      &::com::zhichenhaixin::gps::proto::_GPS_default_instance_);
}
inline const ::com::zhichenhaixin::gps::proto::GPS& DevInfo::gps_info() const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.gps.proto.DevInfo.gps_info)
  return _internal_gps_info();
}
inline void DevInfo::unsafe_arena_set_allocated_gps_info(
    ::com::zhichenhaixin::gps::proto::GPS* gps_info) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(gps_info_);
  }
  gps_info_ = gps_info;
  if (gps_info) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.zhichenhaixin.gps.proto.DevInfo.gps_info)
}
inline ::com::zhichenhaixin::gps::proto::GPS* DevInfo::release_gps_info() {
  auto temp = unsafe_arena_release_gps_info();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::com::zhichenhaixin::gps::proto::GPS* DevInfo::unsafe_arena_release_gps_info() {
  // @@protoc_insertion_point(field_release:com.zhichenhaixin.gps.proto.DevInfo.gps_info)
  _has_bits_[0] &= ~0x00000002u;
  ::com::zhichenhaixin::gps::proto::GPS* temp = gps_info_;
  gps_info_ = nullptr;
  return temp;
}
inline ::com::zhichenhaixin::gps::proto::GPS* DevInfo::_internal_mutable_gps_info() {
  _has_bits_[0] |= 0x00000002u;
  if (gps_info_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::zhichenhaixin::gps::proto::GPS>(GetArena());
    gps_info_ = p;
  }
  return gps_info_;
}
inline ::com::zhichenhaixin::gps::proto::GPS* DevInfo::mutable_gps_info() {
  // @@protoc_insertion_point(field_mutable:com.zhichenhaixin.gps.proto.DevInfo.gps_info)
  return _internal_mutable_gps_info();
}
inline void DevInfo::set_allocated_gps_info(::com::zhichenhaixin::gps::proto::GPS* gps_info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete gps_info_;
  }
  if (gps_info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(gps_info);
    if (message_arena != submessage_arena) {
      gps_info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, gps_info, submessage_arena);
    }
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  gps_info_ = gps_info;
  // @@protoc_insertion_point(field_set_allocated:com.zhichenhaixin.gps.proto.DevInfo.gps_info)
}

// required .com.zhichenhaixin.gps.proto.ZS zs_info = 2;
inline bool DevInfo::_internal_has_zs_info() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || zs_info_ != nullptr);
  return value;
}
inline bool DevInfo::has_zs_info() const {
  return _internal_has_zs_info();
}
inline void DevInfo::clear_zs_info() {
  if (zs_info_ != nullptr) zs_info_->Clear();
  _has_bits_[0] &= ~0x00000004u;
}
inline const ::com::zhichenhaixin::gps::proto::ZS& DevInfo::_internal_zs_info() const {
  const ::com::zhichenhaixin::gps::proto::ZS* p = zs_info_;
  return p != nullptr ? *p : *reinterpret_cast<const ::com::zhichenhaixin::gps::proto::ZS*>(
      &::com::zhichenhaixin::gps::proto::_ZS_default_instance_);
}
inline const ::com::zhichenhaixin::gps::proto::ZS& DevInfo::zs_info() const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.gps.proto.DevInfo.zs_info)
  return _internal_zs_info();
}
inline void DevInfo::unsafe_arena_set_allocated_zs_info(
    ::com::zhichenhaixin::gps::proto::ZS* zs_info) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(zs_info_);
  }
  zs_info_ = zs_info;
  if (zs_info) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.zhichenhaixin.gps.proto.DevInfo.zs_info)
}
inline ::com::zhichenhaixin::gps::proto::ZS* DevInfo::release_zs_info() {
  auto temp = unsafe_arena_release_zs_info();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::com::zhichenhaixin::gps::proto::ZS* DevInfo::unsafe_arena_release_zs_info() {
  // @@protoc_insertion_point(field_release:com.zhichenhaixin.gps.proto.DevInfo.zs_info)
  _has_bits_[0] &= ~0x00000004u;
  ::com::zhichenhaixin::gps::proto::ZS* temp = zs_info_;
  zs_info_ = nullptr;
  return temp;
}
inline ::com::zhichenhaixin::gps::proto::ZS* DevInfo::_internal_mutable_zs_info() {
  _has_bits_[0] |= 0x00000004u;
  if (zs_info_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::zhichenhaixin::gps::proto::ZS>(GetArena());
    zs_info_ = p;
  }
  return zs_info_;
}
inline ::com::zhichenhaixin::gps::proto::ZS* DevInfo::mutable_zs_info() {
  // @@protoc_insertion_point(field_mutable:com.zhichenhaixin.gps.proto.DevInfo.zs_info)
  return _internal_mutable_zs_info();
}
inline void DevInfo::set_allocated_zs_info(::com::zhichenhaixin::gps::proto::ZS* zs_info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete zs_info_;
  }
  if (zs_info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(zs_info);
    if (message_arena != submessage_arena) {
      zs_info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, zs_info, submessage_arena);
    }
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  zs_info_ = zs_info;
  // @@protoc_insertion_point(field_set_allocated:com.zhichenhaixin.gps.proto.DevInfo.zs_info)
}

// required .com.zhichenhaixin.gps.proto.RDO rdo_info = 3;
inline bool DevInfo::_internal_has_rdo_info() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || rdo_info_ != nullptr);
  return value;
}
inline bool DevInfo::has_rdo_info() const {
  return _internal_has_rdo_info();
}
inline void DevInfo::clear_rdo_info() {
  if (rdo_info_ != nullptr) rdo_info_->Clear();
  _has_bits_[0] &= ~0x00000008u;
}
inline const ::com::zhichenhaixin::gps::proto::RDO& DevInfo::_internal_rdo_info() const {
  const ::com::zhichenhaixin::gps::proto::RDO* p = rdo_info_;
  return p != nullptr ? *p : *reinterpret_cast<const ::com::zhichenhaixin::gps::proto::RDO*>(
      &::com::zhichenhaixin::gps::proto::_RDO_default_instance_);
}
inline const ::com::zhichenhaixin::gps::proto::RDO& DevInfo::rdo_info() const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.gps.proto.DevInfo.rdo_info)
  return _internal_rdo_info();
}
inline void DevInfo::unsafe_arena_set_allocated_rdo_info(
    ::com::zhichenhaixin::gps::proto::RDO* rdo_info) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(rdo_info_);
  }
  rdo_info_ = rdo_info;
  if (rdo_info) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.zhichenhaixin.gps.proto.DevInfo.rdo_info)
}
inline ::com::zhichenhaixin::gps::proto::RDO* DevInfo::release_rdo_info() {
  auto temp = unsafe_arena_release_rdo_info();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::com::zhichenhaixin::gps::proto::RDO* DevInfo::unsafe_arena_release_rdo_info() {
  // @@protoc_insertion_point(field_release:com.zhichenhaixin.gps.proto.DevInfo.rdo_info)
  _has_bits_[0] &= ~0x00000008u;
  ::com::zhichenhaixin::gps::proto::RDO* temp = rdo_info_;
  rdo_info_ = nullptr;
  return temp;
}
inline ::com::zhichenhaixin::gps::proto::RDO* DevInfo::_internal_mutable_rdo_info() {
  _has_bits_[0] |= 0x00000008u;
  if (rdo_info_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::zhichenhaixin::gps::proto::RDO>(GetArena());
    rdo_info_ = p;
  }
  return rdo_info_;
}
inline ::com::zhichenhaixin::gps::proto::RDO* DevInfo::mutable_rdo_info() {
  // @@protoc_insertion_point(field_mutable:com.zhichenhaixin.gps.proto.DevInfo.rdo_info)
  return _internal_mutable_rdo_info();
}
inline void DevInfo::set_allocated_rdo_info(::com::zhichenhaixin::gps::proto::RDO* rdo_info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete rdo_info_;
  }
  if (rdo_info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(rdo_info);
    if (message_arena != submessage_arena) {
      rdo_info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, rdo_info, submessage_arena);
    }
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  rdo_info_ = rdo_info;
  // @@protoc_insertion_point(field_set_allocated:com.zhichenhaixin.gps.proto.DevInfo.rdo_info)
}

// required .com.zhichenhaixin.gps.proto.ORP orp_info = 4;
inline bool DevInfo::_internal_has_orp_info() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  PROTOBUF_ASSUME(!value || orp_info_ != nullptr);
  return value;
}
inline bool DevInfo::has_orp_info() const {
  return _internal_has_orp_info();
}
inline void DevInfo::clear_orp_info() {
  if (orp_info_ != nullptr) orp_info_->Clear();
  _has_bits_[0] &= ~0x00000010u;
}
inline const ::com::zhichenhaixin::gps::proto::ORP& DevInfo::_internal_orp_info() const {
  const ::com::zhichenhaixin::gps::proto::ORP* p = orp_info_;
  return p != nullptr ? *p : *reinterpret_cast<const ::com::zhichenhaixin::gps::proto::ORP*>(
      &::com::zhichenhaixin::gps::proto::_ORP_default_instance_);
}
inline const ::com::zhichenhaixin::gps::proto::ORP& DevInfo::orp_info() const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.gps.proto.DevInfo.orp_info)
  return _internal_orp_info();
}
inline void DevInfo::unsafe_arena_set_allocated_orp_info(
    ::com::zhichenhaixin::gps::proto::ORP* orp_info) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(orp_info_);
  }
  orp_info_ = orp_info;
  if (orp_info) {
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.zhichenhaixin.gps.proto.DevInfo.orp_info)
}
inline ::com::zhichenhaixin::gps::proto::ORP* DevInfo::release_orp_info() {
  auto temp = unsafe_arena_release_orp_info();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::com::zhichenhaixin::gps::proto::ORP* DevInfo::unsafe_arena_release_orp_info() {
  // @@protoc_insertion_point(field_release:com.zhichenhaixin.gps.proto.DevInfo.orp_info)
  _has_bits_[0] &= ~0x00000010u;
  ::com::zhichenhaixin::gps::proto::ORP* temp = orp_info_;
  orp_info_ = nullptr;
  return temp;
}
inline ::com::zhichenhaixin::gps::proto::ORP* DevInfo::_internal_mutable_orp_info() {
  _has_bits_[0] |= 0x00000010u;
  if (orp_info_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::zhichenhaixin::gps::proto::ORP>(GetArena());
    orp_info_ = p;
  }
  return orp_info_;
}
inline ::com::zhichenhaixin::gps::proto::ORP* DevInfo::mutable_orp_info() {
  // @@protoc_insertion_point(field_mutable:com.zhichenhaixin.gps.proto.DevInfo.orp_info)
  return _internal_mutable_orp_info();
}
inline void DevInfo::set_allocated_orp_info(::com::zhichenhaixin::gps::proto::ORP* orp_info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete orp_info_;
  }
  if (orp_info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(orp_info);
    if (message_arena != submessage_arena) {
      orp_info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, orp_info, submessage_arena);
    }
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  orp_info_ = orp_info;
  // @@protoc_insertion_point(field_set_allocated:com.zhichenhaixin.gps.proto.DevInfo.orp_info)
}

// required .com.zhichenhaixin.gps.proto.DDM ddm_info = 5;
inline bool DevInfo::_internal_has_ddm_info() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  PROTOBUF_ASSUME(!value || ddm_info_ != nullptr);
  return value;
}
inline bool DevInfo::has_ddm_info() const {
  return _internal_has_ddm_info();
}
inline void DevInfo::clear_ddm_info() {
  if (ddm_info_ != nullptr) ddm_info_->Clear();
  _has_bits_[0] &= ~0x00000020u;
}
inline const ::com::zhichenhaixin::gps::proto::DDM& DevInfo::_internal_ddm_info() const {
  const ::com::zhichenhaixin::gps::proto::DDM* p = ddm_info_;
  return p != nullptr ? *p : *reinterpret_cast<const ::com::zhichenhaixin::gps::proto::DDM*>(
      &::com::zhichenhaixin::gps::proto::_DDM_default_instance_);
}
inline const ::com::zhichenhaixin::gps::proto::DDM& DevInfo::ddm_info() const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.gps.proto.DevInfo.ddm_info)
  return _internal_ddm_info();
}
inline void DevInfo::unsafe_arena_set_allocated_ddm_info(
    ::com::zhichenhaixin::gps::proto::DDM* ddm_info) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(ddm_info_);
  }
  ddm_info_ = ddm_info;
  if (ddm_info) {
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.zhichenhaixin.gps.proto.DevInfo.ddm_info)
}
inline ::com::zhichenhaixin::gps::proto::DDM* DevInfo::release_ddm_info() {
  auto temp = unsafe_arena_release_ddm_info();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::com::zhichenhaixin::gps::proto::DDM* DevInfo::unsafe_arena_release_ddm_info() {
  // @@protoc_insertion_point(field_release:com.zhichenhaixin.gps.proto.DevInfo.ddm_info)
  _has_bits_[0] &= ~0x00000020u;
  ::com::zhichenhaixin::gps::proto::DDM* temp = ddm_info_;
  ddm_info_ = nullptr;
  return temp;
}
inline ::com::zhichenhaixin::gps::proto::DDM* DevInfo::_internal_mutable_ddm_info() {
  _has_bits_[0] |= 0x00000020u;
  if (ddm_info_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::zhichenhaixin::gps::proto::DDM>(GetArena());
    ddm_info_ = p;
  }
  return ddm_info_;
}
inline ::com::zhichenhaixin::gps::proto::DDM* DevInfo::mutable_ddm_info() {
  // @@protoc_insertion_point(field_mutable:com.zhichenhaixin.gps.proto.DevInfo.ddm_info)
  return _internal_mutable_ddm_info();
}
inline void DevInfo::set_allocated_ddm_info(::com::zhichenhaixin::gps::proto::DDM* ddm_info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete ddm_info_;
  }
  if (ddm_info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(ddm_info);
    if (message_arena != submessage_arena) {
      ddm_info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ddm_info, submessage_arena);
    }
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  ddm_info_ = ddm_info;
  // @@protoc_insertion_point(field_set_allocated:com.zhichenhaixin.gps.proto.DevInfo.ddm_info)
}

// required .com.zhichenhaixin.gps.proto.NHN nhn_info = 7;
inline bool DevInfo::_internal_has_nhn_info() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  PROTOBUF_ASSUME(!value || nhn_info_ != nullptr);
  return value;
}
inline bool DevInfo::has_nhn_info() const {
  return _internal_has_nhn_info();
}
inline void DevInfo::clear_nhn_info() {
  if (nhn_info_ != nullptr) nhn_info_->Clear();
  _has_bits_[0] &= ~0x00000040u;
}
inline const ::com::zhichenhaixin::gps::proto::NHN& DevInfo::_internal_nhn_info() const {
  const ::com::zhichenhaixin::gps::proto::NHN* p = nhn_info_;
  return p != nullptr ? *p : *reinterpret_cast<const ::com::zhichenhaixin::gps::proto::NHN*>(
      &::com::zhichenhaixin::gps::proto::_NHN_default_instance_);
}
inline const ::com::zhichenhaixin::gps::proto::NHN& DevInfo::nhn_info() const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.gps.proto.DevInfo.nhn_info)
  return _internal_nhn_info();
}
inline void DevInfo::unsafe_arena_set_allocated_nhn_info(
    ::com::zhichenhaixin::gps::proto::NHN* nhn_info) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(nhn_info_);
  }
  nhn_info_ = nhn_info;
  if (nhn_info) {
    _has_bits_[0] |= 0x00000040u;
  } else {
    _has_bits_[0] &= ~0x00000040u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.zhichenhaixin.gps.proto.DevInfo.nhn_info)
}
inline ::com::zhichenhaixin::gps::proto::NHN* DevInfo::release_nhn_info() {
  auto temp = unsafe_arena_release_nhn_info();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::com::zhichenhaixin::gps::proto::NHN* DevInfo::unsafe_arena_release_nhn_info() {
  // @@protoc_insertion_point(field_release:com.zhichenhaixin.gps.proto.DevInfo.nhn_info)
  _has_bits_[0] &= ~0x00000040u;
  ::com::zhichenhaixin::gps::proto::NHN* temp = nhn_info_;
  nhn_info_ = nullptr;
  return temp;
}
inline ::com::zhichenhaixin::gps::proto::NHN* DevInfo::_internal_mutable_nhn_info() {
  _has_bits_[0] |= 0x00000040u;
  if (nhn_info_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::zhichenhaixin::gps::proto::NHN>(GetArena());
    nhn_info_ = p;
  }
  return nhn_info_;
}
inline ::com::zhichenhaixin::gps::proto::NHN* DevInfo::mutable_nhn_info() {
  // @@protoc_insertion_point(field_mutable:com.zhichenhaixin.gps.proto.DevInfo.nhn_info)
  return _internal_mutable_nhn_info();
}
inline void DevInfo::set_allocated_nhn_info(::com::zhichenhaixin::gps::proto::NHN* nhn_info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete nhn_info_;
  }
  if (nhn_info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(nhn_info);
    if (message_arena != submessage_arena) {
      nhn_info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, nhn_info, submessage_arena);
    }
    _has_bits_[0] |= 0x00000040u;
  } else {
    _has_bits_[0] &= ~0x00000040u;
  }
  nhn_info_ = nhn_info;
  // @@protoc_insertion_point(field_set_allocated:com.zhichenhaixin.gps.proto.DevInfo.nhn_info)
}

// required .com.zhichenhaixin.gps.proto.WL wl_info = 8;
inline bool DevInfo::_internal_has_wl_info() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  PROTOBUF_ASSUME(!value || wl_info_ != nullptr);
  return value;
}
inline bool DevInfo::has_wl_info() const {
  return _internal_has_wl_info();
}
inline void DevInfo::clear_wl_info() {
  if (wl_info_ != nullptr) wl_info_->Clear();
  _has_bits_[0] &= ~0x00000080u;
}
inline const ::com::zhichenhaixin::gps::proto::WL& DevInfo::_internal_wl_info() const {
  const ::com::zhichenhaixin::gps::proto::WL* p = wl_info_;
  return p != nullptr ? *p : *reinterpret_cast<const ::com::zhichenhaixin::gps::proto::WL*>(
      &::com::zhichenhaixin::gps::proto::_WL_default_instance_);
}
inline const ::com::zhichenhaixin::gps::proto::WL& DevInfo::wl_info() const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.gps.proto.DevInfo.wl_info)
  return _internal_wl_info();
}
inline void DevInfo::unsafe_arena_set_allocated_wl_info(
    ::com::zhichenhaixin::gps::proto::WL* wl_info) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(wl_info_);
  }
  wl_info_ = wl_info;
  if (wl_info) {
    _has_bits_[0] |= 0x00000080u;
  } else {
    _has_bits_[0] &= ~0x00000080u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.zhichenhaixin.gps.proto.DevInfo.wl_info)
}
inline ::com::zhichenhaixin::gps::proto::WL* DevInfo::release_wl_info() {
  auto temp = unsafe_arena_release_wl_info();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::com::zhichenhaixin::gps::proto::WL* DevInfo::unsafe_arena_release_wl_info() {
  // @@protoc_insertion_point(field_release:com.zhichenhaixin.gps.proto.DevInfo.wl_info)
  _has_bits_[0] &= ~0x00000080u;
  ::com::zhichenhaixin::gps::proto::WL* temp = wl_info_;
  wl_info_ = nullptr;
  return temp;
}
inline ::com::zhichenhaixin::gps::proto::WL* DevInfo::_internal_mutable_wl_info() {
  _has_bits_[0] |= 0x00000080u;
  if (wl_info_ == nullptr) {
    auto* p = CreateMaybeMessage<::com::zhichenhaixin::gps::proto::WL>(GetArena());
    wl_info_ = p;
  }
  return wl_info_;
}
inline ::com::zhichenhaixin::gps::proto::WL* DevInfo::mutable_wl_info() {
  // @@protoc_insertion_point(field_mutable:com.zhichenhaixin.gps.proto.DevInfo.wl_info)
  return _internal_mutable_wl_info();
}
inline void DevInfo::set_allocated_wl_info(::com::zhichenhaixin::gps::proto::WL* wl_info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete wl_info_;
  }
  if (wl_info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(wl_info);
    if (message_arena != submessage_arena) {
      wl_info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, wl_info, submessage_arena);
    }
    _has_bits_[0] |= 0x00000080u;
  } else {
    _has_bits_[0] &= ~0x00000080u;
  }
  wl_info_ = wl_info;
  // @@protoc_insertion_point(field_set_allocated:com.zhichenhaixin.gps.proto.DevInfo.wl_info)
}

// required string site_id = 9;
inline bool DevInfo::_internal_has_site_id() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool DevInfo::has_site_id() const {
  return _internal_has_site_id();
}
inline void DevInfo::clear_site_id() {
  site_id_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& DevInfo::site_id() const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.gps.proto.DevInfo.site_id)
  return _internal_site_id();
}
inline void DevInfo::set_site_id(const std::string& value) {
  _internal_set_site_id(value);
  // @@protoc_insertion_point(field_set:com.zhichenhaixin.gps.proto.DevInfo.site_id)
}
inline std::string* DevInfo::mutable_site_id() {
  // @@protoc_insertion_point(field_mutable:com.zhichenhaixin.gps.proto.DevInfo.site_id)
  return _internal_mutable_site_id();
}
inline const std::string& DevInfo::_internal_site_id() const {
  return site_id_.Get();
}
inline void DevInfo::_internal_set_site_id(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  site_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void DevInfo::set_site_id(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  site_id_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:com.zhichenhaixin.gps.proto.DevInfo.site_id)
}
inline void DevInfo::set_site_id(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  site_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:com.zhichenhaixin.gps.proto.DevInfo.site_id)
}
inline void DevInfo::set_site_id(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  site_id_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:com.zhichenhaixin.gps.proto.DevInfo.site_id)
}
inline std::string* DevInfo::_internal_mutable_site_id() {
  _has_bits_[0] |= 0x00000001u;
  return site_id_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* DevInfo::release_site_id() {
  // @@protoc_insertion_point(field_release:com.zhichenhaixin.gps.proto.DevInfo.site_id)
  if (!_internal_has_site_id()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return site_id_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void DevInfo::set_allocated_site_id(std::string* site_id) {
  if (site_id != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  site_id_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), site_id,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:com.zhichenhaixin.gps.proto.DevInfo.site_id)
}
inline std::string* DevInfo::unsafe_arena_release_site_id() {
  // @@protoc_insertion_point(field_unsafe_arena_release:com.zhichenhaixin.gps.proto.DevInfo.site_id)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000001u;
  return site_id_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void DevInfo::unsafe_arena_set_allocated_site_id(
    std::string* site_id) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (site_id != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  site_id_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      site_id, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:com.zhichenhaixin.gps.proto.DevInfo.site_id)
}

// required int64 cur_utc_time = 10;
inline bool DevInfo::_internal_has_cur_utc_time() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool DevInfo::has_cur_utc_time() const {
  return _internal_has_cur_utc_time();
}
inline void DevInfo::clear_cur_utc_time() {
  cur_utc_time_ = PROTOBUF_LONGLONG(0);
  _has_bits_[0] &= ~0x00000100u;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 DevInfo::_internal_cur_utc_time() const {
  return cur_utc_time_;
}
inline ::PROTOBUF_NAMESPACE_ID::int64 DevInfo::cur_utc_time() const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.gps.proto.DevInfo.cur_utc_time)
  return _internal_cur_utc_time();
}
inline void DevInfo::_internal_set_cur_utc_time(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _has_bits_[0] |= 0x00000100u;
  cur_utc_time_ = value;
}
inline void DevInfo::set_cur_utc_time(::PROTOBUF_NAMESPACE_ID::int64 value) {
  _internal_set_cur_utc_time(value);
  // @@protoc_insertion_point(field_set:com.zhichenhaixin.gps.proto.DevInfo.cur_utc_time)
}

// -------------------------------------------------------------------

// DevInfoList

// repeated .com.zhichenhaixin.gps.proto.DevInfo devInfo = 1;
inline int DevInfoList::_internal_devinfo_size() const {
  return devinfo_.size();
}
inline int DevInfoList::devinfo_size() const {
  return _internal_devinfo_size();
}
inline void DevInfoList::clear_devinfo() {
  devinfo_.Clear();
}
inline ::com::zhichenhaixin::gps::proto::DevInfo* DevInfoList::mutable_devinfo(int index) {
  // @@protoc_insertion_point(field_mutable:com.zhichenhaixin.gps.proto.DevInfoList.devInfo)
  return devinfo_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::zhichenhaixin::gps::proto::DevInfo >*
DevInfoList::mutable_devinfo() {
  // @@protoc_insertion_point(field_mutable_list:com.zhichenhaixin.gps.proto.DevInfoList.devInfo)
  return &devinfo_;
}
inline const ::com::zhichenhaixin::gps::proto::DevInfo& DevInfoList::_internal_devinfo(int index) const {
  return devinfo_.Get(index);
}
inline const ::com::zhichenhaixin::gps::proto::DevInfo& DevInfoList::devinfo(int index) const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.gps.proto.DevInfoList.devInfo)
  return _internal_devinfo(index);
}
inline ::com::zhichenhaixin::gps::proto::DevInfo* DevInfoList::_internal_add_devinfo() {
  return devinfo_.Add();
}
inline ::com::zhichenhaixin::gps::proto::DevInfo* DevInfoList::add_devinfo() {
  // @@protoc_insertion_point(field_add:com.zhichenhaixin.gps.proto.DevInfoList.devInfo)
  return _internal_add_devinfo();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::com::zhichenhaixin::gps::proto::DevInfo >&
DevInfoList::devinfo() const {
  // @@protoc_insertion_point(field_list:com.zhichenhaixin.gps.proto.DevInfoList.devInfo)
  return devinfo_;
}

// optional int32 length = 2;
inline bool DevInfoList::_internal_has_length() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool DevInfoList::has_length() const {
  return _internal_has_length();
}
inline void DevInfoList::clear_length() {
  length_ = 0;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DevInfoList::_internal_length() const {
  return length_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DevInfoList::length() const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.gps.proto.DevInfoList.length)
  return _internal_length();
}
inline void DevInfoList::_internal_set_length(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000001u;
  length_ = value;
}
inline void DevInfoList::set_length(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_length(value);
  // @@protoc_insertion_point(field_set:com.zhichenhaixin.gps.proto.DevInfoList.length)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace gps
}  // namespace zhichenhaixin
}  // namespace com

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_TWQMSComData_2eproto
