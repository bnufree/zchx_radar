// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: TWQMSComData.proto

#ifndef PROTOBUF_TWQMSComData_2eproto__INCLUDED
#define PROTOBUF_TWQMSComData_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace com {
namespace zhichenhaixin {
namespace gps {
namespace proto {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_TWQMSComData_2eproto();
void protobuf_AssignDesc_TWQMSComData_2eproto();
void protobuf_ShutdownFile_TWQMSComData_2eproto();

class GPS;
class ZS;
class RDO;
class ORP;
class DDM;
class NHN;
class WL;
class DevInfo;
class DevInfoList;

// ===================================================================

class GPS : public ::google::protobuf::Message {
 public:
  GPS();
  virtual ~GPS();

  GPS(const GPS& from);

  inline GPS& operator=(const GPS& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GPS& default_instance();

  void Swap(GPS* other);

  // implements Message ----------------------------------------------

  GPS* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GPS& from);
  void MergeFrom(const GPS& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int64 ship_update_time = 1;
  inline bool has_ship_update_time() const;
  inline void clear_ship_update_time();
  static const int kShipUpdateTimeFieldNumber = 1;
  inline ::google::protobuf::int64 ship_update_time() const;
  inline void set_ship_update_time(::google::protobuf::int64 value);

  // required double ship_lat = 2;
  inline bool has_ship_lat() const;
  inline void clear_ship_lat();
  static const int kShipLatFieldNumber = 2;
  inline double ship_lat() const;
  inline void set_ship_lat(double value);

  // required double ship_lon = 3;
  inline bool has_ship_lon() const;
  inline void clear_ship_lon();
  static const int kShipLonFieldNumber = 3;
  inline double ship_lon() const;
  inline void set_ship_lon(double value);

  // required double ship_speed = 4;
  inline bool has_ship_speed() const;
  inline void clear_ship_speed();
  static const int kShipSpeedFieldNumber = 4;
  inline double ship_speed() const;
  inline void set_ship_speed(double value);

  // required double ship_head = 5;
  inline bool has_ship_head() const;
  inline void clear_ship_head();
  static const int kShipHeadFieldNumber = 5;
  inline double ship_head() const;
  inline void set_ship_head(double value);

  // required double ship_course = 6;
  inline bool has_ship_course() const;
  inline void clear_ship_course();
  static const int kShipCourseFieldNumber = 6;
  inline double ship_course() const;
  inline void set_ship_course(double value);

  // required bool sts = 7;
  inline bool has_sts() const;
  inline void clear_sts();
  static const int kStsFieldNumber = 7;
  inline bool sts() const;
  inline void set_sts(bool value);

  // required string ship_id = 8;
  inline bool has_ship_id() const;
  inline void clear_ship_id();
  static const int kShipIdFieldNumber = 8;
  inline const ::std::string& ship_id() const;
  inline void set_ship_id(const ::std::string& value);
  inline void set_ship_id(const char* value);
  inline void set_ship_id(const char* value, size_t size);
  inline ::std::string* mutable_ship_id();
  inline ::std::string* release_ship_id();
  inline void set_allocated_ship_id(::std::string* ship_id);

  // @@protoc_insertion_point(class_scope:com.zhichenhaixin.gps.proto.GPS)
 private:
  inline void set_has_ship_update_time();
  inline void clear_has_ship_update_time();
  inline void set_has_ship_lat();
  inline void clear_has_ship_lat();
  inline void set_has_ship_lon();
  inline void clear_has_ship_lon();
  inline void set_has_ship_speed();
  inline void clear_has_ship_speed();
  inline void set_has_ship_head();
  inline void clear_has_ship_head();
  inline void set_has_ship_course();
  inline void clear_has_ship_course();
  inline void set_has_sts();
  inline void clear_has_sts();
  inline void set_has_ship_id();
  inline void clear_has_ship_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int64 ship_update_time_;
  double ship_lat_;
  double ship_lon_;
  double ship_speed_;
  double ship_head_;
  double ship_course_;
  ::std::string* ship_id_;
  bool sts_;
  friend void  protobuf_AddDesc_TWQMSComData_2eproto();
  friend void protobuf_AssignDesc_TWQMSComData_2eproto();
  friend void protobuf_ShutdownFile_TWQMSComData_2eproto();

  void InitAsDefaultInstance();
  static GPS* default_instance_;
};
// -------------------------------------------------------------------

class ZS : public ::google::protobuf::Message {
 public:
  ZS();
  virtual ~ZS();

  ZS(const ZS& from);

  inline ZS& operator=(const ZS& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ZS& default_instance();

  void Swap(ZS* other);

  // implements Message ----------------------------------------------

  ZS* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ZS& from);
  void MergeFrom(const ZS& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required double ZS = 1;
  inline bool has_zs() const;
  inline void clear_zs();
  static const int kZSFieldNumber = 1;
  inline double zs() const;
  inline void set_zs(double value);

  // required double TEMP = 2;
  inline bool has_temp() const;
  inline void clear_temp();
  static const int kTEMPFieldNumber = 2;
  inline double temp() const;
  inline void set_temp(double value);

  // required int64 time = 3;
  inline bool has_time() const;
  inline void clear_time();
  static const int kTimeFieldNumber = 3;
  inline ::google::protobuf::int64 time() const;
  inline void set_time(::google::protobuf::int64 value);

  // required bool sts = 4;
  inline bool has_sts() const;
  inline void clear_sts();
  static const int kStsFieldNumber = 4;
  inline bool sts() const;
  inline void set_sts(bool value);

  // @@protoc_insertion_point(class_scope:com.zhichenhaixin.gps.proto.ZS)
 private:
  inline void set_has_zs();
  inline void clear_has_zs();
  inline void set_has_temp();
  inline void clear_has_temp();
  inline void set_has_time();
  inline void clear_has_time();
  inline void set_has_sts();
  inline void clear_has_sts();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  double zs_;
  double temp_;
  ::google::protobuf::int64 time_;
  bool sts_;
  friend void  protobuf_AddDesc_TWQMSComData_2eproto();
  friend void protobuf_AssignDesc_TWQMSComData_2eproto();
  friend void protobuf_ShutdownFile_TWQMSComData_2eproto();

  void InitAsDefaultInstance();
  static ZS* default_instance_;
};
// -------------------------------------------------------------------

class RDO : public ::google::protobuf::Message {
 public:
  RDO();
  virtual ~RDO();

  RDO(const RDO& from);

  inline RDO& operator=(const RDO& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RDO& default_instance();

  void Swap(RDO* other);

  // implements Message ----------------------------------------------

  RDO* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RDO& from);
  void MergeFrom(const RDO& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required double RDO = 1;
  inline bool has_rdo() const;
  inline void clear_rdo();
  static const int kRDOFieldNumber = 1;
  inline double rdo() const;
  inline void set_rdo(double value);

  // required double TEMP = 2;
  inline bool has_temp() const;
  inline void clear_temp();
  static const int kTEMPFieldNumber = 2;
  inline double temp() const;
  inline void set_temp(double value);

  // required int64 time = 3;
  inline bool has_time() const;
  inline void clear_time();
  static const int kTimeFieldNumber = 3;
  inline ::google::protobuf::int64 time() const;
  inline void set_time(::google::protobuf::int64 value);

  // required bool sts = 4;
  inline bool has_sts() const;
  inline void clear_sts();
  static const int kStsFieldNumber = 4;
  inline bool sts() const;
  inline void set_sts(bool value);

  // @@protoc_insertion_point(class_scope:com.zhichenhaixin.gps.proto.RDO)
 private:
  inline void set_has_rdo();
  inline void clear_has_rdo();
  inline void set_has_temp();
  inline void clear_has_temp();
  inline void set_has_time();
  inline void clear_has_time();
  inline void set_has_sts();
  inline void clear_has_sts();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  double rdo_;
  double temp_;
  ::google::protobuf::int64 time_;
  bool sts_;
  friend void  protobuf_AddDesc_TWQMSComData_2eproto();
  friend void protobuf_AssignDesc_TWQMSComData_2eproto();
  friend void protobuf_ShutdownFile_TWQMSComData_2eproto();

  void InitAsDefaultInstance();
  static RDO* default_instance_;
};
// -------------------------------------------------------------------

class ORP : public ::google::protobuf::Message {
 public:
  ORP();
  virtual ~ORP();

  ORP(const ORP& from);

  inline ORP& operator=(const ORP& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ORP& default_instance();

  void Swap(ORP* other);

  // implements Message ----------------------------------------------

  ORP* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ORP& from);
  void MergeFrom(const ORP& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required double ORP = 1;
  inline bool has_orp() const;
  inline void clear_orp();
  static const int kORPFieldNumber = 1;
  inline double orp() const;
  inline void set_orp(double value);

  // required int64 time = 2;
  inline bool has_time() const;
  inline void clear_time();
  static const int kTimeFieldNumber = 2;
  inline ::google::protobuf::int64 time() const;
  inline void set_time(::google::protobuf::int64 value);

  // required bool sts = 3;
  inline bool has_sts() const;
  inline void clear_sts();
  static const int kStsFieldNumber = 3;
  inline bool sts() const;
  inline void set_sts(bool value);

  // @@protoc_insertion_point(class_scope:com.zhichenhaixin.gps.proto.ORP)
 private:
  inline void set_has_orp();
  inline void clear_has_orp();
  inline void set_has_time();
  inline void clear_has_time();
  inline void set_has_sts();
  inline void clear_has_sts();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  double orp_;
  ::google::protobuf::int64 time_;
  bool sts_;
  friend void  protobuf_AddDesc_TWQMSComData_2eproto();
  friend void protobuf_AssignDesc_TWQMSComData_2eproto();
  friend void protobuf_ShutdownFile_TWQMSComData_2eproto();

  void InitAsDefaultInstance();
  static ORP* default_instance_;
};
// -------------------------------------------------------------------

class DDM : public ::google::protobuf::Message {
 public:
  DDM();
  virtual ~DDM();

  DDM(const DDM& from);

  inline DDM& operator=(const DDM& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DDM& default_instance();

  void Swap(DDM* other);

  // implements Message ----------------------------------------------

  DDM* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DDM& from);
  void MergeFrom(const DDM& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required double DDM = 1;
  inline bool has_ddm() const;
  inline void clear_ddm();
  static const int kDDMFieldNumber = 1;
  inline double ddm() const;
  inline void set_ddm(double value);

  // required double TEMP = 2;
  inline bool has_temp() const;
  inline void clear_temp();
  static const int kTEMPFieldNumber = 2;
  inline double temp() const;
  inline void set_temp(double value);

  // required int64 time = 3;
  inline bool has_time() const;
  inline void clear_time();
  static const int kTimeFieldNumber = 3;
  inline ::google::protobuf::int64 time() const;
  inline void set_time(::google::protobuf::int64 value);

  // required bool sts = 4;
  inline bool has_sts() const;
  inline void clear_sts();
  static const int kStsFieldNumber = 4;
  inline bool sts() const;
  inline void set_sts(bool value);

  // @@protoc_insertion_point(class_scope:com.zhichenhaixin.gps.proto.DDM)
 private:
  inline void set_has_ddm();
  inline void clear_has_ddm();
  inline void set_has_temp();
  inline void clear_has_temp();
  inline void set_has_time();
  inline void clear_has_time();
  inline void set_has_sts();
  inline void clear_has_sts();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  double ddm_;
  double temp_;
  ::google::protobuf::int64 time_;
  bool sts_;
  friend void  protobuf_AddDesc_TWQMSComData_2eproto();
  friend void protobuf_AssignDesc_TWQMSComData_2eproto();
  friend void protobuf_ShutdownFile_TWQMSComData_2eproto();

  void InitAsDefaultInstance();
  static DDM* default_instance_;
};
// -------------------------------------------------------------------

class NHN : public ::google::protobuf::Message {
 public:
  NHN();
  virtual ~NHN();

  NHN(const NHN& from);

  inline NHN& operator=(const NHN& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const NHN& default_instance();

  void Swap(NHN* other);

  // implements Message ----------------------------------------------

  NHN* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const NHN& from);
  void MergeFrom(const NHN& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required double NHN = 1;
  inline bool has_nhn() const;
  inline void clear_nhn();
  static const int kNHNFieldNumber = 1;
  inline double nhn() const;
  inline void set_nhn(double value);

  // required double TEMP = 2;
  inline bool has_temp() const;
  inline void clear_temp();
  static const int kTEMPFieldNumber = 2;
  inline double temp() const;
  inline void set_temp(double value);

  // required int64 time = 3;
  inline bool has_time() const;
  inline void clear_time();
  static const int kTimeFieldNumber = 3;
  inline ::google::protobuf::int64 time() const;
  inline void set_time(::google::protobuf::int64 value);

  // required bool sts = 4;
  inline bool has_sts() const;
  inline void clear_sts();
  static const int kStsFieldNumber = 4;
  inline bool sts() const;
  inline void set_sts(bool value);

  // @@protoc_insertion_point(class_scope:com.zhichenhaixin.gps.proto.NHN)
 private:
  inline void set_has_nhn();
  inline void clear_has_nhn();
  inline void set_has_temp();
  inline void clear_has_temp();
  inline void set_has_time();
  inline void clear_has_time();
  inline void set_has_sts();
  inline void clear_has_sts();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  double nhn_;
  double temp_;
  ::google::protobuf::int64 time_;
  bool sts_;
  friend void  protobuf_AddDesc_TWQMSComData_2eproto();
  friend void protobuf_AssignDesc_TWQMSComData_2eproto();
  friend void protobuf_ShutdownFile_TWQMSComData_2eproto();

  void InitAsDefaultInstance();
  static NHN* default_instance_;
};
// -------------------------------------------------------------------

class WL : public ::google::protobuf::Message {
 public:
  WL();
  virtual ~WL();

  WL(const WL& from);

  inline WL& operator=(const WL& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const WL& default_instance();

  void Swap(WL* other);

  // implements Message ----------------------------------------------

  WL* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const WL& from);
  void MergeFrom(const WL& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required double PRESS = 1;
  inline bool has_press() const;
  inline void clear_press();
  static const int kPRESSFieldNumber = 1;
  inline double press() const;
  inline void set_press(double value);

  // required double TEMP = 2;
  inline bool has_temp() const;
  inline void clear_temp();
  static const int kTEMPFieldNumber = 2;
  inline double temp() const;
  inline void set_temp(double value);

  // required double LVL = 3;
  inline bool has_lvl() const;
  inline void clear_lvl();
  static const int kLVLFieldNumber = 3;
  inline double lvl() const;
  inline void set_lvl(double value);

  // required int64 time = 4;
  inline bool has_time() const;
  inline void clear_time();
  static const int kTimeFieldNumber = 4;
  inline ::google::protobuf::int64 time() const;
  inline void set_time(::google::protobuf::int64 value);

  // required bool sts = 5;
  inline bool has_sts() const;
  inline void clear_sts();
  static const int kStsFieldNumber = 5;
  inline bool sts() const;
  inline void set_sts(bool value);

  // @@protoc_insertion_point(class_scope:com.zhichenhaixin.gps.proto.WL)
 private:
  inline void set_has_press();
  inline void clear_has_press();
  inline void set_has_temp();
  inline void clear_has_temp();
  inline void set_has_lvl();
  inline void clear_has_lvl();
  inline void set_has_time();
  inline void clear_has_time();
  inline void set_has_sts();
  inline void clear_has_sts();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  double press_;
  double temp_;
  double lvl_;
  ::google::protobuf::int64 time_;
  bool sts_;
  friend void  protobuf_AddDesc_TWQMSComData_2eproto();
  friend void protobuf_AssignDesc_TWQMSComData_2eproto();
  friend void protobuf_ShutdownFile_TWQMSComData_2eproto();

  void InitAsDefaultInstance();
  static WL* default_instance_;
};
// -------------------------------------------------------------------

class DevInfo : public ::google::protobuf::Message {
 public:
  DevInfo();
  virtual ~DevInfo();

  DevInfo(const DevInfo& from);

  inline DevInfo& operator=(const DevInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DevInfo& default_instance();

  void Swap(DevInfo* other);

  // implements Message ----------------------------------------------

  DevInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DevInfo& from);
  void MergeFrom(const DevInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .com.zhichenhaixin.gps.proto.GPS gps_info = 1;
  inline bool has_gps_info() const;
  inline void clear_gps_info();
  static const int kGpsInfoFieldNumber = 1;
  inline const ::com::zhichenhaixin::gps::proto::GPS& gps_info() const;
  inline ::com::zhichenhaixin::gps::proto::GPS* mutable_gps_info();
  inline ::com::zhichenhaixin::gps::proto::GPS* release_gps_info();
  inline void set_allocated_gps_info(::com::zhichenhaixin::gps::proto::GPS* gps_info);

  // required .com.zhichenhaixin.gps.proto.ZS zs_info = 2;
  inline bool has_zs_info() const;
  inline void clear_zs_info();
  static const int kZsInfoFieldNumber = 2;
  inline const ::com::zhichenhaixin::gps::proto::ZS& zs_info() const;
  inline ::com::zhichenhaixin::gps::proto::ZS* mutable_zs_info();
  inline ::com::zhichenhaixin::gps::proto::ZS* release_zs_info();
  inline void set_allocated_zs_info(::com::zhichenhaixin::gps::proto::ZS* zs_info);

  // required .com.zhichenhaixin.gps.proto.RDO rdo_info = 3;
  inline bool has_rdo_info() const;
  inline void clear_rdo_info();
  static const int kRdoInfoFieldNumber = 3;
  inline const ::com::zhichenhaixin::gps::proto::RDO& rdo_info() const;
  inline ::com::zhichenhaixin::gps::proto::RDO* mutable_rdo_info();
  inline ::com::zhichenhaixin::gps::proto::RDO* release_rdo_info();
  inline void set_allocated_rdo_info(::com::zhichenhaixin::gps::proto::RDO* rdo_info);

  // required .com.zhichenhaixin.gps.proto.ORP orp_info = 4;
  inline bool has_orp_info() const;
  inline void clear_orp_info();
  static const int kOrpInfoFieldNumber = 4;
  inline const ::com::zhichenhaixin::gps::proto::ORP& orp_info() const;
  inline ::com::zhichenhaixin::gps::proto::ORP* mutable_orp_info();
  inline ::com::zhichenhaixin::gps::proto::ORP* release_orp_info();
  inline void set_allocated_orp_info(::com::zhichenhaixin::gps::proto::ORP* orp_info);

  // required .com.zhichenhaixin.gps.proto.DDM ddm_info = 5;
  inline bool has_ddm_info() const;
  inline void clear_ddm_info();
  static const int kDdmInfoFieldNumber = 5;
  inline const ::com::zhichenhaixin::gps::proto::DDM& ddm_info() const;
  inline ::com::zhichenhaixin::gps::proto::DDM* mutable_ddm_info();
  inline ::com::zhichenhaixin::gps::proto::DDM* release_ddm_info();
  inline void set_allocated_ddm_info(::com::zhichenhaixin::gps::proto::DDM* ddm_info);

  // required .com.zhichenhaixin.gps.proto.NHN nhn_info = 7;
  inline bool has_nhn_info() const;
  inline void clear_nhn_info();
  static const int kNhnInfoFieldNumber = 7;
  inline const ::com::zhichenhaixin::gps::proto::NHN& nhn_info() const;
  inline ::com::zhichenhaixin::gps::proto::NHN* mutable_nhn_info();
  inline ::com::zhichenhaixin::gps::proto::NHN* release_nhn_info();
  inline void set_allocated_nhn_info(::com::zhichenhaixin::gps::proto::NHN* nhn_info);

  // required .com.zhichenhaixin.gps.proto.WL wl_info = 8;
  inline bool has_wl_info() const;
  inline void clear_wl_info();
  static const int kWlInfoFieldNumber = 8;
  inline const ::com::zhichenhaixin::gps::proto::WL& wl_info() const;
  inline ::com::zhichenhaixin::gps::proto::WL* mutable_wl_info();
  inline ::com::zhichenhaixin::gps::proto::WL* release_wl_info();
  inline void set_allocated_wl_info(::com::zhichenhaixin::gps::proto::WL* wl_info);

  // required string site_id = 9;
  inline bool has_site_id() const;
  inline void clear_site_id();
  static const int kSiteIdFieldNumber = 9;
  inline const ::std::string& site_id() const;
  inline void set_site_id(const ::std::string& value);
  inline void set_site_id(const char* value);
  inline void set_site_id(const char* value, size_t size);
  inline ::std::string* mutable_site_id();
  inline ::std::string* release_site_id();
  inline void set_allocated_site_id(::std::string* site_id);

  // required int64 cur_utc_time = 10;
  inline bool has_cur_utc_time() const;
  inline void clear_cur_utc_time();
  static const int kCurUtcTimeFieldNumber = 10;
  inline ::google::protobuf::int64 cur_utc_time() const;
  inline void set_cur_utc_time(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:com.zhichenhaixin.gps.proto.DevInfo)
 private:
  inline void set_has_gps_info();
  inline void clear_has_gps_info();
  inline void set_has_zs_info();
  inline void clear_has_zs_info();
  inline void set_has_rdo_info();
  inline void clear_has_rdo_info();
  inline void set_has_orp_info();
  inline void clear_has_orp_info();
  inline void set_has_ddm_info();
  inline void clear_has_ddm_info();
  inline void set_has_nhn_info();
  inline void clear_has_nhn_info();
  inline void set_has_wl_info();
  inline void clear_has_wl_info();
  inline void set_has_site_id();
  inline void clear_has_site_id();
  inline void set_has_cur_utc_time();
  inline void clear_has_cur_utc_time();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::com::zhichenhaixin::gps::proto::GPS* gps_info_;
  ::com::zhichenhaixin::gps::proto::ZS* zs_info_;
  ::com::zhichenhaixin::gps::proto::RDO* rdo_info_;
  ::com::zhichenhaixin::gps::proto::ORP* orp_info_;
  ::com::zhichenhaixin::gps::proto::DDM* ddm_info_;
  ::com::zhichenhaixin::gps::proto::NHN* nhn_info_;
  ::com::zhichenhaixin::gps::proto::WL* wl_info_;
  ::std::string* site_id_;
  ::google::protobuf::int64 cur_utc_time_;
  friend void  protobuf_AddDesc_TWQMSComData_2eproto();
  friend void protobuf_AssignDesc_TWQMSComData_2eproto();
  friend void protobuf_ShutdownFile_TWQMSComData_2eproto();

  void InitAsDefaultInstance();
  static DevInfo* default_instance_;
};
// -------------------------------------------------------------------

class DevInfoList : public ::google::protobuf::Message {
 public:
  DevInfoList();
  virtual ~DevInfoList();

  DevInfoList(const DevInfoList& from);

  inline DevInfoList& operator=(const DevInfoList& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DevInfoList& default_instance();

  void Swap(DevInfoList* other);

  // implements Message ----------------------------------------------

  DevInfoList* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DevInfoList& from);
  void MergeFrom(const DevInfoList& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .com.zhichenhaixin.gps.proto.DevInfo devInfo = 1;
  inline int devinfo_size() const;
  inline void clear_devinfo();
  static const int kDevInfoFieldNumber = 1;
  inline const ::com::zhichenhaixin::gps::proto::DevInfo& devinfo(int index) const;
  inline ::com::zhichenhaixin::gps::proto::DevInfo* mutable_devinfo(int index);
  inline ::com::zhichenhaixin::gps::proto::DevInfo* add_devinfo();
  inline const ::google::protobuf::RepeatedPtrField< ::com::zhichenhaixin::gps::proto::DevInfo >&
      devinfo() const;
  inline ::google::protobuf::RepeatedPtrField< ::com::zhichenhaixin::gps::proto::DevInfo >*
      mutable_devinfo();

  // optional int32 length = 2;
  inline bool has_length() const;
  inline void clear_length();
  static const int kLengthFieldNumber = 2;
  inline ::google::protobuf::int32 length() const;
  inline void set_length(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:com.zhichenhaixin.gps.proto.DevInfoList)
 private:
  inline void set_has_length();
  inline void clear_has_length();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::RepeatedPtrField< ::com::zhichenhaixin::gps::proto::DevInfo > devinfo_;
  ::google::protobuf::int32 length_;
  friend void  protobuf_AddDesc_TWQMSComData_2eproto();
  friend void protobuf_AssignDesc_TWQMSComData_2eproto();
  friend void protobuf_ShutdownFile_TWQMSComData_2eproto();

  void InitAsDefaultInstance();
  static DevInfoList* default_instance_;
};
// ===================================================================


// ===================================================================

// GPS

// required int64 ship_update_time = 1;
inline bool GPS::has_ship_update_time() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GPS::set_has_ship_update_time() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GPS::clear_has_ship_update_time() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GPS::clear_ship_update_time() {
  ship_update_time_ = GOOGLE_LONGLONG(0);
  clear_has_ship_update_time();
}
inline ::google::protobuf::int64 GPS::ship_update_time() const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.gps.proto.GPS.ship_update_time)
  return ship_update_time_;
}
inline void GPS::set_ship_update_time(::google::protobuf::int64 value) {
  set_has_ship_update_time();
  ship_update_time_ = value;
  // @@protoc_insertion_point(field_set:com.zhichenhaixin.gps.proto.GPS.ship_update_time)
}

// required double ship_lat = 2;
inline bool GPS::has_ship_lat() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GPS::set_has_ship_lat() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GPS::clear_has_ship_lat() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GPS::clear_ship_lat() {
  ship_lat_ = 0;
  clear_has_ship_lat();
}
inline double GPS::ship_lat() const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.gps.proto.GPS.ship_lat)
  return ship_lat_;
}
inline void GPS::set_ship_lat(double value) {
  set_has_ship_lat();
  ship_lat_ = value;
  // @@protoc_insertion_point(field_set:com.zhichenhaixin.gps.proto.GPS.ship_lat)
}

// required double ship_lon = 3;
inline bool GPS::has_ship_lon() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GPS::set_has_ship_lon() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GPS::clear_has_ship_lon() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GPS::clear_ship_lon() {
  ship_lon_ = 0;
  clear_has_ship_lon();
}
inline double GPS::ship_lon() const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.gps.proto.GPS.ship_lon)
  return ship_lon_;
}
inline void GPS::set_ship_lon(double value) {
  set_has_ship_lon();
  ship_lon_ = value;
  // @@protoc_insertion_point(field_set:com.zhichenhaixin.gps.proto.GPS.ship_lon)
}

// required double ship_speed = 4;
inline bool GPS::has_ship_speed() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void GPS::set_has_ship_speed() {
  _has_bits_[0] |= 0x00000008u;
}
inline void GPS::clear_has_ship_speed() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void GPS::clear_ship_speed() {
  ship_speed_ = 0;
  clear_has_ship_speed();
}
inline double GPS::ship_speed() const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.gps.proto.GPS.ship_speed)
  return ship_speed_;
}
inline void GPS::set_ship_speed(double value) {
  set_has_ship_speed();
  ship_speed_ = value;
  // @@protoc_insertion_point(field_set:com.zhichenhaixin.gps.proto.GPS.ship_speed)
}

// required double ship_head = 5;
inline bool GPS::has_ship_head() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void GPS::set_has_ship_head() {
  _has_bits_[0] |= 0x00000010u;
}
inline void GPS::clear_has_ship_head() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void GPS::clear_ship_head() {
  ship_head_ = 0;
  clear_has_ship_head();
}
inline double GPS::ship_head() const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.gps.proto.GPS.ship_head)
  return ship_head_;
}
inline void GPS::set_ship_head(double value) {
  set_has_ship_head();
  ship_head_ = value;
  // @@protoc_insertion_point(field_set:com.zhichenhaixin.gps.proto.GPS.ship_head)
}

// required double ship_course = 6;
inline bool GPS::has_ship_course() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void GPS::set_has_ship_course() {
  _has_bits_[0] |= 0x00000020u;
}
inline void GPS::clear_has_ship_course() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void GPS::clear_ship_course() {
  ship_course_ = 0;
  clear_has_ship_course();
}
inline double GPS::ship_course() const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.gps.proto.GPS.ship_course)
  return ship_course_;
}
inline void GPS::set_ship_course(double value) {
  set_has_ship_course();
  ship_course_ = value;
  // @@protoc_insertion_point(field_set:com.zhichenhaixin.gps.proto.GPS.ship_course)
}

// required bool sts = 7;
inline bool GPS::has_sts() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void GPS::set_has_sts() {
  _has_bits_[0] |= 0x00000040u;
}
inline void GPS::clear_has_sts() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void GPS::clear_sts() {
  sts_ = false;
  clear_has_sts();
}
inline bool GPS::sts() const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.gps.proto.GPS.sts)
  return sts_;
}
inline void GPS::set_sts(bool value) {
  set_has_sts();
  sts_ = value;
  // @@protoc_insertion_point(field_set:com.zhichenhaixin.gps.proto.GPS.sts)
}

// required string ship_id = 8;
inline bool GPS::has_ship_id() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void GPS::set_has_ship_id() {
  _has_bits_[0] |= 0x00000080u;
}
inline void GPS::clear_has_ship_id() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void GPS::clear_ship_id() {
  if (ship_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ship_id_->clear();
  }
  clear_has_ship_id();
}
inline const ::std::string& GPS::ship_id() const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.gps.proto.GPS.ship_id)
  return *ship_id_;
}
inline void GPS::set_ship_id(const ::std::string& value) {
  set_has_ship_id();
  if (ship_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ship_id_ = new ::std::string;
  }
  ship_id_->assign(value);
  // @@protoc_insertion_point(field_set:com.zhichenhaixin.gps.proto.GPS.ship_id)
}
inline void GPS::set_ship_id(const char* value) {
  set_has_ship_id();
  if (ship_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ship_id_ = new ::std::string;
  }
  ship_id_->assign(value);
  // @@protoc_insertion_point(field_set_char:com.zhichenhaixin.gps.proto.GPS.ship_id)
}
inline void GPS::set_ship_id(const char* value, size_t size) {
  set_has_ship_id();
  if (ship_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ship_id_ = new ::std::string;
  }
  ship_id_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:com.zhichenhaixin.gps.proto.GPS.ship_id)
}
inline ::std::string* GPS::mutable_ship_id() {
  set_has_ship_id();
  if (ship_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ship_id_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:com.zhichenhaixin.gps.proto.GPS.ship_id)
  return ship_id_;
}
inline ::std::string* GPS::release_ship_id() {
  clear_has_ship_id();
  if (ship_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = ship_id_;
    ship_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void GPS::set_allocated_ship_id(::std::string* ship_id) {
  if (ship_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete ship_id_;
  }
  if (ship_id) {
    set_has_ship_id();
    ship_id_ = ship_id;
  } else {
    clear_has_ship_id();
    ship_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:com.zhichenhaixin.gps.proto.GPS.ship_id)
}

// -------------------------------------------------------------------

// ZS

// required double ZS = 1;
inline bool ZS::has_zs() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ZS::set_has_zs() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ZS::clear_has_zs() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ZS::clear_zs() {
  zs_ = 0;
  clear_has_zs();
}
inline double ZS::zs() const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.gps.proto.ZS.ZS)
  return zs_;
}
inline void ZS::set_zs(double value) {
  set_has_zs();
  zs_ = value;
  // @@protoc_insertion_point(field_set:com.zhichenhaixin.gps.proto.ZS.ZS)
}

// required double TEMP = 2;
inline bool ZS::has_temp() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ZS::set_has_temp() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ZS::clear_has_temp() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ZS::clear_temp() {
  temp_ = 0;
  clear_has_temp();
}
inline double ZS::temp() const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.gps.proto.ZS.TEMP)
  return temp_;
}
inline void ZS::set_temp(double value) {
  set_has_temp();
  temp_ = value;
  // @@protoc_insertion_point(field_set:com.zhichenhaixin.gps.proto.ZS.TEMP)
}

// required int64 time = 3;
inline bool ZS::has_time() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ZS::set_has_time() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ZS::clear_has_time() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ZS::clear_time() {
  time_ = GOOGLE_LONGLONG(0);
  clear_has_time();
}
inline ::google::protobuf::int64 ZS::time() const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.gps.proto.ZS.time)
  return time_;
}
inline void ZS::set_time(::google::protobuf::int64 value) {
  set_has_time();
  time_ = value;
  // @@protoc_insertion_point(field_set:com.zhichenhaixin.gps.proto.ZS.time)
}

// required bool sts = 4;
inline bool ZS::has_sts() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ZS::set_has_sts() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ZS::clear_has_sts() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ZS::clear_sts() {
  sts_ = false;
  clear_has_sts();
}
inline bool ZS::sts() const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.gps.proto.ZS.sts)
  return sts_;
}
inline void ZS::set_sts(bool value) {
  set_has_sts();
  sts_ = value;
  // @@protoc_insertion_point(field_set:com.zhichenhaixin.gps.proto.ZS.sts)
}

// -------------------------------------------------------------------

// RDO

// required double RDO = 1;
inline bool RDO::has_rdo() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RDO::set_has_rdo() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RDO::clear_has_rdo() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RDO::clear_rdo() {
  rdo_ = 0;
  clear_has_rdo();
}
inline double RDO::rdo() const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.gps.proto.RDO.RDO)
  return rdo_;
}
inline void RDO::set_rdo(double value) {
  set_has_rdo();
  rdo_ = value;
  // @@protoc_insertion_point(field_set:com.zhichenhaixin.gps.proto.RDO.RDO)
}

// required double TEMP = 2;
inline bool RDO::has_temp() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RDO::set_has_temp() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RDO::clear_has_temp() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RDO::clear_temp() {
  temp_ = 0;
  clear_has_temp();
}
inline double RDO::temp() const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.gps.proto.RDO.TEMP)
  return temp_;
}
inline void RDO::set_temp(double value) {
  set_has_temp();
  temp_ = value;
  // @@protoc_insertion_point(field_set:com.zhichenhaixin.gps.proto.RDO.TEMP)
}

// required int64 time = 3;
inline bool RDO::has_time() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void RDO::set_has_time() {
  _has_bits_[0] |= 0x00000004u;
}
inline void RDO::clear_has_time() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void RDO::clear_time() {
  time_ = GOOGLE_LONGLONG(0);
  clear_has_time();
}
inline ::google::protobuf::int64 RDO::time() const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.gps.proto.RDO.time)
  return time_;
}
inline void RDO::set_time(::google::protobuf::int64 value) {
  set_has_time();
  time_ = value;
  // @@protoc_insertion_point(field_set:com.zhichenhaixin.gps.proto.RDO.time)
}

// required bool sts = 4;
inline bool RDO::has_sts() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void RDO::set_has_sts() {
  _has_bits_[0] |= 0x00000008u;
}
inline void RDO::clear_has_sts() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void RDO::clear_sts() {
  sts_ = false;
  clear_has_sts();
}
inline bool RDO::sts() const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.gps.proto.RDO.sts)
  return sts_;
}
inline void RDO::set_sts(bool value) {
  set_has_sts();
  sts_ = value;
  // @@protoc_insertion_point(field_set:com.zhichenhaixin.gps.proto.RDO.sts)
}

// -------------------------------------------------------------------

// ORP

// required double ORP = 1;
inline bool ORP::has_orp() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ORP::set_has_orp() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ORP::clear_has_orp() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ORP::clear_orp() {
  orp_ = 0;
  clear_has_orp();
}
inline double ORP::orp() const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.gps.proto.ORP.ORP)
  return orp_;
}
inline void ORP::set_orp(double value) {
  set_has_orp();
  orp_ = value;
  // @@protoc_insertion_point(field_set:com.zhichenhaixin.gps.proto.ORP.ORP)
}

// required int64 time = 2;
inline bool ORP::has_time() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ORP::set_has_time() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ORP::clear_has_time() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ORP::clear_time() {
  time_ = GOOGLE_LONGLONG(0);
  clear_has_time();
}
inline ::google::protobuf::int64 ORP::time() const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.gps.proto.ORP.time)
  return time_;
}
inline void ORP::set_time(::google::protobuf::int64 value) {
  set_has_time();
  time_ = value;
  // @@protoc_insertion_point(field_set:com.zhichenhaixin.gps.proto.ORP.time)
}

// required bool sts = 3;
inline bool ORP::has_sts() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ORP::set_has_sts() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ORP::clear_has_sts() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ORP::clear_sts() {
  sts_ = false;
  clear_has_sts();
}
inline bool ORP::sts() const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.gps.proto.ORP.sts)
  return sts_;
}
inline void ORP::set_sts(bool value) {
  set_has_sts();
  sts_ = value;
  // @@protoc_insertion_point(field_set:com.zhichenhaixin.gps.proto.ORP.sts)
}

// -------------------------------------------------------------------

// DDM

// required double DDM = 1;
inline bool DDM::has_ddm() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DDM::set_has_ddm() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DDM::clear_has_ddm() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DDM::clear_ddm() {
  ddm_ = 0;
  clear_has_ddm();
}
inline double DDM::ddm() const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.gps.proto.DDM.DDM)
  return ddm_;
}
inline void DDM::set_ddm(double value) {
  set_has_ddm();
  ddm_ = value;
  // @@protoc_insertion_point(field_set:com.zhichenhaixin.gps.proto.DDM.DDM)
}

// required double TEMP = 2;
inline bool DDM::has_temp() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void DDM::set_has_temp() {
  _has_bits_[0] |= 0x00000002u;
}
inline void DDM::clear_has_temp() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void DDM::clear_temp() {
  temp_ = 0;
  clear_has_temp();
}
inline double DDM::temp() const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.gps.proto.DDM.TEMP)
  return temp_;
}
inline void DDM::set_temp(double value) {
  set_has_temp();
  temp_ = value;
  // @@protoc_insertion_point(field_set:com.zhichenhaixin.gps.proto.DDM.TEMP)
}

// required int64 time = 3;
inline bool DDM::has_time() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void DDM::set_has_time() {
  _has_bits_[0] |= 0x00000004u;
}
inline void DDM::clear_has_time() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void DDM::clear_time() {
  time_ = GOOGLE_LONGLONG(0);
  clear_has_time();
}
inline ::google::protobuf::int64 DDM::time() const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.gps.proto.DDM.time)
  return time_;
}
inline void DDM::set_time(::google::protobuf::int64 value) {
  set_has_time();
  time_ = value;
  // @@protoc_insertion_point(field_set:com.zhichenhaixin.gps.proto.DDM.time)
}

// required bool sts = 4;
inline bool DDM::has_sts() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void DDM::set_has_sts() {
  _has_bits_[0] |= 0x00000008u;
}
inline void DDM::clear_has_sts() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void DDM::clear_sts() {
  sts_ = false;
  clear_has_sts();
}
inline bool DDM::sts() const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.gps.proto.DDM.sts)
  return sts_;
}
inline void DDM::set_sts(bool value) {
  set_has_sts();
  sts_ = value;
  // @@protoc_insertion_point(field_set:com.zhichenhaixin.gps.proto.DDM.sts)
}

// -------------------------------------------------------------------

// NHN

// required double NHN = 1;
inline bool NHN::has_nhn() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void NHN::set_has_nhn() {
  _has_bits_[0] |= 0x00000001u;
}
inline void NHN::clear_has_nhn() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void NHN::clear_nhn() {
  nhn_ = 0;
  clear_has_nhn();
}
inline double NHN::nhn() const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.gps.proto.NHN.NHN)
  return nhn_;
}
inline void NHN::set_nhn(double value) {
  set_has_nhn();
  nhn_ = value;
  // @@protoc_insertion_point(field_set:com.zhichenhaixin.gps.proto.NHN.NHN)
}

// required double TEMP = 2;
inline bool NHN::has_temp() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void NHN::set_has_temp() {
  _has_bits_[0] |= 0x00000002u;
}
inline void NHN::clear_has_temp() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void NHN::clear_temp() {
  temp_ = 0;
  clear_has_temp();
}
inline double NHN::temp() const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.gps.proto.NHN.TEMP)
  return temp_;
}
inline void NHN::set_temp(double value) {
  set_has_temp();
  temp_ = value;
  // @@protoc_insertion_point(field_set:com.zhichenhaixin.gps.proto.NHN.TEMP)
}

// required int64 time = 3;
inline bool NHN::has_time() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void NHN::set_has_time() {
  _has_bits_[0] |= 0x00000004u;
}
inline void NHN::clear_has_time() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void NHN::clear_time() {
  time_ = GOOGLE_LONGLONG(0);
  clear_has_time();
}
inline ::google::protobuf::int64 NHN::time() const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.gps.proto.NHN.time)
  return time_;
}
inline void NHN::set_time(::google::protobuf::int64 value) {
  set_has_time();
  time_ = value;
  // @@protoc_insertion_point(field_set:com.zhichenhaixin.gps.proto.NHN.time)
}

// required bool sts = 4;
inline bool NHN::has_sts() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void NHN::set_has_sts() {
  _has_bits_[0] |= 0x00000008u;
}
inline void NHN::clear_has_sts() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void NHN::clear_sts() {
  sts_ = false;
  clear_has_sts();
}
inline bool NHN::sts() const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.gps.proto.NHN.sts)
  return sts_;
}
inline void NHN::set_sts(bool value) {
  set_has_sts();
  sts_ = value;
  // @@protoc_insertion_point(field_set:com.zhichenhaixin.gps.proto.NHN.sts)
}

// -------------------------------------------------------------------

// WL

// required double PRESS = 1;
inline bool WL::has_press() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void WL::set_has_press() {
  _has_bits_[0] |= 0x00000001u;
}
inline void WL::clear_has_press() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void WL::clear_press() {
  press_ = 0;
  clear_has_press();
}
inline double WL::press() const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.gps.proto.WL.PRESS)
  return press_;
}
inline void WL::set_press(double value) {
  set_has_press();
  press_ = value;
  // @@protoc_insertion_point(field_set:com.zhichenhaixin.gps.proto.WL.PRESS)
}

// required double TEMP = 2;
inline bool WL::has_temp() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void WL::set_has_temp() {
  _has_bits_[0] |= 0x00000002u;
}
inline void WL::clear_has_temp() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void WL::clear_temp() {
  temp_ = 0;
  clear_has_temp();
}
inline double WL::temp() const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.gps.proto.WL.TEMP)
  return temp_;
}
inline void WL::set_temp(double value) {
  set_has_temp();
  temp_ = value;
  // @@protoc_insertion_point(field_set:com.zhichenhaixin.gps.proto.WL.TEMP)
}

// required double LVL = 3;
inline bool WL::has_lvl() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void WL::set_has_lvl() {
  _has_bits_[0] |= 0x00000004u;
}
inline void WL::clear_has_lvl() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void WL::clear_lvl() {
  lvl_ = 0;
  clear_has_lvl();
}
inline double WL::lvl() const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.gps.proto.WL.LVL)
  return lvl_;
}
inline void WL::set_lvl(double value) {
  set_has_lvl();
  lvl_ = value;
  // @@protoc_insertion_point(field_set:com.zhichenhaixin.gps.proto.WL.LVL)
}

// required int64 time = 4;
inline bool WL::has_time() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void WL::set_has_time() {
  _has_bits_[0] |= 0x00000008u;
}
inline void WL::clear_has_time() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void WL::clear_time() {
  time_ = GOOGLE_LONGLONG(0);
  clear_has_time();
}
inline ::google::protobuf::int64 WL::time() const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.gps.proto.WL.time)
  return time_;
}
inline void WL::set_time(::google::protobuf::int64 value) {
  set_has_time();
  time_ = value;
  // @@protoc_insertion_point(field_set:com.zhichenhaixin.gps.proto.WL.time)
}

// required bool sts = 5;
inline bool WL::has_sts() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void WL::set_has_sts() {
  _has_bits_[0] |= 0x00000010u;
}
inline void WL::clear_has_sts() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void WL::clear_sts() {
  sts_ = false;
  clear_has_sts();
}
inline bool WL::sts() const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.gps.proto.WL.sts)
  return sts_;
}
inline void WL::set_sts(bool value) {
  set_has_sts();
  sts_ = value;
  // @@protoc_insertion_point(field_set:com.zhichenhaixin.gps.proto.WL.sts)
}

// -------------------------------------------------------------------

// DevInfo

// required .com.zhichenhaixin.gps.proto.GPS gps_info = 1;
inline bool DevInfo::has_gps_info() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DevInfo::set_has_gps_info() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DevInfo::clear_has_gps_info() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DevInfo::clear_gps_info() {
  if (gps_info_ != NULL) gps_info_->::com::zhichenhaixin::gps::proto::GPS::Clear();
  clear_has_gps_info();
}
inline const ::com::zhichenhaixin::gps::proto::GPS& DevInfo::gps_info() const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.gps.proto.DevInfo.gps_info)
  return gps_info_ != NULL ? *gps_info_ : *default_instance_->gps_info_;
}
inline ::com::zhichenhaixin::gps::proto::GPS* DevInfo::mutable_gps_info() {
  set_has_gps_info();
  if (gps_info_ == NULL) gps_info_ = new ::com::zhichenhaixin::gps::proto::GPS;
  // @@protoc_insertion_point(field_mutable:com.zhichenhaixin.gps.proto.DevInfo.gps_info)
  return gps_info_;
}
inline ::com::zhichenhaixin::gps::proto::GPS* DevInfo::release_gps_info() {
  clear_has_gps_info();
  ::com::zhichenhaixin::gps::proto::GPS* temp = gps_info_;
  gps_info_ = NULL;
  return temp;
}
inline void DevInfo::set_allocated_gps_info(::com::zhichenhaixin::gps::proto::GPS* gps_info) {
  delete gps_info_;
  gps_info_ = gps_info;
  if (gps_info) {
    set_has_gps_info();
  } else {
    clear_has_gps_info();
  }
  // @@protoc_insertion_point(field_set_allocated:com.zhichenhaixin.gps.proto.DevInfo.gps_info)
}

// required .com.zhichenhaixin.gps.proto.ZS zs_info = 2;
inline bool DevInfo::has_zs_info() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void DevInfo::set_has_zs_info() {
  _has_bits_[0] |= 0x00000002u;
}
inline void DevInfo::clear_has_zs_info() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void DevInfo::clear_zs_info() {
  if (zs_info_ != NULL) zs_info_->::com::zhichenhaixin::gps::proto::ZS::Clear();
  clear_has_zs_info();
}
inline const ::com::zhichenhaixin::gps::proto::ZS& DevInfo::zs_info() const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.gps.proto.DevInfo.zs_info)
  return zs_info_ != NULL ? *zs_info_ : *default_instance_->zs_info_;
}
inline ::com::zhichenhaixin::gps::proto::ZS* DevInfo::mutable_zs_info() {
  set_has_zs_info();
  if (zs_info_ == NULL) zs_info_ = new ::com::zhichenhaixin::gps::proto::ZS;
  // @@protoc_insertion_point(field_mutable:com.zhichenhaixin.gps.proto.DevInfo.zs_info)
  return zs_info_;
}
inline ::com::zhichenhaixin::gps::proto::ZS* DevInfo::release_zs_info() {
  clear_has_zs_info();
  ::com::zhichenhaixin::gps::proto::ZS* temp = zs_info_;
  zs_info_ = NULL;
  return temp;
}
inline void DevInfo::set_allocated_zs_info(::com::zhichenhaixin::gps::proto::ZS* zs_info) {
  delete zs_info_;
  zs_info_ = zs_info;
  if (zs_info) {
    set_has_zs_info();
  } else {
    clear_has_zs_info();
  }
  // @@protoc_insertion_point(field_set_allocated:com.zhichenhaixin.gps.proto.DevInfo.zs_info)
}

// required .com.zhichenhaixin.gps.proto.RDO rdo_info = 3;
inline bool DevInfo::has_rdo_info() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void DevInfo::set_has_rdo_info() {
  _has_bits_[0] |= 0x00000004u;
}
inline void DevInfo::clear_has_rdo_info() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void DevInfo::clear_rdo_info() {
  if (rdo_info_ != NULL) rdo_info_->::com::zhichenhaixin::gps::proto::RDO::Clear();
  clear_has_rdo_info();
}
inline const ::com::zhichenhaixin::gps::proto::RDO& DevInfo::rdo_info() const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.gps.proto.DevInfo.rdo_info)
  return rdo_info_ != NULL ? *rdo_info_ : *default_instance_->rdo_info_;
}
inline ::com::zhichenhaixin::gps::proto::RDO* DevInfo::mutable_rdo_info() {
  set_has_rdo_info();
  if (rdo_info_ == NULL) rdo_info_ = new ::com::zhichenhaixin::gps::proto::RDO;
  // @@protoc_insertion_point(field_mutable:com.zhichenhaixin.gps.proto.DevInfo.rdo_info)
  return rdo_info_;
}
inline ::com::zhichenhaixin::gps::proto::RDO* DevInfo::release_rdo_info() {
  clear_has_rdo_info();
  ::com::zhichenhaixin::gps::proto::RDO* temp = rdo_info_;
  rdo_info_ = NULL;
  return temp;
}
inline void DevInfo::set_allocated_rdo_info(::com::zhichenhaixin::gps::proto::RDO* rdo_info) {
  delete rdo_info_;
  rdo_info_ = rdo_info;
  if (rdo_info) {
    set_has_rdo_info();
  } else {
    clear_has_rdo_info();
  }
  // @@protoc_insertion_point(field_set_allocated:com.zhichenhaixin.gps.proto.DevInfo.rdo_info)
}

// required .com.zhichenhaixin.gps.proto.ORP orp_info = 4;
inline bool DevInfo::has_orp_info() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void DevInfo::set_has_orp_info() {
  _has_bits_[0] |= 0x00000008u;
}
inline void DevInfo::clear_has_orp_info() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void DevInfo::clear_orp_info() {
  if (orp_info_ != NULL) orp_info_->::com::zhichenhaixin::gps::proto::ORP::Clear();
  clear_has_orp_info();
}
inline const ::com::zhichenhaixin::gps::proto::ORP& DevInfo::orp_info() const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.gps.proto.DevInfo.orp_info)
  return orp_info_ != NULL ? *orp_info_ : *default_instance_->orp_info_;
}
inline ::com::zhichenhaixin::gps::proto::ORP* DevInfo::mutable_orp_info() {
  set_has_orp_info();
  if (orp_info_ == NULL) orp_info_ = new ::com::zhichenhaixin::gps::proto::ORP;
  // @@protoc_insertion_point(field_mutable:com.zhichenhaixin.gps.proto.DevInfo.orp_info)
  return orp_info_;
}
inline ::com::zhichenhaixin::gps::proto::ORP* DevInfo::release_orp_info() {
  clear_has_orp_info();
  ::com::zhichenhaixin::gps::proto::ORP* temp = orp_info_;
  orp_info_ = NULL;
  return temp;
}
inline void DevInfo::set_allocated_orp_info(::com::zhichenhaixin::gps::proto::ORP* orp_info) {
  delete orp_info_;
  orp_info_ = orp_info;
  if (orp_info) {
    set_has_orp_info();
  } else {
    clear_has_orp_info();
  }
  // @@protoc_insertion_point(field_set_allocated:com.zhichenhaixin.gps.proto.DevInfo.orp_info)
}

// required .com.zhichenhaixin.gps.proto.DDM ddm_info = 5;
inline bool DevInfo::has_ddm_info() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void DevInfo::set_has_ddm_info() {
  _has_bits_[0] |= 0x00000010u;
}
inline void DevInfo::clear_has_ddm_info() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void DevInfo::clear_ddm_info() {
  if (ddm_info_ != NULL) ddm_info_->::com::zhichenhaixin::gps::proto::DDM::Clear();
  clear_has_ddm_info();
}
inline const ::com::zhichenhaixin::gps::proto::DDM& DevInfo::ddm_info() const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.gps.proto.DevInfo.ddm_info)
  return ddm_info_ != NULL ? *ddm_info_ : *default_instance_->ddm_info_;
}
inline ::com::zhichenhaixin::gps::proto::DDM* DevInfo::mutable_ddm_info() {
  set_has_ddm_info();
  if (ddm_info_ == NULL) ddm_info_ = new ::com::zhichenhaixin::gps::proto::DDM;
  // @@protoc_insertion_point(field_mutable:com.zhichenhaixin.gps.proto.DevInfo.ddm_info)
  return ddm_info_;
}
inline ::com::zhichenhaixin::gps::proto::DDM* DevInfo::release_ddm_info() {
  clear_has_ddm_info();
  ::com::zhichenhaixin::gps::proto::DDM* temp = ddm_info_;
  ddm_info_ = NULL;
  return temp;
}
inline void DevInfo::set_allocated_ddm_info(::com::zhichenhaixin::gps::proto::DDM* ddm_info) {
  delete ddm_info_;
  ddm_info_ = ddm_info;
  if (ddm_info) {
    set_has_ddm_info();
  } else {
    clear_has_ddm_info();
  }
  // @@protoc_insertion_point(field_set_allocated:com.zhichenhaixin.gps.proto.DevInfo.ddm_info)
}

// required .com.zhichenhaixin.gps.proto.NHN nhn_info = 7;
inline bool DevInfo::has_nhn_info() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void DevInfo::set_has_nhn_info() {
  _has_bits_[0] |= 0x00000020u;
}
inline void DevInfo::clear_has_nhn_info() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void DevInfo::clear_nhn_info() {
  if (nhn_info_ != NULL) nhn_info_->::com::zhichenhaixin::gps::proto::NHN::Clear();
  clear_has_nhn_info();
}
inline const ::com::zhichenhaixin::gps::proto::NHN& DevInfo::nhn_info() const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.gps.proto.DevInfo.nhn_info)
  return nhn_info_ != NULL ? *nhn_info_ : *default_instance_->nhn_info_;
}
inline ::com::zhichenhaixin::gps::proto::NHN* DevInfo::mutable_nhn_info() {
  set_has_nhn_info();
  if (nhn_info_ == NULL) nhn_info_ = new ::com::zhichenhaixin::gps::proto::NHN;
  // @@protoc_insertion_point(field_mutable:com.zhichenhaixin.gps.proto.DevInfo.nhn_info)
  return nhn_info_;
}
inline ::com::zhichenhaixin::gps::proto::NHN* DevInfo::release_nhn_info() {
  clear_has_nhn_info();
  ::com::zhichenhaixin::gps::proto::NHN* temp = nhn_info_;
  nhn_info_ = NULL;
  return temp;
}
inline void DevInfo::set_allocated_nhn_info(::com::zhichenhaixin::gps::proto::NHN* nhn_info) {
  delete nhn_info_;
  nhn_info_ = nhn_info;
  if (nhn_info) {
    set_has_nhn_info();
  } else {
    clear_has_nhn_info();
  }
  // @@protoc_insertion_point(field_set_allocated:com.zhichenhaixin.gps.proto.DevInfo.nhn_info)
}

// required .com.zhichenhaixin.gps.proto.WL wl_info = 8;
inline bool DevInfo::has_wl_info() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void DevInfo::set_has_wl_info() {
  _has_bits_[0] |= 0x00000040u;
}
inline void DevInfo::clear_has_wl_info() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void DevInfo::clear_wl_info() {
  if (wl_info_ != NULL) wl_info_->::com::zhichenhaixin::gps::proto::WL::Clear();
  clear_has_wl_info();
}
inline const ::com::zhichenhaixin::gps::proto::WL& DevInfo::wl_info() const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.gps.proto.DevInfo.wl_info)
  return wl_info_ != NULL ? *wl_info_ : *default_instance_->wl_info_;
}
inline ::com::zhichenhaixin::gps::proto::WL* DevInfo::mutable_wl_info() {
  set_has_wl_info();
  if (wl_info_ == NULL) wl_info_ = new ::com::zhichenhaixin::gps::proto::WL;
  // @@protoc_insertion_point(field_mutable:com.zhichenhaixin.gps.proto.DevInfo.wl_info)
  return wl_info_;
}
inline ::com::zhichenhaixin::gps::proto::WL* DevInfo::release_wl_info() {
  clear_has_wl_info();
  ::com::zhichenhaixin::gps::proto::WL* temp = wl_info_;
  wl_info_ = NULL;
  return temp;
}
inline void DevInfo::set_allocated_wl_info(::com::zhichenhaixin::gps::proto::WL* wl_info) {
  delete wl_info_;
  wl_info_ = wl_info;
  if (wl_info) {
    set_has_wl_info();
  } else {
    clear_has_wl_info();
  }
  // @@protoc_insertion_point(field_set_allocated:com.zhichenhaixin.gps.proto.DevInfo.wl_info)
}

// required string site_id = 9;
inline bool DevInfo::has_site_id() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void DevInfo::set_has_site_id() {
  _has_bits_[0] |= 0x00000080u;
}
inline void DevInfo::clear_has_site_id() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void DevInfo::clear_site_id() {
  if (site_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    site_id_->clear();
  }
  clear_has_site_id();
}
inline const ::std::string& DevInfo::site_id() const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.gps.proto.DevInfo.site_id)
  return *site_id_;
}
inline void DevInfo::set_site_id(const ::std::string& value) {
  set_has_site_id();
  if (site_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    site_id_ = new ::std::string;
  }
  site_id_->assign(value);
  // @@protoc_insertion_point(field_set:com.zhichenhaixin.gps.proto.DevInfo.site_id)
}
inline void DevInfo::set_site_id(const char* value) {
  set_has_site_id();
  if (site_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    site_id_ = new ::std::string;
  }
  site_id_->assign(value);
  // @@protoc_insertion_point(field_set_char:com.zhichenhaixin.gps.proto.DevInfo.site_id)
}
inline void DevInfo::set_site_id(const char* value, size_t size) {
  set_has_site_id();
  if (site_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    site_id_ = new ::std::string;
  }
  site_id_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:com.zhichenhaixin.gps.proto.DevInfo.site_id)
}
inline ::std::string* DevInfo::mutable_site_id() {
  set_has_site_id();
  if (site_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    site_id_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:com.zhichenhaixin.gps.proto.DevInfo.site_id)
  return site_id_;
}
inline ::std::string* DevInfo::release_site_id() {
  clear_has_site_id();
  if (site_id_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = site_id_;
    site_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void DevInfo::set_allocated_site_id(::std::string* site_id) {
  if (site_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete site_id_;
  }
  if (site_id) {
    set_has_site_id();
    site_id_ = site_id;
  } else {
    clear_has_site_id();
    site_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:com.zhichenhaixin.gps.proto.DevInfo.site_id)
}

// required int64 cur_utc_time = 10;
inline bool DevInfo::has_cur_utc_time() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void DevInfo::set_has_cur_utc_time() {
  _has_bits_[0] |= 0x00000100u;
}
inline void DevInfo::clear_has_cur_utc_time() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void DevInfo::clear_cur_utc_time() {
  cur_utc_time_ = GOOGLE_LONGLONG(0);
  clear_has_cur_utc_time();
}
inline ::google::protobuf::int64 DevInfo::cur_utc_time() const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.gps.proto.DevInfo.cur_utc_time)
  return cur_utc_time_;
}
inline void DevInfo::set_cur_utc_time(::google::protobuf::int64 value) {
  set_has_cur_utc_time();
  cur_utc_time_ = value;
  // @@protoc_insertion_point(field_set:com.zhichenhaixin.gps.proto.DevInfo.cur_utc_time)
}

// -------------------------------------------------------------------

// DevInfoList

// repeated .com.zhichenhaixin.gps.proto.DevInfo devInfo = 1;
inline int DevInfoList::devinfo_size() const {
  return devinfo_.size();
}
inline void DevInfoList::clear_devinfo() {
  devinfo_.Clear();
}
inline const ::com::zhichenhaixin::gps::proto::DevInfo& DevInfoList::devinfo(int index) const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.gps.proto.DevInfoList.devInfo)
  return devinfo_.Get(index);
}
inline ::com::zhichenhaixin::gps::proto::DevInfo* DevInfoList::mutable_devinfo(int index) {
  // @@protoc_insertion_point(field_mutable:com.zhichenhaixin.gps.proto.DevInfoList.devInfo)
  return devinfo_.Mutable(index);
}
inline ::com::zhichenhaixin::gps::proto::DevInfo* DevInfoList::add_devinfo() {
  // @@protoc_insertion_point(field_add:com.zhichenhaixin.gps.proto.DevInfoList.devInfo)
  return devinfo_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::com::zhichenhaixin::gps::proto::DevInfo >&
DevInfoList::devinfo() const {
  // @@protoc_insertion_point(field_list:com.zhichenhaixin.gps.proto.DevInfoList.devInfo)
  return devinfo_;
}
inline ::google::protobuf::RepeatedPtrField< ::com::zhichenhaixin::gps::proto::DevInfo >*
DevInfoList::mutable_devinfo() {
  // @@protoc_insertion_point(field_mutable_list:com.zhichenhaixin.gps.proto.DevInfoList.devInfo)
  return &devinfo_;
}

// optional int32 length = 2;
inline bool DevInfoList::has_length() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void DevInfoList::set_has_length() {
  _has_bits_[0] |= 0x00000002u;
}
inline void DevInfoList::clear_has_length() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void DevInfoList::clear_length() {
  length_ = 0;
  clear_has_length();
}
inline ::google::protobuf::int32 DevInfoList::length() const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.gps.proto.DevInfoList.length)
  return length_;
}
inline void DevInfoList::set_length(::google::protobuf::int32 value) {
  set_has_length();
  length_ = value;
  // @@protoc_insertion_point(field_set:com.zhichenhaixin.gps.proto.DevInfoList.length)
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace gps
}  // namespace zhichenhaixin
}  // namespace com

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_TWQMSComData_2eproto__INCLUDED
