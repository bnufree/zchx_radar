// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ZCHXAISVessel.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "ZCHXAISVessel.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace com {
namespace zhichenhaixin {
namespace proto {

namespace {

const ::google::protobuf::Descriptor* VesselInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  VesselInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* AISDeviceData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AISDeviceData_reflection_ = NULL;
const ::google::protobuf::Descriptor* AISDeviceDataList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AISDeviceDataList_reflection_ = NULL;
const ::google::protobuf::Descriptor* AISMeet_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AISMeet_reflection_ = NULL;
const ::google::protobuf::Descriptor* AISVesselData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AISVesselData_reflection_ = NULL;
const ::google::protobuf::Descriptor* AISVesselDataList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AISVesselDataList_reflection_ = NULL;
const ::google::protobuf::Descriptor* VesselTrack_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  VesselTrack_reflection_ = NULL;
const ::google::protobuf::Descriptor* BaseStationReport_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BaseStationReport_reflection_ = NULL;
const ::google::protobuf::Descriptor* AidtoNavigationReport_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AidtoNavigationReport_reflection_ = NULL;
const ::google::protobuf::Descriptor* AIS_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AIS_reflection_ = NULL;
const ::google::protobuf::Descriptor* AISList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AISList_reflection_ = NULL;
const ::google::protobuf::Descriptor* AISHistoryTrackPoint_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AISHistoryTrackPoint_reflection_ = NULL;
const ::google::protobuf::Descriptor* AISHistoryTrackList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AISHistoryTrackList_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* EPFD_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* NAVI_STATUS_descriptor_ = NULL;
const ::google::protobuf::EnumDescriptor* ATON_TYPE_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_ZCHXAISVessel_2eproto() {
  protobuf_AddDesc_ZCHXAISVessel_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "ZCHXAISVessel.proto");
  GOOGLE_CHECK(file != NULL);
  VesselInfo_descriptor_ = file->message_type(0);
  static const int VesselInfo_offsets_[20] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VesselInfo, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VesselInfo, mmsi_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VesselInfo, shiptype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VesselInfo, imo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VesselInfo, callsign_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VesselInfo, shipname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VesselInfo, cargotype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VesselInfo, country_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VesselInfo, vendorid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VesselInfo, shiplength_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VesselInfo, shipwidth_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VesselInfo, tobow_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VesselInfo, tostern_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VesselInfo, toport_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VesselInfo, tostarboard_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VesselInfo, fixtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VesselInfo, eta_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VesselInfo, draught_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VesselInfo, dest_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VesselInfo, utc_),
  };
  VesselInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      VesselInfo_descriptor_,
      VesselInfo::default_instance_,
      VesselInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VesselInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VesselInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(VesselInfo));
  AISDeviceData_descriptor_ = file->message_type(1);
  static const int AISDeviceData_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AISDeviceData, device_code_),
  };
  AISDeviceData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AISDeviceData_descriptor_,
      AISDeviceData::default_instance_,
      AISDeviceData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AISDeviceData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AISDeviceData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AISDeviceData));
  AISDeviceDataList_descriptor_ = file->message_type(2);
  static const int AISDeviceDataList_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AISDeviceDataList, ais_device_list_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AISDeviceDataList, bd_device_list_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AISDeviceDataList, cdma_device_list_),
  };
  AISDeviceDataList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AISDeviceDataList_descriptor_,
      AISDeviceDataList::default_instance_,
      AISDeviceDataList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AISDeviceDataList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AISDeviceDataList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AISDeviceDataList));
  AISMeet_descriptor_ = file->message_type(3);
  static const int AISMeet_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AISMeet, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AISMeet, lat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AISMeet, lon_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AISMeet, disrance_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AISMeet, utc_),
  };
  AISMeet_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AISMeet_descriptor_,
      AISMeet::default_instance_,
      AISMeet_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AISMeet, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AISMeet, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AISMeet));
  AISVesselData_descriptor_ = file->message_type(4);
  static const int AISVesselData_offsets_[78] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AISVesselData, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AISVesselData, mmsi_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AISVesselData, shiptype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AISVesselData, navstatus_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AISVesselData, rot_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AISVesselData, sog_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AISVesselData, lon_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AISVesselData, lat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AISVesselData, cog_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AISVesselData, heading_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AISVesselData, imo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AISVesselData, callsign_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AISVesselData, shipname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AISVesselData, cargotype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AISVesselData, country_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AISVesselData, vendorid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AISVesselData, shiplength_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AISVesselData, shipwidth_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AISVesselData, tobow_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AISVesselData, tostern_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AISVesselData, toport_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AISVesselData, tostarboard_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AISVesselData, fixtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AISVesselData, eta_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AISVesselData, draught_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AISVesselData, dest_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AISVesselData, utc_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AISVesselData, status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AISVesselData, warn_utc_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AISVesselData, warn_color_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AISVesselData, warn_status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AISVesselData, icon_number_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AISVesselData, icon_stream_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AISVesselData, icon_mark_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AISVesselData, cdma_phone_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AISVesselData, bd_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AISVesselData, ship_no_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AISVesselData, dist_ship_district_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AISVesselData, ship_port_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AISVesselData, ship_deep_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AISVesselData, ship_tot_ton_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AISVesselData, ship_net_ton_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AISVesselData, ship_tot_power_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AISVesselData, dict_ship_material_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AISVesselData, ship_build_comp_date_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AISVesselData, owner_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AISVesselData, owner_addr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AISVesselData, owner_tel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AISVesselData, fishing_permit_period_date_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AISVesselData, fishing_permit_number_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AISVesselData, vessel_cert_period_date_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AISVesselData, vessel_cert_number_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AISVesselData, register_period_date_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AISVesselData, register_number_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AISVesselData, group_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AISVesselData, pos_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AISVesselData, vdesc_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AISVesselData, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AISVesselData, device_list_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AISVesselData, pointmeet_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AISVesselData, onlinestatus_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AISVesselData, prepcount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AISVesselData, utc_spacing_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AISVesselData, defenceid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AISVesselData, defencename_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AISVesselData, defencetype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AISVesselData, last_lon_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AISVesselData, last_lat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AISVesselData, last_cog_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AISVesselData, keypointnumber_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AISVesselData, mark_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AISVesselData, alarmtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AISVesselData, alarmgrade_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AISVesselData, alarmvalue_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AISVesselData, riskvalue_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AISVesselData, cpaattr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AISVesselData, ricissound_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AISVesselData, ricispopup_),
  };
  AISVesselData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AISVesselData_descriptor_,
      AISVesselData::default_instance_,
      AISVesselData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AISVesselData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AISVesselData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AISVesselData));
  AISVesselDataList_descriptor_ = file->message_type(5);
  static const int AISVesselDataList_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AISVesselDataList, aisdata_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AISVesselDataList, length_),
  };
  AISVesselDataList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AISVesselDataList_descriptor_,
      AISVesselDataList::default_instance_,
      AISVesselDataList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AISVesselDataList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AISVesselDataList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AISVesselDataList));
  VesselTrack_descriptor_ = file->message_type(6);
  static const int VesselTrack_offsets_[11] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VesselTrack, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VesselTrack, mmsi_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VesselTrack, shiptype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VesselTrack, navstatus_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VesselTrack, rot_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VesselTrack, sog_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VesselTrack, lon_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VesselTrack, lat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VesselTrack, cog_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VesselTrack, heading_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VesselTrack, utc_),
  };
  VesselTrack_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      VesselTrack_descriptor_,
      VesselTrack::default_instance_,
      VesselTrack_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VesselTrack, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VesselTrack, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(VesselTrack));
  BaseStationReport_descriptor_ = file->message_type(7);
  static const int BaseStationReport_offsets_[14] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BaseStationReport, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BaseStationReport, repeatindicator_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BaseStationReport, mmsi_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BaseStationReport, year_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BaseStationReport, month_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BaseStationReport, day_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BaseStationReport, hour_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BaseStationReport, minute_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BaseStationReport, second_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BaseStationReport, positionaccuracy_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BaseStationReport, lon_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BaseStationReport, lat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BaseStationReport, fixtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BaseStationReport, utc_),
  };
  BaseStationReport_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BaseStationReport_descriptor_,
      BaseStationReport::default_instance_,
      BaseStationReport_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BaseStationReport, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BaseStationReport, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BaseStationReport));
  AidtoNavigationReport_descriptor_ = file->message_type(8);
  static const int AidtoNavigationReport_offsets_[14] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AidtoNavigationReport, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AidtoNavigationReport, repeatindicator_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AidtoNavigationReport, mmsi_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AidtoNavigationReport, atontype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AidtoNavigationReport, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AidtoNavigationReport, positionaccuracy_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AidtoNavigationReport, lon_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AidtoNavigationReport, lat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AidtoNavigationReport, tobow_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AidtoNavigationReport, tostern_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AidtoNavigationReport, toport_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AidtoNavigationReport, tostarboard_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AidtoNavigationReport, fixtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AidtoNavigationReport, utc_),
  };
  AidtoNavigationReport_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AidtoNavigationReport_descriptor_,
      AidtoNavigationReport::default_instance_,
      AidtoNavigationReport_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AidtoNavigationReport, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AidtoNavigationReport, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AidtoNavigationReport));
  AIS_descriptor_ = file->message_type(9);
  static const int AIS_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AIS, flag_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AIS, sourceid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AIS, vesselinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AIS, vesseltrack_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AIS, basestationreport_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AIS, aidtonavigationreport_),
  };
  AIS_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AIS_descriptor_,
      AIS::default_instance_,
      AIS_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AIS, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AIS, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AIS));
  AISList_descriptor_ = file->message_type(10);
  static const int AISList_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AISList, utc_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AISList, ais_),
  };
  AISList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AISList_descriptor_,
      AISList::default_instance_,
      AISList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AISList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AISList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AISList));
  AISHistoryTrackPoint_descriptor_ = file->message_type(11);
  static const int AISHistoryTrackPoint_offsets_[12] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AISHistoryTrackPoint, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AISHistoryTrackPoint, mmsi_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AISHistoryTrackPoint, shiptype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AISHistoryTrackPoint, navstatus_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AISHistoryTrackPoint, rot_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AISHistoryTrackPoint, sog_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AISHistoryTrackPoint, lon_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AISHistoryTrackPoint, lat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AISHistoryTrackPoint, cog_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AISHistoryTrackPoint, heading_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AISHistoryTrackPoint, cargotype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AISHistoryTrackPoint, utc_),
  };
  AISHistoryTrackPoint_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AISHistoryTrackPoint_descriptor_,
      AISHistoryTrackPoint::default_instance_,
      AISHistoryTrackPoint_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AISHistoryTrackPoint, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AISHistoryTrackPoint, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AISHistoryTrackPoint));
  AISHistoryTrackList_descriptor_ = file->message_type(12);
  static const int AISHistoryTrackList_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AISHistoryTrackList, aisdata_),
  };
  AISHistoryTrackList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AISHistoryTrackList_descriptor_,
      AISHistoryTrackList::default_instance_,
      AISHistoryTrackList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AISHistoryTrackList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AISHistoryTrackList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AISHistoryTrackList));
  EPFD_descriptor_ = file->enum_type(0);
  NAVI_STATUS_descriptor_ = file->enum_type(1);
  ATON_TYPE_descriptor_ = file->enum_type(2);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_ZCHXAISVessel_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    VesselInfo_descriptor_, &VesselInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AISDeviceData_descriptor_, &AISDeviceData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AISDeviceDataList_descriptor_, &AISDeviceDataList::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AISMeet_descriptor_, &AISMeet::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AISVesselData_descriptor_, &AISVesselData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AISVesselDataList_descriptor_, &AISVesselDataList::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    VesselTrack_descriptor_, &VesselTrack::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BaseStationReport_descriptor_, &BaseStationReport::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AidtoNavigationReport_descriptor_, &AidtoNavigationReport::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AIS_descriptor_, &AIS::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AISList_descriptor_, &AISList::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AISHistoryTrackPoint_descriptor_, &AISHistoryTrackPoint::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AISHistoryTrackList_descriptor_, &AISHistoryTrackList::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_ZCHXAISVessel_2eproto() {
  delete VesselInfo::default_instance_;
  delete VesselInfo_reflection_;
  delete AISDeviceData::default_instance_;
  delete AISDeviceData_reflection_;
  delete AISDeviceDataList::default_instance_;
  delete AISDeviceDataList_reflection_;
  delete AISMeet::default_instance_;
  delete AISMeet_reflection_;
  delete AISVesselData::default_instance_;
  delete AISVesselData_reflection_;
  delete AISVesselDataList::default_instance_;
  delete AISVesselDataList_reflection_;
  delete VesselTrack::default_instance_;
  delete VesselTrack_reflection_;
  delete BaseStationReport::default_instance_;
  delete BaseStationReport_reflection_;
  delete AidtoNavigationReport::default_instance_;
  delete AidtoNavigationReport_reflection_;
  delete AIS::default_instance_;
  delete AIS_reflection_;
  delete AISList::default_instance_;
  delete AISList_reflection_;
  delete AISHistoryTrackPoint::default_instance_;
  delete AISHistoryTrackPoint_reflection_;
  delete AISHistoryTrackList::default_instance_;
  delete AISHistoryTrackList_reflection_;
}

void protobuf_AddDesc_ZCHXAISVessel_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\023ZCHXAISVessel.proto\022\027com.zhichenhaixin"
    ".proto\"\364\002\n\nVesselInfo\022\n\n\002id\030\001 \002(\t\022\014\n\004mms"
    "i\030\002 \002(\005\022\020\n\010shipType\030\003 \002(\t\022\013\n\003imo\030\004 \002(\005\022\020"
    "\n\010callSign\030\005 \002(\t\022\020\n\010shipName\030\006 \002(\t\022\021\n\tca"
    "rgoType\030\007 \002(\005\022\017\n\007country\030\010 \002(\t\022\020\n\010vendor"
    "ID\030\t \002(\t\022\022\n\nshipLength\030\n \002(\005\022\021\n\tshipWidt"
    "h\030\013 \002(\005\022\r\n\005toBow\030\014 \002(\005\022\017\n\007toStern\030\r \002(\005\022"
    "\016\n\006toPort\030\016 \002(\005\022\023\n\013toStarboard\030\017 \002(\005\022.\n\007"
    "fixType\030\020 \002(\0162\035.com.zhichenhaixin.proto."
    "EPFD\022\013\n\003eta\030\021 \002(\t\022\017\n\007draught\030\022 \002(\002\022\014\n\004de"
    "st\030\023 \002(\t\022\013\n\003UTC\030\024 \002(\004\"$\n\rAISDeviceData\022\023"
    "\n\013device_code\030\001 \001(\t\"\326\001\n\021AISDeviceDataLis"
    "t\022\?\n\017ais_device_list\030\001 \003(\0132&.com.zhichen"
    "haixin.proto.AISDeviceData\022>\n\016bd_device_"
    "list\030\002 \003(\0132&.com.zhichenhaixin.proto.AIS"
    "DeviceData\022@\n\020cdma_device_list\030\003 \003(\0132&.c"
    "om.zhichenhaixin.proto.AISDeviceData\"N\n\007"
    "AISMeet\022\n\n\002id\030\001 \002(\t\022\013\n\003lat\030\002 \002(\001\022\013\n\003lon\030"
    "\003 \002(\001\022\020\n\010disrance\030\004 \002(\001\022\013\n\003UTC\030\005 \002(\004\"\214\r\n"
    "\rAISVesselData\022\n\n\002id\030\001 \002(\t\022\014\n\004mmsi\030\002 \002(\003"
    "\022\020\n\010shiptype\030\003 \002(\t\0227\n\tnavStatus\030\004 \002(\0162$."
    "com.zhichenhaixin.proto.NAVI_STATUS\022\013\n\003r"
    "ot\030\005 \002(\002\022\013\n\003sog\030\006 \002(\002\022\013\n\003lon\030\007 \002(\001\022\013\n\003la"
    "t\030\010 \002(\001\022\013\n\003cog\030\t \002(\002\022\017\n\007heading\030\n \002(\002\022\013\n"
    "\003imo\030\013 \001(\005\022\020\n\010callSign\030\014 \001(\t\022\020\n\010shipName"
    "\030\r \001(\t\022\021\n\tcargoType\030\016 \001(\005\022\017\n\007country\030\017 \001"
    "(\t\022\020\n\010vendorID\030\020 \001(\t\022\022\n\nshipLength\030\021 \001(\001"
    "\022\021\n\tshipWidth\030\022 \001(\001\022\r\n\005toBow\030\023 \001(\005\022\017\n\007to"
    "Stern\030\024 \001(\005\022\016\n\006toPort\030\025 \001(\005\022\023\n\013toStarboa"
    "rd\030\026 \001(\005\022.\n\007fixType\030\027 \001(\0162\035.com.zhichenh"
    "aixin.proto.EPFD\022\013\n\003eta\030\030 \001(\t\022\017\n\007draught"
    "\030\031 \001(\002\022\014\n\004dest\030\032 \001(\t\022\013\n\003UTC\030\033 \002(\004\022\016\n\006sta"
    "tus\030\034 \001(\005\022\020\n\010warn_utc\030\035 \001(\003\022\022\n\nwarn_colo"
    "r\030\036 \001(\t\022\023\n\013warn_status\030\037 \001(\005\022\023\n\013icon_num"
    "ber\030  \001(\005\022\023\n\013icon_stream\030! \001(\014\022\021\n\ticon_m"
    "ark\030\" \001(\t\022\022\n\ncdma_phone\030# \001(\t\022\r\n\005bd_id\030$"
    " \001(\t\022\017\n\007ship_no\030% \001(\t\022\032\n\022dist_ship_distr"
    "ict\030& \001(\t\022\021\n\tship_port\030\' \001(\t\022\021\n\tship_dee"
    "p\030( \001(\001\022\024\n\014ship_tot_ton\030) \001(\001\022\024\n\014ship_ne"
    "t_ton\030* \001(\001\022\026\n\016ship_tot_power\030+ \001(\001\022\032\n\022d"
    "ict_ship_material\030, \001(\t\022\034\n\024ship_build_co"
    "mp_date\030- \001(\t\022\022\n\nowner_name\030. \001(\t\022\022\n\nown"
    "er_addr\030/ \001(\t\022\021\n\towner_tel\0300 \001(\t\022\"\n\032fish"
    "ing_permit_period_date\0301 \001(\t\022\035\n\025fishing_"
    "permit_number\0302 \001(\t\022\037\n\027vessel_cert_perio"
    "d_date\0303 \001(\t\022\032\n\022vessel_cert_number\0304 \001(\t"
    "\022\034\n\024register_period_date\0305 \001(\t\022\027\n\017regist"
    "er_number\0306 \001(\t\022\022\n\ngroup_name\0307 \001(\t\022\020\n\010p"
    "os_type\0308 \001(\005\022\r\n\005vdesc\0309 \001(\t\022\014\n\004type\030: \001"
    "(\005\022\?\n\013device_list\030; \001(\0132*.com.zhichenhai"
    "xin.proto.AISDeviceDataList\0223\n\tpointMeet"
    "\030< \003(\0132 .com.zhichenhaixin.proto.AISMeet"
    "\022\024\n\014onlineStatus\030= \001(\005\022\021\n\tprepCount\030> \001("
    "\005\022\023\n\013utc_spacing\030\? \001(\003\022\021\n\tdefenceId\030@ \001("
    "\005\022\023\n\013defenceName\030A \001(\t\022\023\n\013defenceType\030B "
    "\001(\005\022\020\n\010last_lon\030C \001(\001\022\020\n\010last_lat\030D \001(\001\022"
    "\020\n\010last_cog\030E \001(\001\022\026\n\016keyPointNumber\030F \001("
    "\005\022\021\n\tmark_type\030G \001(\005\022\021\n\talarmtype\030H \001(\005\022"
    "\022\n\nalarmgrade\030I \001(\005\022\022\n\nalarmvalue\030J \001(\001\022"
    "\021\n\triskvalue\030K \001(\001\022\017\n\007cpaAttr\030L \001(\t\022\022\n\nr"
    "icIsSound\030M \001(\010\022\022\n\nricIsPopup\030N \001(\010\"\\\n\021A"
    "ISVesselDataList\0227\n\007aisData\030\001 \003(\0132&.com."
    "zhichenhaixin.proto.AISVesselData\022\016\n\006len"
    "gth\030\002 \001(\005\"\321\001\n\013VesselTrack\022\n\n\002id\030\001 \002(\t\022\014\n"
    "\004mmsi\030\002 \002(\005\022\020\n\010shiptype\030\003 \002(\t\0227\n\tnavStat"
    "us\030\004 \002(\0162$.com.zhichenhaixin.proto.NAVI_"
    "STATUS\022\013\n\003rot\030\005 \002(\002\022\013\n\003sog\030\006 \002(\002\022\013\n\003lon\030"
    "\007 \002(\001\022\013\n\003lat\030\010 \002(\001\022\013\n\003cog\030\t \002(\002\022\017\n\007headi"
    "ng\030\n \002(\002\022\013\n\003UTC\030\013 \002(\004\"\360\001\n\021BaseStationRep"
    "ort\022\n\n\002id\030\001 \002(\005\022\027\n\017repeatIndicator\030\002 \002(\005"
    "\022\014\n\004mmsi\030\003 \002(\005\022\014\n\004year\030\004 \002(\005\022\r\n\005month\030\005 "
    "\002(\005\022\013\n\003day\030\006 \002(\005\022\014\n\004hour\030\007 \002(\005\022\016\n\006minute"
    "\030\010 \002(\005\022\016\n\006second\030\t \002(\005\022\030\n\020positionAccura"
    "cy\030\n \002(\005\022\013\n\003lon\030\013 \002(\001\022\013\n\003lat\030\014 \002(\001\022\017\n\007fi"
    "xType\030\r \002(\005\022\013\n\003UTC\030\016 \002(\004\"\245\002\n\025AidtoNaviga"
    "tionReport\022\n\n\002id\030\001 \002(\005\022\027\n\017repeatIndicato"
    "r\030\002 \002(\005\022\014\n\004mmsi\030\003 \002(\005\0224\n\010atonType\030\004 \002(\0162"
    "\".com.zhichenhaixin.proto.ATON_TYPE\022\014\n\004n"
    "ame\030\005 \002(\t\022\030\n\020positionAccuracy\030\006 \002(\005\022\013\n\003l"
    "on\030\007 \002(\001\022\013\n\003lat\030\010 \002(\001\022\r\n\005toBow\030\t \002(\005\022\017\n\007"
    "toStern\030\n \002(\005\022\016\n\006toPort\030\013 \002(\005\022\023\n\013toStarb"
    "oard\030\014 \002(\005\022\017\n\007fixType\030\r \002(\005\022\013\n\003UTC\030\016 \002(\004"
    "\"\257\002\n\003AIS\022\014\n\004flag\030\001 \002(\005\022\020\n\010sourceId\030\002 \002(\t"
    "\0227\n\nvesselInfo\030\003 \001(\0132#.com.zhichenhaixin"
    ".proto.VesselInfo\0229\n\013vesselTrack\030\004 \001(\0132$"
    ".com.zhichenhaixin.proto.VesselTrack\022E\n\021"
    "baseStationReport\030\005 \001(\0132*.com.zhichenhai"
    "xin.proto.BaseStationReport\022M\n\025aidtoNavi"
    "gationReport\030\006 \001(\0132..com.zhichenhaixin.p"
    "roto.AidtoNavigationReport\"A\n\007AISList\022\013\n"
    "\003UTC\030\001 \002(\004\022)\n\003ais\030\002 \003(\0132\034.com.zhichenhai"
    "xin.proto.AIS\"\355\001\n\024AISHistoryTrackPoint\022\n"
    "\n\002id\030\001 \002(\t\022\014\n\004mmsi\030\002 \002(\003\022\020\n\010shiptype\030\003 \002"
    "(\t\0227\n\tnavStatus\030\004 \002(\0162$.com.zhichenhaixi"
    "n.proto.NAVI_STATUS\022\013\n\003rot\030\005 \002(\002\022\013\n\003sog\030"
    "\006 \002(\002\022\013\n\003lon\030\007 \002(\001\022\013\n\003lat\030\010 \002(\001\022\013\n\003cog\030\t"
    " \002(\002\022\017\n\007heading\030\n \002(\002\022\021\n\tcargoType\030\013 \001(\005"
    "\022\013\n\003UTC\030\014 \002(\004\"U\n\023AISHistoryTrackList\022>\n\007"
    "aisData\030\001 \003(\0132-.com.zhichenhaixin.proto."
    "AISHistoryTrackPoint*\237\001\n\004EPFD\022\r\n\tUNDEFIN"
    "ED\020\000\022\007\n\003GPS\020\001\022\013\n\007GLONASS\020\002\022\034\n\030COMBINED_G"
    "PS_AND_GLONASS\020\003\022\013\n\007LORAN_C\020\004\022\n\n\006CHAYKA\020"
    "\005\022 \n\034INTEGRATED_NAVIGATION_SYSTEM\020\006\022\014\n\010S"
    "URVEYED\020\007\022\013\n\007GALILEO\020\010*\260\003\n\013NAVI_STATUS\022\032"
    "\n\026UNDER_WAY_USING_ENGINE\020\000\022\r\n\tAT_ANCHOR\020"
    "\001\022\025\n\021NOT_UNDER_COMMAND\020\002\022\030\n\024RESTRICTED_M"
    "ANOEUVER\020\003\022\032\n\026CONSTRAINED_BY_DRAUGHT\020\004\022\n"
    "\n\006MOORED\020\005\022\013\n\007AGROUND\020\006\022\026\n\022ENGAGED_IN_FI"
    "SHING\020\007\022\025\n\021UNDER_WAY_SAILING\020\010\022)\n%RESERV"
    "ED_FOR_FUTURE_AMENDMENT_FOR_HSC\020\t\022)\n%RES"
    "ERVED_FOR_FUTURE_AMENDMENT_FOR_WIG\020\n\022\035\n\031"
    "RESERVED_FOR_FUTURE_USE_1\020\013\022\035\n\031RESERVED_"
    "FOR_FUTURE_USE_2\020\014\022\035\n\031RESERVED_FOR_FUTUR"
    "E_USE_3\020\r\022\035\n\031RESERVED_FOR_FUTURE_USE_4\020\016"
    "\022\017\n\013NOT_DEFINED\020\017*\220\006\n\tATON_TYPE\022\013\n\007DEFAU"
    "LT\020\000\022\023\n\017REFERENCE_POINT\020\001\022\t\n\005RACON\020\002\022\035\n\031"
    "FIXED_STRUCTURE_OFF_SHORE\020\003\022\t\n\005SPARE\020\004\022\031"
    "\n\025LIGHT_WITHOUT_SECTORS\020\005\022\026\n\022LIGHT_WITH_"
    "SECTORS\020\006\022\027\n\023LEADING_LIGHT_FRONT\020\007\022\026\n\022LE"
    "ADING_LIGHT_REAR\020\010\022\025\n\021BEACON_CARDINAL_N\020"
    "\t\022\025\n\021BEACON_CARDINAL_E\020\n\022\025\n\021BEACON_CARDI"
    "NAL_S\020\013\022\025\n\021BEACON_CARDINAL_W\020\014\022\024\n\020BEACON"
    "_PORT_HAND\020\r\022\031\n\025BEACON_STARBOARD_HAND\020\016\022"
    "&\n\"BEACON_PREFERRED_CHANNEL_PORT_HAND\020\017\022"
    "+\n\'BEACON_PREFERRED_CHANNEL_STARBOARD_HA"
    "ND\020\020\022\032\n\026BEACON_ISOLATED_DANGER\020\021\022\025\n\021BEAC"
    "ON_SAFE_WATER\020\022\022\027\n\023BEACON_SPECIAL_MARK\020\023"
    "\022\023\n\017CARDINAL_MARK_N\020\024\022\023\n\017CARDINAL_MARK_E"
    "\020\025\022\023\n\017CARDINAL_MARK_S\020\026\022\023\n\017CARDINAL_MARK"
    "_W\020\027\022\022\n\016PORT_HAND_MARK\020\030\022\027\n\023STARBOARD_HA"
    "ND_MARK\020\031\022\037\n\033PREFERRED_CHANNEL_PORT_HAND"
    "\020\032\022$\n PREFERRED_CHANNEL_STARBOARD_HAND\020\033"
    "\022\023\n\017ISOLATED_DANGER\020\034\022\016\n\nSAFE_WATER\020\035\022\020\n"
    "\014SPECIAL_MARK\020\036\022\033\n\027LIGHT_VESSEL_LANBY_RI"
    "GS\020\037", 5364);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "ZCHXAISVessel.proto", &protobuf_RegisterTypes);
  VesselInfo::default_instance_ = new VesselInfo();
  AISDeviceData::default_instance_ = new AISDeviceData();
  AISDeviceDataList::default_instance_ = new AISDeviceDataList();
  AISMeet::default_instance_ = new AISMeet();
  AISVesselData::default_instance_ = new AISVesselData();
  AISVesselDataList::default_instance_ = new AISVesselDataList();
  VesselTrack::default_instance_ = new VesselTrack();
  BaseStationReport::default_instance_ = new BaseStationReport();
  AidtoNavigationReport::default_instance_ = new AidtoNavigationReport();
  AIS::default_instance_ = new AIS();
  AISList::default_instance_ = new AISList();
  AISHistoryTrackPoint::default_instance_ = new AISHistoryTrackPoint();
  AISHistoryTrackList::default_instance_ = new AISHistoryTrackList();
  VesselInfo::default_instance_->InitAsDefaultInstance();
  AISDeviceData::default_instance_->InitAsDefaultInstance();
  AISDeviceDataList::default_instance_->InitAsDefaultInstance();
  AISMeet::default_instance_->InitAsDefaultInstance();
  AISVesselData::default_instance_->InitAsDefaultInstance();
  AISVesselDataList::default_instance_->InitAsDefaultInstance();
  VesselTrack::default_instance_->InitAsDefaultInstance();
  BaseStationReport::default_instance_->InitAsDefaultInstance();
  AidtoNavigationReport::default_instance_->InitAsDefaultInstance();
  AIS::default_instance_->InitAsDefaultInstance();
  AISList::default_instance_->InitAsDefaultInstance();
  AISHistoryTrackPoint::default_instance_->InitAsDefaultInstance();
  AISHistoryTrackList::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_ZCHXAISVessel_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_ZCHXAISVessel_2eproto {
  StaticDescriptorInitializer_ZCHXAISVessel_2eproto() {
    protobuf_AddDesc_ZCHXAISVessel_2eproto();
  }
} static_descriptor_initializer_ZCHXAISVessel_2eproto_;
const ::google::protobuf::EnumDescriptor* EPFD_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EPFD_descriptor_;
}
bool EPFD_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* NAVI_STATUS_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NAVI_STATUS_descriptor_;
}
bool NAVI_STATUS_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
      return true;
    default:
      return false;
  }
}

const ::google::protobuf::EnumDescriptor* ATON_TYPE_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ATON_TYPE_descriptor_;
}
bool ATON_TYPE_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
    case 26:
    case 27:
    case 28:
    case 29:
    case 30:
    case 31:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int VesselInfo::kIdFieldNumber;
const int VesselInfo::kMmsiFieldNumber;
const int VesselInfo::kShipTypeFieldNumber;
const int VesselInfo::kImoFieldNumber;
const int VesselInfo::kCallSignFieldNumber;
const int VesselInfo::kShipNameFieldNumber;
const int VesselInfo::kCargoTypeFieldNumber;
const int VesselInfo::kCountryFieldNumber;
const int VesselInfo::kVendorIDFieldNumber;
const int VesselInfo::kShipLengthFieldNumber;
const int VesselInfo::kShipWidthFieldNumber;
const int VesselInfo::kToBowFieldNumber;
const int VesselInfo::kToSternFieldNumber;
const int VesselInfo::kToPortFieldNumber;
const int VesselInfo::kToStarboardFieldNumber;
const int VesselInfo::kFixTypeFieldNumber;
const int VesselInfo::kEtaFieldNumber;
const int VesselInfo::kDraughtFieldNumber;
const int VesselInfo::kDestFieldNumber;
const int VesselInfo::kUTCFieldNumber;
#endif  // !_MSC_VER

VesselInfo::VesselInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.zhichenhaixin.proto.VesselInfo)
}

void VesselInfo::InitAsDefaultInstance() {
}

VesselInfo::VesselInfo(const VesselInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:com.zhichenhaixin.proto.VesselInfo)
}

void VesselInfo::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  mmsi_ = 0;
  shiptype_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  imo_ = 0;
  callsign_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  shipname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  cargotype_ = 0;
  country_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  vendorid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  shiplength_ = 0;
  shipwidth_ = 0;
  tobow_ = 0;
  tostern_ = 0;
  toport_ = 0;
  tostarboard_ = 0;
  fixtype_ = 0;
  eta_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  draught_ = 0;
  dest_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  utc_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

VesselInfo::~VesselInfo() {
  // @@protoc_insertion_point(destructor:com.zhichenhaixin.proto.VesselInfo)
  SharedDtor();
}

void VesselInfo::SharedDtor() {
  if (id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete id_;
  }
  if (shiptype_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete shiptype_;
  }
  if (callsign_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete callsign_;
  }
  if (shipname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete shipname_;
  }
  if (country_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete country_;
  }
  if (vendorid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete vendorid_;
  }
  if (eta_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete eta_;
  }
  if (dest_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete dest_;
  }
  if (this != default_instance_) {
  }
}

void VesselInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* VesselInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return VesselInfo_descriptor_;
}

const VesselInfo& VesselInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ZCHXAISVessel_2eproto();
  return *default_instance_;
}

VesselInfo* VesselInfo::default_instance_ = NULL;

VesselInfo* VesselInfo::New() const {
  return new VesselInfo;
}

void VesselInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<VesselInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(mmsi_, imo_);
    if (has_id()) {
      if (id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        id_->clear();
      }
    }
    if (has_shiptype()) {
      if (shiptype_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        shiptype_->clear();
      }
    }
    if (has_callsign()) {
      if (callsign_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        callsign_->clear();
      }
    }
    if (has_shipname()) {
      if (shipname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        shipname_->clear();
      }
    }
    cargotype_ = 0;
    if (has_country()) {
      if (country_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        country_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & 65280) {
    ZR_(shipwidth_, fixtype_);
    if (has_vendorid()) {
      if (vendorid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        vendorid_->clear();
      }
    }
    shiplength_ = 0;
  }
  if (_has_bits_[16 / 32] & 983040) {
    ZR_(utc_, draught_);
    if (has_eta()) {
      if (eta_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        eta_->clear();
      }
    }
    if (has_dest()) {
      if (dest_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        dest_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool VesselInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.zhichenhaixin.proto.VesselInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string id = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->id().data(), this->id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "id");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_mmsi;
        break;
      }

      // required int32 mmsi = 2;
      case 2: {
        if (tag == 16) {
         parse_mmsi:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mmsi_)));
          set_has_mmsi();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_shipType;
        break;
      }

      // required string shipType = 3;
      case 3: {
        if (tag == 26) {
         parse_shipType:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_shiptype()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->shiptype().data(), this->shiptype().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "shiptype");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_imo;
        break;
      }

      // required int32 imo = 4;
      case 4: {
        if (tag == 32) {
         parse_imo:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &imo_)));
          set_has_imo();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_callSign;
        break;
      }

      // required string callSign = 5;
      case 5: {
        if (tag == 42) {
         parse_callSign:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_callsign()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->callsign().data(), this->callsign().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "callsign");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_shipName;
        break;
      }

      // required string shipName = 6;
      case 6: {
        if (tag == 50) {
         parse_shipName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_shipname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->shipname().data(), this->shipname().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "shipname");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_cargoType;
        break;
      }

      // required int32 cargoType = 7;
      case 7: {
        if (tag == 56) {
         parse_cargoType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cargotype_)));
          set_has_cargotype();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_country;
        break;
      }

      // required string country = 8;
      case 8: {
        if (tag == 66) {
         parse_country:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_country()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->country().data(), this->country().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "country");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_vendorID;
        break;
      }

      // required string vendorID = 9;
      case 9: {
        if (tag == 74) {
         parse_vendorID:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_vendorid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->vendorid().data(), this->vendorid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "vendorid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_shipLength;
        break;
      }

      // required int32 shipLength = 10;
      case 10: {
        if (tag == 80) {
         parse_shipLength:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &shiplength_)));
          set_has_shiplength();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_shipWidth;
        break;
      }

      // required int32 shipWidth = 11;
      case 11: {
        if (tag == 88) {
         parse_shipWidth:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &shipwidth_)));
          set_has_shipwidth();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(96)) goto parse_toBow;
        break;
      }

      // required int32 toBow = 12;
      case 12: {
        if (tag == 96) {
         parse_toBow:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tobow_)));
          set_has_tobow();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(104)) goto parse_toStern;
        break;
      }

      // required int32 toStern = 13;
      case 13: {
        if (tag == 104) {
         parse_toStern:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tostern_)));
          set_has_tostern();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(112)) goto parse_toPort;
        break;
      }

      // required int32 toPort = 14;
      case 14: {
        if (tag == 112) {
         parse_toPort:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &toport_)));
          set_has_toport();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(120)) goto parse_toStarboard;
        break;
      }

      // required int32 toStarboard = 15;
      case 15: {
        if (tag == 120) {
         parse_toStarboard:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tostarboard_)));
          set_has_tostarboard();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(128)) goto parse_fixType;
        break;
      }

      // required .com.zhichenhaixin.proto.EPFD fixType = 16;
      case 16: {
        if (tag == 128) {
         parse_fixType:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::com::zhichenhaixin::proto::EPFD_IsValid(value)) {
            set_fixtype(static_cast< ::com::zhichenhaixin::proto::EPFD >(value));
          } else {
            mutable_unknown_fields()->AddVarint(16, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(138)) goto parse_eta;
        break;
      }

      // required string eta = 17;
      case 17: {
        if (tag == 138) {
         parse_eta:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_eta()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->eta().data(), this->eta().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "eta");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(149)) goto parse_draught;
        break;
      }

      // required float draught = 18;
      case 18: {
        if (tag == 149) {
         parse_draught:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &draught_)));
          set_has_draught();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(154)) goto parse_dest;
        break;
      }

      // required string dest = 19;
      case 19: {
        if (tag == 154) {
         parse_dest:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_dest()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->dest().data(), this->dest().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "dest");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(160)) goto parse_UTC;
        break;
      }

      // required uint64 UTC = 20;
      case 20: {
        if (tag == 160) {
         parse_UTC:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &utc_)));
          set_has_utc();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.zhichenhaixin.proto.VesselInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.zhichenhaixin.proto.VesselInfo)
  return false;
#undef DO_
}

void VesselInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.zhichenhaixin.proto.VesselInfo)
  // required string id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->id(), output);
  }

  // required int32 mmsi = 2;
  if (has_mmsi()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->mmsi(), output);
  }

  // required string shipType = 3;
  if (has_shiptype()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->shiptype().data(), this->shiptype().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "shiptype");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->shiptype(), output);
  }

  // required int32 imo = 4;
  if (has_imo()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->imo(), output);
  }

  // required string callSign = 5;
  if (has_callsign()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->callsign().data(), this->callsign().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "callsign");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->callsign(), output);
  }

  // required string shipName = 6;
  if (has_shipname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->shipname().data(), this->shipname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "shipname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->shipname(), output);
  }

  // required int32 cargoType = 7;
  if (has_cargotype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->cargotype(), output);
  }

  // required string country = 8;
  if (has_country()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->country().data(), this->country().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "country");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->country(), output);
  }

  // required string vendorID = 9;
  if (has_vendorid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->vendorid().data(), this->vendorid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "vendorid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      9, this->vendorid(), output);
  }

  // required int32 shipLength = 10;
  if (has_shiplength()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->shiplength(), output);
  }

  // required int32 shipWidth = 11;
  if (has_shipwidth()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->shipwidth(), output);
  }

  // required int32 toBow = 12;
  if (has_tobow()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->tobow(), output);
  }

  // required int32 toStern = 13;
  if (has_tostern()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->tostern(), output);
  }

  // required int32 toPort = 14;
  if (has_toport()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(14, this->toport(), output);
  }

  // required int32 toStarboard = 15;
  if (has_tostarboard()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(15, this->tostarboard(), output);
  }

  // required .com.zhichenhaixin.proto.EPFD fixType = 16;
  if (has_fixtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      16, this->fixtype(), output);
  }

  // required string eta = 17;
  if (has_eta()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->eta().data(), this->eta().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "eta");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      17, this->eta(), output);
  }

  // required float draught = 18;
  if (has_draught()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(18, this->draught(), output);
  }

  // required string dest = 19;
  if (has_dest()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->dest().data(), this->dest().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "dest");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      19, this->dest(), output);
  }

  // required uint64 UTC = 20;
  if (has_utc()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(20, this->utc(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.zhichenhaixin.proto.VesselInfo)
}

::google::protobuf::uint8* VesselInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.zhichenhaixin.proto.VesselInfo)
  // required string id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->id(), target);
  }

  // required int32 mmsi = 2;
  if (has_mmsi()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->mmsi(), target);
  }

  // required string shipType = 3;
  if (has_shiptype()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->shiptype().data(), this->shiptype().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "shiptype");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->shiptype(), target);
  }

  // required int32 imo = 4;
  if (has_imo()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->imo(), target);
  }

  // required string callSign = 5;
  if (has_callsign()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->callsign().data(), this->callsign().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "callsign");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->callsign(), target);
  }

  // required string shipName = 6;
  if (has_shipname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->shipname().data(), this->shipname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "shipname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->shipname(), target);
  }

  // required int32 cargoType = 7;
  if (has_cargotype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->cargotype(), target);
  }

  // required string country = 8;
  if (has_country()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->country().data(), this->country().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "country");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->country(), target);
  }

  // required string vendorID = 9;
  if (has_vendorid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->vendorid().data(), this->vendorid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "vendorid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->vendorid(), target);
  }

  // required int32 shipLength = 10;
  if (has_shiplength()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->shiplength(), target);
  }

  // required int32 shipWidth = 11;
  if (has_shipwidth()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->shipwidth(), target);
  }

  // required int32 toBow = 12;
  if (has_tobow()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->tobow(), target);
  }

  // required int32 toStern = 13;
  if (has_tostern()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->tostern(), target);
  }

  // required int32 toPort = 14;
  if (has_toport()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(14, this->toport(), target);
  }

  // required int32 toStarboard = 15;
  if (has_tostarboard()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(15, this->tostarboard(), target);
  }

  // required .com.zhichenhaixin.proto.EPFD fixType = 16;
  if (has_fixtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      16, this->fixtype(), target);
  }

  // required string eta = 17;
  if (has_eta()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->eta().data(), this->eta().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "eta");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        17, this->eta(), target);
  }

  // required float draught = 18;
  if (has_draught()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(18, this->draught(), target);
  }

  // required string dest = 19;
  if (has_dest()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->dest().data(), this->dest().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "dest");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        19, this->dest(), target);
  }

  // required uint64 UTC = 20;
  if (has_utc()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(20, this->utc(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.zhichenhaixin.proto.VesselInfo)
  return target;
}

int VesselInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->id());
    }

    // required int32 mmsi = 2;
    if (has_mmsi()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->mmsi());
    }

    // required string shipType = 3;
    if (has_shiptype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->shiptype());
    }

    // required int32 imo = 4;
    if (has_imo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->imo());
    }

    // required string callSign = 5;
    if (has_callsign()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->callsign());
    }

    // required string shipName = 6;
    if (has_shipname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->shipname());
    }

    // required int32 cargoType = 7;
    if (has_cargotype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cargotype());
    }

    // required string country = 8;
    if (has_country()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->country());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required string vendorID = 9;
    if (has_vendorid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->vendorid());
    }

    // required int32 shipLength = 10;
    if (has_shiplength()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->shiplength());
    }

    // required int32 shipWidth = 11;
    if (has_shipwidth()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->shipwidth());
    }

    // required int32 toBow = 12;
    if (has_tobow()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tobow());
    }

    // required int32 toStern = 13;
    if (has_tostern()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tostern());
    }

    // required int32 toPort = 14;
    if (has_toport()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->toport());
    }

    // required int32 toStarboard = 15;
    if (has_tostarboard()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tostarboard());
    }

    // required .com.zhichenhaixin.proto.EPFD fixType = 16;
    if (has_fixtype()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->fixtype());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // required string eta = 17;
    if (has_eta()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->eta());
    }

    // required float draught = 18;
    if (has_draught()) {
      total_size += 2 + 4;
    }

    // required string dest = 19;
    if (has_dest()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->dest());
    }

    // required uint64 UTC = 20;
    if (has_utc()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->utc());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void VesselInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const VesselInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const VesselInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void VesselInfo::MergeFrom(const VesselInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_mmsi()) {
      set_mmsi(from.mmsi());
    }
    if (from.has_shiptype()) {
      set_shiptype(from.shiptype());
    }
    if (from.has_imo()) {
      set_imo(from.imo());
    }
    if (from.has_callsign()) {
      set_callsign(from.callsign());
    }
    if (from.has_shipname()) {
      set_shipname(from.shipname());
    }
    if (from.has_cargotype()) {
      set_cargotype(from.cargotype());
    }
    if (from.has_country()) {
      set_country(from.country());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_vendorid()) {
      set_vendorid(from.vendorid());
    }
    if (from.has_shiplength()) {
      set_shiplength(from.shiplength());
    }
    if (from.has_shipwidth()) {
      set_shipwidth(from.shipwidth());
    }
    if (from.has_tobow()) {
      set_tobow(from.tobow());
    }
    if (from.has_tostern()) {
      set_tostern(from.tostern());
    }
    if (from.has_toport()) {
      set_toport(from.toport());
    }
    if (from.has_tostarboard()) {
      set_tostarboard(from.tostarboard());
    }
    if (from.has_fixtype()) {
      set_fixtype(from.fixtype());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_eta()) {
      set_eta(from.eta());
    }
    if (from.has_draught()) {
      set_draught(from.draught());
    }
    if (from.has_dest()) {
      set_dest(from.dest());
    }
    if (from.has_utc()) {
      set_utc(from.utc());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void VesselInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VesselInfo::CopyFrom(const VesselInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VesselInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x000fffff) != 0x000fffff) return false;

  return true;
}

void VesselInfo::Swap(VesselInfo* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(mmsi_, other->mmsi_);
    std::swap(shiptype_, other->shiptype_);
    std::swap(imo_, other->imo_);
    std::swap(callsign_, other->callsign_);
    std::swap(shipname_, other->shipname_);
    std::swap(cargotype_, other->cargotype_);
    std::swap(country_, other->country_);
    std::swap(vendorid_, other->vendorid_);
    std::swap(shiplength_, other->shiplength_);
    std::swap(shipwidth_, other->shipwidth_);
    std::swap(tobow_, other->tobow_);
    std::swap(tostern_, other->tostern_);
    std::swap(toport_, other->toport_);
    std::swap(tostarboard_, other->tostarboard_);
    std::swap(fixtype_, other->fixtype_);
    std::swap(eta_, other->eta_);
    std::swap(draught_, other->draught_);
    std::swap(dest_, other->dest_);
    std::swap(utc_, other->utc_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata VesselInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = VesselInfo_descriptor_;
  metadata.reflection = VesselInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AISDeviceData::kDeviceCodeFieldNumber;
#endif  // !_MSC_VER

AISDeviceData::AISDeviceData()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.zhichenhaixin.proto.AISDeviceData)
}

void AISDeviceData::InitAsDefaultInstance() {
}

AISDeviceData::AISDeviceData(const AISDeviceData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:com.zhichenhaixin.proto.AISDeviceData)
}

void AISDeviceData::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  device_code_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AISDeviceData::~AISDeviceData() {
  // @@protoc_insertion_point(destructor:com.zhichenhaixin.proto.AISDeviceData)
  SharedDtor();
}

void AISDeviceData::SharedDtor() {
  if (device_code_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete device_code_;
  }
  if (this != default_instance_) {
  }
}

void AISDeviceData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AISDeviceData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AISDeviceData_descriptor_;
}

const AISDeviceData& AISDeviceData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ZCHXAISVessel_2eproto();
  return *default_instance_;
}

AISDeviceData* AISDeviceData::default_instance_ = NULL;

AISDeviceData* AISDeviceData::New() const {
  return new AISDeviceData;
}

void AISDeviceData::Clear() {
  if (has_device_code()) {
    if (device_code_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
      device_code_->clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AISDeviceData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.zhichenhaixin.proto.AISDeviceData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string device_code = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_device_code()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->device_code().data(), this->device_code().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "device_code");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.zhichenhaixin.proto.AISDeviceData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.zhichenhaixin.proto.AISDeviceData)
  return false;
#undef DO_
}

void AISDeviceData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.zhichenhaixin.proto.AISDeviceData)
  // optional string device_code = 1;
  if (has_device_code()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->device_code().data(), this->device_code().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "device_code");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->device_code(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.zhichenhaixin.proto.AISDeviceData)
}

::google::protobuf::uint8* AISDeviceData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.zhichenhaixin.proto.AISDeviceData)
  // optional string device_code = 1;
  if (has_device_code()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->device_code().data(), this->device_code().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "device_code");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->device_code(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.zhichenhaixin.proto.AISDeviceData)
  return target;
}

int AISDeviceData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string device_code = 1;
    if (has_device_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->device_code());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AISDeviceData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AISDeviceData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AISDeviceData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AISDeviceData::MergeFrom(const AISDeviceData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_device_code()) {
      set_device_code(from.device_code());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AISDeviceData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AISDeviceData::CopyFrom(const AISDeviceData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AISDeviceData::IsInitialized() const {

  return true;
}

void AISDeviceData::Swap(AISDeviceData* other) {
  if (other != this) {
    std::swap(device_code_, other->device_code_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AISDeviceData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AISDeviceData_descriptor_;
  metadata.reflection = AISDeviceData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AISDeviceDataList::kAisDeviceListFieldNumber;
const int AISDeviceDataList::kBdDeviceListFieldNumber;
const int AISDeviceDataList::kCdmaDeviceListFieldNumber;
#endif  // !_MSC_VER

AISDeviceDataList::AISDeviceDataList()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.zhichenhaixin.proto.AISDeviceDataList)
}

void AISDeviceDataList::InitAsDefaultInstance() {
}

AISDeviceDataList::AISDeviceDataList(const AISDeviceDataList& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:com.zhichenhaixin.proto.AISDeviceDataList)
}

void AISDeviceDataList::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AISDeviceDataList::~AISDeviceDataList() {
  // @@protoc_insertion_point(destructor:com.zhichenhaixin.proto.AISDeviceDataList)
  SharedDtor();
}

void AISDeviceDataList::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AISDeviceDataList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AISDeviceDataList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AISDeviceDataList_descriptor_;
}

const AISDeviceDataList& AISDeviceDataList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ZCHXAISVessel_2eproto();
  return *default_instance_;
}

AISDeviceDataList* AISDeviceDataList::default_instance_ = NULL;

AISDeviceDataList* AISDeviceDataList::New() const {
  return new AISDeviceDataList;
}

void AISDeviceDataList::Clear() {
  ais_device_list_.Clear();
  bd_device_list_.Clear();
  cdma_device_list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AISDeviceDataList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.zhichenhaixin.proto.AISDeviceDataList)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .com.zhichenhaixin.proto.AISDeviceData ais_device_list = 1;
      case 1: {
        if (tag == 10) {
         parse_ais_device_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_ais_device_list()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_ais_device_list;
        if (input->ExpectTag(18)) goto parse_bd_device_list;
        break;
      }

      // repeated .com.zhichenhaixin.proto.AISDeviceData bd_device_list = 2;
      case 2: {
        if (tag == 18) {
         parse_bd_device_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_bd_device_list()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_bd_device_list;
        if (input->ExpectTag(26)) goto parse_cdma_device_list;
        break;
      }

      // repeated .com.zhichenhaixin.proto.AISDeviceData cdma_device_list = 3;
      case 3: {
        if (tag == 26) {
         parse_cdma_device_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_cdma_device_list()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_cdma_device_list;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.zhichenhaixin.proto.AISDeviceDataList)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.zhichenhaixin.proto.AISDeviceDataList)
  return false;
#undef DO_
}

void AISDeviceDataList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.zhichenhaixin.proto.AISDeviceDataList)
  // repeated .com.zhichenhaixin.proto.AISDeviceData ais_device_list = 1;
  for (int i = 0; i < this->ais_device_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->ais_device_list(i), output);
  }

  // repeated .com.zhichenhaixin.proto.AISDeviceData bd_device_list = 2;
  for (int i = 0; i < this->bd_device_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->bd_device_list(i), output);
  }

  // repeated .com.zhichenhaixin.proto.AISDeviceData cdma_device_list = 3;
  for (int i = 0; i < this->cdma_device_list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->cdma_device_list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.zhichenhaixin.proto.AISDeviceDataList)
}

::google::protobuf::uint8* AISDeviceDataList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.zhichenhaixin.proto.AISDeviceDataList)
  // repeated .com.zhichenhaixin.proto.AISDeviceData ais_device_list = 1;
  for (int i = 0; i < this->ais_device_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->ais_device_list(i), target);
  }

  // repeated .com.zhichenhaixin.proto.AISDeviceData bd_device_list = 2;
  for (int i = 0; i < this->bd_device_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->bd_device_list(i), target);
  }

  // repeated .com.zhichenhaixin.proto.AISDeviceData cdma_device_list = 3;
  for (int i = 0; i < this->cdma_device_list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->cdma_device_list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.zhichenhaixin.proto.AISDeviceDataList)
  return target;
}

int AISDeviceDataList::ByteSize() const {
  int total_size = 0;

  // repeated .com.zhichenhaixin.proto.AISDeviceData ais_device_list = 1;
  total_size += 1 * this->ais_device_list_size();
  for (int i = 0; i < this->ais_device_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->ais_device_list(i));
  }

  // repeated .com.zhichenhaixin.proto.AISDeviceData bd_device_list = 2;
  total_size += 1 * this->bd_device_list_size();
  for (int i = 0; i < this->bd_device_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->bd_device_list(i));
  }

  // repeated .com.zhichenhaixin.proto.AISDeviceData cdma_device_list = 3;
  total_size += 1 * this->cdma_device_list_size();
  for (int i = 0; i < this->cdma_device_list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->cdma_device_list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AISDeviceDataList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AISDeviceDataList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AISDeviceDataList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AISDeviceDataList::MergeFrom(const AISDeviceDataList& from) {
  GOOGLE_CHECK_NE(&from, this);
  ais_device_list_.MergeFrom(from.ais_device_list_);
  bd_device_list_.MergeFrom(from.bd_device_list_);
  cdma_device_list_.MergeFrom(from.cdma_device_list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AISDeviceDataList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AISDeviceDataList::CopyFrom(const AISDeviceDataList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AISDeviceDataList::IsInitialized() const {

  return true;
}

void AISDeviceDataList::Swap(AISDeviceDataList* other) {
  if (other != this) {
    ais_device_list_.Swap(&other->ais_device_list_);
    bd_device_list_.Swap(&other->bd_device_list_);
    cdma_device_list_.Swap(&other->cdma_device_list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AISDeviceDataList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AISDeviceDataList_descriptor_;
  metadata.reflection = AISDeviceDataList_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AISMeet::kIdFieldNumber;
const int AISMeet::kLatFieldNumber;
const int AISMeet::kLonFieldNumber;
const int AISMeet::kDisranceFieldNumber;
const int AISMeet::kUTCFieldNumber;
#endif  // !_MSC_VER

AISMeet::AISMeet()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.zhichenhaixin.proto.AISMeet)
}

void AISMeet::InitAsDefaultInstance() {
}

AISMeet::AISMeet(const AISMeet& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:com.zhichenhaixin.proto.AISMeet)
}

void AISMeet::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  lat_ = 0;
  lon_ = 0;
  disrance_ = 0;
  utc_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AISMeet::~AISMeet() {
  // @@protoc_insertion_point(destructor:com.zhichenhaixin.proto.AISMeet)
  SharedDtor();
}

void AISMeet::SharedDtor() {
  if (id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete id_;
  }
  if (this != default_instance_) {
  }
}

void AISMeet::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AISMeet::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AISMeet_descriptor_;
}

const AISMeet& AISMeet::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ZCHXAISVessel_2eproto();
  return *default_instance_;
}

AISMeet* AISMeet::default_instance_ = NULL;

AISMeet* AISMeet::New() const {
  return new AISMeet;
}

void AISMeet::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<AISMeet*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(lat_, utc_);
    if (has_id()) {
      if (id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        id_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AISMeet::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.zhichenhaixin.proto.AISMeet)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string id = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->id().data(), this->id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "id");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(17)) goto parse_lat;
        break;
      }

      // required double lat = 2;
      case 2: {
        if (tag == 17) {
         parse_lat:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &lat_)));
          set_has_lat();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(25)) goto parse_lon;
        break;
      }

      // required double lon = 3;
      case 3: {
        if (tag == 25) {
         parse_lon:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &lon_)));
          set_has_lon();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(33)) goto parse_disrance;
        break;
      }

      // required double disrance = 4;
      case 4: {
        if (tag == 33) {
         parse_disrance:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &disrance_)));
          set_has_disrance();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_UTC;
        break;
      }

      // required uint64 UTC = 5;
      case 5: {
        if (tag == 40) {
         parse_UTC:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &utc_)));
          set_has_utc();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.zhichenhaixin.proto.AISMeet)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.zhichenhaixin.proto.AISMeet)
  return false;
#undef DO_
}

void AISMeet::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.zhichenhaixin.proto.AISMeet)
  // required string id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->id(), output);
  }

  // required double lat = 2;
  if (has_lat()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->lat(), output);
  }

  // required double lon = 3;
  if (has_lon()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->lon(), output);
  }

  // required double disrance = 4;
  if (has_disrance()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->disrance(), output);
  }

  // required uint64 UTC = 5;
  if (has_utc()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->utc(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.zhichenhaixin.proto.AISMeet)
}

::google::protobuf::uint8* AISMeet::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.zhichenhaixin.proto.AISMeet)
  // required string id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->id(), target);
  }

  // required double lat = 2;
  if (has_lat()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->lat(), target);
  }

  // required double lon = 3;
  if (has_lon()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->lon(), target);
  }

  // required double disrance = 4;
  if (has_disrance()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->disrance(), target);
  }

  // required uint64 UTC = 5;
  if (has_utc()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->utc(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.zhichenhaixin.proto.AISMeet)
  return target;
}

int AISMeet::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->id());
    }

    // required double lat = 2;
    if (has_lat()) {
      total_size += 1 + 8;
    }

    // required double lon = 3;
    if (has_lon()) {
      total_size += 1 + 8;
    }

    // required double disrance = 4;
    if (has_disrance()) {
      total_size += 1 + 8;
    }

    // required uint64 UTC = 5;
    if (has_utc()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->utc());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AISMeet::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AISMeet* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AISMeet*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AISMeet::MergeFrom(const AISMeet& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_lat()) {
      set_lat(from.lat());
    }
    if (from.has_lon()) {
      set_lon(from.lon());
    }
    if (from.has_disrance()) {
      set_disrance(from.disrance());
    }
    if (from.has_utc()) {
      set_utc(from.utc());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AISMeet::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AISMeet::CopyFrom(const AISMeet& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AISMeet::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;

  return true;
}

void AISMeet::Swap(AISMeet* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(lat_, other->lat_);
    std::swap(lon_, other->lon_);
    std::swap(disrance_, other->disrance_);
    std::swap(utc_, other->utc_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AISMeet::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AISMeet_descriptor_;
  metadata.reflection = AISMeet_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AISVesselData::kIdFieldNumber;
const int AISVesselData::kMmsiFieldNumber;
const int AISVesselData::kShiptypeFieldNumber;
const int AISVesselData::kNavStatusFieldNumber;
const int AISVesselData::kRotFieldNumber;
const int AISVesselData::kSogFieldNumber;
const int AISVesselData::kLonFieldNumber;
const int AISVesselData::kLatFieldNumber;
const int AISVesselData::kCogFieldNumber;
const int AISVesselData::kHeadingFieldNumber;
const int AISVesselData::kImoFieldNumber;
const int AISVesselData::kCallSignFieldNumber;
const int AISVesselData::kShipNameFieldNumber;
const int AISVesselData::kCargoTypeFieldNumber;
const int AISVesselData::kCountryFieldNumber;
const int AISVesselData::kVendorIDFieldNumber;
const int AISVesselData::kShipLengthFieldNumber;
const int AISVesselData::kShipWidthFieldNumber;
const int AISVesselData::kToBowFieldNumber;
const int AISVesselData::kToSternFieldNumber;
const int AISVesselData::kToPortFieldNumber;
const int AISVesselData::kToStarboardFieldNumber;
const int AISVesselData::kFixTypeFieldNumber;
const int AISVesselData::kEtaFieldNumber;
const int AISVesselData::kDraughtFieldNumber;
const int AISVesselData::kDestFieldNumber;
const int AISVesselData::kUTCFieldNumber;
const int AISVesselData::kStatusFieldNumber;
const int AISVesselData::kWarnUtcFieldNumber;
const int AISVesselData::kWarnColorFieldNumber;
const int AISVesselData::kWarnStatusFieldNumber;
const int AISVesselData::kIconNumberFieldNumber;
const int AISVesselData::kIconStreamFieldNumber;
const int AISVesselData::kIconMarkFieldNumber;
const int AISVesselData::kCdmaPhoneFieldNumber;
const int AISVesselData::kBdIdFieldNumber;
const int AISVesselData::kShipNoFieldNumber;
const int AISVesselData::kDistShipDistrictFieldNumber;
const int AISVesselData::kShipPortFieldNumber;
const int AISVesselData::kShipDeepFieldNumber;
const int AISVesselData::kShipTotTonFieldNumber;
const int AISVesselData::kShipNetTonFieldNumber;
const int AISVesselData::kShipTotPowerFieldNumber;
const int AISVesselData::kDictShipMaterialFieldNumber;
const int AISVesselData::kShipBuildCompDateFieldNumber;
const int AISVesselData::kOwnerNameFieldNumber;
const int AISVesselData::kOwnerAddrFieldNumber;
const int AISVesselData::kOwnerTelFieldNumber;
const int AISVesselData::kFishingPermitPeriodDateFieldNumber;
const int AISVesselData::kFishingPermitNumberFieldNumber;
const int AISVesselData::kVesselCertPeriodDateFieldNumber;
const int AISVesselData::kVesselCertNumberFieldNumber;
const int AISVesselData::kRegisterPeriodDateFieldNumber;
const int AISVesselData::kRegisterNumberFieldNumber;
const int AISVesselData::kGroupNameFieldNumber;
const int AISVesselData::kPosTypeFieldNumber;
const int AISVesselData::kVdescFieldNumber;
const int AISVesselData::kTypeFieldNumber;
const int AISVesselData::kDeviceListFieldNumber;
const int AISVesselData::kPointMeetFieldNumber;
const int AISVesselData::kOnlineStatusFieldNumber;
const int AISVesselData::kPrepCountFieldNumber;
const int AISVesselData::kUtcSpacingFieldNumber;
const int AISVesselData::kDefenceIdFieldNumber;
const int AISVesselData::kDefenceNameFieldNumber;
const int AISVesselData::kDefenceTypeFieldNumber;
const int AISVesselData::kLastLonFieldNumber;
const int AISVesselData::kLastLatFieldNumber;
const int AISVesselData::kLastCogFieldNumber;
const int AISVesselData::kKeyPointNumberFieldNumber;
const int AISVesselData::kMarkTypeFieldNumber;
const int AISVesselData::kAlarmtypeFieldNumber;
const int AISVesselData::kAlarmgradeFieldNumber;
const int AISVesselData::kAlarmvalueFieldNumber;
const int AISVesselData::kRiskvalueFieldNumber;
const int AISVesselData::kCpaAttrFieldNumber;
const int AISVesselData::kRicIsSoundFieldNumber;
const int AISVesselData::kRicIsPopupFieldNumber;
#endif  // !_MSC_VER

AISVesselData::AISVesselData()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.zhichenhaixin.proto.AISVesselData)
}

void AISVesselData::InitAsDefaultInstance() {
  device_list_ = const_cast< ::com::zhichenhaixin::proto::AISDeviceDataList*>(&::com::zhichenhaixin::proto::AISDeviceDataList::default_instance());
}

AISVesselData::AISVesselData(const AISVesselData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:com.zhichenhaixin.proto.AISVesselData)
}

void AISVesselData::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  mmsi_ = GOOGLE_LONGLONG(0);
  shiptype_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  navstatus_ = 0;
  rot_ = 0;
  sog_ = 0;
  lon_ = 0;
  lat_ = 0;
  cog_ = 0;
  heading_ = 0;
  imo_ = 0;
  callsign_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  shipname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  cargotype_ = 0;
  country_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  vendorid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  shiplength_ = 0;
  shipwidth_ = 0;
  tobow_ = 0;
  tostern_ = 0;
  toport_ = 0;
  tostarboard_ = 0;
  fixtype_ = 0;
  eta_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  draught_ = 0;
  dest_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  utc_ = GOOGLE_ULONGLONG(0);
  status_ = 0;
  warn_utc_ = GOOGLE_LONGLONG(0);
  warn_color_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  warn_status_ = 0;
  icon_number_ = 0;
  icon_stream_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  icon_mark_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  cdma_phone_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  bd_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ship_no_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  dist_ship_district_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ship_port_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ship_deep_ = 0;
  ship_tot_ton_ = 0;
  ship_net_ton_ = 0;
  ship_tot_power_ = 0;
  dict_ship_material_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ship_build_comp_date_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  owner_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  owner_addr_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  owner_tel_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  fishing_permit_period_date_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  fishing_permit_number_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  vessel_cert_period_date_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  vessel_cert_number_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  register_period_date_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  register_number_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  group_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  pos_type_ = 0;
  vdesc_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  type_ = 0;
  device_list_ = NULL;
  onlinestatus_ = 0;
  prepcount_ = 0;
  utc_spacing_ = GOOGLE_LONGLONG(0);
  defenceid_ = 0;
  defencename_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  defencetype_ = 0;
  last_lon_ = 0;
  last_lat_ = 0;
  last_cog_ = 0;
  keypointnumber_ = 0;
  mark_type_ = 0;
  alarmtype_ = 0;
  alarmgrade_ = 0;
  alarmvalue_ = 0;
  riskvalue_ = 0;
  cpaattr_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ricissound_ = false;
  ricispopup_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AISVesselData::~AISVesselData() {
  // @@protoc_insertion_point(destructor:com.zhichenhaixin.proto.AISVesselData)
  SharedDtor();
}

void AISVesselData::SharedDtor() {
  if (id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete id_;
  }
  if (shiptype_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete shiptype_;
  }
  if (callsign_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete callsign_;
  }
  if (shipname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete shipname_;
  }
  if (country_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete country_;
  }
  if (vendorid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete vendorid_;
  }
  if (eta_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete eta_;
  }
  if (dest_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete dest_;
  }
  if (warn_color_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete warn_color_;
  }
  if (icon_stream_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete icon_stream_;
  }
  if (icon_mark_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete icon_mark_;
  }
  if (cdma_phone_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete cdma_phone_;
  }
  if (bd_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete bd_id_;
  }
  if (ship_no_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete ship_no_;
  }
  if (dist_ship_district_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete dist_ship_district_;
  }
  if (ship_port_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete ship_port_;
  }
  if (dict_ship_material_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete dict_ship_material_;
  }
  if (ship_build_comp_date_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete ship_build_comp_date_;
  }
  if (owner_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete owner_name_;
  }
  if (owner_addr_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete owner_addr_;
  }
  if (owner_tel_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete owner_tel_;
  }
  if (fishing_permit_period_date_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete fishing_permit_period_date_;
  }
  if (fishing_permit_number_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete fishing_permit_number_;
  }
  if (vessel_cert_period_date_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete vessel_cert_period_date_;
  }
  if (vessel_cert_number_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete vessel_cert_number_;
  }
  if (register_period_date_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete register_period_date_;
  }
  if (register_number_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete register_number_;
  }
  if (group_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete group_name_;
  }
  if (vdesc_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete vdesc_;
  }
  if (defencename_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete defencename_;
  }
  if (cpaattr_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete cpaattr_;
  }
  if (this != default_instance_) {
    delete device_list_;
  }
}

void AISVesselData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AISVesselData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AISVesselData_descriptor_;
}

const AISVesselData& AISVesselData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ZCHXAISVessel_2eproto();
  return *default_instance_;
}

AISVesselData* AISVesselData::default_instance_ = NULL;

AISVesselData* AISVesselData::New() const {
  return new AISVesselData;
}

void AISVesselData::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<AISVesselData*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(navstatus_, sog_);
    if (has_id()) {
      if (id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        id_->clear();
      }
    }
    mmsi_ = GOOGLE_LONGLONG(0);
    if (has_shiptype()) {
      if (shiptype_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        shiptype_->clear();
      }
    }
    lat_ = 0;
  }
  if (_has_bits_[8 / 32] & 65280) {
    ZR_(heading_, imo_);
    cog_ = 0;
    if (has_callsign()) {
      if (callsign_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        callsign_->clear();
      }
    }
    if (has_shipname()) {
      if (shipname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        shipname_->clear();
      }
    }
    cargotype_ = 0;
    if (has_country()) {
      if (country_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        country_->clear();
      }
    }
    if (has_vendorid()) {
      if (vendorid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        vendorid_->clear();
      }
    }
  }
  if (_has_bits_[16 / 32] & 16711680) {
    ZR_(tobow_, fixtype_);
    if (has_eta()) {
      if (eta_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        eta_->clear();
      }
    }
  }
  if (_has_bits_[24 / 32] & 4278190080) {
    ZR_(draught_, warn_utc_);
    ZR_(warn_status_, icon_number_);
    if (has_dest()) {
      if (dest_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        dest_->clear();
      }
    }
    if (has_warn_color()) {
      if (warn_color_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        warn_color_->clear();
      }
    }
  }
  if (_has_bits_[32 / 32] & 255) {
    if (has_icon_stream()) {
      if (icon_stream_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        icon_stream_->clear();
      }
    }
    if (has_icon_mark()) {
      if (icon_mark_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        icon_mark_->clear();
      }
    }
    if (has_cdma_phone()) {
      if (cdma_phone_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        cdma_phone_->clear();
      }
    }
    if (has_bd_id()) {
      if (bd_id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        bd_id_->clear();
      }
    }
    if (has_ship_no()) {
      if (ship_no_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        ship_no_->clear();
      }
    }
    if (has_dist_ship_district()) {
      if (dist_ship_district_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        dist_ship_district_->clear();
      }
    }
    if (has_ship_port()) {
      if (ship_port_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        ship_port_->clear();
      }
    }
    ship_deep_ = 0;
  }
  if (_has_bits_[40 / 32] & 65280) {
    ZR_(ship_tot_ton_, ship_tot_power_);
    if (has_dict_ship_material()) {
      if (dict_ship_material_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        dict_ship_material_->clear();
      }
    }
    if (has_ship_build_comp_date()) {
      if (ship_build_comp_date_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        ship_build_comp_date_->clear();
      }
    }
    if (has_owner_name()) {
      if (owner_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        owner_name_->clear();
      }
    }
    if (has_owner_addr()) {
      if (owner_addr_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        owner_addr_->clear();
      }
    }
    if (has_owner_tel()) {
      if (owner_tel_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        owner_tel_->clear();
      }
    }
  }
  if (_has_bits_[48 / 32] & 16711680) {
    if (has_fishing_permit_period_date()) {
      if (fishing_permit_period_date_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        fishing_permit_period_date_->clear();
      }
    }
    if (has_fishing_permit_number()) {
      if (fishing_permit_number_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        fishing_permit_number_->clear();
      }
    }
    if (has_vessel_cert_period_date()) {
      if (vessel_cert_period_date_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        vessel_cert_period_date_->clear();
      }
    }
    if (has_vessel_cert_number()) {
      if (vessel_cert_number_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        vessel_cert_number_->clear();
      }
    }
    if (has_register_period_date()) {
      if (register_period_date_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        register_period_date_->clear();
      }
    }
    if (has_register_number()) {
      if (register_number_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        register_number_->clear();
      }
    }
    if (has_group_name()) {
      if (group_name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        group_name_->clear();
      }
    }
    pos_type_ = 0;
  }
  if (_has_bits_[56 / 32] & 4143972352) {
    ZR_(onlinestatus_, utc_spacing_);
    if (has_vdesc()) {
      if (vdesc_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        vdesc_->clear();
      }
    }
    type_ = 0;
    if (has_device_list()) {
      if (device_list_ != NULL) device_list_->::com::zhichenhaixin::proto::AISDeviceDataList::Clear();
    }
    defenceid_ = 0;
  }
  if (_has_bits_[64 / 32] & 255) {
    ZR_(defencetype_, alarmtype_);
    if (has_defencename()) {
      if (defencename_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        defencename_->clear();
      }
    }
  }
  if (_has_bits_[72 / 32] & 16128) {
    ZR_(alarmgrade_, riskvalue_);
    ZR_(ricissound_, ricispopup_);
    if (has_cpaattr()) {
      if (cpaattr_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        cpaattr_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  pointmeet_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AISVesselData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.zhichenhaixin.proto.AISVesselData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string id = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->id().data(), this->id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "id");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_mmsi;
        break;
      }

      // required int64 mmsi = 2;
      case 2: {
        if (tag == 16) {
         parse_mmsi:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &mmsi_)));
          set_has_mmsi();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_shiptype;
        break;
      }

      // required string shiptype = 3;
      case 3: {
        if (tag == 26) {
         parse_shiptype:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_shiptype()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->shiptype().data(), this->shiptype().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "shiptype");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_navStatus;
        break;
      }

      // required .com.zhichenhaixin.proto.NAVI_STATUS navStatus = 4;
      case 4: {
        if (tag == 32) {
         parse_navStatus:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::com::zhichenhaixin::proto::NAVI_STATUS_IsValid(value)) {
            set_navstatus(static_cast< ::com::zhichenhaixin::proto::NAVI_STATUS >(value));
          } else {
            mutable_unknown_fields()->AddVarint(4, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(45)) goto parse_rot;
        break;
      }

      // required float rot = 5;
      case 5: {
        if (tag == 45) {
         parse_rot:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &rot_)));
          set_has_rot();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(53)) goto parse_sog;
        break;
      }

      // required float sog = 6;
      case 6: {
        if (tag == 53) {
         parse_sog:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &sog_)));
          set_has_sog();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(57)) goto parse_lon;
        break;
      }

      // required double lon = 7;
      case 7: {
        if (tag == 57) {
         parse_lon:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &lon_)));
          set_has_lon();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(65)) goto parse_lat;
        break;
      }

      // required double lat = 8;
      case 8: {
        if (tag == 65) {
         parse_lat:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &lat_)));
          set_has_lat();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(77)) goto parse_cog;
        break;
      }

      // required float cog = 9;
      case 9: {
        if (tag == 77) {
         parse_cog:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &cog_)));
          set_has_cog();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(85)) goto parse_heading;
        break;
      }

      // required float heading = 10;
      case 10: {
        if (tag == 85) {
         parse_heading:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &heading_)));
          set_has_heading();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_imo;
        break;
      }

      // optional int32 imo = 11;
      case 11: {
        if (tag == 88) {
         parse_imo:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &imo_)));
          set_has_imo();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(98)) goto parse_callSign;
        break;
      }

      // optional string callSign = 12;
      case 12: {
        if (tag == 98) {
         parse_callSign:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_callsign()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->callsign().data(), this->callsign().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "callsign");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(106)) goto parse_shipName;
        break;
      }

      // optional string shipName = 13;
      case 13: {
        if (tag == 106) {
         parse_shipName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_shipname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->shipname().data(), this->shipname().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "shipname");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(112)) goto parse_cargoType;
        break;
      }

      // optional int32 cargoType = 14;
      case 14: {
        if (tag == 112) {
         parse_cargoType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cargotype_)));
          set_has_cargotype();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(122)) goto parse_country;
        break;
      }

      // optional string country = 15;
      case 15: {
        if (tag == 122) {
         parse_country:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_country()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->country().data(), this->country().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "country");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(130)) goto parse_vendorID;
        break;
      }

      // optional string vendorID = 16;
      case 16: {
        if (tag == 130) {
         parse_vendorID:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_vendorid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->vendorid().data(), this->vendorid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "vendorid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(137)) goto parse_shipLength;
        break;
      }

      // optional double shipLength = 17;
      case 17: {
        if (tag == 137) {
         parse_shipLength:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &shiplength_)));
          set_has_shiplength();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(145)) goto parse_shipWidth;
        break;
      }

      // optional double shipWidth = 18;
      case 18: {
        if (tag == 145) {
         parse_shipWidth:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &shipwidth_)));
          set_has_shipwidth();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(152)) goto parse_toBow;
        break;
      }

      // optional int32 toBow = 19;
      case 19: {
        if (tag == 152) {
         parse_toBow:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tobow_)));
          set_has_tobow();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(160)) goto parse_toStern;
        break;
      }

      // optional int32 toStern = 20;
      case 20: {
        if (tag == 160) {
         parse_toStern:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tostern_)));
          set_has_tostern();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(168)) goto parse_toPort;
        break;
      }

      // optional int32 toPort = 21;
      case 21: {
        if (tag == 168) {
         parse_toPort:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &toport_)));
          set_has_toport();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(176)) goto parse_toStarboard;
        break;
      }

      // optional int32 toStarboard = 22;
      case 22: {
        if (tag == 176) {
         parse_toStarboard:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tostarboard_)));
          set_has_tostarboard();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(184)) goto parse_fixType;
        break;
      }

      // optional .com.zhichenhaixin.proto.EPFD fixType = 23;
      case 23: {
        if (tag == 184) {
         parse_fixType:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::com::zhichenhaixin::proto::EPFD_IsValid(value)) {
            set_fixtype(static_cast< ::com::zhichenhaixin::proto::EPFD >(value));
          } else {
            mutable_unknown_fields()->AddVarint(23, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(194)) goto parse_eta;
        break;
      }

      // optional string eta = 24;
      case 24: {
        if (tag == 194) {
         parse_eta:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_eta()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->eta().data(), this->eta().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "eta");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(205)) goto parse_draught;
        break;
      }

      // optional float draught = 25;
      case 25: {
        if (tag == 205) {
         parse_draught:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &draught_)));
          set_has_draught();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(210)) goto parse_dest;
        break;
      }

      // optional string dest = 26;
      case 26: {
        if (tag == 210) {
         parse_dest:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_dest()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->dest().data(), this->dest().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "dest");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(216)) goto parse_UTC;
        break;
      }

      // required uint64 UTC = 27;
      case 27: {
        if (tag == 216) {
         parse_UTC:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &utc_)));
          set_has_utc();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(224)) goto parse_status;
        break;
      }

      // optional int32 status = 28;
      case 28: {
        if (tag == 224) {
         parse_status:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &status_)));
          set_has_status();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(232)) goto parse_warn_utc;
        break;
      }

      // optional int64 warn_utc = 29;
      case 29: {
        if (tag == 232) {
         parse_warn_utc:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &warn_utc_)));
          set_has_warn_utc();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(242)) goto parse_warn_color;
        break;
      }

      // optional string warn_color = 30;
      case 30: {
        if (tag == 242) {
         parse_warn_color:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_warn_color()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->warn_color().data(), this->warn_color().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "warn_color");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(248)) goto parse_warn_status;
        break;
      }

      // optional int32 warn_status = 31;
      case 31: {
        if (tag == 248) {
         parse_warn_status:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &warn_status_)));
          set_has_warn_status();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(256)) goto parse_icon_number;
        break;
      }

      // optional int32 icon_number = 32;
      case 32: {
        if (tag == 256) {
         parse_icon_number:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &icon_number_)));
          set_has_icon_number();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(266)) goto parse_icon_stream;
        break;
      }

      // optional bytes icon_stream = 33;
      case 33: {
        if (tag == 266) {
         parse_icon_stream:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_icon_stream()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(274)) goto parse_icon_mark;
        break;
      }

      // optional string icon_mark = 34;
      case 34: {
        if (tag == 274) {
         parse_icon_mark:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_icon_mark()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->icon_mark().data(), this->icon_mark().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "icon_mark");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(282)) goto parse_cdma_phone;
        break;
      }

      // optional string cdma_phone = 35;
      case 35: {
        if (tag == 282) {
         parse_cdma_phone:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_cdma_phone()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->cdma_phone().data(), this->cdma_phone().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "cdma_phone");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(290)) goto parse_bd_id;
        break;
      }

      // optional string bd_id = 36;
      case 36: {
        if (tag == 290) {
         parse_bd_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_bd_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->bd_id().data(), this->bd_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "bd_id");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(298)) goto parse_ship_no;
        break;
      }

      // optional string ship_no = 37;
      case 37: {
        if (tag == 298) {
         parse_ship_no:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ship_no()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->ship_no().data(), this->ship_no().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ship_no");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(306)) goto parse_dist_ship_district;
        break;
      }

      // optional string dist_ship_district = 38;
      case 38: {
        if (tag == 306) {
         parse_dist_ship_district:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_dist_ship_district()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->dist_ship_district().data(), this->dist_ship_district().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "dist_ship_district");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(314)) goto parse_ship_port;
        break;
      }

      // optional string ship_port = 39;
      case 39: {
        if (tag == 314) {
         parse_ship_port:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ship_port()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->ship_port().data(), this->ship_port().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ship_port");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(321)) goto parse_ship_deep;
        break;
      }

      // optional double ship_deep = 40;
      case 40: {
        if (tag == 321) {
         parse_ship_deep:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &ship_deep_)));
          set_has_ship_deep();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(329)) goto parse_ship_tot_ton;
        break;
      }

      // optional double ship_tot_ton = 41;
      case 41: {
        if (tag == 329) {
         parse_ship_tot_ton:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &ship_tot_ton_)));
          set_has_ship_tot_ton();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(337)) goto parse_ship_net_ton;
        break;
      }

      // optional double ship_net_ton = 42;
      case 42: {
        if (tag == 337) {
         parse_ship_net_ton:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &ship_net_ton_)));
          set_has_ship_net_ton();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(345)) goto parse_ship_tot_power;
        break;
      }

      // optional double ship_tot_power = 43;
      case 43: {
        if (tag == 345) {
         parse_ship_tot_power:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &ship_tot_power_)));
          set_has_ship_tot_power();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(354)) goto parse_dict_ship_material;
        break;
      }

      // optional string dict_ship_material = 44;
      case 44: {
        if (tag == 354) {
         parse_dict_ship_material:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_dict_ship_material()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->dict_ship_material().data(), this->dict_ship_material().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "dict_ship_material");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(362)) goto parse_ship_build_comp_date;
        break;
      }

      // optional string ship_build_comp_date = 45;
      case 45: {
        if (tag == 362) {
         parse_ship_build_comp_date:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ship_build_comp_date()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->ship_build_comp_date().data(), this->ship_build_comp_date().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "ship_build_comp_date");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(370)) goto parse_owner_name;
        break;
      }

      // optional string owner_name = 46;
      case 46: {
        if (tag == 370) {
         parse_owner_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_owner_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->owner_name().data(), this->owner_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "owner_name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(378)) goto parse_owner_addr;
        break;
      }

      // optional string owner_addr = 47;
      case 47: {
        if (tag == 378) {
         parse_owner_addr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_owner_addr()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->owner_addr().data(), this->owner_addr().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "owner_addr");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(386)) goto parse_owner_tel;
        break;
      }

      // optional string owner_tel = 48;
      case 48: {
        if (tag == 386) {
         parse_owner_tel:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_owner_tel()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->owner_tel().data(), this->owner_tel().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "owner_tel");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(394)) goto parse_fishing_permit_period_date;
        break;
      }

      // optional string fishing_permit_period_date = 49;
      case 49: {
        if (tag == 394) {
         parse_fishing_permit_period_date:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_fishing_permit_period_date()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->fishing_permit_period_date().data(), this->fishing_permit_period_date().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "fishing_permit_period_date");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(402)) goto parse_fishing_permit_number;
        break;
      }

      // optional string fishing_permit_number = 50;
      case 50: {
        if (tag == 402) {
         parse_fishing_permit_number:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_fishing_permit_number()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->fishing_permit_number().data(), this->fishing_permit_number().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "fishing_permit_number");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(410)) goto parse_vessel_cert_period_date;
        break;
      }

      // optional string vessel_cert_period_date = 51;
      case 51: {
        if (tag == 410) {
         parse_vessel_cert_period_date:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_vessel_cert_period_date()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->vessel_cert_period_date().data(), this->vessel_cert_period_date().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "vessel_cert_period_date");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(418)) goto parse_vessel_cert_number;
        break;
      }

      // optional string vessel_cert_number = 52;
      case 52: {
        if (tag == 418) {
         parse_vessel_cert_number:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_vessel_cert_number()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->vessel_cert_number().data(), this->vessel_cert_number().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "vessel_cert_number");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(426)) goto parse_register_period_date;
        break;
      }

      // optional string register_period_date = 53;
      case 53: {
        if (tag == 426) {
         parse_register_period_date:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_register_period_date()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->register_period_date().data(), this->register_period_date().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "register_period_date");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(434)) goto parse_register_number;
        break;
      }

      // optional string register_number = 54;
      case 54: {
        if (tag == 434) {
         parse_register_number:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_register_number()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->register_number().data(), this->register_number().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "register_number");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(442)) goto parse_group_name;
        break;
      }

      // optional string group_name = 55;
      case 55: {
        if (tag == 442) {
         parse_group_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_group_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->group_name().data(), this->group_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "group_name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(448)) goto parse_pos_type;
        break;
      }

      // optional int32 pos_type = 56;
      case 56: {
        if (tag == 448) {
         parse_pos_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pos_type_)));
          set_has_pos_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(458)) goto parse_vdesc;
        break;
      }

      // optional string vdesc = 57;
      case 57: {
        if (tag == 458) {
         parse_vdesc:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_vdesc()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->vdesc().data(), this->vdesc().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "vdesc");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(464)) goto parse_type;
        break;
      }

      // optional int32 type = 58;
      case 58: {
        if (tag == 464) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(474)) goto parse_device_list;
        break;
      }

      // optional .com.zhichenhaixin.proto.AISDeviceDataList device_list = 59;
      case 59: {
        if (tag == 474) {
         parse_device_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_device_list()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(482)) goto parse_pointMeet;
        break;
      }

      // repeated .com.zhichenhaixin.proto.AISMeet pointMeet = 60;
      case 60: {
        if (tag == 482) {
         parse_pointMeet:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_pointmeet()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(482)) goto parse_pointMeet;
        if (input->ExpectTag(488)) goto parse_onlineStatus;
        break;
      }

      // optional int32 onlineStatus = 61;
      case 61: {
        if (tag == 488) {
         parse_onlineStatus:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &onlinestatus_)));
          set_has_onlinestatus();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(496)) goto parse_prepCount;
        break;
      }

      // optional int32 prepCount = 62;
      case 62: {
        if (tag == 496) {
         parse_prepCount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &prepcount_)));
          set_has_prepcount();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(504)) goto parse_utc_spacing;
        break;
      }

      // optional int64 utc_spacing = 63;
      case 63: {
        if (tag == 504) {
         parse_utc_spacing:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &utc_spacing_)));
          set_has_utc_spacing();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(512)) goto parse_defenceId;
        break;
      }

      // optional int32 defenceId = 64;
      case 64: {
        if (tag == 512) {
         parse_defenceId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &defenceid_)));
          set_has_defenceid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(522)) goto parse_defenceName;
        break;
      }

      // optional string defenceName = 65;
      case 65: {
        if (tag == 522) {
         parse_defenceName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_defencename()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->defencename().data(), this->defencename().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "defencename");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(528)) goto parse_defenceType;
        break;
      }

      // optional int32 defenceType = 66;
      case 66: {
        if (tag == 528) {
         parse_defenceType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &defencetype_)));
          set_has_defencetype();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(537)) goto parse_last_lon;
        break;
      }

      // optional double last_lon = 67;
      case 67: {
        if (tag == 537) {
         parse_last_lon:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &last_lon_)));
          set_has_last_lon();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(545)) goto parse_last_lat;
        break;
      }

      // optional double last_lat = 68;
      case 68: {
        if (tag == 545) {
         parse_last_lat:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &last_lat_)));
          set_has_last_lat();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(553)) goto parse_last_cog;
        break;
      }

      // optional double last_cog = 69;
      case 69: {
        if (tag == 553) {
         parse_last_cog:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &last_cog_)));
          set_has_last_cog();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(560)) goto parse_keyPointNumber;
        break;
      }

      // optional int32 keyPointNumber = 70;
      case 70: {
        if (tag == 560) {
         parse_keyPointNumber:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &keypointnumber_)));
          set_has_keypointnumber();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(568)) goto parse_mark_type;
        break;
      }

      // optional int32 mark_type = 71;
      case 71: {
        if (tag == 568) {
         parse_mark_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mark_type_)));
          set_has_mark_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(576)) goto parse_alarmtype;
        break;
      }

      // optional int32 alarmtype = 72;
      case 72: {
        if (tag == 576) {
         parse_alarmtype:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &alarmtype_)));
          set_has_alarmtype();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(584)) goto parse_alarmgrade;
        break;
      }

      // optional int32 alarmgrade = 73;
      case 73: {
        if (tag == 584) {
         parse_alarmgrade:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &alarmgrade_)));
          set_has_alarmgrade();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(593)) goto parse_alarmvalue;
        break;
      }

      // optional double alarmvalue = 74;
      case 74: {
        if (tag == 593) {
         parse_alarmvalue:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &alarmvalue_)));
          set_has_alarmvalue();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(601)) goto parse_riskvalue;
        break;
      }

      // optional double riskvalue = 75;
      case 75: {
        if (tag == 601) {
         parse_riskvalue:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &riskvalue_)));
          set_has_riskvalue();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(610)) goto parse_cpaAttr;
        break;
      }

      // optional string cpaAttr = 76;
      case 76: {
        if (tag == 610) {
         parse_cpaAttr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_cpaattr()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->cpaattr().data(), this->cpaattr().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "cpaattr");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(616)) goto parse_ricIsSound;
        break;
      }

      // optional bool ricIsSound = 77;
      case 77: {
        if (tag == 616) {
         parse_ricIsSound:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &ricissound_)));
          set_has_ricissound();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(624)) goto parse_ricIsPopup;
        break;
      }

      // optional bool ricIsPopup = 78;
      case 78: {
        if (tag == 624) {
         parse_ricIsPopup:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &ricispopup_)));
          set_has_ricispopup();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.zhichenhaixin.proto.AISVesselData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.zhichenhaixin.proto.AISVesselData)
  return false;
#undef DO_
}

void AISVesselData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.zhichenhaixin.proto.AISVesselData)
  // required string id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->id(), output);
  }

  // required int64 mmsi = 2;
  if (has_mmsi()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->mmsi(), output);
  }

  // required string shiptype = 3;
  if (has_shiptype()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->shiptype().data(), this->shiptype().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "shiptype");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->shiptype(), output);
  }

  // required .com.zhichenhaixin.proto.NAVI_STATUS navStatus = 4;
  if (has_navstatus()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->navstatus(), output);
  }

  // required float rot = 5;
  if (has_rot()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->rot(), output);
  }

  // required float sog = 6;
  if (has_sog()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->sog(), output);
  }

  // required double lon = 7;
  if (has_lon()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(7, this->lon(), output);
  }

  // required double lat = 8;
  if (has_lat()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(8, this->lat(), output);
  }

  // required float cog = 9;
  if (has_cog()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(9, this->cog(), output);
  }

  // required float heading = 10;
  if (has_heading()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(10, this->heading(), output);
  }

  // optional int32 imo = 11;
  if (has_imo()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->imo(), output);
  }

  // optional string callSign = 12;
  if (has_callsign()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->callsign().data(), this->callsign().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "callsign");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      12, this->callsign(), output);
  }

  // optional string shipName = 13;
  if (has_shipname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->shipname().data(), this->shipname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "shipname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      13, this->shipname(), output);
  }

  // optional int32 cargoType = 14;
  if (has_cargotype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(14, this->cargotype(), output);
  }

  // optional string country = 15;
  if (has_country()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->country().data(), this->country().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "country");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      15, this->country(), output);
  }

  // optional string vendorID = 16;
  if (has_vendorid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->vendorid().data(), this->vendorid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "vendorid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      16, this->vendorid(), output);
  }

  // optional double shipLength = 17;
  if (has_shiplength()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(17, this->shiplength(), output);
  }

  // optional double shipWidth = 18;
  if (has_shipwidth()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(18, this->shipwidth(), output);
  }

  // optional int32 toBow = 19;
  if (has_tobow()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(19, this->tobow(), output);
  }

  // optional int32 toStern = 20;
  if (has_tostern()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(20, this->tostern(), output);
  }

  // optional int32 toPort = 21;
  if (has_toport()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(21, this->toport(), output);
  }

  // optional int32 toStarboard = 22;
  if (has_tostarboard()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(22, this->tostarboard(), output);
  }

  // optional .com.zhichenhaixin.proto.EPFD fixType = 23;
  if (has_fixtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      23, this->fixtype(), output);
  }

  // optional string eta = 24;
  if (has_eta()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->eta().data(), this->eta().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "eta");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      24, this->eta(), output);
  }

  // optional float draught = 25;
  if (has_draught()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(25, this->draught(), output);
  }

  // optional string dest = 26;
  if (has_dest()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->dest().data(), this->dest().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "dest");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      26, this->dest(), output);
  }

  // required uint64 UTC = 27;
  if (has_utc()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(27, this->utc(), output);
  }

  // optional int32 status = 28;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(28, this->status(), output);
  }

  // optional int64 warn_utc = 29;
  if (has_warn_utc()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(29, this->warn_utc(), output);
  }

  // optional string warn_color = 30;
  if (has_warn_color()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->warn_color().data(), this->warn_color().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "warn_color");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      30, this->warn_color(), output);
  }

  // optional int32 warn_status = 31;
  if (has_warn_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(31, this->warn_status(), output);
  }

  // optional int32 icon_number = 32;
  if (has_icon_number()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(32, this->icon_number(), output);
  }

  // optional bytes icon_stream = 33;
  if (has_icon_stream()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      33, this->icon_stream(), output);
  }

  // optional string icon_mark = 34;
  if (has_icon_mark()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->icon_mark().data(), this->icon_mark().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "icon_mark");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      34, this->icon_mark(), output);
  }

  // optional string cdma_phone = 35;
  if (has_cdma_phone()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->cdma_phone().data(), this->cdma_phone().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "cdma_phone");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      35, this->cdma_phone(), output);
  }

  // optional string bd_id = 36;
  if (has_bd_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->bd_id().data(), this->bd_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "bd_id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      36, this->bd_id(), output);
  }

  // optional string ship_no = 37;
  if (has_ship_no()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->ship_no().data(), this->ship_no().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ship_no");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      37, this->ship_no(), output);
  }

  // optional string dist_ship_district = 38;
  if (has_dist_ship_district()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->dist_ship_district().data(), this->dist_ship_district().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "dist_ship_district");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      38, this->dist_ship_district(), output);
  }

  // optional string ship_port = 39;
  if (has_ship_port()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->ship_port().data(), this->ship_port().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ship_port");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      39, this->ship_port(), output);
  }

  // optional double ship_deep = 40;
  if (has_ship_deep()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(40, this->ship_deep(), output);
  }

  // optional double ship_tot_ton = 41;
  if (has_ship_tot_ton()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(41, this->ship_tot_ton(), output);
  }

  // optional double ship_net_ton = 42;
  if (has_ship_net_ton()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(42, this->ship_net_ton(), output);
  }

  // optional double ship_tot_power = 43;
  if (has_ship_tot_power()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(43, this->ship_tot_power(), output);
  }

  // optional string dict_ship_material = 44;
  if (has_dict_ship_material()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->dict_ship_material().data(), this->dict_ship_material().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "dict_ship_material");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      44, this->dict_ship_material(), output);
  }

  // optional string ship_build_comp_date = 45;
  if (has_ship_build_comp_date()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->ship_build_comp_date().data(), this->ship_build_comp_date().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ship_build_comp_date");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      45, this->ship_build_comp_date(), output);
  }

  // optional string owner_name = 46;
  if (has_owner_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->owner_name().data(), this->owner_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "owner_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      46, this->owner_name(), output);
  }

  // optional string owner_addr = 47;
  if (has_owner_addr()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->owner_addr().data(), this->owner_addr().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "owner_addr");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      47, this->owner_addr(), output);
  }

  // optional string owner_tel = 48;
  if (has_owner_tel()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->owner_tel().data(), this->owner_tel().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "owner_tel");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      48, this->owner_tel(), output);
  }

  // optional string fishing_permit_period_date = 49;
  if (has_fishing_permit_period_date()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->fishing_permit_period_date().data(), this->fishing_permit_period_date().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "fishing_permit_period_date");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      49, this->fishing_permit_period_date(), output);
  }

  // optional string fishing_permit_number = 50;
  if (has_fishing_permit_number()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->fishing_permit_number().data(), this->fishing_permit_number().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "fishing_permit_number");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      50, this->fishing_permit_number(), output);
  }

  // optional string vessel_cert_period_date = 51;
  if (has_vessel_cert_period_date()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->vessel_cert_period_date().data(), this->vessel_cert_period_date().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "vessel_cert_period_date");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      51, this->vessel_cert_period_date(), output);
  }

  // optional string vessel_cert_number = 52;
  if (has_vessel_cert_number()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->vessel_cert_number().data(), this->vessel_cert_number().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "vessel_cert_number");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      52, this->vessel_cert_number(), output);
  }

  // optional string register_period_date = 53;
  if (has_register_period_date()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->register_period_date().data(), this->register_period_date().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "register_period_date");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      53, this->register_period_date(), output);
  }

  // optional string register_number = 54;
  if (has_register_number()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->register_number().data(), this->register_number().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "register_number");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      54, this->register_number(), output);
  }

  // optional string group_name = 55;
  if (has_group_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->group_name().data(), this->group_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "group_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      55, this->group_name(), output);
  }

  // optional int32 pos_type = 56;
  if (has_pos_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(56, this->pos_type(), output);
  }

  // optional string vdesc = 57;
  if (has_vdesc()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->vdesc().data(), this->vdesc().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "vdesc");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      57, this->vdesc(), output);
  }

  // optional int32 type = 58;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(58, this->type(), output);
  }

  // optional .com.zhichenhaixin.proto.AISDeviceDataList device_list = 59;
  if (has_device_list()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      59, this->device_list(), output);
  }

  // repeated .com.zhichenhaixin.proto.AISMeet pointMeet = 60;
  for (int i = 0; i < this->pointmeet_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      60, this->pointmeet(i), output);
  }

  // optional int32 onlineStatus = 61;
  if (has_onlinestatus()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(61, this->onlinestatus(), output);
  }

  // optional int32 prepCount = 62;
  if (has_prepcount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(62, this->prepcount(), output);
  }

  // optional int64 utc_spacing = 63;
  if (has_utc_spacing()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(63, this->utc_spacing(), output);
  }

  // optional int32 defenceId = 64;
  if (has_defenceid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(64, this->defenceid(), output);
  }

  // optional string defenceName = 65;
  if (has_defencename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->defencename().data(), this->defencename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "defencename");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      65, this->defencename(), output);
  }

  // optional int32 defenceType = 66;
  if (has_defencetype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(66, this->defencetype(), output);
  }

  // optional double last_lon = 67;
  if (has_last_lon()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(67, this->last_lon(), output);
  }

  // optional double last_lat = 68;
  if (has_last_lat()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(68, this->last_lat(), output);
  }

  // optional double last_cog = 69;
  if (has_last_cog()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(69, this->last_cog(), output);
  }

  // optional int32 keyPointNumber = 70;
  if (has_keypointnumber()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(70, this->keypointnumber(), output);
  }

  // optional int32 mark_type = 71;
  if (has_mark_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(71, this->mark_type(), output);
  }

  // optional int32 alarmtype = 72;
  if (has_alarmtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(72, this->alarmtype(), output);
  }

  // optional int32 alarmgrade = 73;
  if (has_alarmgrade()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(73, this->alarmgrade(), output);
  }

  // optional double alarmvalue = 74;
  if (has_alarmvalue()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(74, this->alarmvalue(), output);
  }

  // optional double riskvalue = 75;
  if (has_riskvalue()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(75, this->riskvalue(), output);
  }

  // optional string cpaAttr = 76;
  if (has_cpaattr()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->cpaattr().data(), this->cpaattr().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "cpaattr");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      76, this->cpaattr(), output);
  }

  // optional bool ricIsSound = 77;
  if (has_ricissound()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(77, this->ricissound(), output);
  }

  // optional bool ricIsPopup = 78;
  if (has_ricispopup()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(78, this->ricispopup(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.zhichenhaixin.proto.AISVesselData)
}

::google::protobuf::uint8* AISVesselData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.zhichenhaixin.proto.AISVesselData)
  // required string id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->id(), target);
  }

  // required int64 mmsi = 2;
  if (has_mmsi()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->mmsi(), target);
  }

  // required string shiptype = 3;
  if (has_shiptype()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->shiptype().data(), this->shiptype().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "shiptype");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->shiptype(), target);
  }

  // required .com.zhichenhaixin.proto.NAVI_STATUS navStatus = 4;
  if (has_navstatus()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->navstatus(), target);
  }

  // required float rot = 5;
  if (has_rot()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->rot(), target);
  }

  // required float sog = 6;
  if (has_sog()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(6, this->sog(), target);
  }

  // required double lon = 7;
  if (has_lon()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(7, this->lon(), target);
  }

  // required double lat = 8;
  if (has_lat()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(8, this->lat(), target);
  }

  // required float cog = 9;
  if (has_cog()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(9, this->cog(), target);
  }

  // required float heading = 10;
  if (has_heading()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(10, this->heading(), target);
  }

  // optional int32 imo = 11;
  if (has_imo()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->imo(), target);
  }

  // optional string callSign = 12;
  if (has_callsign()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->callsign().data(), this->callsign().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "callsign");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        12, this->callsign(), target);
  }

  // optional string shipName = 13;
  if (has_shipname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->shipname().data(), this->shipname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "shipname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        13, this->shipname(), target);
  }

  // optional int32 cargoType = 14;
  if (has_cargotype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(14, this->cargotype(), target);
  }

  // optional string country = 15;
  if (has_country()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->country().data(), this->country().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "country");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        15, this->country(), target);
  }

  // optional string vendorID = 16;
  if (has_vendorid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->vendorid().data(), this->vendorid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "vendorid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        16, this->vendorid(), target);
  }

  // optional double shipLength = 17;
  if (has_shiplength()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(17, this->shiplength(), target);
  }

  // optional double shipWidth = 18;
  if (has_shipwidth()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(18, this->shipwidth(), target);
  }

  // optional int32 toBow = 19;
  if (has_tobow()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(19, this->tobow(), target);
  }

  // optional int32 toStern = 20;
  if (has_tostern()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(20, this->tostern(), target);
  }

  // optional int32 toPort = 21;
  if (has_toport()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(21, this->toport(), target);
  }

  // optional int32 toStarboard = 22;
  if (has_tostarboard()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(22, this->tostarboard(), target);
  }

  // optional .com.zhichenhaixin.proto.EPFD fixType = 23;
  if (has_fixtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      23, this->fixtype(), target);
  }

  // optional string eta = 24;
  if (has_eta()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->eta().data(), this->eta().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "eta");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        24, this->eta(), target);
  }

  // optional float draught = 25;
  if (has_draught()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(25, this->draught(), target);
  }

  // optional string dest = 26;
  if (has_dest()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->dest().data(), this->dest().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "dest");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        26, this->dest(), target);
  }

  // required uint64 UTC = 27;
  if (has_utc()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(27, this->utc(), target);
  }

  // optional int32 status = 28;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(28, this->status(), target);
  }

  // optional int64 warn_utc = 29;
  if (has_warn_utc()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(29, this->warn_utc(), target);
  }

  // optional string warn_color = 30;
  if (has_warn_color()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->warn_color().data(), this->warn_color().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "warn_color");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        30, this->warn_color(), target);
  }

  // optional int32 warn_status = 31;
  if (has_warn_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(31, this->warn_status(), target);
  }

  // optional int32 icon_number = 32;
  if (has_icon_number()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(32, this->icon_number(), target);
  }

  // optional bytes icon_stream = 33;
  if (has_icon_stream()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        33, this->icon_stream(), target);
  }

  // optional string icon_mark = 34;
  if (has_icon_mark()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->icon_mark().data(), this->icon_mark().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "icon_mark");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        34, this->icon_mark(), target);
  }

  // optional string cdma_phone = 35;
  if (has_cdma_phone()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->cdma_phone().data(), this->cdma_phone().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "cdma_phone");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        35, this->cdma_phone(), target);
  }

  // optional string bd_id = 36;
  if (has_bd_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->bd_id().data(), this->bd_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "bd_id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        36, this->bd_id(), target);
  }

  // optional string ship_no = 37;
  if (has_ship_no()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->ship_no().data(), this->ship_no().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ship_no");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        37, this->ship_no(), target);
  }

  // optional string dist_ship_district = 38;
  if (has_dist_ship_district()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->dist_ship_district().data(), this->dist_ship_district().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "dist_ship_district");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        38, this->dist_ship_district(), target);
  }

  // optional string ship_port = 39;
  if (has_ship_port()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->ship_port().data(), this->ship_port().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ship_port");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        39, this->ship_port(), target);
  }

  // optional double ship_deep = 40;
  if (has_ship_deep()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(40, this->ship_deep(), target);
  }

  // optional double ship_tot_ton = 41;
  if (has_ship_tot_ton()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(41, this->ship_tot_ton(), target);
  }

  // optional double ship_net_ton = 42;
  if (has_ship_net_ton()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(42, this->ship_net_ton(), target);
  }

  // optional double ship_tot_power = 43;
  if (has_ship_tot_power()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(43, this->ship_tot_power(), target);
  }

  // optional string dict_ship_material = 44;
  if (has_dict_ship_material()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->dict_ship_material().data(), this->dict_ship_material().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "dict_ship_material");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        44, this->dict_ship_material(), target);
  }

  // optional string ship_build_comp_date = 45;
  if (has_ship_build_comp_date()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->ship_build_comp_date().data(), this->ship_build_comp_date().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "ship_build_comp_date");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        45, this->ship_build_comp_date(), target);
  }

  // optional string owner_name = 46;
  if (has_owner_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->owner_name().data(), this->owner_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "owner_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        46, this->owner_name(), target);
  }

  // optional string owner_addr = 47;
  if (has_owner_addr()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->owner_addr().data(), this->owner_addr().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "owner_addr");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        47, this->owner_addr(), target);
  }

  // optional string owner_tel = 48;
  if (has_owner_tel()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->owner_tel().data(), this->owner_tel().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "owner_tel");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        48, this->owner_tel(), target);
  }

  // optional string fishing_permit_period_date = 49;
  if (has_fishing_permit_period_date()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->fishing_permit_period_date().data(), this->fishing_permit_period_date().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "fishing_permit_period_date");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        49, this->fishing_permit_period_date(), target);
  }

  // optional string fishing_permit_number = 50;
  if (has_fishing_permit_number()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->fishing_permit_number().data(), this->fishing_permit_number().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "fishing_permit_number");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        50, this->fishing_permit_number(), target);
  }

  // optional string vessel_cert_period_date = 51;
  if (has_vessel_cert_period_date()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->vessel_cert_period_date().data(), this->vessel_cert_period_date().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "vessel_cert_period_date");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        51, this->vessel_cert_period_date(), target);
  }

  // optional string vessel_cert_number = 52;
  if (has_vessel_cert_number()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->vessel_cert_number().data(), this->vessel_cert_number().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "vessel_cert_number");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        52, this->vessel_cert_number(), target);
  }

  // optional string register_period_date = 53;
  if (has_register_period_date()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->register_period_date().data(), this->register_period_date().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "register_period_date");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        53, this->register_period_date(), target);
  }

  // optional string register_number = 54;
  if (has_register_number()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->register_number().data(), this->register_number().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "register_number");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        54, this->register_number(), target);
  }

  // optional string group_name = 55;
  if (has_group_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->group_name().data(), this->group_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "group_name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        55, this->group_name(), target);
  }

  // optional int32 pos_type = 56;
  if (has_pos_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(56, this->pos_type(), target);
  }

  // optional string vdesc = 57;
  if (has_vdesc()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->vdesc().data(), this->vdesc().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "vdesc");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        57, this->vdesc(), target);
  }

  // optional int32 type = 58;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(58, this->type(), target);
  }

  // optional .com.zhichenhaixin.proto.AISDeviceDataList device_list = 59;
  if (has_device_list()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        59, this->device_list(), target);
  }

  // repeated .com.zhichenhaixin.proto.AISMeet pointMeet = 60;
  for (int i = 0; i < this->pointmeet_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        60, this->pointmeet(i), target);
  }

  // optional int32 onlineStatus = 61;
  if (has_onlinestatus()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(61, this->onlinestatus(), target);
  }

  // optional int32 prepCount = 62;
  if (has_prepcount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(62, this->prepcount(), target);
  }

  // optional int64 utc_spacing = 63;
  if (has_utc_spacing()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(63, this->utc_spacing(), target);
  }

  // optional int32 defenceId = 64;
  if (has_defenceid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(64, this->defenceid(), target);
  }

  // optional string defenceName = 65;
  if (has_defencename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->defencename().data(), this->defencename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "defencename");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        65, this->defencename(), target);
  }

  // optional int32 defenceType = 66;
  if (has_defencetype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(66, this->defencetype(), target);
  }

  // optional double last_lon = 67;
  if (has_last_lon()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(67, this->last_lon(), target);
  }

  // optional double last_lat = 68;
  if (has_last_lat()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(68, this->last_lat(), target);
  }

  // optional double last_cog = 69;
  if (has_last_cog()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(69, this->last_cog(), target);
  }

  // optional int32 keyPointNumber = 70;
  if (has_keypointnumber()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(70, this->keypointnumber(), target);
  }

  // optional int32 mark_type = 71;
  if (has_mark_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(71, this->mark_type(), target);
  }

  // optional int32 alarmtype = 72;
  if (has_alarmtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(72, this->alarmtype(), target);
  }

  // optional int32 alarmgrade = 73;
  if (has_alarmgrade()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(73, this->alarmgrade(), target);
  }

  // optional double alarmvalue = 74;
  if (has_alarmvalue()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(74, this->alarmvalue(), target);
  }

  // optional double riskvalue = 75;
  if (has_riskvalue()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(75, this->riskvalue(), target);
  }

  // optional string cpaAttr = 76;
  if (has_cpaattr()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->cpaattr().data(), this->cpaattr().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "cpaattr");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        76, this->cpaattr(), target);
  }

  // optional bool ricIsSound = 77;
  if (has_ricissound()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(77, this->ricissound(), target);
  }

  // optional bool ricIsPopup = 78;
  if (has_ricispopup()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(78, this->ricispopup(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.zhichenhaixin.proto.AISVesselData)
  return target;
}

int AISVesselData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->id());
    }

    // required int64 mmsi = 2;
    if (has_mmsi()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->mmsi());
    }

    // required string shiptype = 3;
    if (has_shiptype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->shiptype());
    }

    // required .com.zhichenhaixin.proto.NAVI_STATUS navStatus = 4;
    if (has_navstatus()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->navstatus());
    }

    // required float rot = 5;
    if (has_rot()) {
      total_size += 1 + 4;
    }

    // required float sog = 6;
    if (has_sog()) {
      total_size += 1 + 4;
    }

    // required double lon = 7;
    if (has_lon()) {
      total_size += 1 + 8;
    }

    // required double lat = 8;
    if (has_lat()) {
      total_size += 1 + 8;
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required float cog = 9;
    if (has_cog()) {
      total_size += 1 + 4;
    }

    // required float heading = 10;
    if (has_heading()) {
      total_size += 1 + 4;
    }

    // optional int32 imo = 11;
    if (has_imo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->imo());
    }

    // optional string callSign = 12;
    if (has_callsign()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->callsign());
    }

    // optional string shipName = 13;
    if (has_shipname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->shipname());
    }

    // optional int32 cargoType = 14;
    if (has_cargotype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cargotype());
    }

    // optional string country = 15;
    if (has_country()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->country());
    }

    // optional string vendorID = 16;
    if (has_vendorid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->vendorid());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional double shipLength = 17;
    if (has_shiplength()) {
      total_size += 2 + 8;
    }

    // optional double shipWidth = 18;
    if (has_shipwidth()) {
      total_size += 2 + 8;
    }

    // optional int32 toBow = 19;
    if (has_tobow()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tobow());
    }

    // optional int32 toStern = 20;
    if (has_tostern()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tostern());
    }

    // optional int32 toPort = 21;
    if (has_toport()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->toport());
    }

    // optional int32 toStarboard = 22;
    if (has_tostarboard()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tostarboard());
    }

    // optional .com.zhichenhaixin.proto.EPFD fixType = 23;
    if (has_fixtype()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->fixtype());
    }

    // optional string eta = 24;
    if (has_eta()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->eta());
    }

  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    // optional float draught = 25;
    if (has_draught()) {
      total_size += 2 + 4;
    }

    // optional string dest = 26;
    if (has_dest()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->dest());
    }

    // required uint64 UTC = 27;
    if (has_utc()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->utc());
    }

    // optional int32 status = 28;
    if (has_status()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->status());
    }

    // optional int64 warn_utc = 29;
    if (has_warn_utc()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->warn_utc());
    }

    // optional string warn_color = 30;
    if (has_warn_color()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->warn_color());
    }

    // optional int32 warn_status = 31;
    if (has_warn_status()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->warn_status());
    }

    // optional int32 icon_number = 32;
    if (has_icon_number()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->icon_number());
    }

  }
  if (_has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    // optional bytes icon_stream = 33;
    if (has_icon_stream()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->icon_stream());
    }

    // optional string icon_mark = 34;
    if (has_icon_mark()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->icon_mark());
    }

    // optional string cdma_phone = 35;
    if (has_cdma_phone()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->cdma_phone());
    }

    // optional string bd_id = 36;
    if (has_bd_id()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->bd_id());
    }

    // optional string ship_no = 37;
    if (has_ship_no()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ship_no());
    }

    // optional string dist_ship_district = 38;
    if (has_dist_ship_district()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->dist_ship_district());
    }

    // optional string ship_port = 39;
    if (has_ship_port()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ship_port());
    }

    // optional double ship_deep = 40;
    if (has_ship_deep()) {
      total_size += 2 + 8;
    }

  }
  if (_has_bits_[40 / 32] & (0xffu << (40 % 32))) {
    // optional double ship_tot_ton = 41;
    if (has_ship_tot_ton()) {
      total_size += 2 + 8;
    }

    // optional double ship_net_ton = 42;
    if (has_ship_net_ton()) {
      total_size += 2 + 8;
    }

    // optional double ship_tot_power = 43;
    if (has_ship_tot_power()) {
      total_size += 2 + 8;
    }

    // optional string dict_ship_material = 44;
    if (has_dict_ship_material()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->dict_ship_material());
    }

    // optional string ship_build_comp_date = 45;
    if (has_ship_build_comp_date()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ship_build_comp_date());
    }

    // optional string owner_name = 46;
    if (has_owner_name()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->owner_name());
    }

    // optional string owner_addr = 47;
    if (has_owner_addr()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->owner_addr());
    }

    // optional string owner_tel = 48;
    if (has_owner_tel()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->owner_tel());
    }

  }
  if (_has_bits_[48 / 32] & (0xffu << (48 % 32))) {
    // optional string fishing_permit_period_date = 49;
    if (has_fishing_permit_period_date()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->fishing_permit_period_date());
    }

    // optional string fishing_permit_number = 50;
    if (has_fishing_permit_number()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->fishing_permit_number());
    }

    // optional string vessel_cert_period_date = 51;
    if (has_vessel_cert_period_date()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->vessel_cert_period_date());
    }

    // optional string vessel_cert_number = 52;
    if (has_vessel_cert_number()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->vessel_cert_number());
    }

    // optional string register_period_date = 53;
    if (has_register_period_date()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->register_period_date());
    }

    // optional string register_number = 54;
    if (has_register_number()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->register_number());
    }

    // optional string group_name = 55;
    if (has_group_name()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->group_name());
    }

    // optional int32 pos_type = 56;
    if (has_pos_type()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pos_type());
    }

  }
  if (_has_bits_[56 / 32] & (0xffu << (56 % 32))) {
    // optional string vdesc = 57;
    if (has_vdesc()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->vdesc());
    }

    // optional int32 type = 58;
    if (has_type()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

    // optional .com.zhichenhaixin.proto.AISDeviceDataList device_list = 59;
    if (has_device_list()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->device_list());
    }

    // optional int32 onlineStatus = 61;
    if (has_onlinestatus()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->onlinestatus());
    }

    // optional int32 prepCount = 62;
    if (has_prepcount()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->prepcount());
    }

    // optional int64 utc_spacing = 63;
    if (has_utc_spacing()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->utc_spacing());
    }

    // optional int32 defenceId = 64;
    if (has_defenceid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->defenceid());
    }

  }
  if (_has_bits_[64 / 32] & (0xffu << (64 % 32))) {
    // optional string defenceName = 65;
    if (has_defencename()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->defencename());
    }

    // optional int32 defenceType = 66;
    if (has_defencetype()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->defencetype());
    }

    // optional double last_lon = 67;
    if (has_last_lon()) {
      total_size += 2 + 8;
    }

    // optional double last_lat = 68;
    if (has_last_lat()) {
      total_size += 2 + 8;
    }

    // optional double last_cog = 69;
    if (has_last_cog()) {
      total_size += 2 + 8;
    }

    // optional int32 keyPointNumber = 70;
    if (has_keypointnumber()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->keypointnumber());
    }

    // optional int32 mark_type = 71;
    if (has_mark_type()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->mark_type());
    }

    // optional int32 alarmtype = 72;
    if (has_alarmtype()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->alarmtype());
    }

  }
  if (_has_bits_[72 / 32] & (0xffu << (72 % 32))) {
    // optional int32 alarmgrade = 73;
    if (has_alarmgrade()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->alarmgrade());
    }

    // optional double alarmvalue = 74;
    if (has_alarmvalue()) {
      total_size += 2 + 8;
    }

    // optional double riskvalue = 75;
    if (has_riskvalue()) {
      total_size += 2 + 8;
    }

    // optional string cpaAttr = 76;
    if (has_cpaattr()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->cpaattr());
    }

    // optional bool ricIsSound = 77;
    if (has_ricissound()) {
      total_size += 2 + 1;
    }

    // optional bool ricIsPopup = 78;
    if (has_ricispopup()) {
      total_size += 2 + 1;
    }

  }
  // repeated .com.zhichenhaixin.proto.AISMeet pointMeet = 60;
  total_size += 2 * this->pointmeet_size();
  for (int i = 0; i < this->pointmeet_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->pointmeet(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AISVesselData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AISVesselData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AISVesselData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AISVesselData::MergeFrom(const AISVesselData& from) {
  GOOGLE_CHECK_NE(&from, this);
  pointmeet_.MergeFrom(from.pointmeet_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_mmsi()) {
      set_mmsi(from.mmsi());
    }
    if (from.has_shiptype()) {
      set_shiptype(from.shiptype());
    }
    if (from.has_navstatus()) {
      set_navstatus(from.navstatus());
    }
    if (from.has_rot()) {
      set_rot(from.rot());
    }
    if (from.has_sog()) {
      set_sog(from.sog());
    }
    if (from.has_lon()) {
      set_lon(from.lon());
    }
    if (from.has_lat()) {
      set_lat(from.lat());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_cog()) {
      set_cog(from.cog());
    }
    if (from.has_heading()) {
      set_heading(from.heading());
    }
    if (from.has_imo()) {
      set_imo(from.imo());
    }
    if (from.has_callsign()) {
      set_callsign(from.callsign());
    }
    if (from.has_shipname()) {
      set_shipname(from.shipname());
    }
    if (from.has_cargotype()) {
      set_cargotype(from.cargotype());
    }
    if (from.has_country()) {
      set_country(from.country());
    }
    if (from.has_vendorid()) {
      set_vendorid(from.vendorid());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_shiplength()) {
      set_shiplength(from.shiplength());
    }
    if (from.has_shipwidth()) {
      set_shipwidth(from.shipwidth());
    }
    if (from.has_tobow()) {
      set_tobow(from.tobow());
    }
    if (from.has_tostern()) {
      set_tostern(from.tostern());
    }
    if (from.has_toport()) {
      set_toport(from.toport());
    }
    if (from.has_tostarboard()) {
      set_tostarboard(from.tostarboard());
    }
    if (from.has_fixtype()) {
      set_fixtype(from.fixtype());
    }
    if (from.has_eta()) {
      set_eta(from.eta());
    }
  }
  if (from._has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (from.has_draught()) {
      set_draught(from.draught());
    }
    if (from.has_dest()) {
      set_dest(from.dest());
    }
    if (from.has_utc()) {
      set_utc(from.utc());
    }
    if (from.has_status()) {
      set_status(from.status());
    }
    if (from.has_warn_utc()) {
      set_warn_utc(from.warn_utc());
    }
    if (from.has_warn_color()) {
      set_warn_color(from.warn_color());
    }
    if (from.has_warn_status()) {
      set_warn_status(from.warn_status());
    }
    if (from.has_icon_number()) {
      set_icon_number(from.icon_number());
    }
  }
  if (from._has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    if (from.has_icon_stream()) {
      set_icon_stream(from.icon_stream());
    }
    if (from.has_icon_mark()) {
      set_icon_mark(from.icon_mark());
    }
    if (from.has_cdma_phone()) {
      set_cdma_phone(from.cdma_phone());
    }
    if (from.has_bd_id()) {
      set_bd_id(from.bd_id());
    }
    if (from.has_ship_no()) {
      set_ship_no(from.ship_no());
    }
    if (from.has_dist_ship_district()) {
      set_dist_ship_district(from.dist_ship_district());
    }
    if (from.has_ship_port()) {
      set_ship_port(from.ship_port());
    }
    if (from.has_ship_deep()) {
      set_ship_deep(from.ship_deep());
    }
  }
  if (from._has_bits_[40 / 32] & (0xffu << (40 % 32))) {
    if (from.has_ship_tot_ton()) {
      set_ship_tot_ton(from.ship_tot_ton());
    }
    if (from.has_ship_net_ton()) {
      set_ship_net_ton(from.ship_net_ton());
    }
    if (from.has_ship_tot_power()) {
      set_ship_tot_power(from.ship_tot_power());
    }
    if (from.has_dict_ship_material()) {
      set_dict_ship_material(from.dict_ship_material());
    }
    if (from.has_ship_build_comp_date()) {
      set_ship_build_comp_date(from.ship_build_comp_date());
    }
    if (from.has_owner_name()) {
      set_owner_name(from.owner_name());
    }
    if (from.has_owner_addr()) {
      set_owner_addr(from.owner_addr());
    }
    if (from.has_owner_tel()) {
      set_owner_tel(from.owner_tel());
    }
  }
  if (from._has_bits_[48 / 32] & (0xffu << (48 % 32))) {
    if (from.has_fishing_permit_period_date()) {
      set_fishing_permit_period_date(from.fishing_permit_period_date());
    }
    if (from.has_fishing_permit_number()) {
      set_fishing_permit_number(from.fishing_permit_number());
    }
    if (from.has_vessel_cert_period_date()) {
      set_vessel_cert_period_date(from.vessel_cert_period_date());
    }
    if (from.has_vessel_cert_number()) {
      set_vessel_cert_number(from.vessel_cert_number());
    }
    if (from.has_register_period_date()) {
      set_register_period_date(from.register_period_date());
    }
    if (from.has_register_number()) {
      set_register_number(from.register_number());
    }
    if (from.has_group_name()) {
      set_group_name(from.group_name());
    }
    if (from.has_pos_type()) {
      set_pos_type(from.pos_type());
    }
  }
  if (from._has_bits_[56 / 32] & (0xffu << (56 % 32))) {
    if (from.has_vdesc()) {
      set_vdesc(from.vdesc());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_device_list()) {
      mutable_device_list()->::com::zhichenhaixin::proto::AISDeviceDataList::MergeFrom(from.device_list());
    }
    if (from.has_onlinestatus()) {
      set_onlinestatus(from.onlinestatus());
    }
    if (from.has_prepcount()) {
      set_prepcount(from.prepcount());
    }
    if (from.has_utc_spacing()) {
      set_utc_spacing(from.utc_spacing());
    }
    if (from.has_defenceid()) {
      set_defenceid(from.defenceid());
    }
  }
  if (from._has_bits_[64 / 32] & (0xffu << (64 % 32))) {
    if (from.has_defencename()) {
      set_defencename(from.defencename());
    }
    if (from.has_defencetype()) {
      set_defencetype(from.defencetype());
    }
    if (from.has_last_lon()) {
      set_last_lon(from.last_lon());
    }
    if (from.has_last_lat()) {
      set_last_lat(from.last_lat());
    }
    if (from.has_last_cog()) {
      set_last_cog(from.last_cog());
    }
    if (from.has_keypointnumber()) {
      set_keypointnumber(from.keypointnumber());
    }
    if (from.has_mark_type()) {
      set_mark_type(from.mark_type());
    }
    if (from.has_alarmtype()) {
      set_alarmtype(from.alarmtype());
    }
  }
  if (from._has_bits_[72 / 32] & (0xffu << (72 % 32))) {
    if (from.has_alarmgrade()) {
      set_alarmgrade(from.alarmgrade());
    }
    if (from.has_alarmvalue()) {
      set_alarmvalue(from.alarmvalue());
    }
    if (from.has_riskvalue()) {
      set_riskvalue(from.riskvalue());
    }
    if (from.has_cpaattr()) {
      set_cpaattr(from.cpaattr());
    }
    if (from.has_ricissound()) {
      set_ricissound(from.ricissound());
    }
    if (from.has_ricispopup()) {
      set_ricispopup(from.ricispopup());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AISVesselData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AISVesselData::CopyFrom(const AISVesselData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AISVesselData::IsInitialized() const {
  if ((_has_bits_[0] & 0x040003ff) != 0x040003ff) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->pointmeet())) return false;
  return true;
}

void AISVesselData::Swap(AISVesselData* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(mmsi_, other->mmsi_);
    std::swap(shiptype_, other->shiptype_);
    std::swap(navstatus_, other->navstatus_);
    std::swap(rot_, other->rot_);
    std::swap(sog_, other->sog_);
    std::swap(lon_, other->lon_);
    std::swap(lat_, other->lat_);
    std::swap(cog_, other->cog_);
    std::swap(heading_, other->heading_);
    std::swap(imo_, other->imo_);
    std::swap(callsign_, other->callsign_);
    std::swap(shipname_, other->shipname_);
    std::swap(cargotype_, other->cargotype_);
    std::swap(country_, other->country_);
    std::swap(vendorid_, other->vendorid_);
    std::swap(shiplength_, other->shiplength_);
    std::swap(shipwidth_, other->shipwidth_);
    std::swap(tobow_, other->tobow_);
    std::swap(tostern_, other->tostern_);
    std::swap(toport_, other->toport_);
    std::swap(tostarboard_, other->tostarboard_);
    std::swap(fixtype_, other->fixtype_);
    std::swap(eta_, other->eta_);
    std::swap(draught_, other->draught_);
    std::swap(dest_, other->dest_);
    std::swap(utc_, other->utc_);
    std::swap(status_, other->status_);
    std::swap(warn_utc_, other->warn_utc_);
    std::swap(warn_color_, other->warn_color_);
    std::swap(warn_status_, other->warn_status_);
    std::swap(icon_number_, other->icon_number_);
    std::swap(icon_stream_, other->icon_stream_);
    std::swap(icon_mark_, other->icon_mark_);
    std::swap(cdma_phone_, other->cdma_phone_);
    std::swap(bd_id_, other->bd_id_);
    std::swap(ship_no_, other->ship_no_);
    std::swap(dist_ship_district_, other->dist_ship_district_);
    std::swap(ship_port_, other->ship_port_);
    std::swap(ship_deep_, other->ship_deep_);
    std::swap(ship_tot_ton_, other->ship_tot_ton_);
    std::swap(ship_net_ton_, other->ship_net_ton_);
    std::swap(ship_tot_power_, other->ship_tot_power_);
    std::swap(dict_ship_material_, other->dict_ship_material_);
    std::swap(ship_build_comp_date_, other->ship_build_comp_date_);
    std::swap(owner_name_, other->owner_name_);
    std::swap(owner_addr_, other->owner_addr_);
    std::swap(owner_tel_, other->owner_tel_);
    std::swap(fishing_permit_period_date_, other->fishing_permit_period_date_);
    std::swap(fishing_permit_number_, other->fishing_permit_number_);
    std::swap(vessel_cert_period_date_, other->vessel_cert_period_date_);
    std::swap(vessel_cert_number_, other->vessel_cert_number_);
    std::swap(register_period_date_, other->register_period_date_);
    std::swap(register_number_, other->register_number_);
    std::swap(group_name_, other->group_name_);
    std::swap(pos_type_, other->pos_type_);
    std::swap(vdesc_, other->vdesc_);
    std::swap(type_, other->type_);
    std::swap(device_list_, other->device_list_);
    pointmeet_.Swap(&other->pointmeet_);
    std::swap(onlinestatus_, other->onlinestatus_);
    std::swap(prepcount_, other->prepcount_);
    std::swap(utc_spacing_, other->utc_spacing_);
    std::swap(defenceid_, other->defenceid_);
    std::swap(defencename_, other->defencename_);
    std::swap(defencetype_, other->defencetype_);
    std::swap(last_lon_, other->last_lon_);
    std::swap(last_lat_, other->last_lat_);
    std::swap(last_cog_, other->last_cog_);
    std::swap(keypointnumber_, other->keypointnumber_);
    std::swap(mark_type_, other->mark_type_);
    std::swap(alarmtype_, other->alarmtype_);
    std::swap(alarmgrade_, other->alarmgrade_);
    std::swap(alarmvalue_, other->alarmvalue_);
    std::swap(riskvalue_, other->riskvalue_);
    std::swap(cpaattr_, other->cpaattr_);
    std::swap(ricissound_, other->ricissound_);
    std::swap(ricispopup_, other->ricispopup_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_has_bits_[1], other->_has_bits_[1]);
    std::swap(_has_bits_[2], other->_has_bits_[2]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AISVesselData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AISVesselData_descriptor_;
  metadata.reflection = AISVesselData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AISVesselDataList::kAisDataFieldNumber;
const int AISVesselDataList::kLengthFieldNumber;
#endif  // !_MSC_VER

AISVesselDataList::AISVesselDataList()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.zhichenhaixin.proto.AISVesselDataList)
}

void AISVesselDataList::InitAsDefaultInstance() {
}

AISVesselDataList::AISVesselDataList(const AISVesselDataList& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:com.zhichenhaixin.proto.AISVesselDataList)
}

void AISVesselDataList::SharedCtor() {
  _cached_size_ = 0;
  length_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AISVesselDataList::~AISVesselDataList() {
  // @@protoc_insertion_point(destructor:com.zhichenhaixin.proto.AISVesselDataList)
  SharedDtor();
}

void AISVesselDataList::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AISVesselDataList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AISVesselDataList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AISVesselDataList_descriptor_;
}

const AISVesselDataList& AISVesselDataList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ZCHXAISVessel_2eproto();
  return *default_instance_;
}

AISVesselDataList* AISVesselDataList::default_instance_ = NULL;

AISVesselDataList* AISVesselDataList::New() const {
  return new AISVesselDataList;
}

void AISVesselDataList::Clear() {
  length_ = 0;
  aisdata_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AISVesselDataList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.zhichenhaixin.proto.AISVesselDataList)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .com.zhichenhaixin.proto.AISVesselData aisData = 1;
      case 1: {
        if (tag == 10) {
         parse_aisData:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_aisdata()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_aisData;
        if (input->ExpectTag(16)) goto parse_length;
        break;
      }

      // optional int32 length = 2;
      case 2: {
        if (tag == 16) {
         parse_length:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &length_)));
          set_has_length();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.zhichenhaixin.proto.AISVesselDataList)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.zhichenhaixin.proto.AISVesselDataList)
  return false;
#undef DO_
}

void AISVesselDataList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.zhichenhaixin.proto.AISVesselDataList)
  // repeated .com.zhichenhaixin.proto.AISVesselData aisData = 1;
  for (int i = 0; i < this->aisdata_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->aisdata(i), output);
  }

  // optional int32 length = 2;
  if (has_length()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->length(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.zhichenhaixin.proto.AISVesselDataList)
}

::google::protobuf::uint8* AISVesselDataList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.zhichenhaixin.proto.AISVesselDataList)
  // repeated .com.zhichenhaixin.proto.AISVesselData aisData = 1;
  for (int i = 0; i < this->aisdata_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->aisdata(i), target);
  }

  // optional int32 length = 2;
  if (has_length()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->length(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.zhichenhaixin.proto.AISVesselDataList)
  return target;
}

int AISVesselDataList::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional int32 length = 2;
    if (has_length()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->length());
    }

  }
  // repeated .com.zhichenhaixin.proto.AISVesselData aisData = 1;
  total_size += 1 * this->aisdata_size();
  for (int i = 0; i < this->aisdata_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->aisdata(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AISVesselDataList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AISVesselDataList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AISVesselDataList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AISVesselDataList::MergeFrom(const AISVesselDataList& from) {
  GOOGLE_CHECK_NE(&from, this);
  aisdata_.MergeFrom(from.aisdata_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_length()) {
      set_length(from.length());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AISVesselDataList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AISVesselDataList::CopyFrom(const AISVesselDataList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AISVesselDataList::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->aisdata())) return false;
  return true;
}

void AISVesselDataList::Swap(AISVesselDataList* other) {
  if (other != this) {
    aisdata_.Swap(&other->aisdata_);
    std::swap(length_, other->length_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AISVesselDataList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AISVesselDataList_descriptor_;
  metadata.reflection = AISVesselDataList_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int VesselTrack::kIdFieldNumber;
const int VesselTrack::kMmsiFieldNumber;
const int VesselTrack::kShiptypeFieldNumber;
const int VesselTrack::kNavStatusFieldNumber;
const int VesselTrack::kRotFieldNumber;
const int VesselTrack::kSogFieldNumber;
const int VesselTrack::kLonFieldNumber;
const int VesselTrack::kLatFieldNumber;
const int VesselTrack::kCogFieldNumber;
const int VesselTrack::kHeadingFieldNumber;
const int VesselTrack::kUTCFieldNumber;
#endif  // !_MSC_VER

VesselTrack::VesselTrack()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.zhichenhaixin.proto.VesselTrack)
}

void VesselTrack::InitAsDefaultInstance() {
}

VesselTrack::VesselTrack(const VesselTrack& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:com.zhichenhaixin.proto.VesselTrack)
}

void VesselTrack::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  mmsi_ = 0;
  shiptype_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  navstatus_ = 0;
  rot_ = 0;
  sog_ = 0;
  lon_ = 0;
  lat_ = 0;
  cog_ = 0;
  heading_ = 0;
  utc_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

VesselTrack::~VesselTrack() {
  // @@protoc_insertion_point(destructor:com.zhichenhaixin.proto.VesselTrack)
  SharedDtor();
}

void VesselTrack::SharedDtor() {
  if (id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete id_;
  }
  if (shiptype_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete shiptype_;
  }
  if (this != default_instance_) {
  }
}

void VesselTrack::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* VesselTrack::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return VesselTrack_descriptor_;
}

const VesselTrack& VesselTrack::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ZCHXAISVessel_2eproto();
  return *default_instance_;
}

VesselTrack* VesselTrack::default_instance_ = NULL;

VesselTrack* VesselTrack::New() const {
  return new VesselTrack;
}

void VesselTrack::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<VesselTrack*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(mmsi_, lat_);
    if (has_id()) {
      if (id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        id_->clear();
      }
    }
    if (has_shiptype()) {
      if (shiptype_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        shiptype_->clear();
      }
    }
  }
  ZR_(cog_, utc_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool VesselTrack::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.zhichenhaixin.proto.VesselTrack)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string id = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->id().data(), this->id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "id");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_mmsi;
        break;
      }

      // required int32 mmsi = 2;
      case 2: {
        if (tag == 16) {
         parse_mmsi:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mmsi_)));
          set_has_mmsi();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_shiptype;
        break;
      }

      // required string shiptype = 3;
      case 3: {
        if (tag == 26) {
         parse_shiptype:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_shiptype()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->shiptype().data(), this->shiptype().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "shiptype");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_navStatus;
        break;
      }

      // required .com.zhichenhaixin.proto.NAVI_STATUS navStatus = 4;
      case 4: {
        if (tag == 32) {
         parse_navStatus:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::com::zhichenhaixin::proto::NAVI_STATUS_IsValid(value)) {
            set_navstatus(static_cast< ::com::zhichenhaixin::proto::NAVI_STATUS >(value));
          } else {
            mutable_unknown_fields()->AddVarint(4, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(45)) goto parse_rot;
        break;
      }

      // required float rot = 5;
      case 5: {
        if (tag == 45) {
         parse_rot:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &rot_)));
          set_has_rot();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(53)) goto parse_sog;
        break;
      }

      // required float sog = 6;
      case 6: {
        if (tag == 53) {
         parse_sog:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &sog_)));
          set_has_sog();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(57)) goto parse_lon;
        break;
      }

      // required double lon = 7;
      case 7: {
        if (tag == 57) {
         parse_lon:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &lon_)));
          set_has_lon();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(65)) goto parse_lat;
        break;
      }

      // required double lat = 8;
      case 8: {
        if (tag == 65) {
         parse_lat:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &lat_)));
          set_has_lat();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(77)) goto parse_cog;
        break;
      }

      // required float cog = 9;
      case 9: {
        if (tag == 77) {
         parse_cog:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &cog_)));
          set_has_cog();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(85)) goto parse_heading;
        break;
      }

      // required float heading = 10;
      case 10: {
        if (tag == 85) {
         parse_heading:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &heading_)));
          set_has_heading();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_UTC;
        break;
      }

      // required uint64 UTC = 11;
      case 11: {
        if (tag == 88) {
         parse_UTC:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &utc_)));
          set_has_utc();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.zhichenhaixin.proto.VesselTrack)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.zhichenhaixin.proto.VesselTrack)
  return false;
#undef DO_
}

void VesselTrack::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.zhichenhaixin.proto.VesselTrack)
  // required string id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->id(), output);
  }

  // required int32 mmsi = 2;
  if (has_mmsi()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->mmsi(), output);
  }

  // required string shiptype = 3;
  if (has_shiptype()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->shiptype().data(), this->shiptype().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "shiptype");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->shiptype(), output);
  }

  // required .com.zhichenhaixin.proto.NAVI_STATUS navStatus = 4;
  if (has_navstatus()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->navstatus(), output);
  }

  // required float rot = 5;
  if (has_rot()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->rot(), output);
  }

  // required float sog = 6;
  if (has_sog()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->sog(), output);
  }

  // required double lon = 7;
  if (has_lon()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(7, this->lon(), output);
  }

  // required double lat = 8;
  if (has_lat()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(8, this->lat(), output);
  }

  // required float cog = 9;
  if (has_cog()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(9, this->cog(), output);
  }

  // required float heading = 10;
  if (has_heading()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(10, this->heading(), output);
  }

  // required uint64 UTC = 11;
  if (has_utc()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(11, this->utc(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.zhichenhaixin.proto.VesselTrack)
}

::google::protobuf::uint8* VesselTrack::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.zhichenhaixin.proto.VesselTrack)
  // required string id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->id(), target);
  }

  // required int32 mmsi = 2;
  if (has_mmsi()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->mmsi(), target);
  }

  // required string shiptype = 3;
  if (has_shiptype()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->shiptype().data(), this->shiptype().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "shiptype");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->shiptype(), target);
  }

  // required .com.zhichenhaixin.proto.NAVI_STATUS navStatus = 4;
  if (has_navstatus()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->navstatus(), target);
  }

  // required float rot = 5;
  if (has_rot()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->rot(), target);
  }

  // required float sog = 6;
  if (has_sog()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(6, this->sog(), target);
  }

  // required double lon = 7;
  if (has_lon()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(7, this->lon(), target);
  }

  // required double lat = 8;
  if (has_lat()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(8, this->lat(), target);
  }

  // required float cog = 9;
  if (has_cog()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(9, this->cog(), target);
  }

  // required float heading = 10;
  if (has_heading()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(10, this->heading(), target);
  }

  // required uint64 UTC = 11;
  if (has_utc()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(11, this->utc(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.zhichenhaixin.proto.VesselTrack)
  return target;
}

int VesselTrack::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->id());
    }

    // required int32 mmsi = 2;
    if (has_mmsi()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->mmsi());
    }

    // required string shiptype = 3;
    if (has_shiptype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->shiptype());
    }

    // required .com.zhichenhaixin.proto.NAVI_STATUS navStatus = 4;
    if (has_navstatus()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->navstatus());
    }

    // required float rot = 5;
    if (has_rot()) {
      total_size += 1 + 4;
    }

    // required float sog = 6;
    if (has_sog()) {
      total_size += 1 + 4;
    }

    // required double lon = 7;
    if (has_lon()) {
      total_size += 1 + 8;
    }

    // required double lat = 8;
    if (has_lat()) {
      total_size += 1 + 8;
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required float cog = 9;
    if (has_cog()) {
      total_size += 1 + 4;
    }

    // required float heading = 10;
    if (has_heading()) {
      total_size += 1 + 4;
    }

    // required uint64 UTC = 11;
    if (has_utc()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->utc());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void VesselTrack::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const VesselTrack* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const VesselTrack*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void VesselTrack::MergeFrom(const VesselTrack& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_mmsi()) {
      set_mmsi(from.mmsi());
    }
    if (from.has_shiptype()) {
      set_shiptype(from.shiptype());
    }
    if (from.has_navstatus()) {
      set_navstatus(from.navstatus());
    }
    if (from.has_rot()) {
      set_rot(from.rot());
    }
    if (from.has_sog()) {
      set_sog(from.sog());
    }
    if (from.has_lon()) {
      set_lon(from.lon());
    }
    if (from.has_lat()) {
      set_lat(from.lat());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_cog()) {
      set_cog(from.cog());
    }
    if (from.has_heading()) {
      set_heading(from.heading());
    }
    if (from.has_utc()) {
      set_utc(from.utc());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void VesselTrack::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VesselTrack::CopyFrom(const VesselTrack& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VesselTrack::IsInitialized() const {
  if ((_has_bits_[0] & 0x000007ff) != 0x000007ff) return false;

  return true;
}

void VesselTrack::Swap(VesselTrack* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(mmsi_, other->mmsi_);
    std::swap(shiptype_, other->shiptype_);
    std::swap(navstatus_, other->navstatus_);
    std::swap(rot_, other->rot_);
    std::swap(sog_, other->sog_);
    std::swap(lon_, other->lon_);
    std::swap(lat_, other->lat_);
    std::swap(cog_, other->cog_);
    std::swap(heading_, other->heading_);
    std::swap(utc_, other->utc_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata VesselTrack::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = VesselTrack_descriptor_;
  metadata.reflection = VesselTrack_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BaseStationReport::kIdFieldNumber;
const int BaseStationReport::kRepeatIndicatorFieldNumber;
const int BaseStationReport::kMmsiFieldNumber;
const int BaseStationReport::kYearFieldNumber;
const int BaseStationReport::kMonthFieldNumber;
const int BaseStationReport::kDayFieldNumber;
const int BaseStationReport::kHourFieldNumber;
const int BaseStationReport::kMinuteFieldNumber;
const int BaseStationReport::kSecondFieldNumber;
const int BaseStationReport::kPositionAccuracyFieldNumber;
const int BaseStationReport::kLonFieldNumber;
const int BaseStationReport::kLatFieldNumber;
const int BaseStationReport::kFixTypeFieldNumber;
const int BaseStationReport::kUTCFieldNumber;
#endif  // !_MSC_VER

BaseStationReport::BaseStationReport()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.zhichenhaixin.proto.BaseStationReport)
}

void BaseStationReport::InitAsDefaultInstance() {
}

BaseStationReport::BaseStationReport(const BaseStationReport& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:com.zhichenhaixin.proto.BaseStationReport)
}

void BaseStationReport::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  repeatindicator_ = 0;
  mmsi_ = 0;
  year_ = 0;
  month_ = 0;
  day_ = 0;
  hour_ = 0;
  minute_ = 0;
  second_ = 0;
  positionaccuracy_ = 0;
  lon_ = 0;
  lat_ = 0;
  fixtype_ = 0;
  utc_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BaseStationReport::~BaseStationReport() {
  // @@protoc_insertion_point(destructor:com.zhichenhaixin.proto.BaseStationReport)
  SharedDtor();
}

void BaseStationReport::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BaseStationReport::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BaseStationReport::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BaseStationReport_descriptor_;
}

const BaseStationReport& BaseStationReport::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ZCHXAISVessel_2eproto();
  return *default_instance_;
}

BaseStationReport* BaseStationReport::default_instance_ = NULL;

BaseStationReport* BaseStationReport::New() const {
  return new BaseStationReport;
}

void BaseStationReport::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<BaseStationReport*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(id_, minute_);
  }
  if (_has_bits_[8 / 32] & 16128) {
    ZR_(second_, fixtype_);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BaseStationReport::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.zhichenhaixin.proto.BaseStationReport)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_repeatIndicator;
        break;
      }

      // required int32 repeatIndicator = 2;
      case 2: {
        if (tag == 16) {
         parse_repeatIndicator:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &repeatindicator_)));
          set_has_repeatindicator();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_mmsi;
        break;
      }

      // required int32 mmsi = 3;
      case 3: {
        if (tag == 24) {
         parse_mmsi:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mmsi_)));
          set_has_mmsi();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_year;
        break;
      }

      // required int32 year = 4;
      case 4: {
        if (tag == 32) {
         parse_year:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &year_)));
          set_has_year();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_month;
        break;
      }

      // required int32 month = 5;
      case 5: {
        if (tag == 40) {
         parse_month:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &month_)));
          set_has_month();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_day;
        break;
      }

      // required int32 day = 6;
      case 6: {
        if (tag == 48) {
         parse_day:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &day_)));
          set_has_day();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_hour;
        break;
      }

      // required int32 hour = 7;
      case 7: {
        if (tag == 56) {
         parse_hour:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &hour_)));
          set_has_hour();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_minute;
        break;
      }

      // required int32 minute = 8;
      case 8: {
        if (tag == 64) {
         parse_minute:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &minute_)));
          set_has_minute();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_second;
        break;
      }

      // required int32 second = 9;
      case 9: {
        if (tag == 72) {
         parse_second:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &second_)));
          set_has_second();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_positionAccuracy;
        break;
      }

      // required int32 positionAccuracy = 10;
      case 10: {
        if (tag == 80) {
         parse_positionAccuracy:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &positionaccuracy_)));
          set_has_positionaccuracy();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(89)) goto parse_lon;
        break;
      }

      // required double lon = 11;
      case 11: {
        if (tag == 89) {
         parse_lon:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &lon_)));
          set_has_lon();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(97)) goto parse_lat;
        break;
      }

      // required double lat = 12;
      case 12: {
        if (tag == 97) {
         parse_lat:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &lat_)));
          set_has_lat();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(104)) goto parse_fixType;
        break;
      }

      // required int32 fixType = 13;
      case 13: {
        if (tag == 104) {
         parse_fixType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &fixtype_)));
          set_has_fixtype();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(112)) goto parse_UTC;
        break;
      }

      // required uint64 UTC = 14;
      case 14: {
        if (tag == 112) {
         parse_UTC:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &utc_)));
          set_has_utc();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.zhichenhaixin.proto.BaseStationReport)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.zhichenhaixin.proto.BaseStationReport)
  return false;
#undef DO_
}

void BaseStationReport::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.zhichenhaixin.proto.BaseStationReport)
  // required int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // required int32 repeatIndicator = 2;
  if (has_repeatindicator()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->repeatindicator(), output);
  }

  // required int32 mmsi = 3;
  if (has_mmsi()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->mmsi(), output);
  }

  // required int32 year = 4;
  if (has_year()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->year(), output);
  }

  // required int32 month = 5;
  if (has_month()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->month(), output);
  }

  // required int32 day = 6;
  if (has_day()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->day(), output);
  }

  // required int32 hour = 7;
  if (has_hour()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->hour(), output);
  }

  // required int32 minute = 8;
  if (has_minute()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->minute(), output);
  }

  // required int32 second = 9;
  if (has_second()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->second(), output);
  }

  // required int32 positionAccuracy = 10;
  if (has_positionaccuracy()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->positionaccuracy(), output);
  }

  // required double lon = 11;
  if (has_lon()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(11, this->lon(), output);
  }

  // required double lat = 12;
  if (has_lat()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(12, this->lat(), output);
  }

  // required int32 fixType = 13;
  if (has_fixtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->fixtype(), output);
  }

  // required uint64 UTC = 14;
  if (has_utc()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(14, this->utc(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.zhichenhaixin.proto.BaseStationReport)
}

::google::protobuf::uint8* BaseStationReport::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.zhichenhaixin.proto.BaseStationReport)
  // required int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // required int32 repeatIndicator = 2;
  if (has_repeatindicator()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->repeatindicator(), target);
  }

  // required int32 mmsi = 3;
  if (has_mmsi()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->mmsi(), target);
  }

  // required int32 year = 4;
  if (has_year()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->year(), target);
  }

  // required int32 month = 5;
  if (has_month()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->month(), target);
  }

  // required int32 day = 6;
  if (has_day()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->day(), target);
  }

  // required int32 hour = 7;
  if (has_hour()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->hour(), target);
  }

  // required int32 minute = 8;
  if (has_minute()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->minute(), target);
  }

  // required int32 second = 9;
  if (has_second()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->second(), target);
  }

  // required int32 positionAccuracy = 10;
  if (has_positionaccuracy()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->positionaccuracy(), target);
  }

  // required double lon = 11;
  if (has_lon()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(11, this->lon(), target);
  }

  // required double lat = 12;
  if (has_lat()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(12, this->lat(), target);
  }

  // required int32 fixType = 13;
  if (has_fixtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->fixtype(), target);
  }

  // required uint64 UTC = 14;
  if (has_utc()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(14, this->utc(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.zhichenhaixin.proto.BaseStationReport)
  return target;
}

int BaseStationReport::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // required int32 repeatIndicator = 2;
    if (has_repeatindicator()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->repeatindicator());
    }

    // required int32 mmsi = 3;
    if (has_mmsi()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->mmsi());
    }

    // required int32 year = 4;
    if (has_year()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->year());
    }

    // required int32 month = 5;
    if (has_month()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->month());
    }

    // required int32 day = 6;
    if (has_day()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->day());
    }

    // required int32 hour = 7;
    if (has_hour()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->hour());
    }

    // required int32 minute = 8;
    if (has_minute()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->minute());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required int32 second = 9;
    if (has_second()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->second());
    }

    // required int32 positionAccuracy = 10;
    if (has_positionaccuracy()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->positionaccuracy());
    }

    // required double lon = 11;
    if (has_lon()) {
      total_size += 1 + 8;
    }

    // required double lat = 12;
    if (has_lat()) {
      total_size += 1 + 8;
    }

    // required int32 fixType = 13;
    if (has_fixtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->fixtype());
    }

    // required uint64 UTC = 14;
    if (has_utc()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->utc());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BaseStationReport::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BaseStationReport* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BaseStationReport*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BaseStationReport::MergeFrom(const BaseStationReport& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_repeatindicator()) {
      set_repeatindicator(from.repeatindicator());
    }
    if (from.has_mmsi()) {
      set_mmsi(from.mmsi());
    }
    if (from.has_year()) {
      set_year(from.year());
    }
    if (from.has_month()) {
      set_month(from.month());
    }
    if (from.has_day()) {
      set_day(from.day());
    }
    if (from.has_hour()) {
      set_hour(from.hour());
    }
    if (from.has_minute()) {
      set_minute(from.minute());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_second()) {
      set_second(from.second());
    }
    if (from.has_positionaccuracy()) {
      set_positionaccuracy(from.positionaccuracy());
    }
    if (from.has_lon()) {
      set_lon(from.lon());
    }
    if (from.has_lat()) {
      set_lat(from.lat());
    }
    if (from.has_fixtype()) {
      set_fixtype(from.fixtype());
    }
    if (from.has_utc()) {
      set_utc(from.utc());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BaseStationReport::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BaseStationReport::CopyFrom(const BaseStationReport& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BaseStationReport::IsInitialized() const {
  if ((_has_bits_[0] & 0x00003fff) != 0x00003fff) return false;

  return true;
}

void BaseStationReport::Swap(BaseStationReport* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(repeatindicator_, other->repeatindicator_);
    std::swap(mmsi_, other->mmsi_);
    std::swap(year_, other->year_);
    std::swap(month_, other->month_);
    std::swap(day_, other->day_);
    std::swap(hour_, other->hour_);
    std::swap(minute_, other->minute_);
    std::swap(second_, other->second_);
    std::swap(positionaccuracy_, other->positionaccuracy_);
    std::swap(lon_, other->lon_);
    std::swap(lat_, other->lat_);
    std::swap(fixtype_, other->fixtype_);
    std::swap(utc_, other->utc_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BaseStationReport::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BaseStationReport_descriptor_;
  metadata.reflection = BaseStationReport_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AidtoNavigationReport::kIdFieldNumber;
const int AidtoNavigationReport::kRepeatIndicatorFieldNumber;
const int AidtoNavigationReport::kMmsiFieldNumber;
const int AidtoNavigationReport::kAtonTypeFieldNumber;
const int AidtoNavigationReport::kNameFieldNumber;
const int AidtoNavigationReport::kPositionAccuracyFieldNumber;
const int AidtoNavigationReport::kLonFieldNumber;
const int AidtoNavigationReport::kLatFieldNumber;
const int AidtoNavigationReport::kToBowFieldNumber;
const int AidtoNavigationReport::kToSternFieldNumber;
const int AidtoNavigationReport::kToPortFieldNumber;
const int AidtoNavigationReport::kToStarboardFieldNumber;
const int AidtoNavigationReport::kFixTypeFieldNumber;
const int AidtoNavigationReport::kUTCFieldNumber;
#endif  // !_MSC_VER

AidtoNavigationReport::AidtoNavigationReport()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.zhichenhaixin.proto.AidtoNavigationReport)
}

void AidtoNavigationReport::InitAsDefaultInstance() {
}

AidtoNavigationReport::AidtoNavigationReport(const AidtoNavigationReport& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:com.zhichenhaixin.proto.AidtoNavigationReport)
}

void AidtoNavigationReport::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  id_ = 0;
  repeatindicator_ = 0;
  mmsi_ = 0;
  atontype_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  positionaccuracy_ = 0;
  lon_ = 0;
  lat_ = 0;
  tobow_ = 0;
  tostern_ = 0;
  toport_ = 0;
  tostarboard_ = 0;
  fixtype_ = 0;
  utc_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AidtoNavigationReport::~AidtoNavigationReport() {
  // @@protoc_insertion_point(destructor:com.zhichenhaixin.proto.AidtoNavigationReport)
  SharedDtor();
}

void AidtoNavigationReport::SharedDtor() {
  if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void AidtoNavigationReport::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AidtoNavigationReport::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AidtoNavigationReport_descriptor_;
}

const AidtoNavigationReport& AidtoNavigationReport::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ZCHXAISVessel_2eproto();
  return *default_instance_;
}

AidtoNavigationReport* AidtoNavigationReport::default_instance_ = NULL;

AidtoNavigationReport* AidtoNavigationReport::New() const {
  return new AidtoNavigationReport;
}

void AidtoNavigationReport::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<AidtoNavigationReport*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(id_, atontype_);
    ZR_(lon_, positionaccuracy_);
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        name_->clear();
      }
    }
    lat_ = 0;
  }
  if (_has_bits_[8 / 32] & 16128) {
    ZR_(tostern_, utc_);
    tobow_ = 0;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AidtoNavigationReport::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.zhichenhaixin.proto.AidtoNavigationReport)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_repeatIndicator;
        break;
      }

      // required int32 repeatIndicator = 2;
      case 2: {
        if (tag == 16) {
         parse_repeatIndicator:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &repeatindicator_)));
          set_has_repeatindicator();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_mmsi;
        break;
      }

      // required int32 mmsi = 3;
      case 3: {
        if (tag == 24) {
         parse_mmsi:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mmsi_)));
          set_has_mmsi();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_atonType;
        break;
      }

      // required .com.zhichenhaixin.proto.ATON_TYPE atonType = 4;
      case 4: {
        if (tag == 32) {
         parse_atonType:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::com::zhichenhaixin::proto::ATON_TYPE_IsValid(value)) {
            set_atontype(static_cast< ::com::zhichenhaixin::proto::ATON_TYPE >(value));
          } else {
            mutable_unknown_fields()->AddVarint(4, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_name;
        break;
      }

      // required string name = 5;
      case 5: {
        if (tag == 42) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_positionAccuracy;
        break;
      }

      // required int32 positionAccuracy = 6;
      case 6: {
        if (tag == 48) {
         parse_positionAccuracy:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &positionaccuracy_)));
          set_has_positionaccuracy();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(57)) goto parse_lon;
        break;
      }

      // required double lon = 7;
      case 7: {
        if (tag == 57) {
         parse_lon:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &lon_)));
          set_has_lon();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(65)) goto parse_lat;
        break;
      }

      // required double lat = 8;
      case 8: {
        if (tag == 65) {
         parse_lat:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &lat_)));
          set_has_lat();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_toBow;
        break;
      }

      // required int32 toBow = 9;
      case 9: {
        if (tag == 72) {
         parse_toBow:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tobow_)));
          set_has_tobow();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_toStern;
        break;
      }

      // required int32 toStern = 10;
      case 10: {
        if (tag == 80) {
         parse_toStern:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tostern_)));
          set_has_tostern();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_toPort;
        break;
      }

      // required int32 toPort = 11;
      case 11: {
        if (tag == 88) {
         parse_toPort:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &toport_)));
          set_has_toport();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(96)) goto parse_toStarboard;
        break;
      }

      // required int32 toStarboard = 12;
      case 12: {
        if (tag == 96) {
         parse_toStarboard:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tostarboard_)));
          set_has_tostarboard();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(104)) goto parse_fixType;
        break;
      }

      // required int32 fixType = 13;
      case 13: {
        if (tag == 104) {
         parse_fixType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &fixtype_)));
          set_has_fixtype();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(112)) goto parse_UTC;
        break;
      }

      // required uint64 UTC = 14;
      case 14: {
        if (tag == 112) {
         parse_UTC:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &utc_)));
          set_has_utc();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.zhichenhaixin.proto.AidtoNavigationReport)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.zhichenhaixin.proto.AidtoNavigationReport)
  return false;
#undef DO_
}

void AidtoNavigationReport::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.zhichenhaixin.proto.AidtoNavigationReport)
  // required int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // required int32 repeatIndicator = 2;
  if (has_repeatindicator()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->repeatindicator(), output);
  }

  // required int32 mmsi = 3;
  if (has_mmsi()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->mmsi(), output);
  }

  // required .com.zhichenhaixin.proto.ATON_TYPE atonType = 4;
  if (has_atontype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->atontype(), output);
  }

  // required string name = 5;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->name(), output);
  }

  // required int32 positionAccuracy = 6;
  if (has_positionaccuracy()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->positionaccuracy(), output);
  }

  // required double lon = 7;
  if (has_lon()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(7, this->lon(), output);
  }

  // required double lat = 8;
  if (has_lat()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(8, this->lat(), output);
  }

  // required int32 toBow = 9;
  if (has_tobow()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->tobow(), output);
  }

  // required int32 toStern = 10;
  if (has_tostern()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->tostern(), output);
  }

  // required int32 toPort = 11;
  if (has_toport()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->toport(), output);
  }

  // required int32 toStarboard = 12;
  if (has_tostarboard()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->tostarboard(), output);
  }

  // required int32 fixType = 13;
  if (has_fixtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->fixtype(), output);
  }

  // required uint64 UTC = 14;
  if (has_utc()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(14, this->utc(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.zhichenhaixin.proto.AidtoNavigationReport)
}

::google::protobuf::uint8* AidtoNavigationReport::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.zhichenhaixin.proto.AidtoNavigationReport)
  // required int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // required int32 repeatIndicator = 2;
  if (has_repeatindicator()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->repeatindicator(), target);
  }

  // required int32 mmsi = 3;
  if (has_mmsi()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->mmsi(), target);
  }

  // required .com.zhichenhaixin.proto.ATON_TYPE atonType = 4;
  if (has_atontype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->atontype(), target);
  }

  // required string name = 5;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->name(), target);
  }

  // required int32 positionAccuracy = 6;
  if (has_positionaccuracy()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->positionaccuracy(), target);
  }

  // required double lon = 7;
  if (has_lon()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(7, this->lon(), target);
  }

  // required double lat = 8;
  if (has_lat()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(8, this->lat(), target);
  }

  // required int32 toBow = 9;
  if (has_tobow()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->tobow(), target);
  }

  // required int32 toStern = 10;
  if (has_tostern()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->tostern(), target);
  }

  // required int32 toPort = 11;
  if (has_toport()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->toport(), target);
  }

  // required int32 toStarboard = 12;
  if (has_tostarboard()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->tostarboard(), target);
  }

  // required int32 fixType = 13;
  if (has_fixtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->fixtype(), target);
  }

  // required uint64 UTC = 14;
  if (has_utc()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(14, this->utc(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.zhichenhaixin.proto.AidtoNavigationReport)
  return target;
}

int AidtoNavigationReport::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // required int32 repeatIndicator = 2;
    if (has_repeatindicator()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->repeatindicator());
    }

    // required int32 mmsi = 3;
    if (has_mmsi()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->mmsi());
    }

    // required .com.zhichenhaixin.proto.ATON_TYPE atonType = 4;
    if (has_atontype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->atontype());
    }

    // required string name = 5;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // required int32 positionAccuracy = 6;
    if (has_positionaccuracy()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->positionaccuracy());
    }

    // required double lon = 7;
    if (has_lon()) {
      total_size += 1 + 8;
    }

    // required double lat = 8;
    if (has_lat()) {
      total_size += 1 + 8;
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required int32 toBow = 9;
    if (has_tobow()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tobow());
    }

    // required int32 toStern = 10;
    if (has_tostern()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tostern());
    }

    // required int32 toPort = 11;
    if (has_toport()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->toport());
    }

    // required int32 toStarboard = 12;
    if (has_tostarboard()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tostarboard());
    }

    // required int32 fixType = 13;
    if (has_fixtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->fixtype());
    }

    // required uint64 UTC = 14;
    if (has_utc()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->utc());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AidtoNavigationReport::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AidtoNavigationReport* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AidtoNavigationReport*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AidtoNavigationReport::MergeFrom(const AidtoNavigationReport& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_repeatindicator()) {
      set_repeatindicator(from.repeatindicator());
    }
    if (from.has_mmsi()) {
      set_mmsi(from.mmsi());
    }
    if (from.has_atontype()) {
      set_atontype(from.atontype());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_positionaccuracy()) {
      set_positionaccuracy(from.positionaccuracy());
    }
    if (from.has_lon()) {
      set_lon(from.lon());
    }
    if (from.has_lat()) {
      set_lat(from.lat());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_tobow()) {
      set_tobow(from.tobow());
    }
    if (from.has_tostern()) {
      set_tostern(from.tostern());
    }
    if (from.has_toport()) {
      set_toport(from.toport());
    }
    if (from.has_tostarboard()) {
      set_tostarboard(from.tostarboard());
    }
    if (from.has_fixtype()) {
      set_fixtype(from.fixtype());
    }
    if (from.has_utc()) {
      set_utc(from.utc());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AidtoNavigationReport::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AidtoNavigationReport::CopyFrom(const AidtoNavigationReport& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AidtoNavigationReport::IsInitialized() const {
  if ((_has_bits_[0] & 0x00003fff) != 0x00003fff) return false;

  return true;
}

void AidtoNavigationReport::Swap(AidtoNavigationReport* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(repeatindicator_, other->repeatindicator_);
    std::swap(mmsi_, other->mmsi_);
    std::swap(atontype_, other->atontype_);
    std::swap(name_, other->name_);
    std::swap(positionaccuracy_, other->positionaccuracy_);
    std::swap(lon_, other->lon_);
    std::swap(lat_, other->lat_);
    std::swap(tobow_, other->tobow_);
    std::swap(tostern_, other->tostern_);
    std::swap(toport_, other->toport_);
    std::swap(tostarboard_, other->tostarboard_);
    std::swap(fixtype_, other->fixtype_);
    std::swap(utc_, other->utc_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AidtoNavigationReport::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AidtoNavigationReport_descriptor_;
  metadata.reflection = AidtoNavigationReport_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AIS::kFlagFieldNumber;
const int AIS::kSourceIdFieldNumber;
const int AIS::kVesselInfoFieldNumber;
const int AIS::kVesselTrackFieldNumber;
const int AIS::kBaseStationReportFieldNumber;
const int AIS::kAidtoNavigationReportFieldNumber;
#endif  // !_MSC_VER

AIS::AIS()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.zhichenhaixin.proto.AIS)
}

void AIS::InitAsDefaultInstance() {
  vesselinfo_ = const_cast< ::com::zhichenhaixin::proto::VesselInfo*>(&::com::zhichenhaixin::proto::VesselInfo::default_instance());
  vesseltrack_ = const_cast< ::com::zhichenhaixin::proto::VesselTrack*>(&::com::zhichenhaixin::proto::VesselTrack::default_instance());
  basestationreport_ = const_cast< ::com::zhichenhaixin::proto::BaseStationReport*>(&::com::zhichenhaixin::proto::BaseStationReport::default_instance());
  aidtonavigationreport_ = const_cast< ::com::zhichenhaixin::proto::AidtoNavigationReport*>(&::com::zhichenhaixin::proto::AidtoNavigationReport::default_instance());
}

AIS::AIS(const AIS& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:com.zhichenhaixin.proto.AIS)
}

void AIS::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  flag_ = 0;
  sourceid_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  vesselinfo_ = NULL;
  vesseltrack_ = NULL;
  basestationreport_ = NULL;
  aidtonavigationreport_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AIS::~AIS() {
  // @@protoc_insertion_point(destructor:com.zhichenhaixin.proto.AIS)
  SharedDtor();
}

void AIS::SharedDtor() {
  if (sourceid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete sourceid_;
  }
  if (this != default_instance_) {
    delete vesselinfo_;
    delete vesseltrack_;
    delete basestationreport_;
    delete aidtonavigationreport_;
  }
}

void AIS::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AIS::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AIS_descriptor_;
}

const AIS& AIS::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ZCHXAISVessel_2eproto();
  return *default_instance_;
}

AIS* AIS::default_instance_ = NULL;

AIS* AIS::New() const {
  return new AIS;
}

void AIS::Clear() {
  if (_has_bits_[0 / 32] & 63) {
    flag_ = 0;
    if (has_sourceid()) {
      if (sourceid_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        sourceid_->clear();
      }
    }
    if (has_vesselinfo()) {
      if (vesselinfo_ != NULL) vesselinfo_->::com::zhichenhaixin::proto::VesselInfo::Clear();
    }
    if (has_vesseltrack()) {
      if (vesseltrack_ != NULL) vesseltrack_->::com::zhichenhaixin::proto::VesselTrack::Clear();
    }
    if (has_basestationreport()) {
      if (basestationreport_ != NULL) basestationreport_->::com::zhichenhaixin::proto::BaseStationReport::Clear();
    }
    if (has_aidtonavigationreport()) {
      if (aidtonavigationreport_ != NULL) aidtonavigationreport_->::com::zhichenhaixin::proto::AidtoNavigationReport::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AIS::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.zhichenhaixin.proto.AIS)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 flag = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &flag_)));
          set_has_flag();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_sourceId;
        break;
      }

      // required string sourceId = 2;
      case 2: {
        if (tag == 18) {
         parse_sourceId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sourceid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->sourceid().data(), this->sourceid().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "sourceid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_vesselInfo;
        break;
      }

      // optional .com.zhichenhaixin.proto.VesselInfo vesselInfo = 3;
      case 3: {
        if (tag == 26) {
         parse_vesselInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_vesselinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_vesselTrack;
        break;
      }

      // optional .com.zhichenhaixin.proto.VesselTrack vesselTrack = 4;
      case 4: {
        if (tag == 34) {
         parse_vesselTrack:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_vesseltrack()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_baseStationReport;
        break;
      }

      // optional .com.zhichenhaixin.proto.BaseStationReport baseStationReport = 5;
      case 5: {
        if (tag == 42) {
         parse_baseStationReport:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_basestationreport()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_aidtoNavigationReport;
        break;
      }

      // optional .com.zhichenhaixin.proto.AidtoNavigationReport aidtoNavigationReport = 6;
      case 6: {
        if (tag == 50) {
         parse_aidtoNavigationReport:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_aidtonavigationreport()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.zhichenhaixin.proto.AIS)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.zhichenhaixin.proto.AIS)
  return false;
#undef DO_
}

void AIS::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.zhichenhaixin.proto.AIS)
  // required int32 flag = 1;
  if (has_flag()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->flag(), output);
  }

  // required string sourceId = 2;
  if (has_sourceid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->sourceid().data(), this->sourceid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "sourceid");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->sourceid(), output);
  }

  // optional .com.zhichenhaixin.proto.VesselInfo vesselInfo = 3;
  if (has_vesselinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->vesselinfo(), output);
  }

  // optional .com.zhichenhaixin.proto.VesselTrack vesselTrack = 4;
  if (has_vesseltrack()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->vesseltrack(), output);
  }

  // optional .com.zhichenhaixin.proto.BaseStationReport baseStationReport = 5;
  if (has_basestationreport()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->basestationreport(), output);
  }

  // optional .com.zhichenhaixin.proto.AidtoNavigationReport aidtoNavigationReport = 6;
  if (has_aidtonavigationreport()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->aidtonavigationreport(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.zhichenhaixin.proto.AIS)
}

::google::protobuf::uint8* AIS::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.zhichenhaixin.proto.AIS)
  // required int32 flag = 1;
  if (has_flag()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->flag(), target);
  }

  // required string sourceId = 2;
  if (has_sourceid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->sourceid().data(), this->sourceid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "sourceid");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->sourceid(), target);
  }

  // optional .com.zhichenhaixin.proto.VesselInfo vesselInfo = 3;
  if (has_vesselinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->vesselinfo(), target);
  }

  // optional .com.zhichenhaixin.proto.VesselTrack vesselTrack = 4;
  if (has_vesseltrack()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->vesseltrack(), target);
  }

  // optional .com.zhichenhaixin.proto.BaseStationReport baseStationReport = 5;
  if (has_basestationreport()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->basestationreport(), target);
  }

  // optional .com.zhichenhaixin.proto.AidtoNavigationReport aidtoNavigationReport = 6;
  if (has_aidtonavigationreport()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->aidtonavigationreport(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.zhichenhaixin.proto.AIS)
  return target;
}

int AIS::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 flag = 1;
    if (has_flag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->flag());
    }

    // required string sourceId = 2;
    if (has_sourceid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->sourceid());
    }

    // optional .com.zhichenhaixin.proto.VesselInfo vesselInfo = 3;
    if (has_vesselinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->vesselinfo());
    }

    // optional .com.zhichenhaixin.proto.VesselTrack vesselTrack = 4;
    if (has_vesseltrack()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->vesseltrack());
    }

    // optional .com.zhichenhaixin.proto.BaseStationReport baseStationReport = 5;
    if (has_basestationreport()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->basestationreport());
    }

    // optional .com.zhichenhaixin.proto.AidtoNavigationReport aidtoNavigationReport = 6;
    if (has_aidtonavigationreport()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->aidtonavigationreport());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AIS::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AIS* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AIS*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AIS::MergeFrom(const AIS& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_flag()) {
      set_flag(from.flag());
    }
    if (from.has_sourceid()) {
      set_sourceid(from.sourceid());
    }
    if (from.has_vesselinfo()) {
      mutable_vesselinfo()->::com::zhichenhaixin::proto::VesselInfo::MergeFrom(from.vesselinfo());
    }
    if (from.has_vesseltrack()) {
      mutable_vesseltrack()->::com::zhichenhaixin::proto::VesselTrack::MergeFrom(from.vesseltrack());
    }
    if (from.has_basestationreport()) {
      mutable_basestationreport()->::com::zhichenhaixin::proto::BaseStationReport::MergeFrom(from.basestationreport());
    }
    if (from.has_aidtonavigationreport()) {
      mutable_aidtonavigationreport()->::com::zhichenhaixin::proto::AidtoNavigationReport::MergeFrom(from.aidtonavigationreport());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AIS::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AIS::CopyFrom(const AIS& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AIS::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_vesselinfo()) {
    if (!this->vesselinfo().IsInitialized()) return false;
  }
  if (has_vesseltrack()) {
    if (!this->vesseltrack().IsInitialized()) return false;
  }
  if (has_basestationreport()) {
    if (!this->basestationreport().IsInitialized()) return false;
  }
  if (has_aidtonavigationreport()) {
    if (!this->aidtonavigationreport().IsInitialized()) return false;
  }
  return true;
}

void AIS::Swap(AIS* other) {
  if (other != this) {
    std::swap(flag_, other->flag_);
    std::swap(sourceid_, other->sourceid_);
    std::swap(vesselinfo_, other->vesselinfo_);
    std::swap(vesseltrack_, other->vesseltrack_);
    std::swap(basestationreport_, other->basestationreport_);
    std::swap(aidtonavigationreport_, other->aidtonavigationreport_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AIS::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AIS_descriptor_;
  metadata.reflection = AIS_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AISList::kUTCFieldNumber;
const int AISList::kAisFieldNumber;
#endif  // !_MSC_VER

AISList::AISList()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.zhichenhaixin.proto.AISList)
}

void AISList::InitAsDefaultInstance() {
}

AISList::AISList(const AISList& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:com.zhichenhaixin.proto.AISList)
}

void AISList::SharedCtor() {
  _cached_size_ = 0;
  utc_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AISList::~AISList() {
  // @@protoc_insertion_point(destructor:com.zhichenhaixin.proto.AISList)
  SharedDtor();
}

void AISList::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AISList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AISList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AISList_descriptor_;
}

const AISList& AISList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ZCHXAISVessel_2eproto();
  return *default_instance_;
}

AISList* AISList::default_instance_ = NULL;

AISList* AISList::New() const {
  return new AISList;
}

void AISList::Clear() {
  utc_ = GOOGLE_ULONGLONG(0);
  ais_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AISList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.zhichenhaixin.proto.AISList)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 UTC = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &utc_)));
          set_has_utc();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_ais;
        break;
      }

      // repeated .com.zhichenhaixin.proto.AIS ais = 2;
      case 2: {
        if (tag == 18) {
         parse_ais:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_ais()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_ais;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.zhichenhaixin.proto.AISList)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.zhichenhaixin.proto.AISList)
  return false;
#undef DO_
}

void AISList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.zhichenhaixin.proto.AISList)
  // required uint64 UTC = 1;
  if (has_utc()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->utc(), output);
  }

  // repeated .com.zhichenhaixin.proto.AIS ais = 2;
  for (int i = 0; i < this->ais_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->ais(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.zhichenhaixin.proto.AISList)
}

::google::protobuf::uint8* AISList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.zhichenhaixin.proto.AISList)
  // required uint64 UTC = 1;
  if (has_utc()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->utc(), target);
  }

  // repeated .com.zhichenhaixin.proto.AIS ais = 2;
  for (int i = 0; i < this->ais_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->ais(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.zhichenhaixin.proto.AISList)
  return target;
}

int AISList::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 UTC = 1;
    if (has_utc()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->utc());
    }

  }
  // repeated .com.zhichenhaixin.proto.AIS ais = 2;
  total_size += 1 * this->ais_size();
  for (int i = 0; i < this->ais_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->ais(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AISList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AISList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AISList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AISList::MergeFrom(const AISList& from) {
  GOOGLE_CHECK_NE(&from, this);
  ais_.MergeFrom(from.ais_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_utc()) {
      set_utc(from.utc());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AISList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AISList::CopyFrom(const AISList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AISList::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (!::google::protobuf::internal::AllAreInitialized(this->ais())) return false;
  return true;
}

void AISList::Swap(AISList* other) {
  if (other != this) {
    std::swap(utc_, other->utc_);
    ais_.Swap(&other->ais_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AISList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AISList_descriptor_;
  metadata.reflection = AISList_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AISHistoryTrackPoint::kIdFieldNumber;
const int AISHistoryTrackPoint::kMmsiFieldNumber;
const int AISHistoryTrackPoint::kShiptypeFieldNumber;
const int AISHistoryTrackPoint::kNavStatusFieldNumber;
const int AISHistoryTrackPoint::kRotFieldNumber;
const int AISHistoryTrackPoint::kSogFieldNumber;
const int AISHistoryTrackPoint::kLonFieldNumber;
const int AISHistoryTrackPoint::kLatFieldNumber;
const int AISHistoryTrackPoint::kCogFieldNumber;
const int AISHistoryTrackPoint::kHeadingFieldNumber;
const int AISHistoryTrackPoint::kCargoTypeFieldNumber;
const int AISHistoryTrackPoint::kUTCFieldNumber;
#endif  // !_MSC_VER

AISHistoryTrackPoint::AISHistoryTrackPoint()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.zhichenhaixin.proto.AISHistoryTrackPoint)
}

void AISHistoryTrackPoint::InitAsDefaultInstance() {
}

AISHistoryTrackPoint::AISHistoryTrackPoint(const AISHistoryTrackPoint& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:com.zhichenhaixin.proto.AISHistoryTrackPoint)
}

void AISHistoryTrackPoint::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  id_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  mmsi_ = GOOGLE_LONGLONG(0);
  shiptype_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  navstatus_ = 0;
  rot_ = 0;
  sog_ = 0;
  lon_ = 0;
  lat_ = 0;
  cog_ = 0;
  heading_ = 0;
  cargotype_ = 0;
  utc_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AISHistoryTrackPoint::~AISHistoryTrackPoint() {
  // @@protoc_insertion_point(destructor:com.zhichenhaixin.proto.AISHistoryTrackPoint)
  SharedDtor();
}

void AISHistoryTrackPoint::SharedDtor() {
  if (id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete id_;
  }
  if (shiptype_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete shiptype_;
  }
  if (this != default_instance_) {
  }
}

void AISHistoryTrackPoint::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AISHistoryTrackPoint::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AISHistoryTrackPoint_descriptor_;
}

const AISHistoryTrackPoint& AISHistoryTrackPoint::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ZCHXAISVessel_2eproto();
  return *default_instance_;
}

AISHistoryTrackPoint* AISHistoryTrackPoint::default_instance_ = NULL;

AISHistoryTrackPoint* AISHistoryTrackPoint::New() const {
  return new AISHistoryTrackPoint;
}

void AISHistoryTrackPoint::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<AISHistoryTrackPoint*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(navstatus_, sog_);
    if (has_id()) {
      if (id_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        id_->clear();
      }
    }
    mmsi_ = GOOGLE_LONGLONG(0);
    if (has_shiptype()) {
      if (shiptype_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
        shiptype_->clear();
      }
    }
    lat_ = 0;
  }
  if (_has_bits_[8 / 32] & 3840) {
    ZR_(heading_, utc_);
    cog_ = 0;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AISHistoryTrackPoint::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.zhichenhaixin.proto.AISHistoryTrackPoint)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string id = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->id().data(), this->id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "id");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_mmsi;
        break;
      }

      // required int64 mmsi = 2;
      case 2: {
        if (tag == 16) {
         parse_mmsi:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &mmsi_)));
          set_has_mmsi();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_shiptype;
        break;
      }

      // required string shiptype = 3;
      case 3: {
        if (tag == 26) {
         parse_shiptype:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_shiptype()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->shiptype().data(), this->shiptype().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "shiptype");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_navStatus;
        break;
      }

      // required .com.zhichenhaixin.proto.NAVI_STATUS navStatus = 4;
      case 4: {
        if (tag == 32) {
         parse_navStatus:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::com::zhichenhaixin::proto::NAVI_STATUS_IsValid(value)) {
            set_navstatus(static_cast< ::com::zhichenhaixin::proto::NAVI_STATUS >(value));
          } else {
            mutable_unknown_fields()->AddVarint(4, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(45)) goto parse_rot;
        break;
      }

      // required float rot = 5;
      case 5: {
        if (tag == 45) {
         parse_rot:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &rot_)));
          set_has_rot();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(53)) goto parse_sog;
        break;
      }

      // required float sog = 6;
      case 6: {
        if (tag == 53) {
         parse_sog:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &sog_)));
          set_has_sog();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(57)) goto parse_lon;
        break;
      }

      // required double lon = 7;
      case 7: {
        if (tag == 57) {
         parse_lon:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &lon_)));
          set_has_lon();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(65)) goto parse_lat;
        break;
      }

      // required double lat = 8;
      case 8: {
        if (tag == 65) {
         parse_lat:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &lat_)));
          set_has_lat();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(77)) goto parse_cog;
        break;
      }

      // required float cog = 9;
      case 9: {
        if (tag == 77) {
         parse_cog:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &cog_)));
          set_has_cog();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(85)) goto parse_heading;
        break;
      }

      // required float heading = 10;
      case 10: {
        if (tag == 85) {
         parse_heading:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &heading_)));
          set_has_heading();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_cargoType;
        break;
      }

      // optional int32 cargoType = 11;
      case 11: {
        if (tag == 88) {
         parse_cargoType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cargotype_)));
          set_has_cargotype();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(96)) goto parse_UTC;
        break;
      }

      // required uint64 UTC = 12;
      case 12: {
        if (tag == 96) {
         parse_UTC:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &utc_)));
          set_has_utc();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.zhichenhaixin.proto.AISHistoryTrackPoint)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.zhichenhaixin.proto.AISHistoryTrackPoint)
  return false;
#undef DO_
}

void AISHistoryTrackPoint::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.zhichenhaixin.proto.AISHistoryTrackPoint)
  // required string id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->id(), output);
  }

  // required int64 mmsi = 2;
  if (has_mmsi()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->mmsi(), output);
  }

  // required string shiptype = 3;
  if (has_shiptype()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->shiptype().data(), this->shiptype().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "shiptype");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->shiptype(), output);
  }

  // required .com.zhichenhaixin.proto.NAVI_STATUS navStatus = 4;
  if (has_navstatus()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->navstatus(), output);
  }

  // required float rot = 5;
  if (has_rot()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->rot(), output);
  }

  // required float sog = 6;
  if (has_sog()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(6, this->sog(), output);
  }

  // required double lon = 7;
  if (has_lon()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(7, this->lon(), output);
  }

  // required double lat = 8;
  if (has_lat()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(8, this->lat(), output);
  }

  // required float cog = 9;
  if (has_cog()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(9, this->cog(), output);
  }

  // required float heading = 10;
  if (has_heading()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(10, this->heading(), output);
  }

  // optional int32 cargoType = 11;
  if (has_cargotype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->cargotype(), output);
  }

  // required uint64 UTC = 12;
  if (has_utc()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(12, this->utc(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.zhichenhaixin.proto.AISHistoryTrackPoint)
}

::google::protobuf::uint8* AISHistoryTrackPoint::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.zhichenhaixin.proto.AISHistoryTrackPoint)
  // required string id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->id(), target);
  }

  // required int64 mmsi = 2;
  if (has_mmsi()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->mmsi(), target);
  }

  // required string shiptype = 3;
  if (has_shiptype()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->shiptype().data(), this->shiptype().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "shiptype");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->shiptype(), target);
  }

  // required .com.zhichenhaixin.proto.NAVI_STATUS navStatus = 4;
  if (has_navstatus()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->navstatus(), target);
  }

  // required float rot = 5;
  if (has_rot()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->rot(), target);
  }

  // required float sog = 6;
  if (has_sog()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(6, this->sog(), target);
  }

  // required double lon = 7;
  if (has_lon()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(7, this->lon(), target);
  }

  // required double lat = 8;
  if (has_lat()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(8, this->lat(), target);
  }

  // required float cog = 9;
  if (has_cog()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(9, this->cog(), target);
  }

  // required float heading = 10;
  if (has_heading()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(10, this->heading(), target);
  }

  // optional int32 cargoType = 11;
  if (has_cargotype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->cargotype(), target);
  }

  // required uint64 UTC = 12;
  if (has_utc()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(12, this->utc(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.zhichenhaixin.proto.AISHistoryTrackPoint)
  return target;
}

int AISHistoryTrackPoint::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->id());
    }

    // required int64 mmsi = 2;
    if (has_mmsi()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->mmsi());
    }

    // required string shiptype = 3;
    if (has_shiptype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->shiptype());
    }

    // required .com.zhichenhaixin.proto.NAVI_STATUS navStatus = 4;
    if (has_navstatus()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->navstatus());
    }

    // required float rot = 5;
    if (has_rot()) {
      total_size += 1 + 4;
    }

    // required float sog = 6;
    if (has_sog()) {
      total_size += 1 + 4;
    }

    // required double lon = 7;
    if (has_lon()) {
      total_size += 1 + 8;
    }

    // required double lat = 8;
    if (has_lat()) {
      total_size += 1 + 8;
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required float cog = 9;
    if (has_cog()) {
      total_size += 1 + 4;
    }

    // required float heading = 10;
    if (has_heading()) {
      total_size += 1 + 4;
    }

    // optional int32 cargoType = 11;
    if (has_cargotype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cargotype());
    }

    // required uint64 UTC = 12;
    if (has_utc()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->utc());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AISHistoryTrackPoint::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AISHistoryTrackPoint* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AISHistoryTrackPoint*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AISHistoryTrackPoint::MergeFrom(const AISHistoryTrackPoint& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_mmsi()) {
      set_mmsi(from.mmsi());
    }
    if (from.has_shiptype()) {
      set_shiptype(from.shiptype());
    }
    if (from.has_navstatus()) {
      set_navstatus(from.navstatus());
    }
    if (from.has_rot()) {
      set_rot(from.rot());
    }
    if (from.has_sog()) {
      set_sog(from.sog());
    }
    if (from.has_lon()) {
      set_lon(from.lon());
    }
    if (from.has_lat()) {
      set_lat(from.lat());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_cog()) {
      set_cog(from.cog());
    }
    if (from.has_heading()) {
      set_heading(from.heading());
    }
    if (from.has_cargotype()) {
      set_cargotype(from.cargotype());
    }
    if (from.has_utc()) {
      set_utc(from.utc());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AISHistoryTrackPoint::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AISHistoryTrackPoint::CopyFrom(const AISHistoryTrackPoint& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AISHistoryTrackPoint::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000bff) != 0x00000bff) return false;

  return true;
}

void AISHistoryTrackPoint::Swap(AISHistoryTrackPoint* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(mmsi_, other->mmsi_);
    std::swap(shiptype_, other->shiptype_);
    std::swap(navstatus_, other->navstatus_);
    std::swap(rot_, other->rot_);
    std::swap(sog_, other->sog_);
    std::swap(lon_, other->lon_);
    std::swap(lat_, other->lat_);
    std::swap(cog_, other->cog_);
    std::swap(heading_, other->heading_);
    std::swap(cargotype_, other->cargotype_);
    std::swap(utc_, other->utc_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AISHistoryTrackPoint::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AISHistoryTrackPoint_descriptor_;
  metadata.reflection = AISHistoryTrackPoint_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AISHistoryTrackList::kAisDataFieldNumber;
#endif  // !_MSC_VER

AISHistoryTrackList::AISHistoryTrackList()
  : ::google::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:com.zhichenhaixin.proto.AISHistoryTrackList)
}

void AISHistoryTrackList::InitAsDefaultInstance() {
}

AISHistoryTrackList::AISHistoryTrackList(const AISHistoryTrackList& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:com.zhichenhaixin.proto.AISHistoryTrackList)
}

void AISHistoryTrackList::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AISHistoryTrackList::~AISHistoryTrackList() {
  // @@protoc_insertion_point(destructor:com.zhichenhaixin.proto.AISHistoryTrackList)
  SharedDtor();
}

void AISHistoryTrackList::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AISHistoryTrackList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AISHistoryTrackList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AISHistoryTrackList_descriptor_;
}

const AISHistoryTrackList& AISHistoryTrackList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ZCHXAISVessel_2eproto();
  return *default_instance_;
}

AISHistoryTrackList* AISHistoryTrackList::default_instance_ = NULL;

AISHistoryTrackList* AISHistoryTrackList::New() const {
  return new AISHistoryTrackList;
}

void AISHistoryTrackList::Clear() {
  aisdata_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AISHistoryTrackList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:com.zhichenhaixin.proto.AISHistoryTrackList)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .com.zhichenhaixin.proto.AISHistoryTrackPoint aisData = 1;
      case 1: {
        if (tag == 10) {
         parse_aisData:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_aisdata()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_aisData;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:com.zhichenhaixin.proto.AISHistoryTrackList)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:com.zhichenhaixin.proto.AISHistoryTrackList)
  return false;
#undef DO_
}

void AISHistoryTrackList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:com.zhichenhaixin.proto.AISHistoryTrackList)
  // repeated .com.zhichenhaixin.proto.AISHistoryTrackPoint aisData = 1;
  for (int i = 0; i < this->aisdata_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->aisdata(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:com.zhichenhaixin.proto.AISHistoryTrackList)
}

::google::protobuf::uint8* AISHistoryTrackList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:com.zhichenhaixin.proto.AISHistoryTrackList)
  // repeated .com.zhichenhaixin.proto.AISHistoryTrackPoint aisData = 1;
  for (int i = 0; i < this->aisdata_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->aisdata(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:com.zhichenhaixin.proto.AISHistoryTrackList)
  return target;
}

int AISHistoryTrackList::ByteSize() const {
  int total_size = 0;

  // repeated .com.zhichenhaixin.proto.AISHistoryTrackPoint aisData = 1;
  total_size += 1 * this->aisdata_size();
  for (int i = 0; i < this->aisdata_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->aisdata(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AISHistoryTrackList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AISHistoryTrackList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AISHistoryTrackList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AISHistoryTrackList::MergeFrom(const AISHistoryTrackList& from) {
  GOOGLE_CHECK_NE(&from, this);
  aisdata_.MergeFrom(from.aisdata_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AISHistoryTrackList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AISHistoryTrackList::CopyFrom(const AISHistoryTrackList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AISHistoryTrackList::IsInitialized() const {

  if (!::google::protobuf::internal::AllAreInitialized(this->aisdata())) return false;
  return true;
}

void AISHistoryTrackList::Swap(AISHistoryTrackList* other) {
  if (other != this) {
    aisdata_.Swap(&other->aisdata_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AISHistoryTrackList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AISHistoryTrackList_descriptor_;
  metadata.reflection = AISHistoryTrackList_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace zhichenhaixin
}  // namespace com

// @@protoc_insertion_point(global_scope)
