// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ZCHXRadarVideo.proto

#ifndef PROTOBUF_ZCHXRadarVideo_2eproto__INCLUDED
#define PROTOBUF_ZCHXRadarVideo_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace com {
namespace zhichenhaixin {
namespace proto {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_ZCHXRadarVideo_2eproto();
void protobuf_AssignDesc_ZCHXRadarVideo_2eproto();
void protobuf_ShutdownFile_ZCHXRadarVideo_2eproto();

class RadarVideo;
class RadarVideoPoint;

// ===================================================================

class RadarVideo : public ::google::protobuf::Message {
 public:
  RadarVideo();
  virtual ~RadarVideo();

  RadarVideo(const RadarVideo& from);

  inline RadarVideo& operator=(const RadarVideo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RadarVideo& default_instance();

  void Swap(RadarVideo* other);

  // implements Message ----------------------------------------------

  RadarVideo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RadarVideo& from);
  void MergeFrom(const RadarVideo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint64 radarId = 1;
  inline bool has_radarid() const;
  inline void clear_radarid();
  static const int kRadarIdFieldNumber = 1;
  inline ::google::protobuf::uint64 radarid() const;
  inline void set_radarid(::google::protobuf::uint64 value);

  // required string radarName = 2;
  inline bool has_radarname() const;
  inline void clear_radarname();
  static const int kRadarNameFieldNumber = 2;
  inline const ::std::string& radarname() const;
  inline void set_radarname(const ::std::string& value);
  inline void set_radarname(const char* value);
  inline void set_radarname(const char* value, size_t size);
  inline ::std::string* mutable_radarname();
  inline ::std::string* release_radarname();
  inline void set_allocated_radarname(::std::string* radarname);

  // required double latitude = 3;
  inline bool has_latitude() const;
  inline void clear_latitude();
  static const int kLatitudeFieldNumber = 3;
  inline double latitude() const;
  inline void set_latitude(double value);

  // required double longitude = 4;
  inline bool has_longitude() const;
  inline void clear_longitude();
  static const int kLongitudeFieldNumber = 4;
  inline double longitude() const;
  inline void set_longitude(double value);

  // required uint64 UTC = 5;
  inline bool has_utc() const;
  inline void clear_utc();
  static const int kUTCFieldNumber = 5;
  inline ::google::protobuf::uint64 utc() const;
  inline void set_utc(::google::protobuf::uint64 value);

  // required bytes imageData = 6;
  inline bool has_imagedata() const;
  inline void clear_imagedata();
  static const int kImageDataFieldNumber = 6;
  inline const ::std::string& imagedata() const;
  inline void set_imagedata(const ::std::string& value);
  inline void set_imagedata(const char* value);
  inline void set_imagedata(const void* value, size_t size);
  inline ::std::string* mutable_imagedata();
  inline ::std::string* release_imagedata();
  inline void set_allocated_imagedata(::std::string* imagedata);

  // required bytes curImageData = 7;
  inline bool has_curimagedata() const;
  inline void clear_curimagedata();
  static const int kCurImageDataFieldNumber = 7;
  inline const ::std::string& curimagedata() const;
  inline void set_curimagedata(const ::std::string& value);
  inline void set_curimagedata(const char* value);
  inline void set_curimagedata(const void* value, size_t size);
  inline ::std::string* mutable_curimagedata();
  inline ::std::string* release_curimagedata();
  inline void set_allocated_curimagedata(::std::string* curimagedata);

  // required bytes preImageData = 8;
  inline bool has_preimagedata() const;
  inline void clear_preimagedata();
  static const int kPreImageDataFieldNumber = 8;
  inline const ::std::string& preimagedata() const;
  inline void set_preimagedata(const ::std::string& value);
  inline void set_preimagedata(const char* value);
  inline void set_preimagedata(const void* value, size_t size);
  inline ::std::string* mutable_preimagedata();
  inline ::std::string* release_preimagedata();
  inline void set_allocated_preimagedata(::std::string* preimagedata);

  // required uint32 width = 9;
  inline bool has_width() const;
  inline void clear_width();
  static const int kWidthFieldNumber = 9;
  inline ::google::protobuf::uint32 width() const;
  inline void set_width(::google::protobuf::uint32 value);

  // required uint32 height = 10;
  inline bool has_height() const;
  inline void clear_height();
  static const int kHeightFieldNumber = 10;
  inline ::google::protobuf::uint32 height() const;
  inline void set_height(::google::protobuf::uint32 value);

  // required double radius = 11;
  inline bool has_radius() const;
  inline void clear_radius();
  static const int kRadiusFieldNumber = 11;
  inline double radius() const;
  inline void set_radius(double value);

  // required uint32 curIndex = 12;
  inline bool has_curindex() const;
  inline void clear_curindex();
  static const int kCurIndexFieldNumber = 12;
  inline ::google::protobuf::uint32 curindex() const;
  inline void set_curindex(::google::protobuf::uint32 value);

  // required uint32 loopNum = 13;
  inline bool has_loopnum() const;
  inline void clear_loopnum();
  static const int kLoopNumFieldNumber = 13;
  inline ::google::protobuf::uint32 loopnum() const;
  inline void set_loopnum(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:com.zhichenhaixin.proto.RadarVideo)
 private:
  inline void set_has_radarid();
  inline void clear_has_radarid();
  inline void set_has_radarname();
  inline void clear_has_radarname();
  inline void set_has_latitude();
  inline void clear_has_latitude();
  inline void set_has_longitude();
  inline void clear_has_longitude();
  inline void set_has_utc();
  inline void clear_has_utc();
  inline void set_has_imagedata();
  inline void clear_has_imagedata();
  inline void set_has_curimagedata();
  inline void clear_has_curimagedata();
  inline void set_has_preimagedata();
  inline void clear_has_preimagedata();
  inline void set_has_width();
  inline void clear_has_width();
  inline void set_has_height();
  inline void clear_has_height();
  inline void set_has_radius();
  inline void clear_has_radius();
  inline void set_has_curindex();
  inline void clear_has_curindex();
  inline void set_has_loopnum();
  inline void clear_has_loopnum();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::uint64 radarid_;
  ::std::string* radarname_;
  double latitude_;
  double longitude_;
  ::google::protobuf::uint64 utc_;
  ::std::string* imagedata_;
  ::std::string* curimagedata_;
  ::std::string* preimagedata_;
  ::google::protobuf::uint32 width_;
  ::google::protobuf::uint32 height_;
  double radius_;
  ::google::protobuf::uint32 curindex_;
  ::google::protobuf::uint32 loopnum_;
  friend void  protobuf_AddDesc_ZCHXRadarVideo_2eproto();
  friend void protobuf_AssignDesc_ZCHXRadarVideo_2eproto();
  friend void protobuf_ShutdownFile_ZCHXRadarVideo_2eproto();

  void InitAsDefaultInstance();
  static RadarVideo* default_instance_;
};
// -------------------------------------------------------------------

class RadarVideoPoint : public ::google::protobuf::Message {
 public:
  RadarVideoPoint();
  virtual ~RadarVideoPoint();

  RadarVideoPoint(const RadarVideoPoint& from);

  inline RadarVideoPoint& operator=(const RadarVideoPoint& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RadarVideoPoint& default_instance();

  void Swap(RadarVideoPoint* other);

  // implements Message ----------------------------------------------

  RadarVideoPoint* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RadarVideoPoint& from);
  void MergeFrom(const RadarVideoPoint& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string radarName = 2;
  inline bool has_radarname() const;
  inline void clear_radarname();
  static const int kRadarNameFieldNumber = 2;
  inline const ::std::string& radarname() const;
  inline void set_radarname(const ::std::string& value);
  inline void set_radarname(const char* value);
  inline void set_radarname(const char* value, size_t size);
  inline ::std::string* mutable_radarname();
  inline ::std::string* release_radarname();
  inline void set_allocated_radarname(::std::string* radarname);

  // required double latitude = 3;
  inline bool has_latitude() const;
  inline void clear_latitude();
  static const int kLatitudeFieldNumber = 3;
  inline double latitude() const;
  inline void set_latitude(double value);

  // required double longitude = 4;
  inline bool has_longitude() const;
  inline void clear_longitude();
  static const int kLongitudeFieldNumber = 4;
  inline double longitude() const;
  inline void set_longitude(double value);

  // required uint64 UTC = 5;
  inline bool has_utc() const;
  inline void clear_utc();
  static const int kUTCFieldNumber = 5;
  inline ::google::protobuf::uint64 utc() const;
  inline void set_utc(::google::protobuf::uint64 value);

  // required bytes imageData = 6;
  inline bool has_imagedata() const;
  inline void clear_imagedata();
  static const int kImageDataFieldNumber = 6;
  inline const ::std::string& imagedata() const;
  inline void set_imagedata(const ::std::string& value);
  inline void set_imagedata(const char* value);
  inline void set_imagedata(const void* value, size_t size);
  inline ::std::string* mutable_imagedata();
  inline ::std::string* release_imagedata();
  inline void set_allocated_imagedata(::std::string* imagedata);

  // required bytes preImageData = 7;
  inline bool has_preimagedata() const;
  inline void clear_preimagedata();
  static const int kPreImageDataFieldNumber = 7;
  inline const ::std::string& preimagedata() const;
  inline void set_preimagedata(const ::std::string& value);
  inline void set_preimagedata(const char* value);
  inline void set_preimagedata(const void* value, size_t size);
  inline ::std::string* mutable_preimagedata();
  inline ::std::string* release_preimagedata();
  inline void set_allocated_preimagedata(::std::string* preimagedata);

  // required uint32 width = 8;
  inline bool has_width() const;
  inline void clear_width();
  static const int kWidthFieldNumber = 8;
  inline ::google::protobuf::uint32 width() const;
  inline void set_width(::google::protobuf::uint32 value);

  // required uint32 height = 9;
  inline bool has_height() const;
  inline void clear_height();
  static const int kHeightFieldNumber = 9;
  inline ::google::protobuf::uint32 height() const;
  inline void set_height(::google::protobuf::uint32 value);

  // required double radius = 10;
  inline bool has_radius() const;
  inline void clear_radius();
  static const int kRadiusFieldNumber = 10;
  inline double radius() const;
  inline void set_radius(double value);

  // required uint32 curIndex = 11;
  inline bool has_curindex() const;
  inline void clear_curindex();
  static const int kCurIndexFieldNumber = 11;
  inline ::google::protobuf::uint32 curindex() const;
  inline void set_curindex(::google::protobuf::uint32 value);

  // required uint32 loopNum = 12;
  inline bool has_loopnum() const;
  inline void clear_loopnum();
  static const int kLoopNumFieldNumber = 12;
  inline ::google::protobuf::uint32 loopnum() const;
  inline void set_loopnum(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:com.zhichenhaixin.proto.RadarVideoPoint)
 private:
  inline void set_has_radarname();
  inline void clear_has_radarname();
  inline void set_has_latitude();
  inline void clear_has_latitude();
  inline void set_has_longitude();
  inline void clear_has_longitude();
  inline void set_has_utc();
  inline void clear_has_utc();
  inline void set_has_imagedata();
  inline void clear_has_imagedata();
  inline void set_has_preimagedata();
  inline void clear_has_preimagedata();
  inline void set_has_width();
  inline void clear_has_width();
  inline void set_has_height();
  inline void clear_has_height();
  inline void set_has_radius();
  inline void clear_has_radius();
  inline void set_has_curindex();
  inline void clear_has_curindex();
  inline void set_has_loopnum();
  inline void clear_has_loopnum();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* radarname_;
  double latitude_;
  double longitude_;
  ::google::protobuf::uint64 utc_;
  ::std::string* imagedata_;
  ::std::string* preimagedata_;
  ::google::protobuf::uint32 width_;
  ::google::protobuf::uint32 height_;
  double radius_;
  ::google::protobuf::uint32 curindex_;
  ::google::protobuf::uint32 loopnum_;
  friend void  protobuf_AddDesc_ZCHXRadarVideo_2eproto();
  friend void protobuf_AssignDesc_ZCHXRadarVideo_2eproto();
  friend void protobuf_ShutdownFile_ZCHXRadarVideo_2eproto();

  void InitAsDefaultInstance();
  static RadarVideoPoint* default_instance_;
};
// ===================================================================


// ===================================================================

// RadarVideo

// required uint64 radarId = 1;
inline bool RadarVideo::has_radarid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RadarVideo::set_has_radarid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RadarVideo::clear_has_radarid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RadarVideo::clear_radarid() {
  radarid_ = GOOGLE_ULONGLONG(0);
  clear_has_radarid();
}
inline ::google::protobuf::uint64 RadarVideo::radarid() const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.proto.RadarVideo.radarId)
  return radarid_;
}
inline void RadarVideo::set_radarid(::google::protobuf::uint64 value) {
  set_has_radarid();
  radarid_ = value;
  // @@protoc_insertion_point(field_set:com.zhichenhaixin.proto.RadarVideo.radarId)
}

// required string radarName = 2;
inline bool RadarVideo::has_radarname() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RadarVideo::set_has_radarname() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RadarVideo::clear_has_radarname() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RadarVideo::clear_radarname() {
  if (radarname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    radarname_->clear();
  }
  clear_has_radarname();
}
inline const ::std::string& RadarVideo::radarname() const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.proto.RadarVideo.radarName)
  return *radarname_;
}
inline void RadarVideo::set_radarname(const ::std::string& value) {
  set_has_radarname();
  if (radarname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    radarname_ = new ::std::string;
  }
  radarname_->assign(value);
  // @@protoc_insertion_point(field_set:com.zhichenhaixin.proto.RadarVideo.radarName)
}
inline void RadarVideo::set_radarname(const char* value) {
  set_has_radarname();
  if (radarname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    radarname_ = new ::std::string;
  }
  radarname_->assign(value);
  // @@protoc_insertion_point(field_set_char:com.zhichenhaixin.proto.RadarVideo.radarName)
}
inline void RadarVideo::set_radarname(const char* value, size_t size) {
  set_has_radarname();
  if (radarname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    radarname_ = new ::std::string;
  }
  radarname_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:com.zhichenhaixin.proto.RadarVideo.radarName)
}
inline ::std::string* RadarVideo::mutable_radarname() {
  set_has_radarname();
  if (radarname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    radarname_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:com.zhichenhaixin.proto.RadarVideo.radarName)
  return radarname_;
}
inline ::std::string* RadarVideo::release_radarname() {
  clear_has_radarname();
  if (radarname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = radarname_;
    radarname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void RadarVideo::set_allocated_radarname(::std::string* radarname) {
  if (radarname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete radarname_;
  }
  if (radarname) {
    set_has_radarname();
    radarname_ = radarname;
  } else {
    clear_has_radarname();
    radarname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:com.zhichenhaixin.proto.RadarVideo.radarName)
}

// required double latitude = 3;
inline bool RadarVideo::has_latitude() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void RadarVideo::set_has_latitude() {
  _has_bits_[0] |= 0x00000004u;
}
inline void RadarVideo::clear_has_latitude() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void RadarVideo::clear_latitude() {
  latitude_ = 0;
  clear_has_latitude();
}
inline double RadarVideo::latitude() const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.proto.RadarVideo.latitude)
  return latitude_;
}
inline void RadarVideo::set_latitude(double value) {
  set_has_latitude();
  latitude_ = value;
  // @@protoc_insertion_point(field_set:com.zhichenhaixin.proto.RadarVideo.latitude)
}

// required double longitude = 4;
inline bool RadarVideo::has_longitude() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void RadarVideo::set_has_longitude() {
  _has_bits_[0] |= 0x00000008u;
}
inline void RadarVideo::clear_has_longitude() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void RadarVideo::clear_longitude() {
  longitude_ = 0;
  clear_has_longitude();
}
inline double RadarVideo::longitude() const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.proto.RadarVideo.longitude)
  return longitude_;
}
inline void RadarVideo::set_longitude(double value) {
  set_has_longitude();
  longitude_ = value;
  // @@protoc_insertion_point(field_set:com.zhichenhaixin.proto.RadarVideo.longitude)
}

// required uint64 UTC = 5;
inline bool RadarVideo::has_utc() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void RadarVideo::set_has_utc() {
  _has_bits_[0] |= 0x00000010u;
}
inline void RadarVideo::clear_has_utc() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void RadarVideo::clear_utc() {
  utc_ = GOOGLE_ULONGLONG(0);
  clear_has_utc();
}
inline ::google::protobuf::uint64 RadarVideo::utc() const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.proto.RadarVideo.UTC)
  return utc_;
}
inline void RadarVideo::set_utc(::google::protobuf::uint64 value) {
  set_has_utc();
  utc_ = value;
  // @@protoc_insertion_point(field_set:com.zhichenhaixin.proto.RadarVideo.UTC)
}

// required bytes imageData = 6;
inline bool RadarVideo::has_imagedata() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void RadarVideo::set_has_imagedata() {
  _has_bits_[0] |= 0x00000020u;
}
inline void RadarVideo::clear_has_imagedata() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void RadarVideo::clear_imagedata() {
  if (imagedata_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    imagedata_->clear();
  }
  clear_has_imagedata();
}
inline const ::std::string& RadarVideo::imagedata() const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.proto.RadarVideo.imageData)
  return *imagedata_;
}
inline void RadarVideo::set_imagedata(const ::std::string& value) {
  set_has_imagedata();
  if (imagedata_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    imagedata_ = new ::std::string;
  }
  imagedata_->assign(value);
  // @@protoc_insertion_point(field_set:com.zhichenhaixin.proto.RadarVideo.imageData)
}
inline void RadarVideo::set_imagedata(const char* value) {
  set_has_imagedata();
  if (imagedata_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    imagedata_ = new ::std::string;
  }
  imagedata_->assign(value);
  // @@protoc_insertion_point(field_set_char:com.zhichenhaixin.proto.RadarVideo.imageData)
}
inline void RadarVideo::set_imagedata(const void* value, size_t size) {
  set_has_imagedata();
  if (imagedata_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    imagedata_ = new ::std::string;
  }
  imagedata_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:com.zhichenhaixin.proto.RadarVideo.imageData)
}
inline ::std::string* RadarVideo::mutable_imagedata() {
  set_has_imagedata();
  if (imagedata_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    imagedata_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:com.zhichenhaixin.proto.RadarVideo.imageData)
  return imagedata_;
}
inline ::std::string* RadarVideo::release_imagedata() {
  clear_has_imagedata();
  if (imagedata_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = imagedata_;
    imagedata_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void RadarVideo::set_allocated_imagedata(::std::string* imagedata) {
  if (imagedata_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete imagedata_;
  }
  if (imagedata) {
    set_has_imagedata();
    imagedata_ = imagedata;
  } else {
    clear_has_imagedata();
    imagedata_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:com.zhichenhaixin.proto.RadarVideo.imageData)
}

// required bytes curImageData = 7;
inline bool RadarVideo::has_curimagedata() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void RadarVideo::set_has_curimagedata() {
  _has_bits_[0] |= 0x00000040u;
}
inline void RadarVideo::clear_has_curimagedata() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void RadarVideo::clear_curimagedata() {
  if (curimagedata_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    curimagedata_->clear();
  }
  clear_has_curimagedata();
}
inline const ::std::string& RadarVideo::curimagedata() const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.proto.RadarVideo.curImageData)
  return *curimagedata_;
}
inline void RadarVideo::set_curimagedata(const ::std::string& value) {
  set_has_curimagedata();
  if (curimagedata_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    curimagedata_ = new ::std::string;
  }
  curimagedata_->assign(value);
  // @@protoc_insertion_point(field_set:com.zhichenhaixin.proto.RadarVideo.curImageData)
}
inline void RadarVideo::set_curimagedata(const char* value) {
  set_has_curimagedata();
  if (curimagedata_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    curimagedata_ = new ::std::string;
  }
  curimagedata_->assign(value);
  // @@protoc_insertion_point(field_set_char:com.zhichenhaixin.proto.RadarVideo.curImageData)
}
inline void RadarVideo::set_curimagedata(const void* value, size_t size) {
  set_has_curimagedata();
  if (curimagedata_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    curimagedata_ = new ::std::string;
  }
  curimagedata_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:com.zhichenhaixin.proto.RadarVideo.curImageData)
}
inline ::std::string* RadarVideo::mutable_curimagedata() {
  set_has_curimagedata();
  if (curimagedata_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    curimagedata_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:com.zhichenhaixin.proto.RadarVideo.curImageData)
  return curimagedata_;
}
inline ::std::string* RadarVideo::release_curimagedata() {
  clear_has_curimagedata();
  if (curimagedata_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = curimagedata_;
    curimagedata_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void RadarVideo::set_allocated_curimagedata(::std::string* curimagedata) {
  if (curimagedata_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete curimagedata_;
  }
  if (curimagedata) {
    set_has_curimagedata();
    curimagedata_ = curimagedata;
  } else {
    clear_has_curimagedata();
    curimagedata_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:com.zhichenhaixin.proto.RadarVideo.curImageData)
}

// required bytes preImageData = 8;
inline bool RadarVideo::has_preimagedata() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void RadarVideo::set_has_preimagedata() {
  _has_bits_[0] |= 0x00000080u;
}
inline void RadarVideo::clear_has_preimagedata() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void RadarVideo::clear_preimagedata() {
  if (preimagedata_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    preimagedata_->clear();
  }
  clear_has_preimagedata();
}
inline const ::std::string& RadarVideo::preimagedata() const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.proto.RadarVideo.preImageData)
  return *preimagedata_;
}
inline void RadarVideo::set_preimagedata(const ::std::string& value) {
  set_has_preimagedata();
  if (preimagedata_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    preimagedata_ = new ::std::string;
  }
  preimagedata_->assign(value);
  // @@protoc_insertion_point(field_set:com.zhichenhaixin.proto.RadarVideo.preImageData)
}
inline void RadarVideo::set_preimagedata(const char* value) {
  set_has_preimagedata();
  if (preimagedata_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    preimagedata_ = new ::std::string;
  }
  preimagedata_->assign(value);
  // @@protoc_insertion_point(field_set_char:com.zhichenhaixin.proto.RadarVideo.preImageData)
}
inline void RadarVideo::set_preimagedata(const void* value, size_t size) {
  set_has_preimagedata();
  if (preimagedata_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    preimagedata_ = new ::std::string;
  }
  preimagedata_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:com.zhichenhaixin.proto.RadarVideo.preImageData)
}
inline ::std::string* RadarVideo::mutable_preimagedata() {
  set_has_preimagedata();
  if (preimagedata_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    preimagedata_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:com.zhichenhaixin.proto.RadarVideo.preImageData)
  return preimagedata_;
}
inline ::std::string* RadarVideo::release_preimagedata() {
  clear_has_preimagedata();
  if (preimagedata_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = preimagedata_;
    preimagedata_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void RadarVideo::set_allocated_preimagedata(::std::string* preimagedata) {
  if (preimagedata_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete preimagedata_;
  }
  if (preimagedata) {
    set_has_preimagedata();
    preimagedata_ = preimagedata;
  } else {
    clear_has_preimagedata();
    preimagedata_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:com.zhichenhaixin.proto.RadarVideo.preImageData)
}

// required uint32 width = 9;
inline bool RadarVideo::has_width() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void RadarVideo::set_has_width() {
  _has_bits_[0] |= 0x00000100u;
}
inline void RadarVideo::clear_has_width() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void RadarVideo::clear_width() {
  width_ = 0u;
  clear_has_width();
}
inline ::google::protobuf::uint32 RadarVideo::width() const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.proto.RadarVideo.width)
  return width_;
}
inline void RadarVideo::set_width(::google::protobuf::uint32 value) {
  set_has_width();
  width_ = value;
  // @@protoc_insertion_point(field_set:com.zhichenhaixin.proto.RadarVideo.width)
}

// required uint32 height = 10;
inline bool RadarVideo::has_height() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void RadarVideo::set_has_height() {
  _has_bits_[0] |= 0x00000200u;
}
inline void RadarVideo::clear_has_height() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void RadarVideo::clear_height() {
  height_ = 0u;
  clear_has_height();
}
inline ::google::protobuf::uint32 RadarVideo::height() const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.proto.RadarVideo.height)
  return height_;
}
inline void RadarVideo::set_height(::google::protobuf::uint32 value) {
  set_has_height();
  height_ = value;
  // @@protoc_insertion_point(field_set:com.zhichenhaixin.proto.RadarVideo.height)
}

// required double radius = 11;
inline bool RadarVideo::has_radius() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void RadarVideo::set_has_radius() {
  _has_bits_[0] |= 0x00000400u;
}
inline void RadarVideo::clear_has_radius() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void RadarVideo::clear_radius() {
  radius_ = 0;
  clear_has_radius();
}
inline double RadarVideo::radius() const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.proto.RadarVideo.radius)
  return radius_;
}
inline void RadarVideo::set_radius(double value) {
  set_has_radius();
  radius_ = value;
  // @@protoc_insertion_point(field_set:com.zhichenhaixin.proto.RadarVideo.radius)
}

// required uint32 curIndex = 12;
inline bool RadarVideo::has_curindex() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void RadarVideo::set_has_curindex() {
  _has_bits_[0] |= 0x00000800u;
}
inline void RadarVideo::clear_has_curindex() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void RadarVideo::clear_curindex() {
  curindex_ = 0u;
  clear_has_curindex();
}
inline ::google::protobuf::uint32 RadarVideo::curindex() const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.proto.RadarVideo.curIndex)
  return curindex_;
}
inline void RadarVideo::set_curindex(::google::protobuf::uint32 value) {
  set_has_curindex();
  curindex_ = value;
  // @@protoc_insertion_point(field_set:com.zhichenhaixin.proto.RadarVideo.curIndex)
}

// required uint32 loopNum = 13;
inline bool RadarVideo::has_loopnum() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void RadarVideo::set_has_loopnum() {
  _has_bits_[0] |= 0x00001000u;
}
inline void RadarVideo::clear_has_loopnum() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void RadarVideo::clear_loopnum() {
  loopnum_ = 0u;
  clear_has_loopnum();
}
inline ::google::protobuf::uint32 RadarVideo::loopnum() const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.proto.RadarVideo.loopNum)
  return loopnum_;
}
inline void RadarVideo::set_loopnum(::google::protobuf::uint32 value) {
  set_has_loopnum();
  loopnum_ = value;
  // @@protoc_insertion_point(field_set:com.zhichenhaixin.proto.RadarVideo.loopNum)
}

// -------------------------------------------------------------------

// RadarVideoPoint

// required string radarName = 2;
inline bool RadarVideoPoint::has_radarname() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RadarVideoPoint::set_has_radarname() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RadarVideoPoint::clear_has_radarname() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RadarVideoPoint::clear_radarname() {
  if (radarname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    radarname_->clear();
  }
  clear_has_radarname();
}
inline const ::std::string& RadarVideoPoint::radarname() const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.proto.RadarVideoPoint.radarName)
  return *radarname_;
}
inline void RadarVideoPoint::set_radarname(const ::std::string& value) {
  set_has_radarname();
  if (radarname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    radarname_ = new ::std::string;
  }
  radarname_->assign(value);
  // @@protoc_insertion_point(field_set:com.zhichenhaixin.proto.RadarVideoPoint.radarName)
}
inline void RadarVideoPoint::set_radarname(const char* value) {
  set_has_radarname();
  if (radarname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    radarname_ = new ::std::string;
  }
  radarname_->assign(value);
  // @@protoc_insertion_point(field_set_char:com.zhichenhaixin.proto.RadarVideoPoint.radarName)
}
inline void RadarVideoPoint::set_radarname(const char* value, size_t size) {
  set_has_radarname();
  if (radarname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    radarname_ = new ::std::string;
  }
  radarname_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:com.zhichenhaixin.proto.RadarVideoPoint.radarName)
}
inline ::std::string* RadarVideoPoint::mutable_radarname() {
  set_has_radarname();
  if (radarname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    radarname_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:com.zhichenhaixin.proto.RadarVideoPoint.radarName)
  return radarname_;
}
inline ::std::string* RadarVideoPoint::release_radarname() {
  clear_has_radarname();
  if (radarname_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = radarname_;
    radarname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void RadarVideoPoint::set_allocated_radarname(::std::string* radarname) {
  if (radarname_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete radarname_;
  }
  if (radarname) {
    set_has_radarname();
    radarname_ = radarname;
  } else {
    clear_has_radarname();
    radarname_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:com.zhichenhaixin.proto.RadarVideoPoint.radarName)
}

// required double latitude = 3;
inline bool RadarVideoPoint::has_latitude() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RadarVideoPoint::set_has_latitude() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RadarVideoPoint::clear_has_latitude() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RadarVideoPoint::clear_latitude() {
  latitude_ = 0;
  clear_has_latitude();
}
inline double RadarVideoPoint::latitude() const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.proto.RadarVideoPoint.latitude)
  return latitude_;
}
inline void RadarVideoPoint::set_latitude(double value) {
  set_has_latitude();
  latitude_ = value;
  // @@protoc_insertion_point(field_set:com.zhichenhaixin.proto.RadarVideoPoint.latitude)
}

// required double longitude = 4;
inline bool RadarVideoPoint::has_longitude() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void RadarVideoPoint::set_has_longitude() {
  _has_bits_[0] |= 0x00000004u;
}
inline void RadarVideoPoint::clear_has_longitude() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void RadarVideoPoint::clear_longitude() {
  longitude_ = 0;
  clear_has_longitude();
}
inline double RadarVideoPoint::longitude() const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.proto.RadarVideoPoint.longitude)
  return longitude_;
}
inline void RadarVideoPoint::set_longitude(double value) {
  set_has_longitude();
  longitude_ = value;
  // @@protoc_insertion_point(field_set:com.zhichenhaixin.proto.RadarVideoPoint.longitude)
}

// required uint64 UTC = 5;
inline bool RadarVideoPoint::has_utc() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void RadarVideoPoint::set_has_utc() {
  _has_bits_[0] |= 0x00000008u;
}
inline void RadarVideoPoint::clear_has_utc() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void RadarVideoPoint::clear_utc() {
  utc_ = GOOGLE_ULONGLONG(0);
  clear_has_utc();
}
inline ::google::protobuf::uint64 RadarVideoPoint::utc() const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.proto.RadarVideoPoint.UTC)
  return utc_;
}
inline void RadarVideoPoint::set_utc(::google::protobuf::uint64 value) {
  set_has_utc();
  utc_ = value;
  // @@protoc_insertion_point(field_set:com.zhichenhaixin.proto.RadarVideoPoint.UTC)
}

// required bytes imageData = 6;
inline bool RadarVideoPoint::has_imagedata() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void RadarVideoPoint::set_has_imagedata() {
  _has_bits_[0] |= 0x00000010u;
}
inline void RadarVideoPoint::clear_has_imagedata() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void RadarVideoPoint::clear_imagedata() {
  if (imagedata_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    imagedata_->clear();
  }
  clear_has_imagedata();
}
inline const ::std::string& RadarVideoPoint::imagedata() const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.proto.RadarVideoPoint.imageData)
  return *imagedata_;
}
inline void RadarVideoPoint::set_imagedata(const ::std::string& value) {
  set_has_imagedata();
  if (imagedata_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    imagedata_ = new ::std::string;
  }
  imagedata_->assign(value);
  // @@protoc_insertion_point(field_set:com.zhichenhaixin.proto.RadarVideoPoint.imageData)
}
inline void RadarVideoPoint::set_imagedata(const char* value) {
  set_has_imagedata();
  if (imagedata_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    imagedata_ = new ::std::string;
  }
  imagedata_->assign(value);
  // @@protoc_insertion_point(field_set_char:com.zhichenhaixin.proto.RadarVideoPoint.imageData)
}
inline void RadarVideoPoint::set_imagedata(const void* value, size_t size) {
  set_has_imagedata();
  if (imagedata_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    imagedata_ = new ::std::string;
  }
  imagedata_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:com.zhichenhaixin.proto.RadarVideoPoint.imageData)
}
inline ::std::string* RadarVideoPoint::mutable_imagedata() {
  set_has_imagedata();
  if (imagedata_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    imagedata_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:com.zhichenhaixin.proto.RadarVideoPoint.imageData)
  return imagedata_;
}
inline ::std::string* RadarVideoPoint::release_imagedata() {
  clear_has_imagedata();
  if (imagedata_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = imagedata_;
    imagedata_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void RadarVideoPoint::set_allocated_imagedata(::std::string* imagedata) {
  if (imagedata_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete imagedata_;
  }
  if (imagedata) {
    set_has_imagedata();
    imagedata_ = imagedata;
  } else {
    clear_has_imagedata();
    imagedata_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:com.zhichenhaixin.proto.RadarVideoPoint.imageData)
}

// required bytes preImageData = 7;
inline bool RadarVideoPoint::has_preimagedata() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void RadarVideoPoint::set_has_preimagedata() {
  _has_bits_[0] |= 0x00000020u;
}
inline void RadarVideoPoint::clear_has_preimagedata() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void RadarVideoPoint::clear_preimagedata() {
  if (preimagedata_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    preimagedata_->clear();
  }
  clear_has_preimagedata();
}
inline const ::std::string& RadarVideoPoint::preimagedata() const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.proto.RadarVideoPoint.preImageData)
  return *preimagedata_;
}
inline void RadarVideoPoint::set_preimagedata(const ::std::string& value) {
  set_has_preimagedata();
  if (preimagedata_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    preimagedata_ = new ::std::string;
  }
  preimagedata_->assign(value);
  // @@protoc_insertion_point(field_set:com.zhichenhaixin.proto.RadarVideoPoint.preImageData)
}
inline void RadarVideoPoint::set_preimagedata(const char* value) {
  set_has_preimagedata();
  if (preimagedata_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    preimagedata_ = new ::std::string;
  }
  preimagedata_->assign(value);
  // @@protoc_insertion_point(field_set_char:com.zhichenhaixin.proto.RadarVideoPoint.preImageData)
}
inline void RadarVideoPoint::set_preimagedata(const void* value, size_t size) {
  set_has_preimagedata();
  if (preimagedata_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    preimagedata_ = new ::std::string;
  }
  preimagedata_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:com.zhichenhaixin.proto.RadarVideoPoint.preImageData)
}
inline ::std::string* RadarVideoPoint::mutable_preimagedata() {
  set_has_preimagedata();
  if (preimagedata_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    preimagedata_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:com.zhichenhaixin.proto.RadarVideoPoint.preImageData)
  return preimagedata_;
}
inline ::std::string* RadarVideoPoint::release_preimagedata() {
  clear_has_preimagedata();
  if (preimagedata_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = preimagedata_;
    preimagedata_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void RadarVideoPoint::set_allocated_preimagedata(::std::string* preimagedata) {
  if (preimagedata_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete preimagedata_;
  }
  if (preimagedata) {
    set_has_preimagedata();
    preimagedata_ = preimagedata;
  } else {
    clear_has_preimagedata();
    preimagedata_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:com.zhichenhaixin.proto.RadarVideoPoint.preImageData)
}

// required uint32 width = 8;
inline bool RadarVideoPoint::has_width() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void RadarVideoPoint::set_has_width() {
  _has_bits_[0] |= 0x00000040u;
}
inline void RadarVideoPoint::clear_has_width() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void RadarVideoPoint::clear_width() {
  width_ = 0u;
  clear_has_width();
}
inline ::google::protobuf::uint32 RadarVideoPoint::width() const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.proto.RadarVideoPoint.width)
  return width_;
}
inline void RadarVideoPoint::set_width(::google::protobuf::uint32 value) {
  set_has_width();
  width_ = value;
  // @@protoc_insertion_point(field_set:com.zhichenhaixin.proto.RadarVideoPoint.width)
}

// required uint32 height = 9;
inline bool RadarVideoPoint::has_height() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void RadarVideoPoint::set_has_height() {
  _has_bits_[0] |= 0x00000080u;
}
inline void RadarVideoPoint::clear_has_height() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void RadarVideoPoint::clear_height() {
  height_ = 0u;
  clear_has_height();
}
inline ::google::protobuf::uint32 RadarVideoPoint::height() const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.proto.RadarVideoPoint.height)
  return height_;
}
inline void RadarVideoPoint::set_height(::google::protobuf::uint32 value) {
  set_has_height();
  height_ = value;
  // @@protoc_insertion_point(field_set:com.zhichenhaixin.proto.RadarVideoPoint.height)
}

// required double radius = 10;
inline bool RadarVideoPoint::has_radius() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void RadarVideoPoint::set_has_radius() {
  _has_bits_[0] |= 0x00000100u;
}
inline void RadarVideoPoint::clear_has_radius() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void RadarVideoPoint::clear_radius() {
  radius_ = 0;
  clear_has_radius();
}
inline double RadarVideoPoint::radius() const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.proto.RadarVideoPoint.radius)
  return radius_;
}
inline void RadarVideoPoint::set_radius(double value) {
  set_has_radius();
  radius_ = value;
  // @@protoc_insertion_point(field_set:com.zhichenhaixin.proto.RadarVideoPoint.radius)
}

// required uint32 curIndex = 11;
inline bool RadarVideoPoint::has_curindex() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void RadarVideoPoint::set_has_curindex() {
  _has_bits_[0] |= 0x00000200u;
}
inline void RadarVideoPoint::clear_has_curindex() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void RadarVideoPoint::clear_curindex() {
  curindex_ = 0u;
  clear_has_curindex();
}
inline ::google::protobuf::uint32 RadarVideoPoint::curindex() const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.proto.RadarVideoPoint.curIndex)
  return curindex_;
}
inline void RadarVideoPoint::set_curindex(::google::protobuf::uint32 value) {
  set_has_curindex();
  curindex_ = value;
  // @@protoc_insertion_point(field_set:com.zhichenhaixin.proto.RadarVideoPoint.curIndex)
}

// required uint32 loopNum = 12;
inline bool RadarVideoPoint::has_loopnum() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void RadarVideoPoint::set_has_loopnum() {
  _has_bits_[0] |= 0x00000400u;
}
inline void RadarVideoPoint::clear_has_loopnum() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void RadarVideoPoint::clear_loopnum() {
  loopnum_ = 0u;
  clear_has_loopnum();
}
inline ::google::protobuf::uint32 RadarVideoPoint::loopnum() const {
  // @@protoc_insertion_point(field_get:com.zhichenhaixin.proto.RadarVideoPoint.loopNum)
  return loopnum_;
}
inline void RadarVideoPoint::set_loopnum(::google::protobuf::uint32 value) {
  set_has_loopnum();
  loopnum_ = value;
  // @@protoc_insertion_point(field_set:com.zhichenhaixin.proto.RadarVideoPoint.loopNum)
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace zhichenhaixin
}  // namespace com

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_ZCHXRadarVideo_2eproto__INCLUDED
